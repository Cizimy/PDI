This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-27T04:42:58.177Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
core/clsLogger.cls
core/clsPerformanceMonitor.cls
core/ConfigImpl.cls
core/ConsoleLogger.cls
core/DatabaseLogger.cls
core/DefaultLoggerSettings.cls
core/DefaultMessageFormatter.cls
core/EmergencyLogger.cls
core/ErrorHandlerManager.cls
core/ErrorImpl.cls
core/ErrorInfo.cls
core/EventLogImpl.cls
core/EventLogLogger.cls
core/FileLogger.cls
core/InvalidInputErrorHandler.cls
core/modAppInitializer.bas
core/modConfig.bas
core/modError.bas
core/modErrorCodes.bas
core/PerformanceCounterImpl.cls
core/PerformanceMonitorImpl.cls
core/README.md
core/repomix-output.txt
core/ValidationResult.cls
data/ConnectionPool.cls
data/DatabaseConnectionErrorHandler.cls
data/FileIOImpl.cls
data/FileNotFoundErrorHandler.cls
data/FileSystemOperations.cls
data/IniFileImpl.cls
data/modDatabaseUtils.bas
data/modFileIO.bas
data/ODBCConnectionStringBuilder.cls
data/OLEDBConnectionStringBuilder.cls
data/repomix-output.txt
Directory_Structure.txt
interfaces/CommonEnums.cls
interfaces/IAppConfig.cls
interfaces/IAsyncValidation.cls
interfaces/ICompositeValidationRule.cls
interfaces/IConnectionPool.cls
interfaces/IConnectionStringBuilder.cls
interfaces/ICryptography.cls
interfaces/IDatabaseConfig.cls
interfaces/IEmergencyLogger.cls
interfaces/IError.cls
interfaces/IErrorHandler.cls
interfaces/IErrorNotification.cls
interfaces/IErrorStrategy.cls
interfaces/IEventLog.cls
interfaces/IFileIO.cls
interfaces/IFileOperations.cls
interfaces/IIniFile.cls
interfaces/IKeyDerivationStrategy.cls
interfaces/ILock.cls
interfaces/ILogger.cls
interfaces/ILoggerSettings.cls
interfaces/IMessageFormatter.cls
interfaces/IMutex.cls
interfaces/IPerformanceCounter.cls
interfaces/IPerformanceMonitor.cls
interfaces/IQueue.cls
interfaces/IRegexEngine.cls
interfaces/ISleep.cls
interfaces/IStack.cls
interfaces/IStackTrace.cls
interfaces/IUserNotifier.cls
interfaces/IValidationContext.cls
interfaces/IValidationGroup.cls
interfaces/IValidationRule.cls
interfaces/IValidator.cls
interfaces/repomix-output.txt
security/clsCriticalSectionLock.cls
security/clsCrypto.cls
security/clsLock.cls
security/clsMutexLock.cls
security/clsSemaphoreLock.cls
security/CryptographyImpl.cls
security/MutexImpl.cls
security/MutexLock.cls
security/PBKDF2KeyDerivationStrategy.cls
security/repomix-output.txt
tests/MockCryptography.cls
tests/MockDatabaseConfig.cls
tests/MockError.cls
tests/MockFileIO.cls
tests/MockFileOperations.cls
tests/MockIniFile.cls
tests/MockLock.cls
tests/MockLogger.cls
tests/MockMessageFormatter.cls
tests/MockPerformanceMonitor.cls
tests/modTestRunner.bas
tests/modTestUtility.bas
tests/repomix-output.txt
tests/TestClsCrypto.cls
tests/TestConfigImpl.cls
tests/TestConnectionPool.cls
tests/TestConsoleLogger.cls
tests/TestCriticalSectionLock.cls
tests/TestDatabaseLogger.cls
tests/TestDateValidator.cls
tests/TestDefaultMessageFormatter.cls
tests/TestEventLogLogger.cls
tests/TestFileLogger.cls
tests/TestFileSystemOperations.cls
tests/TestLogger.cls
tests/TestMsgBoxNotifier.cls
tests/TestMutexLock.cls
tests/TestSemaphoreLock.cls
tests/TestStringValidator.cls
utils/clsCallStack.cls
utils/modCommon.bas
utils/modDateUtils.bas
utils/modMathUtils.bas
utils/modStackTrace.bas
utils/modStringUtils.bas
utils/modWindowsAPI.bas
utils/ModWindowsAPIConverter.cls
utils/MsgBoxNotifier.cls
utils/QueueImpl.cls
utils/repomix-output.txt
utils/SleepImpl.cls
utils/StackImpl.cls
utils/StackTraceImpl.cls
utils/VBScriptRegexEngine.cls
validation/AllowFutureDateRule.cls
validation/AllowPastDateRule.cls
validation/DateValidator.cls
validation/MaxDateRule.cls
validation/MaxLengthRule.cls
validation/MinDateRule.cls
validation/MinLengthRule.cls
validation/PatternRule.cls
validation/repomix-output.txt
validation/StringValidator.cls
モジュール概要.txt

================================================================
Files
================================================================

================
File: core/clsLogger.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "clsLogger"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements ILogger

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "clsLogger"

' ======================
' メンバ変数
' ======================
Private mSettings As ILoggerSettings
Private mLogQueue As IQueue
Private mLock As ILock
Private mTimerID As LongPtr
Private mLoggers As Object ' Dictionary of ILogger instances
Private mIsProcessing As Boolean
Private mWorkerThread As Object
Private mPerformanceMonitor As clsPerformanceMonitor
Private mIsInitialized As Boolean
Private Const MAX_RETRY_COUNT As Long = 3
Private Const RETRY_DELAY_MS As Long = 1000
Private Const EMERGENCY_LOG_PATH As String = "\PDI_emergency.log"

' ======================
' イベント
' ======================
Public Event Logged(ByVal logMessage As String, ByVal logLevel As LogLevel)

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    Set mLoggers = CreateObject("Scripting.Dictionary")
    Set mLogQueue = New QueueImpl ' QueueImplはIQueueを実装
    Set mPerformanceMonitor = New clsPerformanceMonitor
End Sub

Private Sub Class_Terminate()
    If mTimerID <> 0 Then
        KillTimer 0, mTimerID
        mTimerID = 0
    End If
    
    If Not mWorkerThread Is Nothing Then
        ' ワーカースレッドの終了を待機
        mIsProcessing = False
        While mWorkerThread.Status = 1 ' 実行中
            Sleep 100
        Wend
    End If
    
    Set mLogQueue = Nothing
    Set mLock = Nothing
    Set mPerformanceMonitor = Nothing
    Set mLoggers = Nothing
    Set mSettings = Nothing
    
    mIsInitialized = False
End Sub

' ======================
' 公開メソッド
' ======================
Public Sub Configure(ByVal settings As ILoggerSettings, _
                    ByVal queue As IQueue, _
                    ByVal lock As ILock, _
                    ByVal performanceMonitor As IPerformanceMonitor)
    Set mSettings = settings
    Set mLogQueue = queue
    Set mLock = lock
    Set mPerformanceMonitor = performanceMonitor
    
    ' ログ出力先の設定
    InitializeLoggers
    
    ' ワーカースレッドの開始
    StartWorkerThread
    
    mIsInitialized = True
End Sub

Public Sub SetLogger(ByVal destination As String, ByVal logger As ILogger)
    If mLoggers.Exists(destination) Then
        mLoggers.Remove destination
    End If
    mLoggers.Add destination, logger
End Sub

Private Sub InitializeLoggers()
    ' 既存のロガーをクリア
    mLoggers.RemoveAll
    
    ' 設定に基づいてロガーを初期化
    Dim destinations As Variant
    destinations = mSettings.GetLogDestinations()
    
    Dim i As Long
    For i = LBound(destinations) To UBound(destinations)
        SetLogger destinations(i), CreateLogger(destinations(i))
    Next i
    
    ' タイマーの設定
    If mTimerID <> 0 Then
        KillTimer 0, mTimerID
    End If
    mTimerID = SetTimer(0, 0, mSettings.TimerInterval, AddressOf TimerProc)
End Sub

' ======================
' ILogger実装
' ======================
Private Sub ILogger_Log(ByVal moduleName As String, ByVal message As String, Optional ByVal errorCode As ErrorCode)
    If Not mIsInitialized Then Exit Sub
    
    If Not mPerformanceMonitor Is Nothing Then
        mPerformanceMonitor.StartMeasurement "Logger_Log"
    End If
    
    mLock.AcquireLock
    
    On Error GoTo ErrorHandler
    
    ' ログレベルチェック
    If errorCode >= mSettings.LogLevel Then
        ' ログメッセージをキューに追加
        Dim logEntry As Variant
        logEntry = Array(moduleName, message, errorCode, Now)
        mLogQueue.Enqueue logEntry
    End If
    
Cleanup:
    mLock.ReleaseLock
    
    If Not mPerformanceMonitor Is Nothing Then
        mPerformanceMonitor.EndMeasurement "Logger_Log"
    End If
    Exit Sub
    
ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "ログ出力中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "ILogger_Log"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    Resume Cleanup
End Sub

Private Property Let ILogger_LogLevel(ByVal level As LogLevel)
    If Not mSettings Is Nothing Then
        mSettings.LogLevel = level
    End If
End Property

Private Property Get ILogger_LogLevel() As LogLevel
    If Not mSettings Is Nothing Then
        ILogger_LogLevel = mSettings.LogLevel
    End If
End Property

Private Property Let ILogger_LogDestination(ByVal destination As LogDestination)
    If Not mSettings Is Nothing Then
        mSettings.LogDestination = destination
    End If
End Property

Private Property Get ILogger_LogDestination() As LogDestination
    If Not mSettings Is Nothing Then
        ILogger_LogDestination = mSettings.LogDestination
    End If
End Property

' ======================
' プライベートメソッド
' ======================
Private Sub ProcessLogQueue()
    If Not mIsInitialized Then Exit Sub
    
    mLock.AcquireLock
    
    On Error GoTo ErrorHandler
    
    While mLogQueue.Count > 0
        Dim logEntry As Variant
        logEntry = mLogQueue.Dequeue
        
        ' 各ロガーでログを処理
        Dim destination As Variant
        For Each destination In mLoggers.Keys
            If mSettings.ShouldLog(destination, logEntry(2)) Then
                Dim logger As ILogger
                Set logger = mLoggers(destination)
                logger.Log CStr(logEntry(2)), CStr(logEntry(1)), CStr(logEntry(3)), CLng(logEntry(0))
            End If
        Next destination
        
        ' イベント発行
        RaiseEvent Logged(logEntry(1), logEntry(2))
    Wend
    
Cleanup:
    mLock.ReleaseLock
    Exit Sub
    
ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "ログキュー処理中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "ProcessLogQueue"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    Resume Cleanup
End Sub

Private Function CreateLogger(ByVal destination As String) As ILogger
    Select Case destination
        Case "File"
            Dim fileLogger As New FileLogger
            fileLogger.Initialize mSettings.GetFileOperations(), _
                                mLock, _
                                mPerformanceMonitor, _
                                mSettings.LogFilePath
            Set CreateLogger = fileLogger
            
        Case "Database"
            Dim dbLogger As New DatabaseLogger
            dbLogger.Initialize mSettings.GetConnectionPool(), _
                              mLock, _
                              mPerformanceMonitor, _
                              mSettings.GetDatabaseConfig(), _
                              mSettings.LogTableName
            Set CreateLogger = dbLogger
            
        Case "EventLog"
            Dim eventLogger As New EventLogLogger
            eventLogger.Initialize mSettings.GetEventLog(), _
                                 mLock, _
                                 mPerformanceMonitor, _
                                 mSettings.LogEventSource
            Set CreateLogger = eventLogger
            
        Case "Console"
            Dim consoleLogger As New ConsoleLogger
            consoleLogger.Initialize mPerformanceMonitor, True
            Set CreateLogger = consoleLogger
            
        Case Else
            Err.Raise vbObjectError + 1, "CreateLogger", "不明なログ出力先: " & destination
    End Select
End Function

' ワーカースレッドの作成と開始
Private Sub StartWorkerThread()
    Set mWorkerThread = CreateObject("WScript.Shell").Exec( _
        "cmd /c powershell -Command {" & _
        "    while ($true) {" & _
        "        if (-not $global:isProcessing) { break }" & _
        "        Start-Sleep -Milliseconds " & mSettings.TimerInterval & _
        "    }" & _
        "}")
    mIsProcessing = True
End Sub

' ======================
' テストサポート機能
' 警告: これらのメソッドは開発時のテスト目的でのみ使用し、
' 本番環境では使用しないでください。
' ======================
#If DEBUG Then
    ''' <summary>
    ''' ログキューのエントリ数を取得（テスト用）
    ''' </summary>
    Private Function GetQueueCount() As Long
        GetQueueCount = mLogQueue.Count
    End Function
    
    ''' <summary>
    ''' ログキューをクリア（テスト用）
    ''' </summary>
    Private Sub ClearQueue()
        Set mLogQueue = New Queue
    End Sub
    
    ''' <summary>
    ''' パフォーマンスモニターの参照を取得（テスト用）
    ''' </summary>
    Private Function GetPerformanceMonitor() As clsPerformanceMonitor
        Set GetPerformanceMonitor = mPerformanceMonitor
    End Function
    
    ''' <summary>
    ''' タイマー処理をシミュレート（テスト用）
    ''' </summary>
    Private Sub SimulateTimer()
        ProcessLogQueue
    End Sub
#End If

================
File: core/clsPerformanceMonitor.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "clsPerformanceMonitor"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

'@Description("パフォーマンス監視機能を提供するレガシークラス（新規実装はIPerformanceMonitorを使用してください）")

' ======================
' メンバ変数
' ======================
Private mImpl As IPerformanceMonitor

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    Set mImpl = New PerformanceMonitorImpl
End Sub

Private Sub Class_Terminate()
    Set mImpl = Nothing
End Sub

' ======================
' パブリックメソッド
' （レガシーサポート）
' ======================
Public Sub StartMeasurement(ByVal description As String)
    mImpl.Start description
End Sub

Public Sub EndMeasurement(ByVal description As String)
    mImpl.Stop description
End Sub

Public Function GetMeasurement(ByVal description As String) As String
    GetMeasurement = PerformanceMonitorImpl(mImpl).GetDetailedMeasurement(description)
End Function

Public Function GetAllMeasurements() As String
    Dim measurements As Variant
    measurements = mImpl.GetAllMeasurements()
    
    Dim result As String
    result = "Performance Monitoring Report" & vbCrLf & _
            "=========================" & vbCrLf
    
    Dim i As Long
    For i = LBound(measurements) To UBound(measurements)
        result = result & vbCrLf & "Measurement " & (i + 1) & ": " & measurements(i) & " ms"
    Next i
    
    GetAllMeasurements = result
End Function

Public Sub ClearMeasurements()
    mImpl.Clear
End Sub

' ======================
' プロパティ
' ======================
Public Property Get IsEnabled() As Boolean
    IsEnabled = mImpl.IsEnabled
End Property

Public Property Let IsEnabled(ByVal Value As Boolean)
    If Value Then
        mImpl.Enable
    Else
        mImpl.Disable
    End If
End Property

Public Property Get CurrentOperation() As String
    CurrentOperation = PerformanceMonitorImpl(mImpl).CurrentOperation
End Property

================
File: core/ConfigImpl.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "ConfigImpl"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements IAppConfig
Implements IDatabaseConfig

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "ConfigImpl"

' ======================
' 依存インターフェース
' ======================
Private mIniFile As IIniFile
Private mCrypto As ICryptography
Private mPerformanceMonitor As IPerformanceMonitor
Private mFileOperations As IFileOperations

' ======================
' メンバ変数
' ======================
Private mLock As clsLock
Private mSettings As Collection
Private mSettingHistory As Collection
Private mConnectionStringBuilder As IConnectionStringBuilder
Private mValidationRules As Collection
Private mPerformanceMetrics As Collection
Private mEncryptedSettings As Collection

' データベース設定
Private mConnectionString As String
Private mConnectionTimeout As Long
Private mCommandTimeout As Long
Private mDatabaseType As String
Private mLogTableName As String

' アプリケーション設定
Private mLogFilePath As String
Private mLogLevel As LogLevel
Private mMaxRetryCount As Long
Private mMaxStackDepth As Long
Private mTimerInterval As Long
Private mLogEventSource As String
Private mPerformanceMonitoringEnabled As Boolean
Private mDiagnosticsEnabled As Boolean
Private mAutoSave As Boolean

' 暗号化設定
Private mEncryptionKey As String
Private mEncryptionKeyVersion As String
Private mCurrentEnvironment As String

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    ' コレクションの初期化
    Set mSettings = New Collection
    Set mSettingHistory = New Collection
    Set mValidationRules = New Collection
    Set mPerformanceMetrics = New Collection
    Set mEncryptedSettings = New Collection
    
    ' 依存オブジェクトの初期化
    Set mLock = New clsLock
    Set mIniFile = New IniFileImpl
    Set mCrypto = New CryptographyImpl
    Set mPerformanceMonitor = New PerformanceMonitorImpl
    Set mFileOperations = New FileSystemOperations
    
    ' デフォルト値の設定
    mConnectionTimeout = 30
    mCommandTimeout = 30
    mDatabaseType = "ODBC"
    mLogTableName = "AppLog"
    mMaxRetryCount = 3
    mMaxStackDepth = 10
    mTimerInterval = 1000
    mPerformanceMonitoringEnabled = True
    mDiagnosticsEnabled = True
    mAutoSave = True
    mLogLevel = llInfo
    mCurrentEnvironment = "development"
    
    ' データベースタイプに応じたConnectionStringBuilderの設定
    UpdateConnectionStringBuilder
End Sub

Private Sub Class_Terminate()
    Set mSettings = Nothing
    Set mSettingHistory = Nothing
    Set mValidationRules = Nothing
    Set mPerformanceMetrics = Nothing
    Set mEncryptedSettings = Nothing
    Set mLock = Nothing
    Set mIniFile = Nothing
    Set mCrypto = Nothing
    Set mPerformanceMonitor = Nothing
    Set mFileOperations = Nothing
    Set mConnectionStringBuilder = Nothing
End Sub

' ======================
' プライベートメソッド
' ======================
Private Sub UpdateConnectionStringBuilder()
    Select Case UCase$(mDatabaseType)
        Case "ODBC"
            Set mConnectionStringBuilder = New ODBCConnectionStringBuilder
        Case "OLEDB"
            Set mConnectionStringBuilder = New OLEDBConnectionStringBuilder
        Case Else
            Set mConnectionStringBuilder = New ODBCConnectionStringBuilder
    End Select
End Sub

Private Sub AddSettingHistory(ByVal settingName As String, ByVal oldValue As Variant, ByVal newValue As Variant)
    Dim historyEntry As New Dictionary
    historyEntry.Add "SettingName", settingName
    historyEntry.Add "OldValue", oldValue
    historyEntry.Add "NewValue", newValue
    historyEntry.Add "Timestamp", Now
    historyEntry.Add "Environment", mCurrentEnvironment
    mSettingHistory.Add historyEntry
End Sub

Private Function IsEncrypted(ByVal settingName As String) As Boolean
    On Error Resume Next
    mEncryptedSettings.Item settingName
    IsEncrypted = (Err.Number = 0)
    On Error GoTo 0
End Function

Private Function EncryptValue(ByVal value As String) As String
    If mEncryptionKey = "" Then
        Err.Raise vbObjectError + 1, MODULE_NAME, "暗号化キーが設定されていません。"
    End If
    EncryptValue = mCrypto.Encrypt(value, mEncryptionKey)
End Function

Private Function DecryptValue(ByVal value As String) As String
    If mEncryptionKey = "" Then
        Err.Raise vbObjectError + 1, MODULE_NAME, "暗号化キーが設定されていません。"
    End If
    DecryptValue = mCrypto.Decrypt(value, mEncryptionKey)
End Function

' ======================
' IAppConfig実装
' ======================
Private Function IAppConfig_GetSetting(ByVal settingName As String, Optional ByVal options As SettingOptions = soNone) As Variant
    mLock.AcquireLock
    On Error GoTo ErrorHandler
    
    Dim result As Variant
    result = mSettings(settingName)
    
    ' 暗号化された設定値の復号化
    If Not IsNull(result) And IsEncrypted(settingName) And (options And soEncrypt) = soEncrypt Then
        result = DecryptValue(CStr(result))
    End If
    
    ' パフォーマンスメトリクスの記録
    If mPerformanceMonitoringEnabled Then
        Dim metric As New Dictionary
        metric.Add "Type", mtResponseTime
        metric.Add "Operation", "GetSetting"
        metric.Add "SettingName", settingName
        metric.Add "Timestamp", Now
        mPerformanceMetrics.Add metric
    End If
    
    mLock.ReleaseLock
    IAppConfig_GetSetting = result
    Exit Function
    
ErrorHandler:
    mLock.ReleaseLock
    If Err.Number = 5 Then ' Item not found in collection
        IAppConfig_GetSetting = Null
    Else
        Err.Raise Err.Number, MODULE_NAME, "設定の取得中にエラーが発生しました: " & Err.Description
    End If
End Function

Private Sub IAppConfig_SetSetting(ByVal settingName As String, ByVal settingValue As Variant, Optional ByVal options As SettingOptions = soNone)
    mLock.AcquireLock
    On Error GoTo ErrorHandler
    
    ' 現在の値を履歴用に保存
    Dim oldValue As Variant
    oldValue = IAppConfig_GetSetting(settingName)
    
    ' 値の暗号化
    Dim valueToStore As Variant
    valueToStore = settingValue
    If (options And soEncrypt) = soEncrypt Then
        valueToStore = EncryptValue(CStr(settingValue))
        mEncryptedSettings.Add settingName, settingName
    End If
    
    ' 値の設定
    mSettings.Remove settingName
    mSettings.Add valueToStore, settingName
    
    ' 履歴の記録
    If (options And soLogHistory) = soLogHistory Then
        AddSettingHistory settingName, oldValue, settingValue
    End If
    
    ' 自動保存
    If mAutoSave Then
        IAppConfig_SaveSettings App.Path & "\config.ini"
    End If
    
    mLock.ReleaseLock
    Exit Sub
    
ErrorHandler:
    mLock.ReleaseLock
    Err.Raise Err.Number, MODULE_NAME, "設定の更新中にエラーが発生しました: " & Err.Description
End Sub

Private Sub IAppConfig_LoadSettings(ByVal filePath As String, Optional ByVal options As LoadOptions = loNone)
    mLock.AcquireLock
    On Error GoTo ErrorHandler
    
    ' 基本設定の読み込み
    mLogFilePath = mIniFile.GetPrivateProfileString("Logging", "LogFilePath", App.Path & "\app.log", filePath)
    mLogLevel = CLng(mIniFile.GetPrivateProfileString("Logging", "LogLevel", CStr(llInfo), filePath))
    mMaxRetryCount = CLng(mIniFile.GetPrivateProfileString("System", "MaxRetryCount", "3", filePath))
    mMaxStackDepth = CLng(mIniFile.GetPrivateProfileString("System", "MaxStackDepth", "10", filePath))
    mTimerInterval = CLng(mIniFile.GetPrivateProfileString("System", "TimerInterval", "1000", filePath))
    mLogEventSource = mIniFile.GetPrivateProfileString("Logging", "EventSource", "MyApp", filePath)
    mPerformanceMonitoringEnabled = CBool(mIniFile.GetPrivateProfileString("System", "PerformanceMonitoring", "True", filePath))
    mDiagnosticsEnabled = CBool(mIniFile.GetPrivateProfileString("System", "Diagnostics", "True", filePath))
    mAutoSave = CBool(mIniFile.GetPrivateProfileString("System", "AutoSave", "True", filePath))
    
    ' 環境固有の設定の適用
    If (options And loApplyEnvironment) = loApplyEnvironment Then
        Dim envSection As String
        envSection = "Environment_" & mCurrentEnvironment
        
        ' 環境固有の値で上書き
        If mIniFile.GetPrivateProfileString(envSection, "LogFilePath", "", filePath) <> "" Then
            mLogFilePath = mIniFile.GetPrivateProfileString(envSection, "LogFilePath", mLogFilePath, filePath)
        End If
        ' ... 他の環境固有設定も同様に処理
    End If
    
    ' データベース設定の読み込み
    mDatabaseType = mIniFile.GetPrivateProfileString("Database", "Type", "ODBC", filePath)
    mConnectionTimeout = CLng(mIniFile.GetPrivateProfileString("Database", "ConnectionTimeout", "30", filePath))
    mCommandTimeout = CLng(mIniFile.GetPrivateProfileString("Database", "CommandTimeout", "30", filePath))
    mLogTableName = mIniFile.GetPrivateProfileString("Database", "LogTable", "AppLog", filePath)
    
    ' ConnectionStringBuilderの更新と設定
    UpdateConnectionStringBuilder
    With mConnectionStringBuilder
        .Server = mIniFile.GetPrivateProfileString("Database", "Server", "", filePath)
        .Database = mIniFile.GetPrivateProfileString("Database", "Database", "", filePath)
        .UserName = mIniFile.GetPrivateProfileString("Database", "UserName", "", filePath)
        .Password = mIniFile.GetPrivateProfileString("Database", "Password", "", filePath)
        .AdditionalParameters = mIniFile.GetPrivateProfileString("Database", "AdditionalParameters", "", filePath)
    End With
    
    ' 接続文字列の生成
    mConnectionString = mConnectionStringBuilder.BuildConnectionString()
    
    ' 設定の検証
    If (options And loValidate) = loValidate Then
        Dim validationResult As ValidationResult
        Set validationResult = IAppConfig_ValidateSettings(voFull)
        If Not validationResult.IsValid Then
            Err.Raise vbObjectError + 2, MODULE_NAME, "設定の検証に失敗しました: " & validationResult.GetSummary()
        End If
    End If
    
    mLock.ReleaseLock
    Exit Sub
    
ErrorHandler:
    mLock.ReleaseLock
    Err.Raise Err.Number, MODULE_NAME, "設定の読み込み中にエラーが発生しました: " & Err.Description
End Sub

Private Sub IAppConfig_SaveSettings(ByVal filePath As String, Optional ByVal options As SaveOptions = soNone)
    mLock.AcquireLock
    On Error GoTo ErrorHandler
    
    ' バックアップの作成
    If (options And soBackup) = soBackup Then
        Dim backupPath As String
        backupPath = filePath & ".bak"
        mFileOperations.CopyFile filePath, backupPath
    End If
    
    ' 基本設定の保存
    mIniFile.WritePrivateProfileString "Logging", "LogFilePath", mLogFilePath, filePath
    mIniFile.WritePrivateProfileString "Logging", "LogLevel", CStr(mLogLevel), filePath
    mIniFile.WritePrivateProfileString "System", "MaxRetryCount", CStr(mMaxRetryCount), filePath
    mIniFile.WritePrivateProfileString "System", "MaxStackDepth", CStr(mMaxStackDepth), filePath
    mIniFile.WritePrivateProfileString "System", "TimerInterval", CStr(mTimerInterval), filePath
    mIniFile.WritePrivateProfileString "Logging", "EventSource", mLogEventSource, filePath
    mIniFile.WritePrivateProfileString "System", "PerformanceMonitoring", CStr(mPerformanceMonitoringEnabled), filePath
    mIniFile.WritePrivateProfileString "System", "Diagnostics", CStr(mDiagnosticsEnabled), filePath
    mIniFile.WritePrivateProfileString "System", "AutoSave", CStr(mAutoSave), filePath
    
    ' データベース設定の保存
    mIniFile.WritePrivateProfileString "Database", "Type", mDatabaseType, filePath
    mIniFile.WritePrivateProfileString "Database", "ConnectionTimeout", CStr(mConnectionTimeout), filePath
    mIniFile.WritePrivateProfileString "Database", "CommandTimeout", CStr(mCommandTimeout), filePath
    mIniFile.WritePrivateProfileString "Database", "LogTable", mLogTableName, filePath
    
    ' ConnectionStringBuilder設定の保存
    With mConnectionStringBuilder
        mIniFile.WritePrivateProfileString "Database", "Server", .Server, filePath
        mIniFile.WritePrivateProfileString "Database", "Database", .Database, filePath
        mIniFile.WritePrivateProfileString "Database", "UserName", .UserName, filePath
        mIniFile.WritePrivateProfileString "Database", "Password", .Password, filePath
        mIniFile.WritePrivateProfileString "Database", "AdditionalParameters", .AdditionalParameters, filePath
    End With
    
    mLock.ReleaseLock
    Exit Sub
    
ErrorHandler:
    mLock.ReleaseLock
    Err.Raise Err.Number, MODULE_NAME, "設定の保存中にエラーが発生しました: " & Err.Description
End Sub

Private Sub IAppConfig_SetEncryptionKey(ByVal encryptionKey As String, Optional ByVal options As EncryptionOptions = eoNone)
    mLock.AcquireLock
    On Error GoTo ErrorHandler
    
    ' 新しいキーの設定
    Dim oldKey As String
    oldKey = mEncryptionKey
    mEncryptionKey = encryptionKey
    
    ' キーバージョンの設定
    If (options And eoSetKeyVersion) = eoSetKeyVersion Then
        mEncryptionKeyVersion = Format$(Now, "yyyymmddhhnnss")
    End If
    
    ' 既存の暗号化された設定の再暗号化
    If (options And eoReEncrypt) = eoReEncrypt And oldKey <> "" Then
        Dim setting As Variant
        For Each setting In mEncryptedSettings
            Dim value As String
            value = mSettings(setting)
            value = mCrypto.Decrypt(value, oldKey)
            value = mCrypto.Encrypt(value, mEncryptionKey)
            mSettings.Remove setting
            mSettings.Add value, setting
        Next setting
    End If
    
    mLock.ReleaseLock
    Exit Sub
    
ErrorHandler:
    mLock.ReleaseLock
    Err.Raise Err.Number, MODULE_NAME, "暗号化キーの設定中にエラーが発生しました: " & Err.Description
End Sub

Private Sub IAppConfig_SetEnvironment(ByVal environment As String, Optional ByVal options As EnvironmentOptions = enoNone)
    mLock.AcquireLock
    On Error GoTo ErrorHandler
    
    mCurrentEnvironment = environment
    
    ' 環境変更時の設定再読み込み
    If (options And enoReload) = enoReload Then
        IAppConfig_LoadSettings App.Path & "\config.ini", loApplyEnvironment
    End If
    
    ' 環境変更時の設定検証
    If (options And enoValidate) = enoValidate Then
        Dim validationResult As ValidationResult
        Set validationResult = IAppConfig_ValidateSettings(voEnvironment)
        If Not validationResult.IsValid Then
            Err.Raise vbObjectError + 3, MODULE_NAME, "環境設定の検証に失敗しました: " & validationResult.GetSummary()
        End If
    End If
    
    mLock.ReleaseLock
    Exit Sub
    
ErrorHandler:
    mLock.ReleaseLock
    Err.Raise Err.Number, MODULE_NAME, "環境の設定中にエラーが発生しました: " & Err.Description
End Sub

Private Function IAppConfig_ValidateSettings(Optional ByVal options As ValidationOptions = voNone) As ValidationResult
    mLock.AcquireLock
    On Error GoTo ErrorHandler
    
    Dim result As New ValidationResult
    result.StartTime = Now
    result.State = vsRunning
    
    ' 基本的なデータ型の検証
    If (options And voDataType) = voDataType Then
        ' LogLevel の検証
        If mLogLevel < llTrace Or mLogLevel > llFatal Then
            result.AddError "LogLevel は無効な値です: " & mLogLevel
        End If
        
        ' 数値パラメータの検証
        If mMaxRetryCount < 0 Then result.AddError "MaxRetryCount は 0 以上である必要があります"
        If mMaxStackDepth < 1 Then result.AddError "MaxStackDepth は 1 以上である必要があります"
        If mTimerInterval < 100 Then result.AddError "TimerInterval は 100 ミリ秒以上である必要があります"
    End If
    
    ' 値の範囲検証
    If (options And voRange) = voRange Then
        If mMaxRetryCount > 10 Then result.AddWarning "MaxRetryCount が 10 を超えています"
        If mMaxStackDepth > 100 Then result.AddWarning "MaxStackDepth が 100 を超えています"
        If mTimerInterval > 60000 Then result.AddWarning "TimerInterval が 60 秒を超えています"
    End If
    
    ' 環境固有の設定の検証
    If (options And voEnvironment) = voEnvironment Then
        If mCurrentEnvironment = "" Then
            result.AddError "現在の環境が設定されていません"
        End If
    End If
    
    result.EndTime = Now
    result.State = IIf(result.IsValid, vsCompleted, vsFailed)
    
    mLock.ReleaseLock
    Set IAppConfig_ValidateSettings = result
    Exit Function
    
ErrorHandler:
    mLock.ReleaseLock
    Err.Raise Err.Number, MODULE_NAME, "設定の検証中にエラーが発生しました: " & Err.Description
End Function

Private Function IAppConfig_GetSettingHistory(Optional ByVal settingName As String, Optional ByVal options As HistoryOptions = hoNone) As Collection
    mLock.AcquireLock
    On Error GoTo ErrorHandler
    
    Dim result As New Collection
    
    ' 指定された設定の履歴のみを取得
    If settingName <> "" Then
        Dim entry As Dictionary
        For Each entry In mSettingHistory
            If entry("SettingName") = settingName Then
                result.Add entry
            End If
        Next entry
    Else
        Set result = mSettingHistory
    End If
    
    ' ソート（新しい順）
    If (options And hoSort) = hoSort Then
        ' ソート処理の実装（別途ソートヘルパー関数が必要）
    End If
    
    ' 件数制限
    If (options And hoLimit) = hoLimit Then
        While result.Count > 100 ' デフォルトの制限値
            result.Remove result.Count
        Wend
    End If
    
    mLock.ReleaseLock
    Set IAppConfig_GetSettingHistory = result
    Exit Function
    
ErrorHandler:
    mLock.ReleaseLock
    Err.Raise Err.Number, MODULE_NAME, "設定履歴の取得中にエラーが発生しました: " & Err.Description
End Function

Private Function IAppConfig_CreateBackup(ByVal backupPath As String) As Boolean
    mLock.AcquireLock
    On Error GoTo ErrorHandler
    
    ' 現在の設定を保存
    IAppConfig_SaveSettings backupPath, soEncrypt
    IAppConfig_CreateBackup = True
    
    mLock.ReleaseLock
    Exit Function
    
ErrorHandler:
    mLock.ReleaseLock
    IAppConfig_CreateBackup = False
End Function

Private Function IAppConfig_RestoreFromBackup(ByVal backupPath As String, Optional ByVal options As RestoreOptions = roNone) As Boolean
    mLock.AcquireLock
    On Error GoTo ErrorHandler
    
    ' バックアップから設定を読み込む
    IAppConfig_LoadSettings backupPath, loDecrypt Or loValidate
    IAppConfig_RestoreFromBackup = True
    
    mLock.ReleaseLock
    Exit Function
    
ErrorHandler:
    mLock.ReleaseLock
    IAppConfig_RestoreFromBackup = False
End Function

Private Function IAppConfig_GetPerformanceMetrics() As Collection
    mLock.AcquireLock
    On Error GoTo ErrorHandler
    
    Set IAppConfig_GetPerformanceMetrics = mPerformanceMetrics
    
    mLock.ReleaseLock
    Exit Function
    
ErrorHandler:
    mLock.ReleaseLock
    Err.Raise Err.Number, MODULE_NAME, "パフォーマンスメトリクスの取得中にエラーが発生しました: " & Err.Description
End Function

' ======================
' IAppConfigプロパティ実装
' ======================
Private Property Get IAppConfig_LogFilePath() As String
    IAppConfig_LogFilePath = mLogFilePath
End Property

Private Property Let IAppConfig_LogFilePath(ByVal value As String)
    mLogFilePath = value
End Property

Private Property Get IAppConfig_LogLevel() As LogLevel
    IAppConfig_LogLevel = mLogLevel
End Property

Private Property Let IAppConfig_LogLevel(ByVal value As LogLevel)
    mLogLevel = value
End Property

Private Property Get IAppConfig_MaxRetryCount() As Long
    IAppConfig_MaxRetryCount = mMaxRetryCount
End Property

Private Property Let IAppConfig_MaxRetryCount(ByVal value As Long)
    mMaxRetryCount = value
End Property

Private Property Get IAppConfig_MaxStackDepth() As Long
    IAppConfig_MaxStackDepth = mMaxStackDepth
End Property

Private Property Let IAppConfig_MaxStackDepth(ByVal value As Long)
    mMaxStackDepth = value
End Property

Private Property Get IAppConfig_TimerInterval() As Long
    IAppConfig_TimerInterval = mTimerInterval
End Property

Private Property Let IAppConfig_TimerInterval(ByVal value As Long)
    mTimerInterval = value
End Property

Private Property Get IAppConfig_LogEventSource() As String
    IAppConfig_LogEventSource = mLogEventSource
End Property

Private Property Let IAppConfig_LogEventSource(ByVal value As String)
    mLogEventSource = value
End Property

Private Property Get IAppConfig_PerformanceMonitoringEnabled() As Boolean
    IAppConfig_PerformanceMonitoringEnabled = mPerformanceMonitoringEnabled
End Property

Private Property Let IAppConfig_PerformanceMonitoringEnabled(ByVal value As Boolean)
    mPerformanceMonitoringEnabled = value
End Property

Private Property Get IAppConfig_DiagnosticsEnabled() As Boolean
    IAppConfig_DiagnosticsEnabled = mDiagnosticsEnabled
End Property

Private Property Let IAppConfig_DiagnosticsEnabled(ByVal value As Boolean)
    mDiagnosticsEnabled = value
End Property

Private Property Get IAppConfig_AutoSave() As Boolean
    IAppConfig_AutoSave = mAutoSave
End Property

Private Property Let IAppConfig_AutoSave(ByVal value As Boolean)
    mAutoSave = value
End Property

Private Property Get IAppConfig_CurrentEnvironment() As String
    IAppConfig_CurrentEnvironment = mCurrentEnvironment
End Property

Private Property Get IAppConfig_EncryptionKeyVersion() As String
    IAppConfig_EncryptionKeyVersion = mEncryptionKeyVersion
End Property

' ======================
' IDatabaseConfig実装
' ======================
Private Function IDatabaseConfig_GetConnectionString() As String
    IDatabaseConfig_GetConnectionString = mConnectionString
End Function

Private Function IDatabaseConfig_GetDatabaseSetting(ByVal settingName As String) As Variant
    mLock.AcquireLock
    On Error Resume Next
    
    Select Case UCase$(settingName)
        Case "CONNECTIONTIMEOUT"
            IDatabaseConfig_GetDatabaseSetting = mConnectionTimeout
        Case "COMMANDTIMEOUT"
            IDatabaseConfig_GetDatabaseSetting = mCommandTimeout
        Case "DATABASETYPE"
            IDatabaseConfig_GetDatabaseSetting = mDatabaseType
        Case "LOGTABLENAME"
            IDatabaseConfig_GetDatabaseSetting = mLogTableName
        Case Else
            IDatabaseConfig_GetDatabaseSetting = Null
    End Select
    
    mLock.ReleaseLock
End Function

' ======================
' IDatabaseConfigプロパティ実装
' ======================
Private Property Get IDatabaseConfig_ConnectionString() As String
    IDatabaseConfig_ConnectionString = mConnectionString
End Property

Private Property Let IDatabaseConfig_ConnectionString(ByVal value As String)
    mConnectionString = value
End Property

Private Property Get IDatabaseConfig_ConnectionTimeout() As Long
    IDatabaseConfig_ConnectionTimeout = mConnectionTimeout
End Property

Private Property Let IDatabaseConfig_ConnectionTimeout(ByVal value As Long)
    mConnectionTimeout = value
End Property

Private Property Get IDatabaseConfig_CommandTimeout() As Long
    IDatabaseConfig_CommandTimeout = mCommandTimeout
End Property

Private Property Let IDatabaseConfig_CommandTimeout(ByVal value As Long)
    mCommandTimeout = value
End Property

Private Property Get IDatabaseConfig_DatabaseType() As String
    IDatabaseConfig_DatabaseType = mDatabaseType
End Property

Private Property Let IDatabaseConfig_DatabaseType(ByVal value As String)
    mDatabaseType = value
    UpdateConnectionStringBuilder
End Property

Private Property Get IDatabaseConfig_LogTableName() As String
    IDatabaseConfig_LogTableName = mLogTableName
End Property

Private Property Let IDatabaseConfig_LogTableName(ByVal value As String)
    mLogTableName = value
End Property

================
File: core/ConsoleLogger.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "ConsoleLogger"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements ILogger

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "ConsoleLogger"

' ======================
' メンバ変数
' ======================
Private mPerformanceMonitor As IPerformanceMonitor
Private mUseColors As Boolean

' ANSIエスケープシーケンス用の色コード
Private Const ANSI_RESET As String = vbNullString
Private Const ANSI_RED As String = vbNullString
Private Const ANSI_YELLOW As String = vbNullString
Private Const ANSI_GREEN As String = vbNullString
Private Const ANSI_BLUE As String = vbNullString

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    ' 何もしない（依存性は外部から注入）
End Sub

Private Sub Class_Terminate()
    Set mPerformanceMonitor = Nothing
End Sub

' ======================
' 公開メソッド
' ======================
Public Sub Initialize(ByVal performanceMonitor As IPerformanceMonitor, _
                     Optional ByVal useColors As Boolean = False)
    Set mPerformanceMonitor = performanceMonitor
    mUseColors = useColors
End Sub

' ======================
' ILogger実装
' ======================
Private Sub ILogger_Log(ByVal logLevel As String, _
                       ByVal message As String, _
                       Optional ByVal stackTrace As String, _
                       Optional ByVal errorCode As Long)
    If mPerformanceMonitor Is Nothing Then Exit Sub
    
    mPerformanceMonitor.StartMeasurement "ConsoleLogger_Log"
    
    On Error GoTo ErrorHandler
    
    ' ログメッセージの組み立てと出力
    Dim logMessage As String
    logMessage = BuildLogMessage(logLevel, message, stackTrace, errorCode)
    WriteToConsole logMessage, logLevel
    
Cleanup:
    mPerformanceMonitor.EndMeasurement "ConsoleLogger_Log"
    Exit Sub
    
ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "コンソールログ出力中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "ILogger_Log"
        .StackTrace = stackTrace
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    Resume Cleanup
End Sub

' ======================
' プライベートメソッド
' ======================
Private Function BuildLogMessage(ByVal logLevel As String, _
                               ByVal message As String, _
                               ByVal stackTrace As String, _
                               ByVal errorCode As Long) As String
    BuildLogMessage = Format$(Now, "yyyy/mm/dd hh:nn:ss") & " " & _
                     "[" & logLevel & "] " & _
                     IIf(errorCode <> 0, "(Code: " & errorCode & ") ", "") & _
                     message & _
                     IIf(Len(stackTrace) > 0, vbCrLf & "Stack Trace: " & stackTrace, "")
End Function

Private Sub WriteToConsole(ByVal logMessage As String, ByVal logLevel As String)
    If Not mUseColors Then
        Debug.Print logMessage
        Exit Sub
    End If
    
    ' ログレベルに応じた色付け
    Dim colorCode As String
    Select Case UCase$(logLevel)
        Case "ERROR", "FATAL"
            colorCode = ANSI_RED
        Case "WARNING"
            colorCode = ANSI_YELLOW
        Case "SUCCESS"
            colorCode = ANSI_GREEN
        Case "INFO"
            colorCode = ANSI_BLUE
        Case Else
            colorCode = ANSI_RESET
    End Select
    
    Debug.Print colorCode & logMessage & ANSI_RESET
End Sub

================
File: core/DatabaseLogger.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "DatabaseLogger"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements ILogger

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "DatabaseLogger"

' ======================
' メンバ変数
' ======================
Private mConnectionPool As IConnectionPool
Private mLock As ILock
Private mPerformanceMonitor As IPerformanceMonitor
Private mDatabaseConfig As IDatabaseConfig
Private mTableName As String
Private Const MAX_RETRY_COUNT As Long = 3
Private Const RETRY_DELAY_MS As Long = 1000

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    ' 何もしない（依存性は外部から注入）
End Sub

Private Sub Class_Terminate()
    Set mConnectionPool = Nothing
    Set mLock = Nothing
    Set mPerformanceMonitor = Nothing
    Set mDatabaseConfig = Nothing
End Sub

' ======================
' 公開メソッド
' ======================
Public Sub Initialize(ByVal connectionPool As IConnectionPool, _
                     ByVal lock As ILock, _
                     ByVal performanceMonitor As IPerformanceMonitor, _
                     ByVal databaseConfig As IDatabaseConfig, _
                     ByVal tableName As String)
    Set mConnectionPool = connectionPool
    Set mLock = lock
    Set mPerformanceMonitor = performanceMonitor
    Set mDatabaseConfig = databaseConfig
    mTableName = tableName
End Sub

' ======================
' ILogger実装
' ======================
Private Sub ILogger_Log(ByVal logLevel As String, _
                       ByVal message As String, _
                       Optional ByVal stackTrace As String, _
                       Optional ByVal errorCode As Long)
    If mConnectionPool Is Nothing Then Exit Sub
    
    mPerformanceMonitor.StartMeasurement "DatabaseLogger_Log"
    mLock.AcquireLock
    
    Dim conn As Object
    Set conn = Nothing
    
    On Error GoTo ErrorHandler
    
    Dim retryCount As Long
    Do While retryCount < MAX_RETRY_COUNT
        If WriteLogToDatabase(logLevel, message, stackTrace, errorCode) Then Exit Do
        retryCount = retryCount + 1
        If retryCount < MAX_RETRY_COUNT Then Sleep RETRY_DELAY_MS
    Loop
    
Cleanup:
    mLock.ReleaseLock
    mPerformanceMonitor.EndMeasurement "DatabaseLogger_Log"
    Exit Sub
    
ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "データベースログ出力中にエラーが発生しました: " & Err.Description
        .Category = ECDatabase
        .Source = MODULE_NAME
        .ProcedureName = "ILogger_Log"
        .StackTrace = stackTrace
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    Resume Cleanup
End Sub

' ======================
' プライベートメソッド
' ======================
Private Function WriteLogToDatabase(ByVal logLevel As String, _
                                  ByVal message As String, _
                                  ByVal stackTrace As String, _
                                  ByVal errorCode As Long) As Boolean
    On Error Resume Next
    
    Dim conn As Object
    Set conn = mConnectionPool.AcquireConnection()
    
    If conn Is Nothing Then
        WriteLogToDatabase = False
        Exit Function
    End If
    
    ' コマンドオブジェクトの作成
    Dim cmd As Object
    Set cmd = CreateObject("ADODB.Command")
    With cmd
        Set .ActiveConnection = conn
        .CommandText = "INSERT INTO " & mTableName & " " & _
                      "(LogTime, LogLevel, Message, StackTrace, ErrorCode) " & _
                      "VALUES (?, ?, ?, ?, ?)"
        .Parameters.Append .CreateParameter("LogTime", adDate, adParamInput, , Now)
        .Parameters.Append .CreateParameter("LogLevel", adVarChar, adParamInput, 50, logLevel)
        .Parameters.Append .CreateParameter("Message", adVarChar, adParamInput, 4000, message)
        .Parameters.Append .CreateParameter("StackTrace", adVarChar, adParamInput, 4000, stackTrace)
        .Parameters.Append .CreateParameter("ErrorCode", adInteger, adParamInput, , errorCode)
        .Execute
    End With
    
    WriteLogToDatabase = (Err.Number = 0)
    
    ' 接続の解放
    If Not conn Is Nothing Then
        mConnectionPool.ReleaseConnection conn
        Set conn = Nothing
    End If
    
    On Error GoTo 0
End Function

================
File: core/DefaultLoggerSettings.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "DefaultLoggerSettings"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements ILoggerSettings

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "DefaultLoggerSettings"

' ======================
' メンバ変数
' ======================
Private mAppConfig As IAppConfig
Private mLogLevel As LogLevel
Private mLogDestinations As Collection
Private mLogFilePath As String
Private mLogTableName As String
Private mLogEventSource As String
Private mTimerInterval As Long
Private mFileOperations As IFileOperations
Private mConnectionPool As IConnectionPool
Private mEventLog As IEventLog
Private mDatabaseConfig As IDatabaseConfig

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    Set mLogDestinations = New Collection
    mTimerInterval = 1000 ' デフォルト値: 1秒
End Sub

Private Sub Class_Terminate()
    Set mAppConfig = Nothing
    Set mLogDestinations = Nothing
    Set mFileOperations = Nothing
    Set mConnectionPool = Nothing
    Set mEventLog = Nothing
    Set mDatabaseConfig = Nothing
End Sub

' ======================
' 公開メソッド
' ======================
Public Sub Initialize(ByVal appConfig As IAppConfig, _
                     ByVal fileOperations As IFileOperations, _
                     ByVal connectionPool As IConnectionPool, _
                     ByVal eventLog As IEventLog, _
                     ByVal databaseConfig As IDatabaseConfig)
    Set mAppConfig = appConfig
    Set mFileOperations = fileOperations
    Set mConnectionPool = connectionPool
    Set mEventLog = eventLog
    Set mDatabaseConfig = databaseConfig
    
    ' 設定の読み込み
    LoadSettings
End Sub

' ======================
' ILoggerSettings実装
' ======================
Private Property Get ILoggerSettings_LogLevel() As LogLevel
    ILoggerSettings_LogLevel = mLogLevel
End Property

Private Property Let ILoggerSettings_LogLevel(ByVal value As LogLevel)
    mLogLevel = value
End Property

Private Function ILoggerSettings_GetLogDestinations() As Variant
    Dim result() As String
    ReDim result(1 To mLogDestinations.Count)
    
    Dim i As Long
    For i = 1 To mLogDestinations.Count
        result(i) = mLogDestinations(i)
    Next i
    
    ILoggerSettings_GetLogDestinations = result
End Function

Private Property Get ILoggerSettings_LogFilePath() As String
    ILoggerSettings_LogFilePath = mLogFilePath
End Property

Private Property Get ILoggerSettings_LogTableName() As String
    ILoggerSettings_LogTableName = mLogTableName
End Property

Private Property Get ILoggerSettings_LogEventSource() As String
    ILoggerSettings_LogEventSource = mLogEventSource
End Property

Private Property Get ILoggerSettings_TimerInterval() As Long
    ILoggerSettings_TimerInterval = mTimerInterval
End Property

Private Function ILoggerSettings_GetFileOperations() As IFileOperations
    Set ILoggerSettings_GetFileOperations = mFileOperations
End Function

Private Function ILoggerSettings_GetConnectionPool() As IConnectionPool
    Set ILoggerSettings_GetConnectionPool = mConnectionPool
End Function

Private Function ILoggerSettings_GetEventLog() As IEventLog
    Set ILoggerSettings_GetEventLog = mEventLog
End Function

Private Function ILoggerSettings_GetDatabaseConfig() As IDatabaseConfig
    Set ILoggerSettings_GetDatabaseConfig = mDatabaseConfig
End Function

Private Function ILoggerSettings_ShouldLog(ByVal destination As String, ByVal level As LogLevel) As Boolean
    ' 指定された出力先が有効で、ログレベルが現在の設定以上の場合にログを出力
    Dim i As Long
    For i = 1 To mLogDestinations.Count
        If mLogDestinations(i) = destination Then
            ILoggerSettings_ShouldLog = (level >= mLogLevel)
            Exit Function
        End If
    Next i
    
    ILoggerSettings_ShouldLog = False
End Function

Private Function ILoggerSettings_FormatLogMessage(ByVal logLevel As String, _
                                                ByVal message As String, _
                                                ByVal stackTrace As String, _
                                                ByVal errorCode As Long) As String
    Dim result As String
    result = Format$(Now, "yyyy/mm/dd hh:nn:ss") & " " & _
             "[" & logLevel & "] " & _
             IIf(errorCode <> 0, "(Code: " & errorCode & ") ", "") & _
             message
             
    If Len(stackTrace) > 0 Then
        result = result & vbCrLf & "Stack Trace: " & stackTrace
    End If
    
    ILoggerSettings_FormatLogMessage = result
End Function

' ======================
' プライベートメソッド
' ======================
Private Sub LoadSettings()
    If mAppConfig Is Nothing Then Exit Sub
    
    ' ログレベルの読み込み
    mLogLevel = mAppConfig.GetValue("Logging", "Level", LOG_LEVEL_INFO)
    
    ' 出力先の読み込み
    Dim destinations As String
    destinations = mAppConfig.GetValue("Logging", "Destinations", "File")
    ParseDestinations destinations
    
    ' ファイル出力設定
    mLogFilePath = mAppConfig.GetValue("Logging", "FilePath", "log\application.log")
    
    ' データベース出力設定
    mLogTableName = mAppConfig.GetValue("Logging", "TableName", "ApplicationLog")
    
    ' イベントログ出力設定
    mLogEventSource = mAppConfig.GetValue("Logging", "EventSource", "PDI Logger")
    
    ' タイマー間隔設定
    mTimerInterval = CLng(mAppConfig.GetValue("Logging", "TimerInterval", "1000"))
End Sub

Private Sub ParseDestinations(ByVal destinations As String)
    Set mLogDestinations = New Collection
    
    Dim parts() As String
    parts = Split(destinations, ",")
    
    Dim i As Long
    For i = LBound(parts) To UBound(parts)
        mLogDestinations.Add Trim$(parts(i))
    Next i
End Sub

================
File: core/DefaultMessageFormatter.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "DefaultMessageFormatter"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredefinedId = False
Attribute VB_Exposed = True
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "DefaultMessageFormatter"

' ======================
' インターフェース実装
' ======================
Implements IMessageFormatter

' ======================
' IMessageFormatter実装
' ======================
Private Function IMessageFormatter_FormatMessage(ByVal message As String, ByRef errorInfo As ErrorInfo) As String
    On Error GoTo ErrorHandler
    
    Dim formattedMessage As String
    
    ' 基本メッセージの設定
    formattedMessage = IIf(Len(message) > 0, message & vbCrLf & vbCrLf, "エラーが発生しました。" & vbCrLf & vbCrLf)
    
    ' エラー詳細情報の追加
    formattedMessage = formattedMessage & _
                      "説明: " & errorInfo.Description & vbCrLf & _
                      "発生場所: " & errorInfo.Source & "." & errorInfo.ProcedureName
    
    ' スタックトレースが存在する場合は追加
    If Len(errorInfo.StackTrace) > 0 Then
        formattedMessage = formattedMessage & vbCrLf & vbCrLf & _
                          "スタックトレース:" & vbCrLf & _
                          errorInfo.StackTrace
    End If
    
    IMessageFormatter_FormatMessage = formattedMessage
    Exit Function
    
ErrorHandler:
    ' エラー情報の作成
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "メッセージのフォーマット中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "IMessageFormatter_FormatMessage"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    
    ' エラーハンドラに委譲
    modError.HandleError errDetail
    
    ' デフォルトメッセージを返す
    IMessageFormatter_FormatMessage = "エラーメッセージのフォーマットに失敗しました。"
End Function

#If DEBUG Then
    ' ======================
    ' テストサポート機能
    ' ======================
    Public Function TestFormatMessage(ByVal testMessage As String, ByRef testError As ErrorInfo) As String
        TestFormatMessage = IMessageFormatter_FormatMessage(testMessage, testError)
    End Function
#End If

================
File: core/EmergencyLogger.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "EmergencyLogger"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = True
Option Explicit

Implements IEmergencyLogger

'==========================
' 定数
'==========================
Private Const MODULE_NAME As String = "EmergencyLogger"
Private Const EMERGENCY_LOG_FILE As String = "\PDI_emergency.log"
Private Const EVENT_SOURCE As String = "PDI Error"

'==========================
' メンバ変数
'==========================
Private mLock As clsLock

'==========================
' 初期化・終了処理
'==========================
Private Sub Class_Initialize()
    Set mLock = New clsLock
End Sub

Private Sub Class_Terminate()
    Set mLock = Nothing
End Sub

'==========================
' IEmergencyLogger 実装
'==========================
Private Sub IEmergencyLogger_LogEmergencyError(ByVal message As String, Optional ByRef errorInfo As ErrorInfo)
    mLock.AcquireLock
    On Error Resume Next
    
    ' エラー情報をフォーマット
    Dim formattedMessage As String
    formattedMessage = FormatErrorMessage(message, errorInfo)
    
    ' イベントログへの出力を試みる
    WriteToEventLog formattedMessage
    
    ' ファイルへの出力を試みる
    WriteToEmergencyFile formattedMessage
    
    mLock.ReleaseLock
End Sub

'==========================
' プライベートメソッド
'==========================

''' <summary>
''' エラーメッセージをフォーマットします
''' </summary>
Private Function FormatErrorMessage(ByVal message As String, ByRef errorInfo As ErrorInfo) As String
    Dim builder As String
    builder = Now & " - " & message
    
    If Not IsMissing(errorInfo) Then
        With errorInfo
            builder = builder & vbCrLf & _
                     "コード: " & .Code & vbCrLf & _
                     "説明: " & .Description & vbCrLf & _
                     "ソース: " & .Source & vbCrLf & _
                     "プロシージャ: " & .ProcedureName & vbCrLf & _
                     "発生時刻: " & .OccurredAt & vbCrLf & _
                     "スタックトレース: " & vbCrLf & .StackTrace
        End With
    End If
    
    FormatErrorMessage = builder
End Function

''' <summary>
''' イベントログにエラーを記録します
''' </summary>
Private Sub WriteToEventLog(ByVal message As String)
    On Error Resume Next
    modWindowsAPI.WriteToEventLog EVENT_SOURCE, message, EVENTLOG_ERROR_TYPE
End Sub

''' <summary>
''' 緊急用ファイルにエラーを記録します
''' </summary>
Private Sub WriteToEmergencyFile(ByVal message As String)
    On Error Resume Next
    
    Dim fso As Object
    Set fso = CreateObject("Scripting.FileSystemObject")
    
    Dim logPath As String
    logPath = Environ$("TEMP") & EMERGENCY_LOG_FILE
    
    Dim logFile As Object
    Set logFile = fso.OpenTextFile(logPath, 8, True) ' 8: ForAppending, Create if doesn't exist
    logFile.WriteLine message
    logFile.Close
    
    Set logFile = Nothing
    Set fso = Nothing
End Sub

'==========================
' テストサポート（開発環境用）
'==========================
#If DEBUG Then
    Public Function GetEmergencyLogPath() As String
        GetEmergencyLogPath = Environ$("TEMP") & EMERGENCY_LOG_FILE
    End Function
    
    Public Sub ClearEmergencyLog()
        On Error Resume Next
        Kill GetEmergencyLogPath()
    End Sub
#End If

================
File: core/ErrorHandlerManager.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "ErrorHandlerManager"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = True
Option Explicit

'@Description("エラーハンドラーの管理を行うクラス")

'==========================
' 定数
'==========================
Private Const MODULE_NAME As String = "ErrorHandlerManager"

'==========================
' メンバ変数
'==========================
Private mHandlers As Collection
Private mLock As clsLock
Private mIsInitialized As Boolean

'==========================
' 初期化・終了処理
'==========================
Private Sub Class_Initialize()
    Set mHandlers = New Collection
    Set mLock = New clsLock
    InitializeManager
End Sub

Private Sub Class_Terminate()
    Set mHandlers = Nothing
    Set mLock = Nothing
    mIsInitialized = False
End Sub

'==========================
' パブリックメソッド
'==========================

''' <summary>
''' エラーハンドラーマネージャーを初期化します
''' </summary>
Public Sub InitializeManager()
    If mIsInitialized Then Exit Sub
    
    RegisterDefaultHandlers
    mIsInitialized = True
End Sub

''' <summary>
''' エラーコードに対応するエラーハンドラーを登録します
''' </summary>
''' <param name="errorCode">エラーコード</param>
''' <param name="handler">エラーハンドラー</param>
Public Sub RegisterHandler(ByVal errorCode As ErrorCode, ByVal handler As IErrorHandler)
    mLock.AcquireLock
    
    On Error Resume Next
    mHandlers.Remove CStr(errorCode)
    On Error GoTo 0
    
    mHandlers.Add handler, CStr(errorCode)
    
    mLock.ReleaseLock
End Sub

''' <summary>
''' エラーコードに対応するエラーハンドラーの登録を解除します
''' </summary>
''' <param name="errorCode">エラーコード</param>
Public Sub UnregisterHandler(ByVal errorCode As ErrorCode)
    mLock.AcquireLock
    
    On Error Resume Next
    mHandlers.Remove CStr(errorCode)
    On Error GoTo 0
    
    mLock.ReleaseLock
End Sub

''' <summary>
''' エラーコードに対応するエラーハンドラーを取得します
''' </summary>
''' <param name="errorCode">エラーコード</param>
''' <returns>エラーハンドラー。未登録の場合はデフォルトハンドラー</returns>
Public Function GetErrorHandler(ByVal errorCode As ErrorCode) As IErrorHandler
    Dim handler As IErrorHandler
    
    mLock.AcquireLock
    
    On Error Resume Next
    Set handler = mHandlers(CStr(errorCode))
    If Err.Number <> 0 Then
        ' 該当するハンドラが見つからない場合は、エラーカテゴリに基づいてデフォルトハンドラを返す
        Set handler = GetDefaultHandlerForCategory(modErrorCodes.GetErrorCategory(errorCode))
    End If
    On Error GoTo 0
    
    mLock.ReleaseLock
    
    Set GetErrorHandler = handler
End Function

'==========================
' プライベートメソッド
'==========================

''' <summary>
''' デフォルトのエラーハンドラーを登録します
''' </summary>
Private Sub RegisterDefaultHandlers()
    ' データベース接続エラー用ハンドラ
    RegisterHandler ErrDbConnectionFailed, New DatabaseConnectionErrorHandler
    
    ' ファイル不在エラー用ハンドラ
    RegisterHandler ErrFileNotFound, New FileNotFoundErrorHandler
    
    ' 入力検証エラー用ハンドラ
    RegisterHandler ErrInvalidInput, New InvalidInputErrorHandler
End Sub

''' <summary>
''' エラーカテゴリに対応するデフォルトのエラーハンドラーを取得します
''' </summary>
''' <param name="category">エラーカテゴリ</param>
''' <returns>デフォルトのエラーハンドラー</returns>
Private Function GetDefaultHandlerForCategory(ByVal category As ErrorCodeCategory) As IErrorHandler
    Select Case category
        Case ECDatabase
            Set GetDefaultHandlerForCategory = New DatabaseConnectionErrorHandler
        Case ECFileIO
            Set GetDefaultHandlerForCategory = New FileNotFoundErrorHandler
        Case Else
            Set GetDefaultHandlerForCategory = New InvalidInputErrorHandler
    End Select
End Function

'==========================
' テストサポート（開発環境用）
'==========================
#If DEBUG Then
    Public Function GetHandlerCount() As Long
        mLock.AcquireLock
        GetHandlerCount = mHandlers.Count
        mLock.ReleaseLock
    End Function
    
    Public Sub ClearHandlers()
        mLock.AcquireLock
        Set mHandlers = New Collection
        mLock.ReleaseLock
    End Sub
#End If

================
File: core/ErrorImpl.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "ErrorImpl"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = True
Option Explicit

Implements IError

' 定数定義
Private Const MODULE_NAME As String = "ErrorImpl"
Private Const MAX_ERROR_RECURSION As Long = 3
Private Const ERROR_COUNT_DICT_SIZE As Long = 100
Private Const MAX_HISTORY_SIZE As Long = 1000
Private Const MAX_BATCH_SIZE As Long = 100
Private Const CLEANUP_INTERVAL_MS As Long = 300000
Private Const MAX_RECOVERY_ATTEMPTS As Long = 3
Private Const ANALYSIS_INTERVAL_MS As Long = 3600000

' イベント定義
Public Event ErrorOccurred(ByVal errorInfo As ErrorInfo, ByVal severity As ErrorSeverity)
Public Event ErrorHandled(ByVal errorInfo As ErrorInfo, ByVal handler As IErrorHandler, ByVal success As Boolean)
Public Event ErrorAnalysisCompleted(ByVal analysisResult As ErrorAnalysisResult)
Public Event ErrorCategoryChanged(ByVal errorCode As ErrorCode, ByVal oldCategory As ErrorCategory, ByVal newCategory As ErrorCategory)
Public Event ErrorThresholdExceeded(ByVal errorCode As ErrorCode, ByVal count As Long, ByVal threshold As Long)
Public Event RecoveryAttempted(ByVal errorInfo As ErrorInfo, ByVal attempt As Long, ByVal success As Boolean)
Public Event BatchProcessed(ByVal batchId As String, ByVal successCount As Long, ByVal failureCount As Long)
Public Event PerformanceAlert(ByVal metricType As String, ByVal currentValue As Double, ByVal threshold As Double)

' メンバ変数
Private mHandlerManager As ErrorHandlerManager
Private mEmergencyLogger As IEmergencyLogger
Private mErrorCounts As Object ' Scripting.Dictionary
Private mErrorHistory As Collection
Private mErrorCategories As Object ' Scripting.Dictionary
Private mLock As clsLock
Private mIsInitialized As Boolean
Private mErrorRecursionCount As Long
Private mPerformanceMonitor As clsPerformanceMonitor
Private mLastCleanupTime As Date
Private mLastAnalysisTime As Date

' 初期化・終了処理
Private Sub Class_Initialize()
    Set mHandlerManager = New ErrorHandlerManager
    Set mEmergencyLogger = New EmergencyLogger
    Set mErrorCounts = CreateObject("Scripting.Dictionary")
    Set mErrorHistory = New Collection
    Set mErrorCategories = CreateObject("Scripting.Dictionary")
    Set mLock = New clsLock
    Set mPerformanceMonitor = New clsPerformanceMonitor
    mErrorRecursionCount = 0
    mLastCleanupTime = Now
    mLastAnalysisTime = Now
    mIsInitialized = True
End Sub

Private Sub Class_Terminate()
    Set mHandlerManager = Nothing
    Set mEmergencyLogger = Nothing
    Set mErrorCounts = Nothing
    Set mErrorHistory = Nothing
    Set mErrorCategories = Nothing
    Set mLock = Nothing
    Set mPerformanceMonitor = Nothing
    mIsInitialized = False
End Sub

' IError 実装
Private Function IError_HandleError(ByRef errorInfo As ErrorInfo, Optional ByVal options As HandlingOptions) As Boolean
    If Not mIsInitialized Then Exit Function
    
    ' パフォーマンス計測開始
    mPerformanceMonitor.StartMeasurement "HandleError"
    
    ' エラーの再帰制御
    mErrorRecursionCount = mErrorRecursionCount + 1
    If mErrorRecursionCount > MAX_ERROR_RECURSION Then
        mEmergencyLogger.LogEmergencyError "エラー処理の再帰回数が上限を超えました。処理を中断します。", errorInfo
        IError_HandleError = False
        GoTo Cleanup
    End If
    
    mLock.AcquireLock
    On Error GoTo ErrorHandler
    
    ' エラー情報の補完と履歴の追加
    CompleteErrorInfo errorInfo
    AddToHistory errorInfo
    
    ' エラー発生回数をカウント
    IError_IncrementErrorCount errorInfo.Code
    
    ' エラーの分析と分類
    AnalyzeError errorInfo
    CategorizeError errorInfo
    
    ' イベント通知
    RaiseEvent ErrorOccurred(errorInfo, GetErrorSeverity(errorInfo))
    
    ' エラーハンドラーの取得と実行
    Dim handler As IErrorHandler
    Set handler = mHandlerManager.GetErrorHandler(errorInfo.Code)
    
    If Not handler Is Nothing Then
        IError_HandleError = handler.HandleError(errorInfo)
        RaiseEvent ErrorHandled(errorInfo, handler, IError_HandleError)
    End If
    
    ' 定期的なクリーンアップとメトリクス収集
    If DateDiff("s", mLastCleanupTime, Now) > CLEANUP_INTERVAL_MS / 1000 Then
        PerformCleanup
    End If
    
    mLock.ReleaseLock
    GoTo Cleanup
    
ErrorHandler:
    mLock.ReleaseLock
    mEmergencyLogger.LogEmergencyError "HandleError中にエラーが発生しました: " & Err.Description, errorInfo
    IError_HandleError = False
    
Cleanup:
    mErrorRecursionCount = mErrorRecursionCount - 1
    mPerformanceMonitor.EndMeasurement "HandleError"
End Function

Private Function IError_HandleBatchErrors(ByVal errors As Collection, Optional ByVal options As BatchOptions) As BatchResult
    Dim result As New BatchResult
    Dim batchId As String
    batchId = "BATCH_" & Format(Now, "yyyymmddhhnnss")
    
    mLock.AcquireLock
    On Error GoTo ErrorHandler
    
    Dim errorInfo As ErrorInfo
    For Each errorInfo In errors
        If IError_HandleError(errorInfo) Then
            result.SuccessCount = result.SuccessCount + 1
        Else
            result.FailureCount = result.FailureCount + 1
        End If
    Next
    
    RaiseEvent BatchProcessed(batchId, result.SuccessCount, result.FailureCount)
    mLock.ReleaseLock
    Set IError_HandleBatchErrors = result
    Exit Function
    
ErrorHandler:
    mLock.ReleaseLock
    mEmergencyLogger.LogEmergencyError "HandleBatchErrors中にエラーが発生しました: " & Err.Description, Nothing
    Set IError_HandleBatchErrors = result
End Function

Private Function IError_AnalyzeErrors(Optional ByVal options As AnalysisOptions) As ErrorAnalysisResult
    Dim result As New ErrorAnalysisResult
    
    mLock.AcquireLock
    On Error GoTo ErrorHandler
    
    ' エラー履歴の分析
    AnalyzeErrorHistory result
    
    ' エラーパターンの検出
    DetectErrorPatterns result
    
    ' エラー傾向の分析
    AnalyzeErrorTrends result
    
    RaiseEvent ErrorAnalysisCompleted(result)
    mLock.ReleaseLock
    Set IError_AnalyzeErrors = result
    Exit Function
    
ErrorHandler:
    mLock.ReleaseLock
    mEmergencyLogger.LogEmergencyError "AnalyzeErrors中にエラーが発生しました: " & Err.Description, Nothing
    Set IError_AnalyzeErrors = result
End Function

Private Function IError_GetErrorHistory(Optional ByVal options As HistoryOptions) As Collection
    Set IError_GetErrorHistory = mErrorHistory
End Function

Private Function IError_GetPerformanceMetrics() As Collection
    Dim metrics As New Collection
    
    With metrics
        .Add mPerformanceMonitor.GetAllMeasurements()
        .Add GetErrorCountMetrics()
        .Add GetHandlerPerformanceMetrics()
        .Add GetMemoryUsageMetrics()
    End With
    
    Set IError_GetPerformanceMetrics = metrics
End Function

' プライベートメソッド
Private Sub CompleteErrorInfo(ByRef errorInfo As ErrorInfo)
    With errorInfo
        If .OccurredAt = #12:00:00 AM# Then .OccurredAt = Now
        If .Category = 0 Then .Category = modErrorCodes.GetErrorCategory(.Code)
        If Len(.StackTrace) = 0 Then .StackTrace = modStackTrace.GetStackTrace()
    End With
End Sub

Private Sub AddToHistory(ByRef errorInfo As ErrorInfo)
    mErrorHistory.Add errorInfo
    If mErrorHistory.Count > MAX_HISTORY_SIZE Then
        RemoveOldestHistoryEntry
    End If
End Sub

Private Sub RemoveOldestHistoryEntry()
    If mErrorHistory.Count > 0 Then
        mErrorHistory.Remove 1
    End If
End Sub

Private Sub PerformCleanup()
    mLastCleanupTime = Now
    CleanupErrorCounts
    CleanupErrorHistory
    CollectGarbage
End Sub

Private Sub CleanupErrorCounts()
    While mErrorCounts.Count > ERROR_COUNT_DICT_SIZE
        RemoveOldestErrorCount
    Wend
End Sub

Private Sub CleanupErrorHistory()
    While mErrorHistory.Count > MAX_HISTORY_SIZE
        RemoveOldestHistoryEntry
    Wend
End Sub

Private Function GetErrorSeverity(ByRef errorInfo As ErrorInfo) As ErrorSeverity
    ' エラーの重要度を判定するロジック
    ' 実装は省略
End Function

Private Sub AnalyzeError(ByRef errorInfo As ErrorInfo)
    ' エラーの分析ロジック
    ' 実装は省略
End Sub

Private Sub CategorizeError(ByRef errorInfo As ErrorInfo)
    ' エラーの分類ロジック
    ' 実装は省略
End Sub

Private Sub AnalyzeErrorHistory(ByRef result As ErrorAnalysisResult)
    ' エラー履歴の分析ロジック
    ' 実装は省略
End Sub

Private Sub DetectErrorPatterns(ByRef result As ErrorAnalysisResult)
    ' エラーパターンの検出ロジック
    ' 実装は省略
End Sub

Private Sub AnalyzeErrorTrends(ByRef result As ErrorAnalysisResult)
    ' エラー傾向の分析ロジック
    ' 実装は省略
End Sub

Private Function GetErrorCountMetrics() As Collection
    ' エラーカウントのメトリクス取得ロジック
    ' 実装は省略
End Function

Private Function GetHandlerPerformanceMetrics() As Collection
    ' ハンドラーのパフォーマンスメトリクス取得ロジック
    ' 実装は省略
End Function

Private Function GetMemoryUsageMetrics() As Collection
    ' メモリ使用量のメトリクス取得ロジック
    ' 実装は省略
End Function

' テストサポート（開発環境用）
#If DEBUG Then
    Public Function GetErrorCount(ByVal errorCode As ErrorCode) As Long
        mLock.AcquireLock
        Dim key As String
        key = CStr(errorCode)
        GetErrorCount = 0
        If mErrorCounts.Exists(key) Then
            GetErrorCount = mErrorCounts(key)
        End If
        mLock.ReleaseLock
    End Function
    
    Public Sub ClearErrorCounts()
        mLock.AcquireLock
        mErrorCounts.RemoveAll
        mLock.ReleaseLock
    End Sub
    
    Public Function GetPerformanceReport() As String
        GetPerformanceReport = mPerformanceMonitor.GetAllMeasurements()
    End Function
#End If

================
File: core/ErrorInfo.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "ErrorInfo"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' プロパティ
' ======================
Private mCode As Long
Private mDescription As String
Private mCategory As ErrorCodeCategory
Private mSource As String
Private mProcedureName As String
Private mStackTrace As String
Private mOccurredAt As Date
Private mSeverity As ErrorSeverity
Private mAdditionalInfo As Collection
Private mInnerError As ErrorInfo
Private mRecoveryAttempted As Boolean
Private mRecoverySuccessful As Boolean

' ======================
' 列挙型
' ======================
Public Enum ErrorSeverity
    ESInfo = 1
    ESWarning = 2
    ESError = 3
    ESCritical = 4
End Enum

' ======================
' プロパティ
' ======================
Public Property Get Code() As Long
    Code = mCode
End Property
Public Property Let Code(ByVal value As Long)
    mCode = value
End Property

Public Property Get Description() As String
    Description = mDescription
End Property
Public Property Let Description(ByVal value As String)
    mDescription = value
End Property

Public Property Get Category() As ErrorCodeCategory
    Category = mCategory
End Property
Public Property Let Category(ByVal value As ErrorCodeCategory)
    mCategory = value
End Property

Public Property Get Source() As String
    Source = mSource
End Property
Public Property Let Source(ByVal value As String)
    mSource = value
End Property

Public Property Get ProcedureName() As String
    ProcedureName = mProcedureName
End Property
Public Property Let ProcedureName(ByVal value As String)
    mProcedureName = value
End Property

Public Property Get StackTrace() As String
    StackTrace = mStackTrace
End Property
Public Property Let StackTrace(ByVal value As String)
    mStackTrace = value
End Property

Public Property Get OccurredAt() As Date
    OccurredAt = mOccurredAt
End Property
Public Property Let OccurredAt(ByVal value As Date)
    mOccurredAt = value
End Property

Public Property Get Severity() As ErrorSeverity
    Severity = mSeverity
End Property
Public Property Let Severity(ByVal value As ErrorSeverity)
    mSeverity = value
End Property

Public Property Get InnerError() As ErrorInfo
    Set InnerError = mInnerError
End Property
Public Property Set InnerError(ByVal value As ErrorInfo)
    Set mInnerError = value
End Property

Public Property Get RecoveryAttempted() As Boolean
    RecoveryAttempted = mRecoveryAttempted
End Property
Public Property Let RecoveryAttempted(ByVal value As Boolean)
    mRecoveryAttempted = value
End Property

Public Property Get RecoverySuccessful() As Boolean
    RecoverySuccessful = mRecoverySuccessful
End Property
Public Property Let RecoverySuccessful(ByVal value As Boolean)
    mRecoverySuccessful = value
End Property

' ======================
' 初期化
' ======================
Private Sub Class_Initialize()
    Set mAdditionalInfo = New Collection
End Sub

' ======================
' パブリックメソッド
' ======================
Public Sub AddAdditionalInfo(ByVal key As String, ByVal value As Variant)
    On Error Resume Next
    mAdditionalInfo.Remove key
    On Error GoTo 0
    mAdditionalInfo.Add value, key
End Sub

Public Function GetAdditionalInfo(ByVal key As String) As Variant
    On Error Resume Next
    GetAdditionalInfo = mAdditionalInfo(key)
    On Error GoTo 0
End Function

Public Function HasAdditionalInfo(ByVal key As String) As Boolean
    On Error Resume Next
    Dim temp As Variant
    temp = mAdditionalInfo(key)
    HasAdditionalInfo = (Err.Number = 0)
    On Error GoTo 0
End Function

Public Function Clone() As ErrorInfo
    Dim result As New ErrorInfo
    With result
        .Code = mCode
        .Description = mDescription
        .Category = mCategory
        .Source = mSource
        .ProcedureName = mProcedureName
        .StackTrace = mStackTrace
        .OccurredAt = mOccurredAt
        .Severity = mSeverity
        .RecoveryAttempted = mRecoveryAttempted
        .RecoverySuccessful = mRecoverySuccessful
        If Not mInnerError Is Nothing Then
            Set .InnerError = mInnerError.Clone
        End If
        
        ' 追加情報のコピー
        Dim key As Variant
        For Each key In mAdditionalInfo
            .AddAdditionalInfo CStr(key), mAdditionalInfo(key)
        Next key
    End With
    Set Clone = result
End Function

Public Function ToString() As String
    Dim result As String
    result = "Error Details:" & vbCrLf & _
            "Code: " & mCode & vbCrLf & _
            "Description: " & mDescription & vbCrLf & _
            "Category: " & mCategory & vbCrLf & _
            "Source: " & mSource & vbCrLf & _
            "Procedure: " & mProcedureName & vbCrLf & _
            "Occurred At: " & Format(mOccurredAt, "yyyy/mm/dd hh:nn:ss") & vbCrLf & _
            "Severity: " & mSeverity & vbCrLf & _
            "Recovery Attempted: " & mRecoveryAttempted & vbCrLf & _
            "Recovery Successful: " & mRecoverySuccessful & vbCrLf & _
            "Stack Trace: " & vbCrLf & mStackTrace
    
    If Not mInnerError Is Nothing Then
        result = result & vbCrLf & vbCrLf & "Inner Error:" & vbCrLf & _
                mInnerError.ToString
    End If
    
    ToString = result
End Function

================
File: core/EventLogImpl.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "EventLogImpl"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements IEventLog

' 定数定義
Private Const MODULE_NAME As String = "EventLogImpl"
Private Const MAX_MESSAGE_LENGTH As Long = 32766     ' メッセージの最大長
Private Const MAX_BATCH_SIZE As Long = 1000         ' 最大バッチサイズ
Private Const CACHE_DURATION_MS As Long = 300000    ' キャッシュの有効期間（5分）
Private Const MAX_RETRY_COUNT As Long = 3           ' 最大リトライ回数
Private Const BACKUP_INTERVAL_MS As Long = 3600000  ' バックアップ間隔（1時間）
Private Const METRICS_INTERVAL_MS As Long = 60000   ' メトリクス収集間隔（1分）
Private Const CLEANUP_INTERVAL_MS As Long = 300000  ' クリーンアップ間隔（5分）

' イベント定義
Public Event EventLogged(ByVal source As String, ByVal eventType As EventLogType)
Public Event BatchProcessed(ByVal source As String, ByVal successCount As Long, ByVal failureCount As Long)
Public Event SourceRegistered(ByVal source As String, ByVal success As Boolean)
Public Event BackupCreated(ByVal backupPath As String)
Public Event FilterApplied(ByVal filterCriteria As String, ByVal matchCount As Long)
Public Event SecurityAlert(ByVal alertType As String, ByVal details As String)
Public Event PerformanceAlert(ByVal metricType As String, ByVal currentValue As Double, ByVal threshold As Double)
Public Event ResourceExhausted(ByVal resourceType As String, ByVal details As String)

' メンバ変数
Private mIsInitialized As Boolean
Private mLock As clsLock
Private mPerformanceMonitor As clsPerformanceMonitor
Private mLastError As String
Private mSourceCache As Object ' Scripting.Dictionary
Private mLastBackupTime As Date
Private mLastMetricsTime As Date
Private mLastCleanupTime As Date
Private mEventFilters As Collection
Private mSecurityContext As SecurityContext

' 初期化・終了処理
Private Sub Class_Initialize()
    Set mLock = New clsLock
    Set mPerformanceMonitor = New clsPerformanceMonitor
    Set mSourceCache = CreateObject("Scripting.Dictionary")
    Set mEventFilters = New Collection
    Set mSecurityContext = New SecurityContext
    mLastBackupTime = Now
    mLastMetricsTime = Now
    mLastCleanupTime = Now
    mIsInitialized = True
End Sub

Private Sub Class_Terminate()
    Set mLock = Nothing
    Set mPerformanceMonitor = Nothing
    Set mSourceCache = Nothing
    Set mEventFilters = Nothing
    Set mSecurityContext = Nothing
    mIsInitialized = False
End Sub

' IEventLog実装
Private Function IEventLog_WriteToEventLog(ByVal source As String, _
                                         ByVal message As String, _
                                         ByVal eventType As EventLogType, _
                                         Optional ByVal options As WriteOptions) As Boolean
    If Not mIsInitialized Then Exit Function
    
    mPerformanceMonitor.StartMeasurement "WriteToEventLog"
    mLock.AcquireLock
    
    On Error GoTo ErrorHandler
    
    ' セキュリティチェック
    If Not ValidateSecurityContext(source) Then
        LogSecurityAlert "不正なイベントログアクセス試行", source
        GoTo CleanUp
    End If
    
    ' ソースの存在確認（キャッシュ利用）
    If Not VerifyEventSource(source) Then
        LogError "イベントソースが存在しません: " & source
        GoTo CleanUp
    End If
    
    ' メッセージの検証と整形
    message = ValidateAndFormatMessage(message)
    If message = "" Then GoTo CleanUp
    
    ' イベントログ書き込み（リトライ機能付き）
    If WriteEventLogWithRetry(source, message, eventType, options) Then
        RaiseEvent EventLogged(source, eventType)
        IEventLog_WriteToEventLog = True
    End If
    
    ' 定期的な処理
    PerformPeriodicTasks
    
CleanUp:
    mLock.ReleaseLock
    mPerformanceMonitor.EndMeasurement "WriteToEventLog"
    Exit Function

ErrorHandler:
    mLastError = "イベントログへの書き込み中にエラーが発生しました: " & Err.Description
    LogError mLastError
    IEventLog_WriteToEventLog = False
    Resume CleanUp
End Function

Private Function IEventLog_WriteBatch(ByVal entries As Collection, Optional ByVal options As BatchOptions) As BatchResult
    Dim result As New BatchResult
    
    If entries.Count > MAX_BATCH_SIZE Then
        LogError "バッチサイズが上限を超えています: " & entries.Count
        Set IEventLog_WriteBatch = result
        Exit Function
    End If
    
    mLock.AcquireLock
    On Error GoTo ErrorHandler
    
    Dim entry As EventLogEntry
    For Each entry In entries
        If IEventLog_WriteToEventLog(entry.Source, entry.Message, entry.EventType) Then
            result.SuccessCount = result.SuccessCount + 1
        Else
            result.FailureCount = result.FailureCount + 1
        End If
    Next
    
    RaiseEvent BatchProcessed(entries(1).Source, result.SuccessCount, result.FailureCount)
    
CleanUp:
    mLock.ReleaseLock
    Set IEventLog_WriteBatch = result
    Exit Function

ErrorHandler:
    LogError "バッチ処理中にエラーが発生しました: " & Err.Description
    Resume CleanUp
End Function

Private Function IEventLog_FilterEvents(ByVal criteria As String, Optional ByVal options As FilterOptions) As Collection
    Dim results As New Collection
    
    mLock.AcquireLock
    On Error GoTo ErrorHandler
    
    ' フィルタリング処理
    ApplyEventFilters results, criteria, options
    
    RaiseEvent FilterApplied(criteria, results.Count)
    
CleanUp:
    mLock.ReleaseLock
    Set IEventLog_FilterEvents = results
    Exit Function

ErrorHandler:
    LogError "イベントのフィルタリング中にエラーが発生しました: " & Err.Description
    Resume CleanUp
End Function

Private Function IEventLog_CreateBackup(Optional ByVal options As BackupOptions) As String
    Dim backupPath As String
    
    mLock.AcquireLock
    On Error GoTo ErrorHandler
    
    backupPath = CreateEventLogBackup(options)
    If backupPath <> "" Then
        RaiseEvent BackupCreated(backupPath)
        mLastBackupTime = Now
    End If
    
CleanUp:
    mLock.ReleaseLock
    IEventLog_CreateBackup = backupPath
    Exit Function

ErrorHandler:
    LogError "バックアップ作成中にエラーが発生しました: " & Err.Description
    Resume CleanUp
End Function

Private Function IEventLog_GetPerformanceMetrics() As Collection
    Dim metrics As New Collection
    
    With metrics
        .Add mPerformanceMonitor.GetAllMeasurements()
        .Add GetEventLogMetrics()
        .Add GetCacheMetrics()
        .Add GetSecurityMetrics()
    End With
    
    Set IEventLog_GetPerformanceMetrics = metrics
End Function

' プライベートメソッド
Private Function ValidateSecurityContext(ByVal source As String) As Boolean
    ' セキュリティコンテキストの検証
    ' 実装は省略
End Function

Private Sub LogSecurityAlert(ByVal alertType As String, ByVal details As String)
    RaiseEvent SecurityAlert(alertType, details)
    ' 実装は省略
End Sub

Private Function VerifyEventSource(ByVal source As String) As Boolean
    ' イベントソースの検証（キャッシュ利用）
    ' 実装は省略
End Function

Private Function ValidateAndFormatMessage(ByVal message As String) As String
    ' メッセージの検証と整形
    ' 実装は省略
End Function

Private Function WriteEventLogWithRetry(ByVal source As String, _
                                      ByVal message As String, _
                                      ByVal eventType As EventLogType, _
                                      ByVal options As WriteOptions) As Boolean
    ' リトライ機能付きイベントログ書き込み
    ' 実装は省略
End Function

Private Sub PerformPeriodicTasks()
    ' メトリクス収集
    If DateDiff("s", mLastMetricsTime, Now) > METRICS_INTERVAL_MS / 1000 Then
        CollectMetrics
        mLastMetricsTime = Now
    End If
    
    ' バックアップ
    If DateDiff("s", mLastBackupTime, Now) > BACKUP_INTERVAL_MS / 1000 Then
        IEventLog_CreateBackup
    End If
    
    ' クリーンアップ
    If DateDiff("s", mLastCleanupTime, Now) > CLEANUP_INTERVAL_MS / 1000 Then
        PerformCleanup
        mLastCleanupTime = Now
    End If
End Sub

Private Sub CollectMetrics()
    ' メトリクス収集処理
    ' 実装は省略
End Sub

Private Sub PerformCleanup()
    ' クリーンアップ処理
    ' 実装は省略
End Sub

Private Function CreateEventLogBackup(ByVal options As BackupOptions) As String
    ' バックアップ作成処理
    ' 実装は省略
End Function

Private Sub ApplyEventFilters(ByRef results As Collection, _
                            ByVal criteria As String, _
                            ByVal options As FilterOptions)
    ' フィルタリング処理
    ' 実装は省略
End Sub

Private Function GetEventLogMetrics() As Collection
    ' イベントログのメトリクス取得
    ' 実装は省略
End Function

Private Function GetCacheMetrics() As Collection
    ' キャッシュのメトリクス取得
    ' 実装は省略
End Function

Private Function GetSecurityMetrics() As Collection
    ' セキュリティのメトリクス取得
    ' 実装は省略
End Function

' テストサポート機能
#If DEBUG Then
    Public Function ValidateState() As Boolean
        ValidateState = mIsInitialized And _
                       Not (mLock Is Nothing) And _
                       Not (mPerformanceMonitor Is Nothing) And _
                       Not (mSourceCache Is Nothing) And _
                       Not (mEventFilters Is Nothing) And _
                       Not (mSecurityContext Is Nothing)
    End Function
    
    Public Function GetPerformanceMonitor() As clsPerformanceMonitor
        Set GetPerformanceMonitor = mPerformanceMonitor
    End Function
    
    Public Function TestEventLogAccess(ByVal testSource As String) As Boolean
        TestEventLogAccess = IEventLog_WriteToEventLog(testSource, _
                                                      "EventLogImpl Test Message @ " & Now, _
                                                      EVENTLOG_INFORMATION_TYPE)
    End Function
#End If

================
File: core/EventLogLogger.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "EventLogLogger"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements ILogger

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "EventLogLogger"

' ======================
' メンバ変数
' ======================
Private mEventLog As IEventLog
Private mLock As ILock
Private mPerformanceMonitor As IPerformanceMonitor
Private mEventSource As String
Private Const MAX_RETRY_COUNT As Long = 3
Private Const RETRY_DELAY_MS As Long = 1000

' イベントログの種類定数
Private Const EVENTLOG_SUCCESS As Long = 0
Private Const EVENTLOG_ERROR As Long = 1
Private Const EVENTLOG_WARNING As Long = 2
Private Const EVENTLOG_INFORMATION As Long = 4

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    ' 何もしない（依存性は外部から注入）
End Sub

Private Sub Class_Terminate()
    Set mEventLog = Nothing
    Set mLock = Nothing
    Set mPerformanceMonitor = Nothing
End Sub

' ======================
' 公開メソッド
' ======================
Public Sub Initialize(ByVal eventLog As IEventLog, _
                     ByVal lock As ILock, _
                     ByVal performanceMonitor As IPerformanceMonitor, _
                     ByVal eventSource As String)
    Set mEventLog = eventLog
    Set mLock = lock
    Set mPerformanceMonitor = performanceMonitor
    mEventSource = eventSource
End Sub

' ======================
' ILogger実装
' ======================
Private Sub ILogger_Log(ByVal logLevel As String, _
                       ByVal message As String, _
                       Optional ByVal stackTrace As String, _
                       Optional ByVal errorCode As Long)
    If mEventLog Is Nothing Then Exit Sub
    
    mPerformanceMonitor.StartMeasurement "EventLogLogger_Log"
    mLock.AcquireLock
    
    On Error GoTo ErrorHandler
    
    Dim retryCount As Long
    Do While retryCount < MAX_RETRY_COUNT
        If WriteLogToEventLog(logLevel, message, stackTrace, errorCode) Then Exit Do
        retryCount = retryCount + 1
        If retryCount < MAX_RETRY_COUNT Then Sleep RETRY_DELAY_MS
    Loop
    
Cleanup:
    mLock.ReleaseLock
    mPerformanceMonitor.EndMeasurement "EventLogLogger_Log"
    Exit Sub
    
ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "イベントログ出力中にエラーが発生しました: " & Err.Description
        .Category = ECSystem
        .Source = MODULE_NAME
        .ProcedureName = "ILogger_Log"
        .StackTrace = stackTrace
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    Resume Cleanup
End Sub

' ======================
' プライベートメソッド
' ======================
Private Function WriteLogToEventLog(ByVal logLevel As String, _
                                  ByVal message As String, _
                                  ByVal stackTrace As String, _
                                  ByVal errorCode As Long) As Boolean
    On Error Resume Next
    
    ' イベントの種類を決定
    Dim eventType As Long
    Select Case UCase$(logLevel)
        Case "ERROR", "FATAL"
            eventType = EVENTLOG_ERROR
        Case "WARNING"
            eventType = EVENTLOG_WARNING
        Case "SUCCESS"
            eventType = EVENTLOG_SUCCESS
        Case Else
            eventType = EVENTLOG_INFORMATION
    End Select
    
    ' メッセージの組み立て
    Dim logMessage As String
    logMessage = Format$(Now, "yyyy/mm/dd hh:nn:ss") & vbCrLf & _
                 "Level: " & logLevel & vbCrLf & _
                 "Message: " & message
    
    If errorCode <> 0 Then
        logMessage = logMessage & vbCrLf & "Error Code: " & errorCode
    End If
    
    If Len(stackTrace) > 0 Then
        logMessage = logMessage & vbCrLf & "Stack Trace: " & stackTrace
    End If
    
    ' イベントログへの書き込み
    mEventLog.WriteEntry mEventSource, logMessage, eventType
    
    WriteLogToEventLog = (Err.Number = 0)
    On Error GoTo 0
End Function

================
File: core/FileLogger.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "FileLogger"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements ILogger

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "FileLogger"

' ======================
' メンバ変数
' ======================
Private mFileOperations As IFileOperations
Private mLock As ILock
Private mPerformanceMonitor As IPerformanceMonitor
Private mLogFilePath As String
Private Const MAX_RETRY_COUNT As Long = 3
Private Const RETRY_DELAY_MS As Long = 1000

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    ' 何もしない（依存性は外部から注入）
End Sub

Private Sub Class_Terminate()
    Set mFileOperations = Nothing
    Set mLock = Nothing
    Set mPerformanceMonitor = Nothing
End Sub

' ======================
' 公開メソッド
' ======================
Public Sub Initialize(ByVal fileOperations As IFileOperations, _
                     ByVal lock As ILock, _
                     ByVal performanceMonitor As IPerformanceMonitor, _
                     ByVal logFilePath As String)
    Set mFileOperations = fileOperations
    Set mLock = lock
    Set mPerformanceMonitor = performanceMonitor
    mLogFilePath = logFilePath
End Sub

' ======================
' ILogger実装
' ======================
Private Sub ILogger_Log(ByVal logLevel As String, _
                       ByVal message As String, _
                       Optional ByVal stackTrace As String, _
                       Optional ByVal errorCode As Long)
    If mFileOperations Is Nothing Then Exit Sub
    
    mPerformanceMonitor.StartMeasurement "FileLogger_Log"
    mLock.AcquireLock
    
    On Error GoTo ErrorHandler
    
    Dim logMessage As String
    logMessage = BuildLogMessage(logLevel, message, stackTrace, errorCode)
    
    Dim retryCount As Long
    Do While retryCount < MAX_RETRY_COUNT
        If WriteLogToFile(logMessage) Then Exit Do
        retryCount = retryCount + 1
        If retryCount < MAX_RETRY_COUNT Then Sleep RETRY_DELAY_MS
    Loop
    
Cleanup:
    mLock.ReleaseLock
    mPerformanceMonitor.EndMeasurement "FileLogger_Log"
    Exit Sub
    
ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "ファイルログ出力中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "ILogger_Log"
        .StackTrace = stackTrace
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    Resume Cleanup
End Sub

' ======================
' プライベートメソッド
' ======================
Private Function BuildLogMessage(ByVal logLevel As String, _
                               ByVal message As String, _
                               ByVal stackTrace As String, _
                               ByVal errorCode As Long) As String
    BuildLogMessage = Format$(Now, "yyyy/mm/dd hh:nn:ss") & " " & _
                     "[" & logLevel & "] " & _
                     IIf(errorCode <> 0, "(Code: " & errorCode & ") ", "") & _
                     message & _
                     IIf(Len(stackTrace) > 0, vbCrLf & "Stack Trace: " & stackTrace, "")
End Function

Private Function WriteLogToFile(ByVal logMessage As String) As Boolean
    On Error Resume Next
    
    ' ファイルの存在確認と作成
    If Not mFileOperations.FileExists(mLogFilePath) Then
        mFileOperations.CreateFile mLogFilePath
    End If
    
    ' ログメッセージの書き込み
    mFileOperations.AppendText mLogFilePath, logMessage & vbCrLf
    
    WriteLogToFile = (Err.Number = 0)
    On Error GoTo 0
End Function

================
File: core/InvalidInputErrorHandler.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "InvalidInputErrorHandler"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "InvalidInputErrorHandler"

' ======================
' プライベート変数
' ======================
Private mLock As ILock
Private mLogger As ILogger
Private mEmergencyLogger As IEmergencyLogger
Private mUserNotifier As IUserNotifier
Private mValidator As IValidator

Implements IErrorHandler

' =====================
' コンストラクタ
' =====================
Public Function Create( _
    ByVal lock As ILock, _
    ByVal logger As ILogger, _
    ByVal emergencyLogger As IEmergencyLogger, _
    ByVal userNotifier As IUserNotifier, _
    ByVal validator As IValidator _
) As InvalidInputErrorHandler
    
    Dim instance As New InvalidInputErrorHandler
    
    ' 依存性の注入
    With instance
        If lock Is Nothing Then
            Err.Raise 5, "InvalidInputErrorHandler.Create", "ILock is required"
        End If
        Set .Lock = lock
        
        If logger Is Nothing Then
            Err.Raise 5, "InvalidInputErrorHandler.Create", "ILogger is required"
        End If
        Set .Logger = logger
        
        If emergencyLogger Is Nothing Then
            Err.Raise 5, "InvalidInputErrorHandler.Create", "IEmergencyLogger is required"
        End If
        Set .EmergencyLogger = emergencyLogger
        
        If userNotifier Is Nothing Then
            Err.Raise 5, "InvalidInputErrorHandler.Create", "IUserNotifier is required"
        End If
        Set .UserNotifier = userNotifier
        
        If validator Is Nothing Then
            Err.Raise 5, "InvalidInputErrorHandler.Create", "IValidator is required"
        End If
        Set .Validator = validator
    End With
    
    Set Create = instance
End Function

' プロパティ
Public Property Set Lock(ByVal value As ILock)
    Set mLock = value
End Property

Public Property Set Logger(ByVal value As ILogger)
    Set mLogger = value
End Property

Public Property Set EmergencyLogger(ByVal value As IEmergencyLogger)
    Set mEmergencyLogger = value
End Property

Public Property Set UserNotifier(ByVal value As IUserNotifier)
    Set mUserNotifier = value
End Property

Public Property Set Validator(ByVal value As IValidator)
    Set mValidator = value
End Property

' ======================
' IErrorHandler実装
' ======================
Private Function IErrorHandler_HandleError(ByRef errorDetail As ErrorInfo) As Boolean
    Dim proceed As Boolean
    proceed = False  ' デフォルトでは処理を中断
    
    mLock.AcquireLock
    
    ' エラー情報をログに記録
    LogError errorDetail
    
    ' 入力値の自動補正を試みる
    If errorDetail.HasAdditionalInfo("InputValue") And _
       errorDetail.HasAdditionalInfo("InputType") Then
        
        Dim inputValue As Variant
        Dim inputType As String
        inputValue = errorDetail.GetAdditionalInfo("InputValue")
        inputType = errorDetail.GetAdditionalInfo("InputType")
        
        ' 入力値の自動補正を試みる
        Dim correctedValue As Variant
        If TryCorrectInput(inputValue, inputType, correctedValue) Then
            errorDetail.AddAdditionalInfo "CorrectedValue", correctedValue
            errorDetail.RecoveryAttempted = True
            errorDetail.RecoverySuccessful = True
            proceed = True
        End If
    End If
    
    mLock.ReleaseLock
    
    ' ユーザーに通知
    NotifyUser errorDetail, IIf(proceed, vbInformation, vbExclamation)
    
    IErrorHandler_HandleError = proceed
End Function

' ======================
' プライベートメソッド
' ======================
Private Function TryCorrectInput(ByVal value As Variant, ByVal inputType As String, ByRef correctedValue As Variant) As Boolean
    On Error GoTo ErrorHandler
    
    Select Case LCase(inputType)
        Case "number"
            If TryCorrectNumber(value, correctedValue) Then
                TryCorrectInput = True
                Exit Function
            End If
            
        Case "date"
            If TryCorrectDate(value, correctedValue) Then
                TryCorrectInput = True
                Exit Function
            End If
            
        Case "string"
            If TryCorrectString(value, correctedValue) Then
                TryCorrectInput = True
                Exit Function
            End If
    End Select
    
    TryCorrectInput = False
    Exit Function

ErrorHandler:
    TryCorrectInput = False
End Function

Private Function TryCorrectNumber(ByVal value As Variant, ByRef correctedValue As Variant) As Boolean
    On Error GoTo ErrorHandler
    
    ' 数値への変換を試みる
    If IsNumeric(value) Then
        correctedValue = CDbl(value)
        TryCorrectNumber = True
        Exit Function
    End If
    
    ' カンマや空白を除去して再試行
    Dim cleanValue As String
    cleanValue = Replace(Replace(CStr(value), ",", ""), " ", "")
    
    If IsNumeric(cleanValue) Then
        correctedValue = CDbl(cleanValue)
        TryCorrectNumber = True
        Exit Function
    End If
    
    TryCorrectNumber = False
    Exit Function

ErrorHandler:
    TryCorrectNumber = False
End Function

Private Function TryCorrectDate(ByVal value As Variant, ByRef correctedValue As Variant) As Boolean
    On Error GoTo ErrorHandler
    
    ' 日付への変換を試みる
    If IsDate(value) Then
        correctedValue = CDate(value)
        TryCorrectDate = True
        Exit Function
    End If
    
    ' 一般的な日付形式を試行
    Dim formats() As String
    formats = Array("yyyy/mm/dd", "dd/mm/yyyy", "mm/dd/yyyy", "yyyy-mm-dd", "dd-mm-yyyy", "mm-dd-yyyy")
    
    Dim i As Long
    For i = LBound(formats) To UBound(formats)
        If mValidator.IsValidDate(CStr(value), formats(i)) Then
            correctedValue = CDate(value)
            TryCorrectDate = True
            Exit Function
        End If
    Next i
    
    TryCorrectDate = False
    Exit Function

ErrorHandler:
    TryCorrectDate = False
End Function

Private Function TryCorrectString(ByVal value As Variant, ByRef correctedValue As Variant) As Boolean
    On Error GoTo ErrorHandler
    
    ' 文字列の基本的なクリーニング
    Dim cleanValue As String
    cleanValue = Trim(CStr(value))
    
    ' 制御文字の除去
    Dim i As Long
    Dim result As String
    For i = 1 To Len(cleanValue)
        Dim ch As String
        ch = Mid(cleanValue, i, 1)
        If Asc(ch) >= 32 Or ch = vbTab Then
            result = result & ch
        End If
    Next i
    
    If Len(result) > 0 Then
        correctedValue = result
        TryCorrectString = True
    Else
        TryCorrectString = False
    End If
    Exit Function

ErrorHandler:
    TryCorrectString = False
End Function

Private Sub LogError(ByRef errorDetail As ErrorInfo)
    On Error GoTo ErrorHandler
    
    ' 通常のログ出力
    mLogger.Log MODULE_NAME, "無効な入力: " & errorDetail.Description, errorDetail.Code
    
    ' 重要なエラーは緊急ログにも記録
    If errorDetail.Severity >= ESError Then
        mEmergencyLogger.LogEmergency MODULE_NAME, errorDetail.ToString
    End If
    
    Exit Sub

ErrorHandler:
    Dim errDetail As ErrorInfo
    Set errDetail = New ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "入力エラーのログ出力中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "LogError"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
        .Severity = ESError
        Set .InnerError = errorDetail.Clone
    End With
    modError.HandleError errDetail
End Sub

Private Sub NotifyUser(ByRef errorDetail As ErrorInfo, ByVal style As VbMsgBoxStyle)
    On Error GoTo ErrorHandler
    
    Dim message As String
    message = "無効な入力: " & errorDetail.Description
    
    If errorDetail.HasAdditionalInfo("CorrectedValue") Then
        message = message & vbCrLf & vbCrLf & _
                 "推奨される値: " & errorDetail.GetAdditionalInfo("CorrectedValue")
    End If
    
    mUserNotifier.Notify errorDetail, style, "入力エラー"
    Exit Sub

ErrorHandler:
    Dim errDetail As ErrorInfo
    Set errDetail = New ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "入力エラーの通知中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "NotifyUser"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
        .Severity = ESError
        Set .InnerError = errorDetail.Clone
    End With
    modError.HandleError errDetail
End Sub

================
File: core/modAppInitializer.bas
================
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "modAppInitializer"

' ======================
' 初期化状態管理
' ======================
Private Type InitializationState
    ConfigInitialized As Boolean
    LoggingInitialized As Boolean
    DatabaseInitialized As Boolean
    ErrorHandlersInitialized As Boolean
End Type

Private mInitState As InitializationState

' ======================
' 公開メソッド
' ======================
Public Sub InitializeApplication()
    On Error GoTo ErrorHandler
    
    ' 設定の初期化（最初に実行）
    If Not mInitState.ConfigInitialized Then
        modConfig.InitializeModule
        mInitState.ConfigInitialized = True
    End If
    
    ' ロギングシステムの初期化
    If Not mInitState.LoggingInitialized Then
        InitializeLogging
        mInitState.LoggingInitialized = True
    End If
    
    ' データベース関連の初期化
    If Not mInitState.DatabaseInitialized Then
        InitializeDatabase
        mInitState.DatabaseInitialized = True
    End If
    
    ' エラーハンドラーの初期化（最後に実行）
    If Not mInitState.ErrorHandlersInitialized Then
        InitializeErrorHandlers
        mInitState.ErrorHandlersInitialized = True
    End If
    
    Exit Sub

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "アプリケーションの初期化中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "InitializeApplication"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
End Sub

' ======================
' プライベートメソッド
' ======================
Private Sub InitializeLogging()
    On Error GoTo ErrorHandler
    
    ' ロガー設定の初期化
    Dim loggerSettings As DefaultLoggerSettings
    Set loggerSettings = New DefaultLoggerSettings
    loggerSettings.Initialize modConfig.Settings.DatabaseConnectionString
    
    ' デフォルトロガーの設定
    With New clsLogger
        .Configure loggerSettings, modConfig
        .Log MODULE_NAME, "ロギングシステムが初期化されました", 0
    End With
    
    Exit Sub

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "ロギングシステムの初期化中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "InitializeLogging"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
End Sub

Private Sub InitializeDatabase()
    On Error GoTo ErrorHandler
    
    ' データベースユーティリティの初期化
    modDatabaseUtils.InitializeModule
    
    ' データベース接続プールの初期化
    With New ConnectionPool
        ' IDatabaseConfigインターフェースを通じて接続文字列を取得
        .Initialize modConfig
    End With
    
    Exit Sub

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "データベースシステムの初期化中にエラーが発生しました: " & Err.Description
        .Category = ECDatabase
        .Source = MODULE_NAME
        .ProcedureName = "InitializeDatabase"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
End Sub

Private Sub InitializeErrorHandlers()
    On Error GoTo ErrorHandler
    
    ' エラーハンドラーの初期化
    ' この時点で設定とロギングは初期化済みであることが保証される
    With DatabaseConnectionErrorHandler.Create(modConfig)
        ' 必要な初期化処理があれば実行
    End With
    
    Exit Sub

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "エラーハンドラーの初期化中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "InitializeErrorHandlers"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
End Sub

================
File: core/modConfig.bas
================
Option Explicit
Implements IDatabaseConfig

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "modConfig"

' ======================
' 定数定義
' ======================
Private Const CONFIG_FILE_PATH As String = "config.ini"
Private Const MAX_BUFFER_SIZE As Long = 1024
Private Const DEFAULT_SECTION As String = "Settings"

' ======================
' 型定義
' ======================
Private Type ConfigurationSettings
    LogLevel As LogLevel
    LogDestination As LogDestination
    LogFilePath As String
    DatabaseConnectionString As String
    SecurityLevel As SecurityLevel
    PerformanceMonitoringEnabled As Boolean
    DiagnosticsEnabled As Boolean
    EncryptionKey As String
    AutoSave As Boolean
End Type

' ======================
' プライベート変数
' ======================
Private settings As ConfigurationSettings
Private settingsLock As clsLock
Private performanceMonitor As clsPerformanceMonitor
Private isInitialized As Boolean
Private isDirty As Boolean

' ======================
' 初期化・終了処理
' ======================
Public Sub InitializeModule()
    If isInitialized Then Exit Sub
    
    Set settingsLock = New clsLock
    Set performanceMonitor = New clsPerformanceMonitor
    
    LoadDefaultSettings
    LoadConfigurationFromFile
    
    isInitialized = True
    
    ' パフォーマンスモニタリング開始
    If settings.PerformanceMonitoringEnabled Then
        performanceMonitor.StartMeasurement "ConfigInitialization"
    End If
End Sub

Public Sub TerminateModule()
    If Not isInitialized Then Exit Sub
    
    ' パフォーマンスモニタリング終了
    If settings.PerformanceMonitoringEnabled Then
        performanceMonitor.EndMeasurement "ConfigInitialization"
    End If
    
    ' 変更された設定を保存
    If isDirty And settings.AutoSave Then
        SaveConfigurationToFile
    End If
    Set settingsLock = Nothing
    Set performanceMonitor = Nothing
    isInitialized = False
End Sub

' ======================
' 公開プロパティ
' ======================
Public Property Get Settings() As ConfigurationSettings
    If Not isInitialized Then InitializeModule
    
    settingsLock.AcquireLock
    Settings = settings
    settingsLock.ReleaseLock
End Property

Public Property Let Settings(ByVal Value As ConfigurationSettings)
    If Not isInitialized Then InitializeModule
    
    settingsLock.AcquireLock
    settings = Value
    settingsLock.ReleaseLock
    
    isDirty = True
    If settings.AutoSave Then
        SaveConfigurationToFile
    End If
End Property

' ======================
' 公開メソッド
' ======================
Public Function GetConfigValue(ByVal section As String, ByVal key As String, _
                             Optional ByVal defaultValue As String = "") As String
    If Not isInitialized Then InitializeModule
    
    Dim buffer As String
    Dim result As Long
    
    buffer = String$(MAX_BUFFER_SIZE, 0)
    result = modWindowsAPI.GetPrivateProfileString(section, key, defaultValue, buffer, Len(buffer), GetConfigFilePath())
    
    If result > 0 Then
        GetConfigValue = Left$(buffer, result)
    Else
        GetConfigValue = defaultValue
    End If
End Function

Public Function SetConfigValue(ByVal section As String, ByVal key As String, _
                             ByVal Value As String) As Boolean
    If Not isInitialized Then InitializeModule
    
    Dim result As Boolean
    result = (modWindowsAPI.WritePrivateProfileString(section, key, Value, GetConfigFilePath()) <> 0)
    
    If result Then
        isDirty = True
    End If
    SetConfigValue = result
End Function

' ======================
' プライベートメソッド
' ======================
Private Sub LoadDefaultSettings()
    With settings
        .LogLevel = LevelInfo
        .LogDestination = DestFile
        .LogFilePath = DEFAULT_LOG_FILE
        .SecurityLevel = LevelMedium
        .PerformanceMonitoringEnabled = True
        .DiagnosticsEnabled = True
        .AutoSave = True
    End With
End Sub

Private Sub LoadConfigurationFromFile()
    On Error GoTo ErrorHandler
    
    With settings
        ' ログ設定
        .LogLevel = CInt(GetConfigValue(DEFAULT_SECTION, "LogLevel", CStr(LevelInfo)))
        .LogDestination = CInt(GetConfigValue(DEFAULT_SECTION, "LogDestination", CStr(DestFile)))
        .LogFilePath = GetConfigValue(DEFAULT_SECTION, "LogFilePath", DEFAULT_LOG_FILE)
        
        ' データベース設定
        .DatabaseConnectionString = GetConfigValue("Database", "ConnectionString", "")
        
        ' セキュリティ設定
        .SecurityLevel = CInt(GetConfigValue("Security", "Level", CStr(LevelMedium)))
        .EncryptionKey = GetConfigValue("Security", "EncryptionKey", "")
        
        ' 診断設定
        .PerformanceMonitoringEnabled = CBool(GetConfigValue("Diagnostics", "PerformanceMonitoring", "True"))
        .DiagnosticsEnabled = CBool(GetConfigValue("Diagnostics", "Enabled", "True"))
        
        ' 自動保存設定
        .AutoSave = CBool(GetConfigValue(DEFAULT_SECTION, "AutoSave", "True"))
    End With
    
    Exit Sub

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrFileInvalidFormat
        .Description = "設定ファイルの読み込み中にエラーが発生しました: " & Err.Description
        .Category = ECFileIO
        .Source = MODULE_NAME
        .ProcedureName = "LoadConfigurationFromFile"
        .StackTrace = GetCurrentCallStack
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    Resume Next
End Sub

Private Sub SaveConfigurationToFile()
    On Error GoTo ErrorHandler
    
    With settings
        ' ログ設定
        SetConfigValue DEFAULT_SECTION, "LogLevel", CStr(.LogLevel)
        SetConfigValue DEFAULT_SECTION, "LogDestination", CStr(.LogDestination)
        SetConfigValue DEFAULT_SECTION, "LogFilePath", .LogFilePath
        
        ' データベース設定
        SetConfigValue "Database", "ConnectionString", .DatabaseConnectionString
        
        ' セキュリティ設定
        SetConfigValue "Security", "Level", CStr(.SecurityLevel)
        SetConfigValue "Security", "EncryptionKey", .EncryptionKey
        
        ' 診断設定
        SetConfigValue "Diagnostics", "PerformanceMonitoring", CStr(.PerformanceMonitoringEnabled)
        SetConfigValue "Diagnostics", "Enabled", CStr(.DiagnosticsEnabled)
        
        ' 自動保存設定
        SetConfigValue DEFAULT_SECTION, "AutoSave", CStr(.AutoSave)
    End With
    
    isDirty = False
    Exit Sub

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrFileAccessDenied
        .Description = "設定ファイルの保存中にエラーが発生しました: " & Err.Description
        .Category = ECFileIO
        .Source = MODULE_NAME
        .ProcedureName = "SaveConfigurationToFile"
        .StackTrace = GetCurrentCallStack
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    Resume Next
End Sub

Private Function GetConfigFilePath() As String
    GetConfigFilePath = App.Path & "\" & CONFIG_FILE_PATH
End Function

' ======================
' 設定管理
' ======================
Public Sub SaveChanges()
    If Not isInitialized Then InitializeModule
    
    If isDirty Then
        SaveConfigurationToFile
    End If
End Sub

Public Property Get HasUnsavedChanges() As Boolean
    HasUnsavedChanges = isDirty
End Property

Public Property Let AutoSave(ByVal Value As Boolean)
    settings.AutoSave = Value
End Property

' ======================
' ヘルパー関数
' ======================
Private Function GetCurrentCallStack() As String
    Dim callStack As New clsCallStack
    
    ' 現在のプロシージャ情報をスタックに追加
    callStack.Push MODULE_NAME, "GetCurrentCallStack"
    
    ' スタックトレースを取得
    GetCurrentCallStack = callStack.StackTrace
End Function

' ======================
' IDatabaseConfig インターフェースの実装
' ======================
Private Function IDatabaseConfig_GetConnectionString() As String
    If Not isInitialized Then InitializeModule
    
    IDatabaseConfig_GetConnectionString = Me.Settings.DatabaseConnectionString
End Function

' ======================
' テストサポート機能
' ======================
#If DEBUG Then
    Public Sub ResetModule()
        TerminateModule
        InitializeModule
    End Sub
    
    Public Function ValidateSettings() As Boolean
        With settings
            ValidateSettings = _
                .LogLevel >= LevelDebug And .LogLevel <= LevelFatal And _
                .LogDestination >= DestNone And .LogDestination <= DestEmail And _
                .SecurityLevel >= LevelLow And .SecurityLevel <= LevelExtreme
        End With
    End Function
#End If

================
File: core/modError.bas
================
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "modError"

' ======================
' プライベート変数
' ======================
Private errorHandlers As Collection
Private isInitialized As Boolean
Private mLock As clsLock
Private Const MAX_ERROR_RECURSION As Long = 3
Private errorRecursionCount As Long
Private mPerformanceMonitor As clsPerformanceMonitor

' ======================
' 初期化・終了処理
' ======================
Public Property Get IsInitialized() As Boolean
    IsInitialized = isInitialized
End Property

Public Sub InitializeModule()
    If isInitialized Then Exit Sub
    
    Set errorHandlers = New Collection
    Set mLock = New clsLock
    Set mPerformanceMonitor = New clsPerformanceMonitor
    errorRecursionCount = 0
    RegisterDefaultHandlers
    
    isInitialized = True
End Sub

Public Sub TerminateModule()
    If Not isInitialized Then Exit Sub
    
    Set errorHandlers = Nothing
    Set mLock = Nothing
    Set mPerformanceMonitor = Nothing
    errorRecursionCount = 0
    isInitialized = False
End Sub

' ======================
' エラーハンドリング
' ======================
Private Type ErrorContext
    Info As ErrorInfo
    Handler As IErrorHandler
    IsLocked As Boolean
    IsEmergency As Boolean
End Type

Private Function TryHandleError(ByRef context As ErrorContext) As Boolean
    On Error GoTo ErrorHandler
    
    ' パフォーマンス計測開始
    If Not mPerformanceMonitor Is Nothing Then
        mPerformanceMonitor.StartMeasurement "TryHandleError"
    End If
    
    ' エラー情報の補完
    With context.Info
        If .OccurredAt = #12:00:00 AM# Then .OccurredAt = Now
        If .Category = 0 Then .Category = modErrorCodes.GetErrorCategory(.Code)
        If Len(.StackTrace) = 0 Then .StackTrace = modStackTrace.GetStackTrace()
    End With
    
    ' エラーハンドラの取得
    Set context.Handler = GetErrorHandler(context.Info.Code)
    
    ' パフォーマンス計測終了
    If Not mPerformanceMonitor Is Nothing Then
        mPerformanceMonitor.EndMeasurement "TryHandleError"
    End If
    
    TryHandleError = True
    Exit Function
    
ErrorHandler:
    If Not mPerformanceMonitor Is Nothing Then
        mPerformanceMonitor.EndMeasurement "TryHandleError"
    End If
    TryHandleError = False
End Function

Public Sub HandleError(ByRef errInfo As ErrorInfo)
    If Not isInitialized Then InitializeModule
    
    ' パフォーマンス計測開始
    If Not mPerformanceMonitor Is Nothing Then
        mPerformanceMonitor.StartMeasurement "HandleError"
    End If
    
    Dim context As ErrorContext
    context.Info = errInfo
    
    ' エラーの再帰を防ぐ
    errorRecursionCount = errorRecursionCount + 1
    If errorRecursionCount > MAX_ERROR_RECURSION Then
        EmergencyErrorLog "エラー処理の再帰回数が上限を超えました。処理を中断します。"
        context.IsEmergency = True
        GoTo Cleanup
    End If

    ' ロック取得
    On Error Resume Next
    mLock.AcquireLock
    context.IsLocked = (Err.Number = 0)
    On Error GoTo 0

    ' エラー処理のメイン部分
    If TryHandleError(context) Then
        If Not context.Handler Is Nothing Then
            Dim proceed As Boolean
            proceed = context.Handler.HandleError(context.Info)
            
            ' エラー処理の結果に基づいて処理を継続するかどうかを判断
            If Not proceed Then
                context.IsEmergency = True
                GoTo Cleanup
            End If
        End If
    Else
        context.IsEmergency = True
    End If

Cleanup:
    ' クリーンアップ処理
    If context.IsLocked Then
        mLock.ReleaseLock
    End If

    If context.IsEmergency Then
        EmergencyErrorLog "HandleError中にエラーが発生しました: " & Err.Description
    End If
    
    ' パフォーマンス計測終了
    If Not mPerformanceMonitor Is Nothing Then
        mPerformanceMonitor.EndMeasurement "HandleError"
    End If

    errorRecursionCount = errorRecursionCount - 1
End Sub

' ======================
' プライベートメソッド
' ======================
Private Sub RegisterDefaultHandlers()
    ' データベース接続エラー用ハンドラ
    RegisterErrorHandler ErrDbConnectionFailed, New DatabaseConnectionErrorHandler
    
    ' ファイル不在エラー用ハンドラ
    RegisterErrorHandler ErrFileNotFound, New FileNotFoundErrorHandler
    
    ' 入力検証エラー用ハンドラ
    RegisterErrorHandler ErrInvalidInput, New InvalidInputErrorHandler
End Sub

Private Function GetErrorHandler(ByVal errorCode As ErrorCode) As IErrorHandler
    Dim handler As IErrorHandler
    
    On Error Resume Next
    Set handler = errorHandlers(CStr(errorCode))
    If Err.Number <> 0 Then
        ' 該当するハンドラが見つからない場合は、エラーカテゴリに基づいてデフォルトハンドラを返す
        Set handler = GetDefaultHandlerForCategory(modErrorCodes.GetErrorCategory(errorCode))
    End If
    On Error GoTo 0
    
    Set GetErrorHandler = handler
End Function

Private Function GetDefaultHandlerForCategory(ByVal category As ErrorCodeCategory) As IErrorHandler
    Select Case category
        Case ECDatabase
            Set GetDefaultHandlerForCategory = New DatabaseConnectionErrorHandler
        Case ECFileIO
            Set GetDefaultHandlerForCategory = New FileNotFoundErrorHandler
        Case Else
            Set GetDefaultHandlerForCategory = New InvalidInputErrorHandler
    End Select
End Function

' ======================
' パブリックメソッド
' ======================
Public Sub RegisterErrorHandler(ByVal errorCode As ErrorCode, ByVal handler As IErrorHandler)
    If Not isInitialized Then InitializeModule
    
    mLock.AcquireLock
    On Error Resume Next
    errorHandlers.Remove CStr(errorCode)
    On Error GoTo 0
    
    errorHandlers.Add handler, CStr(errorCode)
    mLock.ReleaseLock
End Sub

Public Sub UnregisterErrorHandler(ByVal errorCode As ErrorCode)
    If Not isInitialized Then Exit Sub
    
    mLock.AcquireLock
    On Error Resume Next
    errorHandlers.Remove CStr(errorCode)
    On Error GoTo 0
    mLock.ReleaseLock
End Sub

' ======================
' テストサポート機能
' ======================
#If DEBUG Then
    ' === エラー処理テスト ===
    Public Sub TestErrorHandling()
        Dim testError As ErrorInfo
        With testError
            .Code = ErrUnexpected
            .Description = "テスト用エラー"
            .Category = ECGeneral
            .Source = MODULE_NAME
            .ProcedureName = "TestErrorHandling"
            .StackTrace = ""
            .OccurredAt = Now
        End With
        
        mPerformanceMonitor.StartMeasurement "ErrorHandlingTest"
        HandleError testError
        mPerformanceMonitor.EndMeasurement "ErrorHandlingTest"
        
        Debug.Print "テスト実行時間: " & _
                   mPerformanceMonitor.GetMeasurement("ErrorHandlingTest")
    End Sub
    
    ' === 再帰制御テスト ===
    Public Sub TestErrorRecursion()
        Dim i As Long
        For i = 1 To MAX_ERROR_RECURSION + 1
            Dim testError As ErrorInfo
            With testError
                .Code = ErrUnexpected
                .Description = "再帰テスト" & i
                .Category = ECGeneral
                .Source = MODULE_NAME
                .ProcedureName = "TestErrorRecursion"
                .StackTrace = ""
                .OccurredAt = Now
            End With
            
            mPerformanceMonitor.StartMeasurement "RecursionTest_" & i
            HandleError testError
            mPerformanceMonitor.EndMeasurement "RecursionTest_" & i
            
            Debug.Print "再帰テスト" & i & "実行時間: " & _
                       mPerformanceMonitor.GetMeasurement("RecursionTest_" & i)
        Next i
    End Sub
    
    ' === リソース管理テスト ===
    Public Sub TestResourceManagement()
        Dim lockCountBefore As Long
        lockCountBefore = GetActiveLockCount()
        
        Dim testError As ErrorInfo
        With testError
            .Code = ErrUnexpected
            .Description = "リソース管理テスト"
            .Category = ECGeneral
            .Source = MODULE_NAME
            .ProcedureName = "TestResourceManagement"
            .StackTrace = ""
            .OccurredAt = Now
        End With
        
        mPerformanceMonitor.StartMeasurement "ResourceTest"
        
        On Error Resume Next
        HandleError testError
        
        mPerformanceMonitor.EndMeasurement "ResourceTest"
        
        Dim lockCountAfter As Long
        lockCountAfter = GetActiveLockCount()
        
        Debug.Print "リソース管理テスト実行時間: " & _
                   mPerformanceMonitor.GetMeasurement("ResourceTest")
        
        If lockCountBefore <> lockCountAfter Then
            Debug.Print "警告: リソースリークの可能性があります"
            Debug.Print "ロック数 Before: " & lockCountBefore & _
                       ", After: " & lockCountAfter
        End If
    End Sub
    
    ' === パフォーマンスレポート ===
    Public Function GetPerformanceReport() As String
        If Not mPerformanceMonitor Is Nothing Then
            GetPerformanceReport = mPerformanceMonitor.GetAllMeasurements()
        Else
            GetPerformanceReport = "パフォーマンスモニターが初期化されていません。"
        End If
    End Function
    
    ' === 内部状態取得 ===
    Private Function GetRegisteredHandlerCount() As Long
        mLock.AcquireLock
        GetRegisteredHandlerCount = errorHandlers.Count
        mLock.ReleaseLock
    End Function
    
    Private Sub ClearHandlers()
        mLock.AcquireLock
        Set errorHandlers = New Collection
        mLock.ReleaseLock
    End Sub
    
    Private Sub ResetModule()
        TerminateModule
        InitializeModule
    End Sub
    
    Private Function GetActiveLockCount() As Long
        Dim result As Long
        result = 0
        
        If Not mLock Is Nothing Then
            If mLock.IsLocked Then
                result = result + 1
            End If
        End If
        
        GetActiveLockCount = result
    End Function
#End If

' ======================
' エラーログ出力
' ======================
Private Sub EmergencyErrorLog(ByVal message As String)
    On Error Resume Next
    
    ' イベントログへの出力を試みる
    WriteToEventLog message
    
    ' ファイルへの出力を試みる
    WriteToEmergencyFile message
End Sub

Private Sub WriteToEventLog(ByVal message As String)
    ' Windowsイベントログへの出力
    modWindowsAPI.WriteToEventLog "PDI Error", message, EVENTLOG_ERROR_TYPE
End Sub

Private Sub WriteToEmergencyFile(ByVal message As String)
    Dim fso As Object
    Set fso = CreateObject("Scripting.FileSystemObject")
    fso.OpenTextFile(Environ$("TEMP") & "\PDI_emergency.log", 8, True).WriteLine Now & ": " & message
End Sub

================
File: core/modErrorCodes.bas
================
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "modErrorCodes"

' ======================
' エラーコード定義
' ======================
Public Enum ErrorCodeCategory
    ECGeneral = 1000    ' 一般エラー
    ECFileIO = 2000     ' ファイル操作エラー
    ECDatabase = 3000   ' データベースエラー
    ECNetwork = 4000    ' ネットワークエラー
    ECSystem = 5000     ' システムエラー
    ECSecurity = 6000   ' セキュリティエラー
End Enum

Public Enum ErrorCode
    ' 一般エラー (1000-1999)
    ErrUnexpected = vbObjectError + 1000             ' 予期せぬエラー
    ErrInvalidInput = vbObjectError + 1001           ' 無効な入力
    
    ' ファイル操作エラー (2000-2999)
    ErrFileNotFound = vbObjectError + 2000           ' ファイルが見つからない
    ErrFileInvalidFormat = vbObjectError + 2001      ' ファイル形式エラー
    ErrFileAccessDenied = vbObjectError + 2002       ' アクセス拒否
    
    ' データベースエラー (3000-3999)
    ErrDbConnectionFailed = vbObjectError + 3000     ' データベース接続エラー
    ErrDbQueryFailed = vbObjectError + 3001         ' データベースクエリエラー
    
    ' ネットワークエラー (4000-4999)
    ErrNetworkError = vbObjectError + 4000          ' ネットワークエラー
    ErrNetworkTimeout = vbObjectError + 4001        ' タイムアウト
    
    ' システムエラー (5000-5999)
    ErrSystemOutOfMemory = vbObjectError + 5000     ' メモリ不足
    ErrSystemResourceUnavailable = vbObjectError + 5001 ' リソース利用不可
    
    ' セキュリティエラー (6000-6999)
    ErrSecurityAccessDenied = vbObjectError + 6000  ' セキュリティアクセス拒否
    ErrSecurityInvalidCredentials = vbObjectError + 6001 ' 無効な認証情報
    
    ' 暗号化エラー (7000-7099)
    ErrCryptoProviderInitFailed = vbObjectError + 7000  ' 暗号化プロバイダーの初期化失敗
    ErrCryptoNotInitialized = vbObjectError + 7001      ' 暗号化プロバイダー未初期化
    ErrCryptoKeyNotSpecified = vbObjectError + 7002     ' 暗号化キー未指定
    ErrCryptoHashCreateFailed = vbObjectError + 7003    ' ハッシュオブジェクト作成失敗
    ErrCryptoHashDataFailed = vbObjectError + 7004      ' データハッシュ化失敗
    ErrCryptoKeyDerivationFailed = vbObjectError + 7005 ' キー生成失敗
    ErrCryptoEncryptionFailed = vbObjectError + 7006    ' 暗号化失敗
    ErrCryptoDecryptionFailed = vbObjectError + 7007    ' 復号化失敗
    ErrCryptoInvalidKeyLength = vbObjectError + 7008    ' 無効なキー長
    
    ' ロック関連エラー (7100-7199)
    ErrLockMutexCreateFailed = vbObjectError + 7100     ' Mutexの作成失敗
    ErrLockAcquireFailed = vbObjectError + 7101         ' ロックの取得失敗
    ErrLockReleaseFailed = vbObjectError + 7102         ' ロックの解放失敗
    
    ' スタックトレース関連エラー (7200-7299)
    ErrStackTracePushFailed = vbObjectError + 7200      ' スタックトレースへの追加失敗
    ErrStackTracePopFailed = vbObjectError + 7201       ' スタックトレースからの取得失敗
    ErrStackTraceGetFailed = vbObjectError + 7202       ' スタックトレース文字列の生成失敗
    
    ' イベントログ関連エラー (7300-7399)
    ErrEventLogCreateFailed = vbObjectError + 7300      ' イベントログオブジェクトの作成失敗
    ErrEventLogWriteFailed = vbObjectError + 7301       ' イベントログへの書き込み失敗
    ErrEventLogSourceInvalid = vbObjectError + 7302     ' イベントログソースが無効
End Enum

' ======================
' エラーカテゴリ取得
' ======================
Public Function GetErrorCategory(ByVal errCode As ErrorCode) As ErrorCodeCategory
    If errCode >= ECGeneral And errCode < ECFileIO Then
        GetErrorCategory = ECGeneral
    ElseIf errCode >= ECFileIO And errCode < ECDatabase Then
        GetErrorCategory = ECFileIO
    ElseIf errCode >= ECDatabase And errCode < ECNetwork Then
        GetErrorCategory = ECDatabase
    ElseIf errCode >= ECNetwork And errCode < ECSystem Then
        GetErrorCategory = ECNetwork
    ElseIf errCode >= ECSystem And errCode < ECSecurity Then
        GetErrorCategory = ECSystem
    ElseIf errCode >= ECSecurity Then
        GetErrorCategory = ECSecurity
    End If
End Function

================
File: core/PerformanceCounterImpl.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "PerformanceCounterImpl"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements IPerformanceCounter

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "PerformanceCounterImpl"

' ======================
' メンバ変数
' ======================
Private mIsInitialized As Boolean
Private mFrequency As Currency
Private mLock As clsLock
Private mIsHighResolutionSupported As Boolean

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    Set mLock = New clsLock
    
    ' 高分解能タイマーのサポートを確認
    mIsHighResolutionSupported = CheckHighResolutionSupport()
    If mIsHighResolutionSupported Then
        ' 周波数の取得
        If Not modWindowsAPI.QueryPerformanceFrequency(mFrequency) Then
            LogError "パフォーマンスカウンターの周波数取得に失敗しました。"
            mIsHighResolutionSupported = False
        End If
    End If
    
    mIsInitialized = True
End Sub

Private Sub Class_Terminate()
    Set mLock = Nothing
    mIsInitialized = False
End Sub

' ======================
' IPerformanceCounter実装
' ======================
Private Function IPerformanceCounter_QueryPerformanceCounter(ByRef performanceCount As Currency) As Boolean
    If Not mIsInitialized Then Exit Function
    If Not mIsHighResolutionSupported Then Exit Function
    
    mLock.AcquireLock
    
    On Error GoTo ErrorHandler
    
    IPerformanceCounter_QueryPerformanceCounter = modWindowsAPI.QueryPerformanceCounter(performanceCount)
    
CleanUp:
    mLock.ReleaseLock
    Exit Function

ErrorHandler:
    LogError "パフォーマンスカウンターの値取得中にエラーが発生しました: " & Err.Description
    IPerformanceCounter_QueryPerformanceCounter = False
    Resume CleanUp
End Function

Private Function IPerformanceCounter_QueryPerformanceFrequency(ByRef frequency As Currency) As Boolean
    If Not mIsInitialized Then Exit Function
    If Not mIsHighResolutionSupported Then Exit Function
    
    mLock.AcquireLock
    
    On Error GoTo ErrorHandler
    
    ' キャッシュされた周波数を返す
    frequency = mFrequency
    IPerformanceCounter_QueryPerformanceFrequency = True
    
CleanUp:
    mLock.ReleaseLock
    Exit Function

ErrorHandler:
    LogError "パフォーマンスカウンターの周波数取得中にエラーが発生しました: " & Err.Description
    IPerformanceCounter_QueryPerformanceFrequency = False
    Resume CleanUp
End Function

' ======================
' プライベートメソッド
' ======================
Private Function CheckHighResolutionSupport() As Boolean
    On Error GoTo ErrorHandler
    
    Dim counter As Currency
    Dim frequency As Currency
    
    ' カウンターと周波数の取得を試みる
    CheckHighResolutionSupport = (modWindowsAPI.QueryPerformanceCounter(counter) <> 0) And _
                                (modWindowsAPI.QueryPerformanceFrequency(frequency) <> 0)
    Exit Function

ErrorHandler:
    CheckHighResolutionSupport = False
End Function

Private Sub LogError(ByVal message As String)
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = ErrUnexpected
        .Description = message
        .Category = ECSystem
        .Source = MODULE_NAME
        .ProcedureName = "Unknown"  ' スタックトレースから取得可能
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errInfo
End Sub

' ======================
' パブリックメソッド
' ======================
Public Function GetResolution() As Double
    ' 分解能を秒単位で返す
    If mIsHighResolutionSupported And mFrequency <> 0 Then
        GetResolution = 1 / CDbl(mFrequency)
    Else
        GetResolution = 0
    End If
End Function

' ======================
' テストサポート機能
' ======================
#If DEBUG Then
    Public Function ValidateState() As Boolean
        ValidateState = mIsInitialized And _
                       Not (mLock Is Nothing) And _
                       mIsHighResolutionSupported And _
                       mFrequency > 0
    End Function
    
    Public Function GetFrequency() As Currency
        GetFrequency = mFrequency
    End Function
    
    Public Function IsHighResolutionSupported() As Boolean
        IsHighResolutionSupported = mIsHighResolutionSupported
    End Function
    
    Public Function TestTimerConsistency() As Boolean
        ' タイマーの一貫性をテスト
        Dim counter1 As Currency
        Dim counter2 As Currency
        
        If Not IPerformanceCounter_QueryPerformanceCounter(counter1) Then
            TestTimerConsistency = False
            Exit Function
        End If
        
        If Not IPerformanceCounter_QueryPerformanceCounter(counter2) Then
            TestTimerConsistency = False
            Exit Function
        End If
        
        ' 2回目のカウンターが1回目より大きいことを確認
        TestTimerConsistency = (counter2 >= counter1)
    End Function
#End If

================
File: core/PerformanceMonitorImpl.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "PerformanceMonitorImpl"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements IPerformanceMonitor

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "PerformanceMonitorImpl"

' ======================
' 型定義
' ======================
Private Type PerformanceData
    StartTime As Currency
    EndTime As Currency
    ElapsedTime As Double
    MemoryUsage As Currency
    PeakMemoryUsage As Currency
    Description As String
End Type

Private Type PROCESS_MEMORY_COUNTERS
    cb As Long
    PageFaultCount As Long
    PeakWorkingSetSize As Currency
    WorkingSetSize As Currency
    QuotaPeakPagedPoolUsage As Currency
    QuotaPagedPoolUsage As Currency
    QuotaPeakNonPagedPoolUsage As Currency
    QuotaNonPagedPoolUsage As Currency
    PagefileUsage As Currency
    PeakPagefileUsage As Currency
End Type

' ======================
' メンバ変数
' ======================
Private mFrequency As Currency
Private mMeasurements As Collection
Private mIsEnabled As Boolean
Private mCurrentOperation As String
Private mLock As clsLock
Private mConfig As IAppConfig

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    modWindowsAPI.QueryPerformanceFrequency mFrequency
    Set mMeasurements = New Collection
    Set mLock = New clsLock
    Set mConfig = modConfig.GetAppConfig()
    mIsEnabled = mConfig.GetSetting("PerformanceMonitorEnabled", True)
End Sub

Private Sub Class_Terminate()
    Set mMeasurements = Nothing
    Set mLock = Nothing
    Set mConfig = Nothing
End Sub

' ======================
' IPerformanceMonitor実装
' ======================
Private Sub IPerformanceMonitor_Start(ByVal measurementName As String)
    If Not mIsEnabled Then Exit Sub
    
    mLock.AcquireLock
    On Error GoTo ErrorHandler
    
    Dim perfData As PerformanceData
    Dim memInfo As PROCESS_MEMORY_COUNTERS
    
    ' 現在の時刻を取得
    modWindowsAPI.QueryPerformanceCounter perfData.StartTime
    
    ' メモリ使用量を取得
    memInfo.cb = LenB(memInfo)
    modWindowsAPI.GetProcessMemoryInfo modWindowsAPI.GetCurrentProcess(), memInfo, LenB(memInfo)
    perfData.MemoryUsage = memInfo.WorkingSetSize
    
    perfData.Description = measurementName
    mCurrentOperation = measurementName
    
    ' コレクションに追加
    mMeasurements.Add perfData, measurementName
    
    mLock.ReleaseLock
    Exit Sub

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "パフォーマンス測定の開始中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "IPerformanceMonitor_Start"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    mLock.ReleaseLock
End Sub

Private Sub IPerformanceMonitor_Stop(ByVal measurementName As String)
    If Not mIsEnabled Then Exit Sub
    
    mLock.AcquireLock
    On Error GoTo ErrorHandler
    
    Dim perfData As PerformanceData
    Dim memInfo As PROCESS_MEMORY_COUNTERS
    Dim i As Long
    
    ' 対応する測定データを検索
    For i = mMeasurements.Count To 1 Step -1
        If TypeName(mMeasurements(i)) = "PerformanceData" Then
            perfData = mMeasurements(i)
            If perfData.Description = measurementName Then
                ' 終了時刻を記録
                modWindowsAPI.QueryPerformanceCounter perfData.EndTime
                
                ' メモリ情報を更新
                memInfo.cb = LenB(memInfo)
                modWindowsAPI.GetProcessMemoryInfo modWindowsAPI.GetCurrentProcess(), memInfo, LenB(memInfo)
                perfData.PeakMemoryUsage = memInfo.PeakWorkingSetSize
                
                ' 経過時間を計算（ミリ秒単位）
                perfData.ElapsedTime = (perfData.EndTime - perfData.StartTime) * 1000 / mFrequency
                
                ' コレクションを更新
                mMeasurements.Remove i
                mMeasurements.Add perfData, measurementName
                Exit For
            End If
        End If
    Next i
    
    mLock.ReleaseLock
    Exit Sub

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "パフォーマンス測定の終了中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "IPerformanceMonitor_Stop"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    mLock.ReleaseLock
End Sub

Private Function IPerformanceMonitor_GetMeasurement(ByVal measurementName As String) As Double
    If Not mIsEnabled Then Exit Function
    
    mLock.AcquireLock
    On Error GoTo ErrorHandler
    
    Dim perfData As PerformanceData
    perfData = mMeasurements(measurementName)
    IPerformanceMonitor_GetMeasurement = perfData.ElapsedTime
    
    mLock.ReleaseLock
    Exit Function

ErrorHandler:
    If Err.Number = 5 Then ' Item not found in collection
        IPerformanceMonitor_GetMeasurement = 0
    Else
        Dim errDetail As ErrorInfo
        With errDetail
            .Code = ErrUnexpected
            .Description = "パフォーマンス測定データの取得中にエラーが発生しました: " & Err.Description
            .Category = ECGeneral
            .Source = MODULE_NAME
            .ProcedureName = "IPerformanceMonitor_GetMeasurement"
            .StackTrace = modStackTrace.GetStackTrace()
            .OccurredAt = Now
        End With
        modError.HandleError errDetail
    End If
    mLock.ReleaseLock
End Function

Private Function IPerformanceMonitor_GetAllMeasurements() As Variant
    If Not mIsEnabled Then Exit Function
    
    mLock.AcquireLock
    On Error GoTo ErrorHandler
    
    Dim results() As Double
    ReDim results(0 To mMeasurements.Count - 1)
    
    Dim i As Long
    Dim perfData As PerformanceData
    For i = 1 To mMeasurements.Count
        perfData = mMeasurements(i)
        results(i - 1) = perfData.ElapsedTime
    Next i
    
    IPerformanceMonitor_GetAllMeasurements = results
    
    mLock.ReleaseLock
    Exit Function

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "パフォーマンス測定データの一括取得中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "IPerformanceMonitor_GetAllMeasurements"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    mLock.ReleaseLock
End Function

Private Sub IPerformanceMonitor_Clear()
    mLock.AcquireLock
    Set mMeasurements = New Collection
    mLock.ReleaseLock
End Sub

Private Property Get IPerformanceMonitor_IsEnabled() As Boolean
    IPerformanceMonitor_IsEnabled = mIsEnabled
End Property

Private Sub IPerformanceMonitor_Enable()
    mIsEnabled = True
    mConfig.SetSetting "PerformanceMonitorEnabled", True
End Sub

Private Sub IPerformanceMonitor_Disable()
    mIsEnabled = False
    mConfig.SetSetting "PerformanceMonitorEnabled", False
End Sub

' ======================
' パブリックメソッド
' ======================
Public Function GetDetailedMeasurement(ByVal measurementName As String) As String
    If Not mIsEnabled Then Exit Function
    
    mLock.AcquireLock
    
    Dim perfData As PerformanceData
    Dim result As String
    
    On Error Resume Next
    perfData = mMeasurements(measurementName)
    If Err.Number = 0 Then
        result = "Performance Report for: " & measurementName & vbCrLf & _
                "Elapsed Time: " & Format$(perfData.ElapsedTime, "0.000") & " ms" & vbCrLf & _
                "Initial Memory: " & Format$(perfData.MemoryUsage / 1024 / 1024, "0.00") & " MB" & vbCrLf & _
                "Peak Memory: " & Format$(perfData.PeakMemoryUsage / 1024 / 1024, "0.00") & " MB"
    End If
    On Error GoTo 0
    
    mLock.ReleaseLock
    GetDetailedMeasurement = result
End Function

' ======================
' テストサポート機能（開発環境専用）
' ======================
#If DEBUG Then
    ''' <summary>
    ''' パフォーマンスカウンターの有効性を検証（テスト用）
    ''' </summary>
    Private Function ValidatePerformanceCounter() As Boolean
        Dim counter As Currency
        ValidatePerformanceCounter = (modWindowsAPI.QueryPerformanceCounter(counter) <> 0) And (mFrequency <> 0)
    End Function
    
    ''' <summary>
    ''' 測定データの数を取得（テスト用）
    ''' </summary>
    Private Function GetMeasurementCount() As Long
        mLock.AcquireLock
        GetMeasurementCount = mMeasurements.Count
        mLock.ReleaseLock
    End Function
    
    ''' <summary>
    ''' テスト用の測定データを追加（テスト用）
    ''' </summary>
    Private Sub SimulateMeasurement(ByVal description As String, ByVal elapsedTime As Double)
        mLock.AcquireLock
        Dim perfData As PerformanceData
        perfData.Description = description
        perfData.ElapsedTime = elapsedTime
        perfData.MemoryUsage = 1000000 ' 1MB
        perfData.PeakMemoryUsage = 2000000 ' 2MB
        mMeasurements.Add perfData, description
        mLock.ReleaseLock
    End Sub
    
    ''' <summary>
    ''' 現在の操作名を取得します
    ''' </summary>
    Public Property Get CurrentOperation() As String
        CurrentOperation = mCurrentOperation
    End Property
#End If

================
File: core/README.md
================
# VBAプロジェクト モジュール概要

最終更新日: 2025-1-27

このドキュメントは、VBAプロジェクト内の各モジュールの概要、依存関係、メソッド、およびその他の関連情報を提供します。
この情報は、AIアシスタントがプロジェクトの構造と機能を理解し、効率的に開発タスクを実行するのに役立ちます。

## 表記

- `[モジュール名]` : モジュール名
- `[概要]` : モジュールの簡潔な説明
- `[依存関係]` : 依存する他のモジュールやクラス、ライブラリのリスト（モジュール名、クラス名、ライブラリ名など）
- `[メソッド]` : モジュール内の主要なメソッドのリスト
  - `[メソッド名]` : メソッド名
    - `[説明]` : メソッドの機能の説明
    - `[引数]` : 引数のリスト（名前, データ型, 説明）
    - `[戻り値]` : 戻り値のデータ型と説明
- `[その他特記事項]` : モジュールの使用上の注意点や、将来的な変更予定など

## モジュール一覧

### 1. clsLogger

- **概要**: アプリケーションのログ記録を管理するメインクラス。様々な出力先（ファイル、データベース、イベントログ、コンソール）へのログ出力をサポートする。
- **依存関係**:
    - ILoggerSettings
    - IQueue
    - ILock
    - IPerformanceMonitor
    - FileLogger
    - DatabaseLogger
    - EventLogLogger
    - ConsoleLogger
    - ErrorInfo
    - modError
    - modStackTrace
    - clsPerformanceMonitor
    - QueueImpl
- **メソッド**:
    - `Configure(settings As ILoggerSettings, queue As IQueue, lock As ILock, performanceMonitor As IPerformanceMonitor)`:
      - 説明: ロガーの設定、キュー、ロック、パフォーマンスモニターを構成する。
      - 引数:
        - `settings`: ILoggerSettings, ロガー設定オブジェクト
        - `queue`: IQueue, ログキューオブジェクト
        - `lock`: ILock, ロックオブジェクト
        - `performanceMonitor`: IPerformanceMonitor, パフォーマンスモニターオブジェクト
      - 戻り値: なし
    - `SetLogger(destination As String, logger As ILogger)`:
      - 説明: 特定の出力先に対するロガーインスタンスを設定する。
      - 引数:
        - `destination`: String, 出力先名（"File", "Database", "EventLog", "Console"など）
        - `logger`: ILogger, ロガーインスタンス
      - 戻り値: なし
    - `ILogger_Log(moduleName As String, message As String, Optional errorCode As ErrorCode)`:
      - 説明: ログメッセージをキューに追加する。
      - 引数:
        - `moduleName`: String, モジュール名
        - `message`: String, ログメッセージ
        - `errorCode`: ErrorCode (Optional), エラーコード
      - 戻り値: なし
    - `ILogger_LogLevel`:
      - 説明: ログレベルの設定・取得
      - 引数:
        - `level` (Let時): LogLevel, ログレベル
      - 戻り値:
        - (Get時) LogLevel, 現在のログレベル
    - `ILogger_LogDestination`:
      - 説明: ログ出力先の設定・取得
      - 引数:
        - `destination` (Let時): LogDestination, ログ出力先
      - 戻り値:
        - (Get時) LogDestination, 現在のログ出力先
    - `InitializeLoggers()`:
      - 説明: 設定に基づいてロガーを初期化する
      - 引数: なし
      - 戻り値: なし
    - `ProcessLogQueue()`:
      - 説明: ログキューを処理し、各ロガーにログメッセージを渡す
      - 引数: なし
      - 戻り値: なし
    - `CreateLogger(destination As String)`:
      - 説明: 指定された出力先に対応するロガーオブジェクトを作成する
      - 引数:
        - `destination`: String, 出力先名（"File", "Database", "EventLog", "Console"など）
      - 戻り値: ILogger, 作成されたロガーオブジェクト
    - `StartWorkerThread()`:
      - 説明: ワーカースレッドを作成し、開始する
      - 引数: なし
      - 戻り値: なし
- **その他特記事項**:
    - テスト用の内部メソッド（`GetQueueCount`, `ClearQueue`, `GetPerformanceMonitor`, `SimulateTimer`）は本番環境では使用しないこと。
    - `ProcessLogQueue` メソッドはタイマーによって定期的に呼び出され、ログキューからメッセージを取り出して処理する。
    - `EMERGENCY_LOG_PATH` 定数で指定されたパスに緊急時用のログファイルが出力される。
    - `Logged` イベントはログメッセージが処理された際に発生する。
    - `MAX_RETRY_COUNT` 定数でデータベースおよびイベントログへの書き込みリトライ回数を設定する。
    - `RETRY_DELAY_MS` 定数でデータベースおよびイベントログへの書き込みリトライ間隔を設定する。

### 2. clsPerformanceMonitor

- **概要**: パフォーマンス測定機能を提供するレガシークラス。時間計測、実行中の操作の記録、計測結果の取得、有効化・無効化などの機能を持つ。
- **依存関係**:
    - IPerformanceMonitor
    - PerformanceMonitorImpl
- **メソッド**:
    - `StartMeasurement(description As String)`:
      - 説明: パフォーマンス測定を開始する。
      - 引数:
        - `description`: String, 測定対象の説明
      - 戻り値: なし
    - `EndMeasurement(description As String)`:
      - 説明: パフォーマンス測定を終了する。
      - 引数:
        - `description`: String, 測定対象の説明
      - 戻り値: なし
    - `GetMeasurement(description As String)`:
      - 説明: 指定された測定対象の測定結果を取得する。
      - 引数:
        - `description`: String, 測定対象の説明
      - 戻り値: String, 測定結果の詳細情報
    - `GetAllMeasurements()`:
      - 説明: 全ての測定結果を取得する。
      - 引数: なし
      - 戻り値: String, 全ての測定結果を含むレポート
    - `ClearMeasurements()`:
      - 説明: 全ての測定結果をクリアする。
      - 引数: なし
      - 戻り値: なし
- **その他特記事項**:
    - 新規実装では `IPerformanceMonitor` インターフェースを使用することを推奨。
    - `IsEnabled` プロパティでパフォーマンス監視の有効・無効を切り替え可能。
    - `CurrentOperation` プロパティで現在実行中の操作を取得可能。

### 3. ConfigImpl

- **概要**: アプリケーション設定とデータベース設定を管理するクラス。INIファイルから設定を読み込み、保存する機能を提供する。
- **依存関係**:
    - IAppConfig
    - IDatabaseConfig
    - IIniFile
    - IniFileImpl
    - clsLock
    - IConnectionStringBuilder
    - ODBCConnectionStringBuilder
    - OLEDBConnectionStringBuilder
- **メソッド**:
    - `IAppConfig_GetSetting(settingName As String)`:
      - 説明: 指定された設定名の値を取得する。
      - 引数:
        - `settingName`: String, 設定名
      - 戻り値: Variant, 設定値。見つからない場合はNull。
    - `IAppConfig_SetSetting(settingName As String, settingValue As Variant)`:
      - 説明: 指定された設定名の値を設定する。
      - 引数:
        - `settingName`: String, 設定名
        - `settingValue`: Variant, 設定値
      - 戻り値: なし
    - `IAppConfig_LoadSettings(filePath As String)`:
      - 説明: 指定されたファイルから設定を読み込む。
      - 引数:
        - `filePath`: String, 設定ファイルのパス
      - 戻り値: なし
    - `IAppConfig_SaveSettings(filePath As String)`:
      - 説明: 指定されたファイルに設定を保存する。
      - 引数:
        - `filePath`: String, 設定ファイルのパス
      - 戻り値: なし
    - `IDatabaseConfig_GetConnectionString()`:
      - 説明: データベース接続文字列を取得する。
      - 引数: なし
      - 戻り値: String, データベース接続文字列
    - `IDatabaseConfig_GetDatabaseSetting(settingName As String)`:
      - 説明: 指定されたデータベース設定名の値を取得する。
      - 引数:
        - `settingName`: String, データベース設定名
      - 戻り値: Variant, データベース設定値。見つからない場合はNull。
    - `UpdateConnectionStringBuilder()`:
      - 説明: データベースタイプに基づいてConnectionStringBuilderを更新する。
      - 引数: なし
      - 戻り値: なし
- **その他特記事項**:
    - `AutoSave` プロパティが `True` の場合、設定変更時に自動的にファイルに保存される。
    - `mConnectionStringBuilder` は `IDatabaseConfig_DatabaseType` プロパティの値によって `ODBCConnectionStringBuilder` または `OLEDBConnectionStringBuilder` に切り替わる。

### 4. ConsoleLogger

- **概要**: コンソールへのログ出力を担当するクラス。
- **依存関係**:
    - ILogger
    - IPerformanceMonitor
    - ErrorInfo
    - modError
- **メソッド**:
    - `Initialize(performanceMonitor As IPerformanceMonitor, Optional useColors As Boolean = False)`:
      - 説明: ConsoleLoggerを初期化する。
      - 引数:
        - `performanceMonitor`: IPerformanceMonitor, パフォーマンスモニターオブジェクト
        - `useColors`: Boolean (Optional), 色付き出力を有効にするかどうか（デフォルトはFalse）
      - 戻り値: なし
    - `ILogger_Log(logLevel As String, message As String, Optional stackTrace As String, Optional errorCode As Long)`:
      - 説明: ログメッセージをコンソールに出力する。
      - 引数:
        - `logLevel`: String, ログレベル
        - `message`: String, ログメッセージ
        - `stackTrace`: String (Optional), スタックトレース
        - `errorCode`: Long (Optional), エラーコード
      - 戻り値: なし
- **その他特記事項**:
    - `mUseColors` が `True` の場合、ログレベルに応じて色付きで出力される。
    - ANSIエスケープシーケンスを使用して色を表現しているが、現状では定数が空文字で定義されているため、この機能は実質的に無効化されている。

### 5. DatabaseLogger

- **概要**: データベースへのログ出力を担当するクラス。
- **依存関係**:
    - ILogger
    - IConnectionPool
    - ILock
    - IPerformanceMonitor
    - IDatabaseConfig
    - ErrorInfo
    - modError
- **メソッド**:
    - `Initialize(connectionPool As IConnectionPool, lock As ILock, performanceMonitor As IPerformanceMonitor, databaseConfig As IDatabaseConfig, tableName As String)`:
      - 説明: DatabaseLoggerを初期化する。
      - 引数:
        - `connectionPool`: IConnectionPool, データベース接続プールオブジェクト
        - `lock`: ILock, ロックオブジェクト
        - `performanceMonitor`: IPerformanceMonitor, パフォーマンスモニターオブジェクト
        - `databaseConfig`: IDatabaseConfig, データベース設定オブジェクト
        - `tableName`: String, ログを保存するテーブル名
      - 戻り値: なし
    - `ILogger_Log(logLevel As String, message As String, Optional stackTrace As String, Optional errorCode As Long)`:
      - 説明: ログメッセージをデータベースに書き込む。
      - 引数:
        - `logLevel`: String, ログレベル
        - `message`: String, ログメッセージ
        - `stackTrace`: String (Optional), スタックトレース
        - `errorCode`: Long (Optional), エラーコード
      - 戻り値: なし
    - `WriteLogToDatabase(logLevel As String, message As String, stackTrace As String, errorCode As Long)`:
      - 説明: ログメッセージをデータベースに書き込む。(プライベートメソッド)
- 引数:
        - `logLevel`: String, ログレベル
        - `message`: String, ログメッセージ
        - `stackTrace`: String, スタックトレース
        - `errorCode`: Long, エラーコード
      - 戻り値: Boolean, 書き込みに成功したかどうか
- **その他特記事項**:
    - `MAX_RETRY_COUNT` 定数でデータベースへの書き込みリトライ回数を設定する。
    - `RETRY_DELAY_MS` 定数でデータベースへの書き込みリトライ間隔を設定する。
    - ログメッセージは `ADODB.Command` オブジェクトを使用してデータベースに挿入される。

### 6. DefaultLoggerSettings

- **概要**: ロガーのデフォルト設定を提供するクラス。
- **依存関係**:
    - ILoggerSettings
    - IAppConfig
    - IFileOperations
    - IConnectionPool
    - IEventLog
    - IDatabaseConfig
- **メソッド**:
    - `Initialize(appConfig As IAppConfig, fileOperations As IFileOperations, connectionPool As IConnectionPool, eventLog As IEventLog, databaseConfig As IDatabaseConfig)`:
      - 説明: DefaultLoggerSettingsを初期化する。
      - 引数:
        - `appConfig`: IAppConfig, アプリケーション設定オブジェクト
        - `fileOperations`: IFileOperations, ファイル操作オブジェクト
        - `connectionPool`: IConnectionPool, データベース接続プールオブジェクト
        - `eventLog`: IEventLog, イベントログオブジェクト
        - `databaseConfig`: IDatabaseConfig, データベース設定オブジェクト
      - 戻り値: なし
    - `ILoggerSettings_LogLevel`:
      - 説明: ログレベルの設定・取得
      - 引数:
        - `value` (Let時): LogLevel, ログレベル
      - 戻り値:
        - (Get時) LogLevel, 現在のログレベル
    - `ILoggerSettings_GetLogDestinations()`:
      - 説明: 有効なログ出力先のリストを取得する。
      - 引数: なし
      - 戻り値: Variant, ログ出力先の配列
    - `ILoggerSettings_LogFilePath`:
      - 説明: ログファイルのパスを取得する。
      - 引数: なし
      - 戻り値: String, ログファイルのパス
    - `ILoggerSettings_LogTableName`:
      - 説明: ログを保存するデータベースのテーブル名を取得する。
      - 引数: なし
      - 戻り値: String, テーブル名
    - `ILoggerSettings_LogEventSource`:
      - 説明: イベントログのソース名を取得する。
      - 引数: なし
      - 戻り値: String, イベントログのソース名
    - `ILoggerSettings_TimerInterval`:
      - 説明: タイマーの間隔を取得する。
      - 引数: なし
      - 戻り値: Long, タイマーの間隔（ミリ秒）
    - `ILoggerSettings_GetFileOperations()`:
      - 説明: ファイル操作オブジェクトを取得する。
      - 引数: なし
      - 戻り値: IFileOperations, ファイル操作オブジェクト
    - `ILoggerSettings_GetConnectionPool()`:
      - 説明: データベース接続プールオブジェクトを取得する。
      - 引数: なし
      - 戻り値: IConnectionPool, データベース接続プールオブジェクト
    - `ILoggerSettings_GetEventLog()`:
      - 説明: イベントログオブジェクトを取得する。
      - 引数: なし
      - 戻り値: IEventLog, イベントログオブジェクト
    - `ILoggerSettings_GetDatabaseConfig()`:
      - 説明: データベース設定オブジェクトを取得する。
      - 引数: なし
      - 戻り値: IDatabaseConfig, データベース設定オブジェクト
    - `ILoggerSettings_ShouldLog(destination As String, level As LogLevel)`:
      - 説明: 指定された出力先とログレベルでログを出力すべきかどうかを判定する。
      - 引数:
        - `destination`: String, 出力先名
        - `level`: LogLevel, ログレベル
      - 戻り値: Boolean, ログを出力すべきかどうか
    - `ILoggerSettings_FormatLogMessage(logLevel As String, message As String, stackTrace As String, errorCode As Long)`:
      - 説明: ログメッセージをフォーマットする。
      - 引数:
        - `logLevel`: String, ログレベル
        - `message`: String, メッセージ
        - `stackTrace`: String, スタックトレース
        - `errorCode`: Long, エラーコード
      - 戻り値: String, フォーマットされたログメッセージ
- **その他特記事項**:
    - `LoadSettings` メソッドで `IAppConfig` から設定を読み込む。
    - `ParseDestinations` メソッドで有効なログ出力先をパースする。

### 7. DefaultMessageFormatter

- **概要**: デフォルトのエラーメッセージフォーマットを提供するクラス。
- **依存関係**:
    - IMessageFormatter
    - ErrorInfo
    - modStackTrace
    - modError
- **メソッド**:
    - `IMessageFormatter_FormatMessage(message As String, ByRef errorInfo As ErrorInfo)`:
      - 説明: エラーメッセージをフォーマットする。
      - 引数:
        - `message`: String, メッセージ
        - `errorInfo`: ErrorInfo, エラー情報オブジェクト
      - 戻り値: String, フォーマットされたエラーメッセージ
- **その他特記事項**:
    - `FormatMessage` メソッドは、エラー情報オブジェクトの内容に基づいてエラーメッセージを組み立てる。
    - スタックトレースが存在する場合は、メッセージに追加される。
    - メッセージのフォーマット中にエラーが発生した場合は、エラーハンドラに処理を委譲する。
    - テスト用の `TestFormatMessage` メソッドを持つ（DEBUG時のみ）。

### 8. EmergencyLogger

- **概要**: 緊急時（エラーハンドラでエラーが発生した場合など）にログを出力するクラス。
- **依存関係**:
    - IEmergencyLogger
    - clsLock
    - modWindowsAPI
- **メソッド**:
    - `IEmergencyLogger_LogEmergencyError(message As String, Optional ByRef errorInfo As ErrorInfo)`:
      - 説明: 緊急エラーをログに記録する。
      - 引数:
        - `message`: String, エラーメッセージ
        - `errorInfo`: ErrorInfo (Optional), エラー情報オブジェクト
      - 戻り値: なし
    - `FormatErrorMessage(message As String, ByRef errorInfo As ErrorInfo)`:
      - 説明: エラーメッセージをフォーマットする。（プライベートメソッド）
      - 引数:
        - `message`: String, エラーメッセージ
        - `errorInfo`: ErrorInfo, エラー情報オブジェクト
      - 戻り値: String, フォーマットされたエラーメッセージ
    - `WriteToEventLog(message As String)`:
      - 説明: イベントログに書き込む。（プライベートメソッド）
      - 引数:
        - `message`: String, メッセージ
      - 戻り値: なし
    - `WriteToEmergencyFile(message As String)`:
      - 説明: 緊急用ファイルに書き込む。（プライベートメソッド）
      - 引数:
        - `message`: String, メッセージ
      - 戻り値: なし
- **その他特記事項**:
    - `EMERGENCY_LOG_FILE` 定数で緊急用ログファイルのパスを指定する。
    - `EVENT_SOURCE` 定数でイベントログのソース名を指定する。
    - テスト用の `GetEmergencyLogPath` および `ClearEmergencyLog` メソッドを持つ（DEBUG時のみ）。

### 9. ErrorHandlerManager

- **概要**: エラーハンドラーの登録・管理を行うクラス。
- **依存関係**:
    - IErrorHandler
    - clsLock
    - DatabaseConnectionErrorHandler
    - FileNotFoundErrorHandler
    - InvalidInputErrorHandler
    - modErrorCodes
- **メソッド**:
    - `InitializeManager()`:
      - 説明: エラーハンドラーマネージャーを初期化する。
      - 引数: なし
      - 戻り値: なし
    - `RegisterHandler(errorCode As ErrorCode, handler As IErrorHandler)`:
      - 説明: エラーコードに対応するエラーハンドラーを登録する。
      - 引数:
        - `errorCode`: ErrorCode, エラーコード
        - `handler`: IErrorHandler, エラーハンドラー
      - 戻り値: なし
    - `UnregisterHandler(errorCode As ErrorCode)`:
      - 説明: エラーコードに対応するエラーハンドラーの登録を解除する。
      - 引数:
        - `errorCode`: ErrorCode, エラーコード
      - 戻り値: なし
    - `GetErrorHandler(errorCode As ErrorCode)`:
      - 説明: エラーコードに対応するエラーハンドラーを取得する。
      - 引数:
        - `errorCode`: ErrorCode, エラーコード
      - 戻り値: IErrorHandler, エラーハンドラー
    - `RegisterDefaultHandlers()`:
      - 説明: デフォルトのエラーハンドラーを登録する。（プライベートメソッド）
      - 引数: なし
      - 戻り値: なし
    - `GetDefaultHandlerForCategory(category As ErrorCodeCategory)`:
      - 説明: エラーカテゴリに対応するデフォルトのエラーハンドラーを取得する。（プライベートメソッド）
      - 引数:
        - `category`: ErrorCodeCategory, エラーカテゴリ
      - 戻り値: IErrorHandler, デフォルトのエラーハンドラー
- **その他特記事項**:
    - `mHandlers` コレクションにエラーコードとエラーハンドラーのペアを保持する。
    - テスト用の `GetHandlerCount` および `ClearHandlers` メソッドを持つ（DEBUG時のみ）。

### 10. ErrorImpl

- **概要**: エラー処理の主機能を担当するクラス。エラーハンドラーの呼び出し、エラー情報の補完、エラー回数のカウントなどを行う。
- **依存関係**:
    - IError
    - ErrorHandlerManager
    - IEmergencyLogger
    - EmergencyLogger
    - clsLock
    - clsPerformanceMonitor
    - ErrorInfo
    - modErrorCodes
    - modStackTrace
- **メソッド**:
    - `IError_HandleError(ByRef errorInfo As ErrorInfo)`:
      - 説明: エラーを処理する。
      - 引数:
        - `errorInfo`: ErrorInfo, エラー情報オブジェクト
      - 戻り値: Boolean, エラー処理を続行するかどうか
    - `IError_RegisterHandler(errorCode As ErrorCode, handler As IErrorHandler)`:
      - 説明: エラーハンドラーを登録する。
      - 引数:
        - `errorCode`: ErrorCode, エラーコード
        - `handler`: IErrorHandler, エラーハンドラー
      - 戻り値: なし
    - `IError_UnregisterHandler(errorCode As ErrorCode)`:
      - 説明: エラーハンドラーの登録を解除する。
      - 引数:
        - `errorCode`: ErrorCode, エラーコード
      - 戻り値: なし
    - `IError_IncrementErrorCount(errorCode As ErrorCode)`:
      - 説明: エラーの発生回数をカウントする。
      - 引数:
        - `errorCode`: ErrorCode, エラーコード
      - 戻り値: なし
    - `IError_CheckErrorThreshold(errorCode As ErrorCode, threshold As Long)`:
      - 説明: エラーの発生回数が閾値を超えたかどうかをチェックする。
      - 引数:
        - `errorCode`: ErrorCode, エラーコード
        - `threshold`: Long, 閾値
      - 戻り値: Boolean, 閾値を超えたかどうか
    - `CompleteErrorInfo(ByRef errorInfo As ErrorInfo)`:
      - 説明: エラー情報オブジェクトの不足情報を補完する。（プライベートメソッド）
      - 引数:
        - `errorInfo`: ErrorInfo, エラー情報オブジェクト
      - 戻り値: なし
    - `RemoveOldestErrorCount()`:
      - 説明: エラーカウントの辞書から最も古いエントリを削除する。（プライベートメソッド）
      - 引数: なし
      - 戻り値: なし
- **その他特記事項**:
    - `MAX_ERROR_RECURSION` 定数でエラー処理の再帰呼び出しの上限回数を設定する。
    - `ERROR_COUNT_DICT_SIZE` 定数でエラーカウントを保持する辞書の最大サイズを設定する。
    - `mErrorCounts` 辞書にエラーコードごとの発生回数を記録する。
    - テスト用の `GetErrorCount`, `ClearErrorCounts`, `GetPerformanceReport` メソッドを持つ（DEBUG時のみ）。

### 11. ErrorInfo

- **概要**: エラー情報を格納するクラス。
- **依存関係**: なし
- **メソッド**:
    - `AddAdditionalInfo(key As String, value As Variant)`:
      - 説明: エラー情報に追加情報を追加する。
      - 引数:
        - `key`: String, 追加情報のキー
        - `value`: Variant, 追加情報の値
      - 戻り値: なし
    - `GetAdditionalInfo(key As String)`:
      - 説明: エラー情報から追加情報を取得する。
      - 引数:
        - `key`: String, 追加情報のキー
      - 戻り値: Variant, 追加情報の値
    - `HasAdditionalInfo(key As String)`:
      - 説明: エラー情報に追加情報が存在するかどうかを確認する。
      - 引数:
        - `key`: String, 追加情報のキー
      - 戻り値: Boolean, 追加情報が存在するかどうか
    - `Clone()`:
      - 説明: エラー情報オブジェクトのコピーを作成する。
      - 引数: なし
      - 戻り値: ErrorInfo, コピーされたエラー情報オブジェクト
    - `ToString()`:
      - 説明: エラー情報オブジェクトを文字列形式で返す。
      - 引数: なし
      - 戻り値: String, エラー情報の文字列表現
- **その他特記事項**:
    - `ErrorSeverity` 列挙型でエラーの重要度を定義する。
    - `mAdditionalInfo` コレクションに追加情報を格納する。

### 12. EventLogImpl

- **概要**: Windowsイベントログへの書き込みを担当するクラス。
- **依存関係**:
    - IEventLog
    - clsLock
    - clsPerformanceMonitor
    - modWindowsAPI
    - ErrorInfo
    - modError
    - modStackTrace
- **メソッド**:
    - `IEventLog_WriteToEventLog(source As String, message As String, eventType As EventLogType)`:
      - 説明: イベントログに書き込む。
      - 引数:
        - `source`: String, イベントソース
        - `message`: String, メッセージ
        - `eventType`: EventLogType, イベントの種類
      - 戻り値: Boolean, 書き込みに成功したかどうか
    - `IEventLog_EventSourceExists(source As String)`:
      - 説明: イベントソースが存在するかどうかを確認する。
      - 引数:
        - `source`: String, イベントソース
      - 戻り値: Boolean, イベントソースが存在するかどうか
    - `LogError(message As String)`:
      - 説明: エラーをログに記録する。（プライベートメソッド）
      - 引数:
        - `message`: String, エラーメッセージ
      - 戻り値: なし
- **その他特記事項**:
    - `LastError` プロパティで最後のエラーメッセージを取得できる。
    - テスト用の `ValidateState`, `GetPerformanceMonitor`, `TestEventLogAccess` メソッドを持つ（DEBUG時のみ）。

### 13. EventLogLogger

- **概要**: イベントログへのログ出力を担当するクラス。
- **依存関係**:
    - ILogger
    - IEventLog
    - ILock
    - IPerformanceMonitor
    - ErrorInfo
    - modError
- **メソッド**:
    - `Initialize(eventLog As IEventLog, lock As ILock, performanceMonitor As IPerformanceMonitor, eventSource As String)`:
      - 説明: EventLogLoggerを初期化する。
      - 引数:
        - `eventLog`: IEventLog, イベントログオブジェクト
        - `lock`: ILock, ロックオブジェクト
        - `performanceMonitor`: IPerformanceMonitor, パフォーマンスモニターオブジェクト
        - `eventSource`: String, イベントソース名
      - 戻り値: なし
    - `ILogger_Log(logLevel As String, message As String, Optional stackTrace As String, Optional errorCode As Long)`:
      - 説明: ログメッセージをイベントログに書き込む。
      - 引数:
        - `logLevel`: String, ログレベル
        - `message`: String, ログメッセージ
        - `stackTrace`: String (Optional), スタックトレース
        - `errorCode`: Long (Optional), エラーコード
      - 戻り値: なし
    - `WriteLogToEventLog(logLevel As String, message As String, stackTrace As String, errorCode As Long)`:
      - 説明: ログメッセージをイベントログに書き込む。（プライベートメソッド）
      - 引数:
        - `logLevel`: String, ログレベル
        - `message`: String, ログメッセージ
        - `stackTrace`: String, スタックトレース
        - `errorCode`: Long, エラーコード
      - 戻り値: Boolean, 書き込みに成功したかどうか
- **その他特記事項**:
    - `MAX_RETRY_COUNT` 定数でイベントログへの書き込みリトライ回数を設定する。
    - `RETRY_DELAY_MS` 定数でイベントログへの書き込みリトライ間隔を設定する。
    - ログレベルに応じてイベントの種類（`EVENTLOG_SUCCESS`, `EVENTLOG_ERROR`, `EVENTLOG_WARNING`, `EVENTLOG_INFORMATION`）を決定する。

### 14. FileLogger

- **概要**: ファイルへのログ出力を担当するクラス。
- **依存関係**:
    - ILogger
    - IFileOperations
    - ILock
    - IPerformanceMonitor
    - ErrorInfo
    - modError
- **メソッド**:
    - `Initialize(fileOperations As IFileOperations, lock As ILock, performanceMonitor As IPerformanceMonitor, logFilePath As String)`:
      - 説明: FileLoggerを初期化する。
      - 引数:
        - `fileOperations`: IFileOperations, ファイル操作オブジェクト
        - `lock`: ILock, ロックオブジェクト
        - `performanceMonitor`: IPerformanceMonitor, パフォーマンスモニターオブジェクト
        - `logFilePath`: String, ログファイルのパス
      - 戻り値: なし
    - `ILogger_Log(logLevel As String, message As String, Optional stackTrace As String, Optional errorCode As Long)`:
      - 説明: ログメッセージをファイルに書き込む。
      - 引数:
        - `logLevel`: String, ログレベル
        - `message`: String, ログメッセージ
        - `stackTrace`: String (Optional), スタックトレース
        - `errorCode`: Long (Optional), エラーコード
      - 戻り値: なし
    - `BuildLogMessage(logLevel As String, message As String, stackTrace As String, errorCode As Long)`:
      - 説明: ログメッセージを組み立てる。（プライベートメソッド）
      - 引数:
        - `logLevel`: String, ログレベル
        - `message`: String, ログメッセージ
        - `stackTrace`: String, スタックトレース
        - `errorCode`: Long, エラーコード
      - 戻り値: String, 組み立てられたログメッセージ
    - `WriteLogToFile(logMessage As String)`:
      - 説明: ログメッセージをファイルに書き込む。（プライベートメソッド）
      - 引数:
        - `logMessage`: String, ログメッセージ
      - 戻り値: Boolean, 書き込みに成功したかどうか
- **その他特記事項**:
    - `MAX_RETRY_COUNT` 定数でファイルへの書き込みリトライ回数を設定する。
    - `RETRY_DELAY_MS` 定数でファイルへの書き込みリトライ間隔を設定する。
    - ログファイルが存在しない場合は `CreateFile` メソッドで作成される。

### 15. InvalidInputErrorHandler

- **概要**: 不正な入力エラーを処理するエラーハンドラー。入力値の自動補正とユーザーへの通知を行う。
- **依存関係**:
    - IErrorHandler
    - ILock
    - ILogger
    - IEmergencyLogger
    - IUserNotifier
    - IValidator
    - ErrorInfo
    - modStackTrace
    - modError
- **メソッド**:
    - `Create(lock As ILock, logger As ILogger, emergencyLogger As IEmergencyLogger, userNotifier As IUserNotifier, validator As IValidator)`:
      - 説明: InvalidInputErrorHandlerのインスタンスを作成する。
      - 引数:
        - `lock`: ILock, ロックオブジェクト
        - `logger`: ILogger, ロガーオブジェクト
        - `emergencyLogger`: IEmergencyLogger, 緊急ロガーオブジェクト
        - `userNotifier`: IUserNotifier, ユーザー通知オブジェクト
        - `validator`: IValidator, 入力値検証オブジェクト
      - 戻り値: InvalidInputErrorHandler, InvalidInputErrorHandlerのインスタンス
    - `IErrorHandler_HandleError(ByRef errorDetail As ErrorInfo)`:
      - 説明: 不正な入力エラーを処理する。
      - 引数:
        - `errorDetail`: ErrorInfo, エラー情報
      - 戻り値: Boolean, エラー処理を続行するかどうか
    - `TryCorrectInput(value As Variant, inputType As String, ByRef correctedValue As Variant)`:
      - 説明: 入力値の自動補正を試みる。（プライベートメソッド）
      - 引数:
        - `value`: Variant, 入力値
        - `inputType`: String, 入力値の型
        - `correctedValue`: Variant, 補正後の値（出力用）
      - 戻り値: Boolean, 補正に成功したかどうか
    - `TryCorrectNumber(value As Variant, ByRef correctedValue As Variant)`:
      - 説明: 数値型の入力値の自動補正を試みる。（プライベートメソッド）
      - 引数:
        - `value`: Variant, 入力値
        - `correctedValue`: Variant, 補正後の値（出力用）
      - 戻り値: Boolean, 補正に成功したかどうか
    - `TryCorrectDate(value As Variant, ByRef correctedValue As Variant)`:
      - 説明: 日付型の入力値の自動補正を試みる。（プライベートメソッド）
      - 引数:
        - `value`: Variant, 入力値
        - `correctedValue`: Variant, 補正後の値（出力用）
      - 戻り値: Boolean, 補正に成功したかどうか
    - `TryCorrectString(value As Variant, ByRef correctedValue As Variant)`:
      - 説明: 文字列型の入力値の自動補正を試みる。（プライベートメソッド）
      - 引数:
        - `value`: Variant, 入力値
        - `correctedValue`: Variant, 補正後の値（出力用）
      - 戻り値: Boolean, 補正に成功したかどうか
    - `LogError(ByRef errorDetail As ErrorInfo)`:
      - 説明: エラーをログに記録する。（プライベートメソッド）
      - 引数:
        - `errorDetail`: ErrorInfo, エラー情報
      - 戻り値: なし
    - `NotifyUser(ByRef errorDetail As ErrorInfo, style As VbMsgBoxStyle)`:
      - 説明: ユーザーにエラーを通知する。（プライベートメソッド）
      - 引数:
        - `errorDetail`: ErrorInfo, エラー情報
        - `style`: VbMsgBoxStyle, メッセージボックスのスタイル
      - 戻り値: なし
- **その他特記事項**:
    - コンストラクタ `Create` を使用して、依存オブジェクトを注入する。
    - 入力値の型に応じて `TryCorrectNumber`, `TryCorrectDate`, `TryCorrectString`を使い分けて自動補正を試みる。
    - 自動補正に成功した場合は、エラー情報オブジェクトに `CorrectedValue` として補正後の値を追加する。
    - エラーの重要度が `ESError` 以上の場合、緊急ログにも記録する。

### 16. modAppInitializer

- **概要**: アプリケーションの初期化処理を担当するモジュール。
- **依存関係**:
    - modConfig
    - clsLogger
    - DefaultLoggerSettings
    - modDatabaseUtils
    - ConnectionPool
    - DatabaseConnectionErrorHandler
    - ErrorInfo
    - modError
    - modStackTrace
- **メソッド**:
    - `InitializeApplication()`:
      - 説明: アプリケーションを初期化する。
      - 引数: なし
      - 戻り値: なし
    - `InitializeLogging()`:
      - 説明: ロギングシステムを初期化する。（プライベートメソッド）
      - 引数: なし
      - 戻り値: なし
    - `InitializeDatabase()`:
      - 説明: データベース関連の初期化を行う。（プライベートメソッド）
      - 引数: なし
      - 戻り値: なし
    - `InitializeErrorHandlers()`:
      - 説明: エラーハンドラーを初期化する。（プライベートメソッド）
      - 引数: なし
      - 戻り値: なし
- **その他特記事項**:
    - `InitializationState` 型変数 `mInitState` で各コンポーネントの初期化状態を管理する。
    - `InitializeApplication` メソッドは、設定、ロギング、データベース、エラーハンドラーの順に初期化を行う。

### 17. modConfig

- **概要**: アプリケーションの設定を管理するモジュール。
- **依存関係**:
    - IDatabaseConfig
    - modWindowsAPI
    - clsLock
    - clsPerformanceMonitor
    - ErrorInfo
    - modError
    - clsCallStack
- **メソッド**:
    - `InitializeModule()`:
      - 説明: モジュールを初期化する。
      - 引数: なし
      - 戻り値: なし
    - `TerminateModule()`:
      - 説明: モジュールを終了処理する。
      - 引数: なし
      - 戻り値: なし
    - `GetConfigValue(section As String, key As String, Optional defaultValue As String = "")`:
      - 説明: 設定ファイルから値を取得する。
      - 引数:
        - `section`: String, セクション名
        - `key`: String, キー名
        - `defaultValue`: String (Optional), デフォルト値
      - 戻り値: String, 取得した値
    - `SetConfigValue(section As String, key As String, Value As String)`:
      - 説明: 設定ファイルに値を設定する。
      - 引数:
        - `section`: String, セクション名
        - `key`: String, キー名
        - `Value`: String, 設定値
      - 戻り値: Boolean, 設定に成功したかどうか
    - `LoadDefaultSettings()`:
      - 説明: デフォルトの設定値を読み込む。（プライベートメソッド）
      - 引数: なし
      - 戻り値: なし
    - `LoadConfigurationFromFile()`:
      - 説明: 設定ファイルから設定を読み込む。（プライベートメソッド）
      - 引数: なし
      - 戻り値: なし
    - `SaveConfigurationToFile()`:
      - 説明: 設定ファイルに設定を保存する。（プライベートメソッド）
      - 引数: なし
      - 戻り値: なし
    - `GetConfigFilePath()`:
      - 説明: 設定ファイルのパスを取得する。（プライベートメソッド）
      - 引数: なし
      - 戻り値: String, 設定ファイルのパス
    - `SaveChanges()`:
      - 説明: 変更された設定を保存する。
      - 引数: なし
      - 戻り値: なし
    - `GetCurrentCallStack()`:
      - 説明: 現在のコールスタックを取得する。（プライベートメソッド）
      - 引数: なし
      - 戻り値: String, コールスタック
    - `IDatabaseConfig_GetConnectionString()`:
      - 説明: データベース接続文字列を取得する。
      - 引数: なし
      - 戻り値: String, データベース接続文字列
- **その他特記事項**:
    - `CONFIG_FILE_PATH` 定数で設定ファイルのパスを指定する。
    - `MAX_BUFFER_SIZE` 定数で設定値の最大バッファサイズを指定する。
    - `DEFAULT_SECTION` 定数でデフォルトのセクション名を指定する。
    - `ConfigurationSettings` 型変数 `settings` に設定値を保持する。
    - `AutoSave` プロパティで設定変更時に自動的に保存するかどうかを制御する。
    - `HasUnsavedChanges` プロパティで未保存の変更があるかどうかを確認できる。
    - テスト用の `ResetModule` および `ValidateSettings` メソッドを持つ（DEBUG時のみ）。

### 18. modError

- **概要**: エラー処理機能を提供するモジュール。エラーハンドラーの呼び出し、エラー情報の補完、緊急ログ出力などを行う。
- **依存関係**:
    - IErrorHandler
    - clsLock
    - clsPerformanceMonitor
    - DatabaseConnectionErrorHandler
    - FileNotFoundErrorHandler
    - InvalidInputErrorHandler
    - ErrorInfo
    - modErrorCodes
    - modStackTrace
    - modWindowsAPI
- **メソッド**:
    - `InitializeModule()`:
      - 説明: モジュールを初期化する。
      - 引数: なし
      - 戻り値: なし
    - `TerminateModule()`:
      - 説明: モジュールを終了処理する。
      - 引数: なし
      - 戻り値: なし
    - `TryHandleError(ByRef context As ErrorContext)`:
      - 説明: エラー処理を試行する。（プライベートメソッド）
      - 引数:
        - `context`: ErrorContext, エラー処理のコンテキスト
      - 戻り値: Boolean, エラー処理に成功したかどうか
    - `HandleError(ByRef errInfo As ErrorInfo)`:
      - 説明: エラーを処理する。
      - 引数:
        - `errInfo`: ErrorInfo, エラー情報
      - 戻り値: なし
    - `RegisterDefaultHandlers()`:
      - 説明: デフォルトのエラーハンドラーを登録する。（プライベートメソッド）
      - 引数: なし
      - 戻り値: なし
    - `GetErrorHandler(errorCode As ErrorCode)`:
      - 説明: エラーコードに対応するエラーハンドラーを取得する。（プライベートメソッド）
      - 引数:
        - `errorCode`: ErrorCode, エラーコード
      - 戻り値: IErrorHandler, エラーハンドラー
    - `GetDefaultHandlerForCategory(category As ErrorCodeCategory)`:
      - 説明: エラーカテゴリに対応するデフォルトのエラーハンドラーを取得する。（プライベートメソッド）
      - 引数:
        - `category`: ErrorCodeCategory, エラーカテゴリ
      - 戻り値: IErrorHandler, デフォルトのエラーハンドラー
    - `RegisterErrorHandler(errorCode As ErrorCode, handler As IErrorHandler)`:
      - 説明: エラーハンドラーを登録する。
      - 引数:
        - `errorCode`: ErrorCode, エラーコード
        - `handler`: IErrorHandler, エラーハンドラー
      - 戻り値: なし
    - `UnregisterErrorHandler(errorCode As ErrorCode)`:
      - 説明: エラーハンドラーの登録を解除する。
      - 引数:
        - `errorCode`: ErrorCode, エラーコード
      - 戻り値: なし
    - `EmergencyErrorLog(message As String)`:
      - 説明: 緊急エラーをログに記録する。（プライベートメソッド）
      - 引数:
        - `message`: String, エラーメッセージ
      - 戻り値: なし
    - `WriteToEventLog(message As String)`:
      - 説明: イベントログに書き込む。（プライベートメソッド）
      - 引数:
        - `message`: String, メッセージ
      - 戻り値: なし
    - `WriteToEmergencyFile(message As String)`:
      - 説明: 緊急用ファイルに書き込む。（プライベートメソッド）
      - 引数:
        - `message`: String, メッセージ
      - 戻り値: なし
- **その他特記事項**:
    - `MAX_ERROR_RECURSION` 定数でエラー処理の再帰呼び出しの上限回数を設定する。
    - `ErrorContext` 型変数 `context` にエラー処理に必要な情報を格納する。
    - テスト用の `TestErrorHandling`, `TestErrorRecursion`, `TestResourceManagement`, `GetPerformanceReport`, `GetRegisteredHandlerCount`, `ClearHandlers`, `ResetModule`, `GetActiveLockCount` メソッドを持つ（DEBUG時のみ）。

### 19. modErrorCodes

- **概要**: エラーコードとエラーカテゴリを定義するモジュール。
- **依存関係**: なし
- **メソッド**:
    - `GetErrorCategory(errCode As ErrorCode)`:
      - 説明: エラーコードに対応するエラーカテゴリを取得する。
      - 引数:
        - `errCode`: ErrorCode, エラーコード
      - 戻り値: ErrorCodeCategory, エラーカテゴリ
- **その他特記事項**:
    - `ErrorCodeCategory` 列挙型でエラーカテゴリを定義する。
    - `ErrorCode` 列挙型でエラーコードを定義する。

### 20. PerformanceCounterImpl

- **概要**: パフォーマンスカウンターへのアクセスを提供するクラス。
- **依存関係**:
    - IPerformanceCounter
    - clsLock
    - modWindowsAPI
    - ErrorInfo
    - modError
    - modStackTrace
- **メソッド**:
    - `IPerformanceCounter_QueryPerformanceCounter(ByRef performanceCount As Currency)`:
      - 説明: パフォーマンスカウンターの値を取得する。
      - 引数:
        - `performanceCount`: Currency, パフォーマンスカウンターの値（出力用）
      - 戻り値: Boolean, 取得に成功したかどうか
    - `IPerformanceCounter_QueryPerformanceFrequency(ByRef frequency As Currency)`:
      - 説明: パフォーマンスカウンターの周波数を取得する。
      - 引数:
        - `frequency`: Currency, パフォーマンスカウンターの周波数（出力用）
      - 戻り値: Boolean, 取得に成功したかどうか
    - `CheckHighResolutionSupport()`:
      - 説明: 高分解能タイマーがサポートされているかどうかを確認する。（プライベートメソッド）
      - 引数: なし
      - 戻り値: Boolean, 高分解能タイマーがサポートされているかどうか
    - `LogError(message As String)`:
      - 説明: エラーをログに記録する。（プライベートメソッド）
      - 引数:
        - `message`: String, エラーメッセージ
      - 戻り値: なし
    - `GetResolution()`:
      - 説明: パフォーマンスカウンターの分解能を取得する。
      - 引数: なし
      - 戻り値: Double, 分解能（秒単位）
- **その他特記事項**:
    - 高分解能タイマーがサポートされている場合、`mIsHighResolutionSupported` が `True` に設定される。
    - パフォーマンスカウンターの周波数は `mFrequency` にキャッシュされる。
    - テスト用の `ValidateState`, `GetFrequency`, `IsHighResolutionSupported`, `TestTimerConsistency` メソッドを持つ（DEBUG時のみ）。

### 21. PerformanceMonitorImpl

- **概要**: パフォーマンス測定機能を提供するクラス。
- **依存関係**:
    - IPerformanceMonitor
    - modWindowsAPI
    - clsLock
    - IAppConfig
    - modConfig
    - ErrorInfo
    - modError
    - modStackTrace
- **メソッド**:
    - `IPerformanceMonitor_Start(measurementName As String)`:
      - 説明: パフォーマンス測定を開始する。
      - 引数:
        - `measurementName`: String, 測定名
        - 戻り値: なし
      - `IPerformanceMonitor_Stop(measurementName As String)`:
        - 説明: パフォーマンス測定を終了する。
        - 引数:
          - `measurementName`: String, 測定名
        - 戻り値: なし
      - `IPerformanceMonitor_GetMeasurement(measurementName As String)`:
        - 説明: 指定された測定の経過時間（ミリ秒）を取得する。
        - 引数:
          - `measurementName`: String, 測定名
        - 戻り値: Double, 経過時間（ミリ秒）
      - `IPerformanceMonitor_GetAllMeasurements()`:
        - 説明: すべての測定の経過時間（ミリ秒）を取得する。
        - 引数: なし
        - 戻り値: Variant, 各測定の経過時間（ミリ秒）を格納した配列
      - `IPerformanceMonitor_Clear()`:
        - 説明: すべての測定をクリアする。
        - 引数: なし
        - 戻り値: なし
      - `IPerformanceMonitor_IsEnabled()`:
        - 説明: パフォーマンス監視が有効かどうかを取得する。
        - 引数: なし
        - 戻り値: Boolean, パフォーマンス監視が有効かどうか
      - `IPerformanceMonitor_Enable()`:
        - 説明: パフォーマンス監視を有効にする。
        - 引数: なし
        - 戻り値: なし
      - `IPerformanceMonitor_Disable()`:
        - 説明: パフォーマンス監視を無効にする。
        - 引数: なし
        - 戻り値: なし
      - `GetDetailedMeasurement(measurementName As String)`:
        - 説明: 指定された測定の詳細なレポートを取得する。
        - 引数:
          - `measurementName`: String, 測定名
        - 戻り値: String, 詳細なレポート
  - **その他特記事項**:
      - `mFrequency` メンバー変数にパフォーマンスカウンターの周波数を保持する。
      - `mMeasurements` コレクションに測定データを格納する。
      - `mIsEnabled` メンバー変数でパフォーマンス監視の有効/無効を管理する。
      - `mCurrentOperation` メンバー変数に現在実行中の操作名を格納する。
      - `PROCESS_MEMORY_COUNTERS` 型を使用して、プロセスのメモリ使用量を取得する。
      - テスト用の `ValidatePerformanceCounter`, `GetMeasurementCount`, `SimulateMeasurement`, `CurrentOperation` メソッド/プロパティを持つ（DEBUG時のみ）。

================
File: core/repomix-output.txt
================
This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-27T00:45:08.829Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
clsLogger.cls
clsPerformanceMonitor.cls
ConfigImpl.cls
ConsoleLogger.cls
DatabaseLogger.cls
DefaultLoggerSettings.cls
DefaultMessageFormatter.cls
EmergencyLogger.cls
ErrorHandlerManager.cls
ErrorImpl.cls
ErrorInfo.cls
EventLogImpl.cls
EventLogLogger.cls
FileLogger.cls
InvalidInputErrorHandler.cls
modAppInitializer.bas
modConfig.bas
modError.bas
modErrorCodes.bas
PerformanceCounterImpl.cls
PerformanceMonitorImpl.cls

================================================================
Files
================================================================

================
File: clsLogger.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "clsLogger"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements ILogger

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "clsLogger"

' ======================
' メンバ変数
' ======================
Private mSettings As ILoggerSettings
Private mLogQueue As IQueue
Private mLock As ILock
Private mTimerID As LongPtr
Private mLoggers As Object ' Dictionary of ILogger instances
Private mIsProcessing As Boolean
Private mWorkerThread As Object
Private mPerformanceMonitor As clsPerformanceMonitor
Private mIsInitialized As Boolean
Private Const MAX_RETRY_COUNT As Long = 3
Private Const RETRY_DELAY_MS As Long = 1000
Private Const EMERGENCY_LOG_PATH As String = "\PDI_emergency.log"

' ======================
' イベント
' ======================
Public Event Logged(ByVal logMessage As String, ByVal logLevel As LogLevel)

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    Set mLoggers = CreateObject("Scripting.Dictionary")
    Set mLogQueue = New QueueImpl ' QueueImplはIQueueを実装
    Set mPerformanceMonitor = New clsPerformanceMonitor
End Sub

Private Sub Class_Terminate()
    If mTimerID <> 0 Then
        KillTimer 0, mTimerID
        mTimerID = 0
    End If
    
    If Not mWorkerThread Is Nothing Then
        ' ワーカースレッドの終了を待機
        mIsProcessing = False
        While mWorkerThread.Status = 1 ' 実行中
            Sleep 100
        Wend
    End If
    
    Set mLogQueue = Nothing
    Set mLock = Nothing
    Set mPerformanceMonitor = Nothing
    Set mLoggers = Nothing
    Set mSettings = Nothing
    
    mIsInitialized = False
End Sub

' ======================
' 公開メソッド
' ======================
Public Sub Configure(ByVal settings As ILoggerSettings, _
                    ByVal queue As IQueue, _
                    ByVal lock As ILock, _
                    ByVal performanceMonitor As IPerformanceMonitor)
    Set mSettings = settings
    Set mLogQueue = queue
    Set mLock = lock
    Set mPerformanceMonitor = performanceMonitor
    
    ' ログ出力先の設定
    InitializeLoggers
    
    ' ワーカースレッドの開始
    StartWorkerThread
    
    mIsInitialized = True
End Sub

Public Sub SetLogger(ByVal destination As String, ByVal logger As ILogger)
    If mLoggers.Exists(destination) Then
        mLoggers.Remove destination
    End If
    mLoggers.Add destination, logger
End Sub

Private Sub InitializeLoggers()
    ' 既存のロガーをクリア
    mLoggers.RemoveAll
    
    ' 設定に基づいてロガーを初期化
    Dim destinations As Variant
    destinations = mSettings.GetLogDestinations()
    
    Dim i As Long
    For i = LBound(destinations) To UBound(destinations)
        SetLogger destinations(i), CreateLogger(destinations(i))
    Next i
    
    ' タイマーの設定
    If mTimerID <> 0 Then
        KillTimer 0, mTimerID
    End If
    mTimerID = SetTimer(0, 0, mSettings.TimerInterval, AddressOf TimerProc)
End Sub

' ======================
' ILogger実装
' ======================
Private Sub ILogger_Log(ByVal moduleName As String, ByVal message As String, Optional ByVal errorCode As ErrorCode)
    If Not mIsInitialized Then Exit Sub
    
    If Not mPerformanceMonitor Is Nothing Then
        mPerformanceMonitor.StartMeasurement "Logger_Log"
    End If
    
    mLock.AcquireLock
    
    On Error GoTo ErrorHandler
    
    ' ログレベルチェック
    If errorCode >= mSettings.LogLevel Then
        ' ログメッセージをキューに追加
        Dim logEntry As Variant
        logEntry = Array(moduleName, message, errorCode, Now)
        mLogQueue.Enqueue logEntry
    End If
    
Cleanup:
    mLock.ReleaseLock
    
    If Not mPerformanceMonitor Is Nothing Then
        mPerformanceMonitor.EndMeasurement "Logger_Log"
    End If
    Exit Sub
    
ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "ログ出力中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "ILogger_Log"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    Resume Cleanup
End Sub

Private Property Let ILogger_LogLevel(ByVal level As LogLevel)
    If Not mSettings Is Nothing Then
        mSettings.LogLevel = level
    End If
End Property

Private Property Get ILogger_LogLevel() As LogLevel
    If Not mSettings Is Nothing Then
        ILogger_LogLevel = mSettings.LogLevel
    End If
End Property

Private Property Let ILogger_LogDestination(ByVal destination As LogDestination)
    If Not mSettings Is Nothing Then
        mSettings.LogDestination = destination
    End If
End Property

Private Property Get ILogger_LogDestination() As LogDestination
    If Not mSettings Is Nothing Then
        ILogger_LogDestination = mSettings.LogDestination
    End If
End Property

' ======================
' プライベートメソッド
' ======================
Private Sub ProcessLogQueue()
    If Not mIsInitialized Then Exit Sub
    
    mLock.AcquireLock
    
    On Error GoTo ErrorHandler
    
    While mLogQueue.Count > 0
        Dim logEntry As Variant
        logEntry = mLogQueue.Dequeue
        
        ' 各ロガーでログを処理
        Dim destination As Variant
        For Each destination In mLoggers.Keys
            If mSettings.ShouldLog(destination, logEntry(2)) Then
                Dim logger As ILogger
                Set logger = mLoggers(destination)
                logger.Log CStr(logEntry(2)), CStr(logEntry(1)), CStr(logEntry(3)), CLng(logEntry(0))
            End If
        Next destination
        
        ' イベント発行
        RaiseEvent Logged(logEntry(1), logEntry(2))
    Wend
    
Cleanup:
    mLock.ReleaseLock
    Exit Sub
    
ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "ログキュー処理中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "ProcessLogQueue"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    Resume Cleanup
End Sub

Private Function CreateLogger(ByVal destination As String) As ILogger
    Select Case destination
        Case "File"
            Dim fileLogger As New FileLogger
            fileLogger.Initialize mSettings.GetFileOperations(), _
                                mLock, _
                                mPerformanceMonitor, _
                                mSettings.LogFilePath
            Set CreateLogger = fileLogger
            
        Case "Database"
            Dim dbLogger As New DatabaseLogger
            dbLogger.Initialize mSettings.GetConnectionPool(), _
                              mLock, _
                              mPerformanceMonitor, _
                              mSettings.GetDatabaseConfig(), _
                              mSettings.LogTableName
            Set CreateLogger = dbLogger
            
        Case "EventLog"
            Dim eventLogger As New EventLogLogger
            eventLogger.Initialize mSettings.GetEventLog(), _
                                 mLock, _
                                 mPerformanceMonitor, _
                                 mSettings.LogEventSource
            Set CreateLogger = eventLogger
            
        Case "Console"
            Dim consoleLogger As New ConsoleLogger
            consoleLogger.Initialize mPerformanceMonitor, True
            Set CreateLogger = consoleLogger
            
        Case Else
            Err.Raise vbObjectError + 1, "CreateLogger", "不明なログ出力先: " & destination
    End Select
End Function

' ワーカースレッドの作成と開始
Private Sub StartWorkerThread()
    Set mWorkerThread = CreateObject("WScript.Shell").Exec( _
        "cmd /c powershell -Command {" & _
        "    while ($true) {" & _
        "        if (-not $global:isProcessing) { break }" & _
        "        Start-Sleep -Milliseconds " & mSettings.TimerInterval & _
        "    }" & _
        "}")
    mIsProcessing = True
End Sub

' ======================
' テストサポート機能
' 警告: これらのメソッドは開発時のテスト目的でのみ使用し、
' 本番環境では使用しないでください。
' ======================
#If DEBUG Then
    ''' <summary>
    ''' ログキューのエントリ数を取得（テスト用）
    ''' </summary>
    Private Function GetQueueCount() As Long
        GetQueueCount = mLogQueue.Count
    End Function
    
    ''' <summary>
    ''' ログキューをクリア（テスト用）
    ''' </summary>
    Private Sub ClearQueue()
        Set mLogQueue = New Queue
    End Sub
    
    ''' <summary>
    ''' パフォーマンスモニターの参照を取得（テスト用）
    ''' </summary>
    Private Function GetPerformanceMonitor() As clsPerformanceMonitor
        Set GetPerformanceMonitor = mPerformanceMonitor
    End Function
    
    ''' <summary>
    ''' タイマー処理をシミュレート（テスト用）
    ''' </summary>
    Private Sub SimulateTimer()
        ProcessLogQueue
    End Sub
#End If

================
File: clsPerformanceMonitor.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "clsPerformanceMonitor"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

'@Description("パフォーマンス監視機能を提供するレガシークラス（新規実装はIPerformanceMonitorを使用してください）")

' ======================
' メンバ変数
' ======================
Private mImpl As IPerformanceMonitor

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    Set mImpl = New PerformanceMonitorImpl
End Sub

Private Sub Class_Terminate()
    Set mImpl = Nothing
End Sub

' ======================
' パブリックメソッド
' （レガシーサポート）
' ======================
Public Sub StartMeasurement(ByVal description As String)
    mImpl.Start description
End Sub

Public Sub EndMeasurement(ByVal description As String)
    mImpl.Stop description
End Sub

Public Function GetMeasurement(ByVal description As String) As String
    GetMeasurement = PerformanceMonitorImpl(mImpl).GetDetailedMeasurement(description)
End Function

Public Function GetAllMeasurements() As String
    Dim measurements As Variant
    measurements = mImpl.GetAllMeasurements()
    
    Dim result As String
    result = "Performance Monitoring Report" & vbCrLf & _
            "=========================" & vbCrLf
    
    Dim i As Long
    For i = LBound(measurements) To UBound(measurements)
        result = result & vbCrLf & "Measurement " & (i + 1) & ": " & measurements(i) & " ms"
    Next i
    
    GetAllMeasurements = result
End Function

Public Sub ClearMeasurements()
    mImpl.Clear
End Sub

' ======================
' プロパティ
' ======================
Public Property Get IsEnabled() As Boolean
    IsEnabled = mImpl.IsEnabled
End Property

Public Property Let IsEnabled(ByVal Value As Boolean)
    If Value Then
        mImpl.Enable
    Else
        mImpl.Disable
    End If
End Property

Public Property Get CurrentOperation() As String
    CurrentOperation = PerformanceMonitorImpl(mImpl).CurrentOperation
End Property

================
File: ConfigImpl.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "ConfigImpl"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements IAppConfig
Implements IDatabaseConfig

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "ConfigImpl"

' ======================
' メンバ変数
' ======================
Private mIniFile As IIniFile
Private mSettings As Collection
Private mLock As clsLock
Private mConnectionStringBuilder As IConnectionStringBuilder

' データベース設定
Private mConnectionString As String
Private mConnectionTimeout As Long
Private mCommandTimeout As Long
Private mDatabaseType As String
Private mLogTableName As String

' アプリケーション設定
Private mLogFilePath As String
Private mLogLevel As String
Private mMaxRetryCount As Long
Private mMaxStackDepth As Long
Private mTimerInterval As Long
Private mLogEventSource As String
Private mPerformanceMonitoringEnabled As Boolean
Private mDiagnosticsEnabled As Boolean
Private mAutoSave As Boolean

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    Set mSettings = New Collection
    Set mLock = New clsLock
    Set mIniFile = New IniFileImpl
    
    ' デフォルト値の設定
    mConnectionTimeout = 30
    mCommandTimeout = 30
    mDatabaseType = "ODBC"
    mLogTableName = "AppLog"
    mMaxRetryCount = 3
    mMaxStackDepth = 10
    mTimerInterval = 1000
    mPerformanceMonitoringEnabled = True
    mDiagnosticsEnabled = True
    mAutoSave = True
    
    ' データベースタイプに応じたConnectionStringBuilderの設定
    UpdateConnectionStringBuilder
End Sub

Private Sub Class_Terminate()
    Set mSettings = Nothing
    Set mLock = Nothing
    Set mIniFile = Nothing
    Set mConnectionStringBuilder = Nothing
End Sub

' ======================
' プライベートメソッド
' ======================
Private Sub UpdateConnectionStringBuilder()
    Select Case UCase$(mDatabaseType)
        Case "ODBC"
            Set mConnectionStringBuilder = New ODBCConnectionStringBuilder
        Case "OLEDB"
            Set mConnectionStringBuilder = New OLEDBConnectionStringBuilder
        Case Else
            ' デフォルトはODBCを使用
            Set mConnectionStringBuilder = New ODBCConnectionStringBuilder
    End Select
End Sub

' ======================
' IAppConfig実装
' ======================
Private Function IAppConfig_GetSetting(ByVal settingName As String) As Variant
    mLock.AcquireLock
    On Error Resume Next
    
    IAppConfig_GetSetting = mSettings(settingName)
    
    If Err.Number <> 0 Then
        ' 設定が見つからない場合はNullを返す
        IAppConfig_GetSetting = Null
    End If
    
    mLock.ReleaseLock
End Function

Private Sub IAppConfig_SetSetting(ByVal settingName As String, ByVal settingValue As Variant)
    mLock.AcquireLock
    On Error Resume Next
    
    mSettings.Remove settingName
    mSettings.Add settingValue, settingName
    
    If mAutoSave Then
        IAppConfig_SaveSettings App.Path & "\config.ini"
    End If
    
    mLock.ReleaseLock
End Sub

Private Sub IAppConfig_LoadSettings(ByVal filePath As String)
    mLock.AcquireLock
    On Error GoTo ErrorHandler
    
    ' INIファイルから設定を読み込む
    mLogFilePath = mIniFile.GetPrivateProfileString("Logging", "LogFilePath", App.Path & "\app.log", filePath)
    mLogLevel = mIniFile.GetPrivateProfileString("Logging", "LogLevel", "INFO", filePath)
    mMaxRetryCount = CLng(mIniFile.GetPrivateProfileString("System", "MaxRetryCount", "3", filePath))
    mMaxStackDepth = CLng(mIniFile.GetPrivateProfileString("System", "MaxStackDepth", "10", filePath))
    mTimerInterval = CLng(mIniFile.GetPrivateProfileString("System", "TimerInterval", "1000", filePath))
    mLogEventSource = mIniFile.GetPrivateProfileString("Logging", "EventSource", "MyApp", filePath)
    mPerformanceMonitoringEnabled = CBool(mIniFile.GetPrivateProfileString("System", "PerformanceMonitoring", "True", filePath))
    mDiagnosticsEnabled = CBool(mIniFile.GetPrivateProfileString("System", "Diagnostics", "True", filePath))
    mAutoSave = CBool(mIniFile.GetPrivateProfileString("System", "AutoSave", "True", filePath))
    
    ' データベース設定の読み込み
    mDatabaseType = mIniFile.GetPrivateProfileString("Database", "Type", "ODBC", filePath)
    mConnectionTimeout = CLng(mIniFile.GetPrivateProfileString("Database", "ConnectionTimeout", "30", filePath))
    mCommandTimeout = CLng(mIniFile.GetPrivateProfileString("Database", "CommandTimeout", "30", filePath))
    mLogTableName = mIniFile.GetPrivateProfileString("Database", "LogTable", "AppLog", filePath)
    
    ' ConnectionStringBuilderの更新
    UpdateConnectionStringBuilder
    
    ' ConnectionStringBuilderのプロパティを設定
    With mConnectionStringBuilder
        .Server = mIniFile.GetPrivateProfileString("Database", "Server", "", filePath)
        .Database = mIniFile.GetPrivateProfileString("Database", "Database", "", filePath)
        .UserName = mIniFile.GetPrivateProfileString("Database", "UserName", "", filePath)
        .Password = mIniFile.GetPrivateProfileString("Database", "Password", "", filePath)
        .AdditionalParameters = mIniFile.GetPrivateProfileString("Database", "AdditionalParameters", "", filePath)
    End With
    
    ' 接続文字列の生成
    mConnectionString = mConnectionStringBuilder.BuildConnectionString()
    
    mLock.ReleaseLock
    Exit Sub
    
ErrorHandler:
    mLock.ReleaseLock
    Err.Raise Err.Number, MODULE_NAME, "設定の読み込み中にエラーが発生しました: " & Err.Description
End Sub

Private Sub IAppConfig_SaveSettings(ByVal filePath As String)
    mLock.AcquireLock
    On Error GoTo ErrorHandler
    
    ' INIファイルに設定を保存
    mIniFile.WritePrivateProfileString "Logging", "LogFilePath", mLogFilePath, filePath
    mIniFile.WritePrivateProfileString "Logging", "LogLevel", mLogLevel, filePath
    mIniFile.WritePrivateProfileString "System", "MaxRetryCount", CStr(mMaxRetryCount), filePath
    mIniFile.WritePrivateProfileString "System", "MaxStackDepth", CStr(mMaxStackDepth), filePath
    mIniFile.WritePrivateProfileString "System", "TimerInterval", CStr(mTimerInterval), filePath
    mIniFile.WritePrivateProfileString "Logging", "EventSource", mLogEventSource, filePath
    mIniFile.WritePrivateProfileString "System", "PerformanceMonitoring", CStr(mPerformanceMonitoringEnabled), filePath
    mIniFile.WritePrivateProfileString "System", "Diagnostics", CStr(mDiagnosticsEnabled), filePath
    mIniFile.WritePrivateProfileString "System", "AutoSave", CStr(mAutoSave), filePath
    
    ' データベース設定の保存
    mIniFile.WritePrivateProfileString "Database", "Type", mDatabaseType, filePath
    mIniFile.WritePrivateProfileString "Database", "ConnectionTimeout", CStr(mConnectionTimeout), filePath
    mIniFile.WritePrivateProfileString "Database", "CommandTimeout", CStr(mCommandTimeout), filePath
    mIniFile.WritePrivateProfileString "Database", "LogTable", mLogTableName, filePath
    
    ' ConnectionStringBuilder設定の保存
    With mConnectionStringBuilder
        mIniFile.WritePrivateProfileString "Database", "Server", .Server, filePath
        mIniFile.WritePrivateProfileString "Database", "Database", .Database, filePath
        mIniFile.WritePrivateProfileString "Database", "UserName", .UserName, filePath
        mIniFile.WritePrivateProfileString "Database", "Password", .Password, filePath
        mIniFile.WritePrivateProfileString "Database", "AdditionalParameters", .AdditionalParameters, filePath
    End With
    
    mLock.ReleaseLock
    Exit Sub
    
ErrorHandler:
    mLock.ReleaseLock
    Err.Raise Err.Number, MODULE_NAME, "設定の保存中にエラーが発生しました: " & Err.Description
End Sub

' ======================
' IDatabaseConfig実装
' ======================
Private Function IDatabaseConfig_GetConnectionString() As String
    IDatabaseConfig_GetConnectionString = mConnectionString
End Function

Private Function IDatabaseConfig_GetDatabaseSetting(ByVal settingName As String) As Variant
    mLock.AcquireLock
    On Error Resume Next
    
    Select Case UCase$(settingName)
        Case "CONNECTIONTIMEOUT"
            IDatabaseConfig_GetDatabaseSetting = mConnectionTimeout
        Case "COMMANDTIMEOUT"
            IDatabaseConfig_GetDatabaseSetting = mCommandTimeout
        Case "DATABASETYPE"
            IDatabaseConfig_GetDatabaseSetting = mDatabaseType
        Case "LOGTABLENAME"
            IDatabaseConfig_GetDatabaseSetting = mLogTableName
        Case Else
            ' 設定が見つからない場合はNullを返す
            IDatabaseConfig_GetDatabaseSetting = Null
    End Select
    
    mLock.ReleaseLock
End Function

' ======================
' IAppConfigプロパティ実装
' ======================
Private Property Get IAppConfig_LogFilePath() As String
    IAppConfig_LogFilePath = mLogFilePath
End Property

Private Property Let IAppConfig_LogFilePath(ByVal value As String)
    mLogFilePath = value
End Property

Private Property Get IAppConfig_LogLevel() As String
    IAppConfig_LogLevel = mLogLevel
End Property

Private Property Let IAppConfig_LogLevel(ByVal value As String)
    mLogLevel = value
End Property

Private Property Get IAppConfig_MaxRetryCount() As Long
    IAppConfig_MaxRetryCount = mMaxRetryCount
End Property

Private Property Let IAppConfig_MaxRetryCount(ByVal value As Long)
    mMaxRetryCount = value
End Property

Private Property Get IAppConfig_MaxStackDepth() As Long
    IAppConfig_MaxStackDepth = mMaxStackDepth
End Property

Private Property Let IAppConfig_MaxStackDepth(ByVal value As Long)
    mMaxStackDepth = value
End Property

Private Property Get IAppConfig_TimerInterval() As Long
    IAppConfig_TimerInterval = mTimerInterval
End Property

Private Property Let IAppConfig_TimerInterval(ByVal value As Long)
    mTimerInterval = value
End Property

Private Property Get IAppConfig_LogEventSource() As String
    IAppConfig_LogEventSource = mLogEventSource
End Property

Private Property Let IAppConfig_LogEventSource(ByVal value As String)
    mLogEventSource = value
End Property

Private Property Get IAppConfig_PerformanceMonitoringEnabled() As Boolean
    IAppConfig_PerformanceMonitoringEnabled = mPerformanceMonitoringEnabled
End Property

Private Property Let IAppConfig_PerformanceMonitoringEnabled(ByVal value As Boolean)
    mPerformanceMonitoringEnabled = value
End Property

Private Property Get IAppConfig_DiagnosticsEnabled() As Boolean
    IAppConfig_DiagnosticsEnabled = mDiagnosticsEnabled
End Property

Private Property Let IAppConfig_DiagnosticsEnabled(ByVal value As Boolean)
    mDiagnosticsEnabled = value
End Property

Private Property Get IAppConfig_AutoSave() As Boolean
    IAppConfig_AutoSave = mAutoSave
End Property

Private Property Let IAppConfig_AutoSave(ByVal value As Boolean)
    mAutoSave = value
End Property

' ======================
' IDatabaseConfigプロパティ実装
' ======================
Private Property Get IDatabaseConfig_ConnectionString() As String
    IDatabaseConfig_ConnectionString = mConnectionString
End Property

Private Property Let IDatabaseConfig_ConnectionString(ByVal value As String)
    mConnectionString = value
End Property

Private Property Get IDatabaseConfig_ConnectionTimeout() As Long
    IDatabaseConfig_ConnectionTimeout = mConnectionTimeout
End Property

Private Property Let IDatabaseConfig_ConnectionTimeout(ByVal value As Long)
    mConnectionTimeout = value
End Property

Private Property Get IDatabaseConfig_CommandTimeout() As Long
    IDatabaseConfig_CommandTimeout = mCommandTimeout
End Property

Private Property Let IDatabaseConfig_CommandTimeout(ByVal value As Long)
    mCommandTimeout = value
End Property

Private Property Get IDatabaseConfig_DatabaseType() As String
    IDatabaseConfig_DatabaseType = mDatabaseType
End Property

Private Property Let IDatabaseConfig_DatabaseType(ByVal value As String)
    mDatabaseType = value
    UpdateConnectionStringBuilder
End Property

Private Property Get IDatabaseConfig_LogTableName() As String
    IDatabaseConfig_LogTableName = mLogTableName
End Property

Private Property Let IDatabaseConfig_LogTableName(ByVal value As String)
    mLogTableName = value
End Property

================
File: ConsoleLogger.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "ConsoleLogger"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements ILogger

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "ConsoleLogger"

' ======================
' メンバ変数
' ======================
Private mPerformanceMonitor As IPerformanceMonitor
Private mUseColors As Boolean

' ANSIエスケープシーケンス用の色コード
Private Const ANSI_RESET As String = vbNullString
Private Const ANSI_RED As String = vbNullString
Private Const ANSI_YELLOW As String = vbNullString
Private Const ANSI_GREEN As String = vbNullString
Private Const ANSI_BLUE As String = vbNullString

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    ' 何もしない（依存性は外部から注入）
End Sub

Private Sub Class_Terminate()
    Set mPerformanceMonitor = Nothing
End Sub

' ======================
' 公開メソッド
' ======================
Public Sub Initialize(ByVal performanceMonitor As IPerformanceMonitor, _
                     Optional ByVal useColors As Boolean = False)
    Set mPerformanceMonitor = performanceMonitor
    mUseColors = useColors
End Sub

' ======================
' ILogger実装
' ======================
Private Sub ILogger_Log(ByVal logLevel As String, _
                       ByVal message As String, _
                       Optional ByVal stackTrace As String, _
                       Optional ByVal errorCode As Long)
    If mPerformanceMonitor Is Nothing Then Exit Sub
    
    mPerformanceMonitor.StartMeasurement "ConsoleLogger_Log"
    
    On Error GoTo ErrorHandler
    
    ' ログメッセージの組み立てと出力
    Dim logMessage As String
    logMessage = BuildLogMessage(logLevel, message, stackTrace, errorCode)
    WriteToConsole logMessage, logLevel
    
Cleanup:
    mPerformanceMonitor.EndMeasurement "ConsoleLogger_Log"
    Exit Sub
    
ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "コンソールログ出力中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "ILogger_Log"
        .StackTrace = stackTrace
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    Resume Cleanup
End Sub

' ======================
' プライベートメソッド
' ======================
Private Function BuildLogMessage(ByVal logLevel As String, _
                               ByVal message As String, _
                               ByVal stackTrace As String, _
                               ByVal errorCode As Long) As String
    BuildLogMessage = Format$(Now, "yyyy/mm/dd hh:nn:ss") & " " & _
                     "[" & logLevel & "] " & _
                     IIf(errorCode <> 0, "(Code: " & errorCode & ") ", "") & _
                     message & _
                     IIf(Len(stackTrace) > 0, vbCrLf & "Stack Trace: " & stackTrace, "")
End Function

Private Sub WriteToConsole(ByVal logMessage As String, ByVal logLevel As String)
    If Not mUseColors Then
        Debug.Print logMessage
        Exit Sub
    End If
    
    ' ログレベルに応じた色付け
    Dim colorCode As String
    Select Case UCase$(logLevel)
        Case "ERROR", "FATAL"
            colorCode = ANSI_RED
        Case "WARNING"
            colorCode = ANSI_YELLOW
        Case "SUCCESS"
            colorCode = ANSI_GREEN
        Case "INFO"
            colorCode = ANSI_BLUE
        Case Else
            colorCode = ANSI_RESET
    End Select
    
    Debug.Print colorCode & logMessage & ANSI_RESET
End Sub

================
File: DatabaseLogger.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "DatabaseLogger"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements ILogger

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "DatabaseLogger"

' ======================
' メンバ変数
' ======================
Private mConnectionPool As IConnectionPool
Private mLock As ILock
Private mPerformanceMonitor As IPerformanceMonitor
Private mDatabaseConfig As IDatabaseConfig
Private mTableName As String
Private Const MAX_RETRY_COUNT As Long = 3
Private Const RETRY_DELAY_MS As Long = 1000

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    ' 何もしない（依存性は外部から注入）
End Sub

Private Sub Class_Terminate()
    Set mConnectionPool = Nothing
    Set mLock = Nothing
    Set mPerformanceMonitor = Nothing
    Set mDatabaseConfig = Nothing
End Sub

' ======================
' 公開メソッド
' ======================
Public Sub Initialize(ByVal connectionPool As IConnectionPool, _
                     ByVal lock As ILock, _
                     ByVal performanceMonitor As IPerformanceMonitor, _
                     ByVal databaseConfig As IDatabaseConfig, _
                     ByVal tableName As String)
    Set mConnectionPool = connectionPool
    Set mLock = lock
    Set mPerformanceMonitor = performanceMonitor
    Set mDatabaseConfig = databaseConfig
    mTableName = tableName
End Sub

' ======================
' ILogger実装
' ======================
Private Sub ILogger_Log(ByVal logLevel As String, _
                       ByVal message As String, _
                       Optional ByVal stackTrace As String, _
                       Optional ByVal errorCode As Long)
    If mConnectionPool Is Nothing Then Exit Sub
    
    mPerformanceMonitor.StartMeasurement "DatabaseLogger_Log"
    mLock.AcquireLock
    
    Dim conn As Object
    Set conn = Nothing
    
    On Error GoTo ErrorHandler
    
    Dim retryCount As Long
    Do While retryCount < MAX_RETRY_COUNT
        If WriteLogToDatabase(logLevel, message, stackTrace, errorCode) Then Exit Do
        retryCount = retryCount + 1
        If retryCount < MAX_RETRY_COUNT Then Sleep RETRY_DELAY_MS
    Loop
    
Cleanup:
    mLock.ReleaseLock
    mPerformanceMonitor.EndMeasurement "DatabaseLogger_Log"
    Exit Sub
    
ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "データベースログ出力中にエラーが発生しました: " & Err.Description
        .Category = ECDatabase
        .Source = MODULE_NAME
        .ProcedureName = "ILogger_Log"
        .StackTrace = stackTrace
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    Resume Cleanup
End Sub

' ======================
' プライベートメソッド
' ======================
Private Function WriteLogToDatabase(ByVal logLevel As String, _
                                  ByVal message As String, _
                                  ByVal stackTrace As String, _
                                  ByVal errorCode As Long) As Boolean
    On Error Resume Next
    
    Dim conn As Object
    Set conn = mConnectionPool.AcquireConnection()
    
    If conn Is Nothing Then
        WriteLogToDatabase = False
        Exit Function
    End If
    
    ' コマンドオブジェクトの作成
    Dim cmd As Object
    Set cmd = CreateObject("ADODB.Command")
    With cmd
        Set .ActiveConnection = conn
        .CommandText = "INSERT INTO " & mTableName & " " & _
                      "(LogTime, LogLevel, Message, StackTrace, ErrorCode) " & _
                      "VALUES (?, ?, ?, ?, ?)"
        .Parameters.Append .CreateParameter("LogTime", adDate, adParamInput, , Now)
        .Parameters.Append .CreateParameter("LogLevel", adVarChar, adParamInput, 50, logLevel)
        .Parameters.Append .CreateParameter("Message", adVarChar, adParamInput, 4000, message)
        .Parameters.Append .CreateParameter("StackTrace", adVarChar, adParamInput, 4000, stackTrace)
        .Parameters.Append .CreateParameter("ErrorCode", adInteger, adParamInput, , errorCode)
        .Execute
    End With
    
    WriteLogToDatabase = (Err.Number = 0)
    
    ' 接続の解放
    If Not conn Is Nothing Then
        mConnectionPool.ReleaseConnection conn
        Set conn = Nothing
    End If
    
    On Error GoTo 0
End Function

================
File: DefaultLoggerSettings.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "DefaultLoggerSettings"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements ILoggerSettings

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "DefaultLoggerSettings"

' ======================
' メンバ変数
' ======================
Private mAppConfig As IAppConfig
Private mLogLevel As LogLevel
Private mLogDestinations As Collection
Private mLogFilePath As String
Private mLogTableName As String
Private mLogEventSource As String
Private mTimerInterval As Long
Private mFileOperations As IFileOperations
Private mConnectionPool As IConnectionPool
Private mEventLog As IEventLog
Private mDatabaseConfig As IDatabaseConfig

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    Set mLogDestinations = New Collection
    mTimerInterval = 1000 ' デフォルト値: 1秒
End Sub

Private Sub Class_Terminate()
    Set mAppConfig = Nothing
    Set mLogDestinations = Nothing
    Set mFileOperations = Nothing
    Set mConnectionPool = Nothing
    Set mEventLog = Nothing
    Set mDatabaseConfig = Nothing
End Sub

' ======================
' 公開メソッド
' ======================
Public Sub Initialize(ByVal appConfig As IAppConfig, _
                     ByVal fileOperations As IFileOperations, _
                     ByVal connectionPool As IConnectionPool, _
                     ByVal eventLog As IEventLog, _
                     ByVal databaseConfig As IDatabaseConfig)
    Set mAppConfig = appConfig
    Set mFileOperations = fileOperations
    Set mConnectionPool = connectionPool
    Set mEventLog = eventLog
    Set mDatabaseConfig = databaseConfig
    
    ' 設定の読み込み
    LoadSettings
End Sub

' ======================
' ILoggerSettings実装
' ======================
Private Property Get ILoggerSettings_LogLevel() As LogLevel
    ILoggerSettings_LogLevel = mLogLevel
End Property

Private Property Let ILoggerSettings_LogLevel(ByVal value As LogLevel)
    mLogLevel = value
End Property

Private Function ILoggerSettings_GetLogDestinations() As Variant
    Dim result() As String
    ReDim result(1 To mLogDestinations.Count)
    
    Dim i As Long
    For i = 1 To mLogDestinations.Count
        result(i) = mLogDestinations(i)
    Next i
    
    ILoggerSettings_GetLogDestinations = result
End Function

Private Property Get ILoggerSettings_LogFilePath() As String
    ILoggerSettings_LogFilePath = mLogFilePath
End Property

Private Property Get ILoggerSettings_LogTableName() As String
    ILoggerSettings_LogTableName = mLogTableName
End Property

Private Property Get ILoggerSettings_LogEventSource() As String
    ILoggerSettings_LogEventSource = mLogEventSource
End Property

Private Property Get ILoggerSettings_TimerInterval() As Long
    ILoggerSettings_TimerInterval = mTimerInterval
End Property

Private Function ILoggerSettings_GetFileOperations() As IFileOperations
    Set ILoggerSettings_GetFileOperations = mFileOperations
End Function

Private Function ILoggerSettings_GetConnectionPool() As IConnectionPool
    Set ILoggerSettings_GetConnectionPool = mConnectionPool
End Function

Private Function ILoggerSettings_GetEventLog() As IEventLog
    Set ILoggerSettings_GetEventLog = mEventLog
End Function

Private Function ILoggerSettings_GetDatabaseConfig() As IDatabaseConfig
    Set ILoggerSettings_GetDatabaseConfig = mDatabaseConfig
End Function

Private Function ILoggerSettings_ShouldLog(ByVal destination As String, ByVal level As LogLevel) As Boolean
    ' 指定された出力先が有効で、ログレベルが現在の設定以上の場合にログを出力
    Dim i As Long
    For i = 1 To mLogDestinations.Count
        If mLogDestinations(i) = destination Then
            ILoggerSettings_ShouldLog = (level >= mLogLevel)
            Exit Function
        End If
    Next i
    
    ILoggerSettings_ShouldLog = False
End Function

Private Function ILoggerSettings_FormatLogMessage(ByVal logLevel As String, _
                                                ByVal message As String, _
                                                ByVal stackTrace As String, _
                                                ByVal errorCode As Long) As String
    Dim result As String
    result = Format$(Now, "yyyy/mm/dd hh:nn:ss") & " " & _
             "[" & logLevel & "] " & _
             IIf(errorCode <> 0, "(Code: " & errorCode & ") ", "") & _
             message
             
    If Len(stackTrace) > 0 Then
        result = result & vbCrLf & "Stack Trace: " & stackTrace
    End If
    
    ILoggerSettings_FormatLogMessage = result
End Function

' ======================
' プライベートメソッド
' ======================
Private Sub LoadSettings()
    If mAppConfig Is Nothing Then Exit Sub
    
    ' ログレベルの読み込み
    mLogLevel = mAppConfig.GetValue("Logging", "Level", LOG_LEVEL_INFO)
    
    ' 出力先の読み込み
    Dim destinations As String
    destinations = mAppConfig.GetValue("Logging", "Destinations", "File")
    ParseDestinations destinations
    
    ' ファイル出力設定
    mLogFilePath = mAppConfig.GetValue("Logging", "FilePath", "log\application.log")
    
    ' データベース出力設定
    mLogTableName = mAppConfig.GetValue("Logging", "TableName", "ApplicationLog")
    
    ' イベントログ出力設定
    mLogEventSource = mAppConfig.GetValue("Logging", "EventSource", "PDI Logger")
    
    ' タイマー間隔設定
    mTimerInterval = CLng(mAppConfig.GetValue("Logging", "TimerInterval", "1000"))
End Sub

Private Sub ParseDestinations(ByVal destinations As String)
    Set mLogDestinations = New Collection
    
    Dim parts() As String
    parts = Split(destinations, ",")
    
    Dim i As Long
    For i = LBound(parts) To UBound(parts)
        mLogDestinations.Add Trim$(parts(i))
    Next i
End Sub

================
File: DefaultMessageFormatter.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "DefaultMessageFormatter"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredefinedId = False
Attribute VB_Exposed = True
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "DefaultMessageFormatter"

' ======================
' インターフェース実装
' ======================
Implements IMessageFormatter

' ======================
' IMessageFormatter実装
' ======================
Private Function IMessageFormatter_FormatMessage(ByVal message As String, ByRef errorInfo As ErrorInfo) As String
    On Error GoTo ErrorHandler
    
    Dim formattedMessage As String
    
    ' 基本メッセージの設定
    formattedMessage = IIf(Len(message) > 0, message & vbCrLf & vbCrLf, "エラーが発生しました。" & vbCrLf & vbCrLf)
    
    ' エラー詳細情報の追加
    formattedMessage = formattedMessage & _
                      "説明: " & errorInfo.Description & vbCrLf & _
                      "発生場所: " & errorInfo.Source & "." & errorInfo.ProcedureName
    
    ' スタックトレースが存在する場合は追加
    If Len(errorInfo.StackTrace) > 0 Then
        formattedMessage = formattedMessage & vbCrLf & vbCrLf & _
                          "スタックトレース:" & vbCrLf & _
                          errorInfo.StackTrace
    End If
    
    IMessageFormatter_FormatMessage = formattedMessage
    Exit Function
    
ErrorHandler:
    ' エラー情報の作成
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "メッセージのフォーマット中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "IMessageFormatter_FormatMessage"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    
    ' エラーハンドラに委譲
    modError.HandleError errDetail
    
    ' デフォルトメッセージを返す
    IMessageFormatter_FormatMessage = "エラーメッセージのフォーマットに失敗しました。"
End Function

#If DEBUG Then
    ' ======================
    ' テストサポート機能
    ' ======================
    Public Function TestFormatMessage(ByVal testMessage As String, ByRef testError As ErrorInfo) As String
        TestFormatMessage = IMessageFormatter_FormatMessage(testMessage, testError)
    End Function
#End If

================
File: EmergencyLogger.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "EmergencyLogger"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = True
Option Explicit

Implements IEmergencyLogger

'==========================
' 定数
'==========================
Private Const MODULE_NAME As String = "EmergencyLogger"
Private Const EMERGENCY_LOG_FILE As String = "\PDI_emergency.log"
Private Const EVENT_SOURCE As String = "PDI Error"

'==========================
' メンバ変数
'==========================
Private mLock As clsLock

'==========================
' 初期化・終了処理
'==========================
Private Sub Class_Initialize()
    Set mLock = New clsLock
End Sub

Private Sub Class_Terminate()
    Set mLock = Nothing
End Sub

'==========================
' IEmergencyLogger 実装
'==========================
Private Sub IEmergencyLogger_LogEmergencyError(ByVal message As String, Optional ByRef errorInfo As ErrorInfo)
    mLock.AcquireLock
    On Error Resume Next
    
    ' エラー情報をフォーマット
    Dim formattedMessage As String
    formattedMessage = FormatErrorMessage(message, errorInfo)
    
    ' イベントログへの出力を試みる
    WriteToEventLog formattedMessage
    
    ' ファイルへの出力を試みる
    WriteToEmergencyFile formattedMessage
    
    mLock.ReleaseLock
End Sub

'==========================
' プライベートメソッド
'==========================

''' <summary>
''' エラーメッセージをフォーマットします
''' </summary>
Private Function FormatErrorMessage(ByVal message As String, ByRef errorInfo As ErrorInfo) As String
    Dim builder As String
    builder = Now & " - " & message
    
    If Not IsMissing(errorInfo) Then
        With errorInfo
            builder = builder & vbCrLf & _
                     "コード: " & .Code & vbCrLf & _
                     "説明: " & .Description & vbCrLf & _
                     "ソース: " & .Source & vbCrLf & _
                     "プロシージャ: " & .ProcedureName & vbCrLf & _
                     "発生時刻: " & .OccurredAt & vbCrLf & _
                     "スタックトレース: " & vbCrLf & .StackTrace
        End With
    End If
    
    FormatErrorMessage = builder
End Function

''' <summary>
''' イベントログにエラーを記録します
''' </summary>
Private Sub WriteToEventLog(ByVal message As String)
    On Error Resume Next
    modWindowsAPI.WriteToEventLog EVENT_SOURCE, message, EVENTLOG_ERROR_TYPE
End Sub

''' <summary>
''' 緊急用ファイルにエラーを記録します
''' </summary>
Private Sub WriteToEmergencyFile(ByVal message As String)
    On Error Resume Next
    
    Dim fso As Object
    Set fso = CreateObject("Scripting.FileSystemObject")
    
    Dim logPath As String
    logPath = Environ$("TEMP") & EMERGENCY_LOG_FILE
    
    Dim logFile As Object
    Set logFile = fso.OpenTextFile(logPath, 8, True) ' 8: ForAppending, Create if doesn't exist
    logFile.WriteLine message
    logFile.Close
    
    Set logFile = Nothing
    Set fso = Nothing
End Sub

'==========================
' テストサポート（開発環境用）
'==========================
#If DEBUG Then
    Public Function GetEmergencyLogPath() As String
        GetEmergencyLogPath = Environ$("TEMP") & EMERGENCY_LOG_FILE
    End Function
    
    Public Sub ClearEmergencyLog()
        On Error Resume Next
        Kill GetEmergencyLogPath()
    End Sub
#End If

================
File: ErrorHandlerManager.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "ErrorHandlerManager"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = True
Option Explicit

'@Description("エラーハンドラーの管理を行うクラス")

'==========================
' 定数
'==========================
Private Const MODULE_NAME As String = "ErrorHandlerManager"

'==========================
' メンバ変数
'==========================
Private mHandlers As Collection
Private mLock As clsLock
Private mIsInitialized As Boolean

'==========================
' 初期化・終了処理
'==========================
Private Sub Class_Initialize()
    Set mHandlers = New Collection
    Set mLock = New clsLock
    InitializeManager
End Sub

Private Sub Class_Terminate()
    Set mHandlers = Nothing
    Set mLock = Nothing
    mIsInitialized = False
End Sub

'==========================
' パブリックメソッド
'==========================

''' <summary>
''' エラーハンドラーマネージャーを初期化します
''' </summary>
Public Sub InitializeManager()
    If mIsInitialized Then Exit Sub
    
    RegisterDefaultHandlers
    mIsInitialized = True
End Sub

''' <summary>
''' エラーコードに対応するエラーハンドラーを登録します
''' </summary>
''' <param name="errorCode">エラーコード</param>
''' <param name="handler">エラーハンドラー</param>
Public Sub RegisterHandler(ByVal errorCode As ErrorCode, ByVal handler As IErrorHandler)
    mLock.AcquireLock
    
    On Error Resume Next
    mHandlers.Remove CStr(errorCode)
    On Error GoTo 0
    
    mHandlers.Add handler, CStr(errorCode)
    
    mLock.ReleaseLock
End Sub

''' <summary>
''' エラーコードに対応するエラーハンドラーの登録を解除します
''' </summary>
''' <param name="errorCode">エラーコード</param>
Public Sub UnregisterHandler(ByVal errorCode As ErrorCode)
    mLock.AcquireLock
    
    On Error Resume Next
    mHandlers.Remove CStr(errorCode)
    On Error GoTo 0
    
    mLock.ReleaseLock
End Sub

''' <summary>
''' エラーコードに対応するエラーハンドラーを取得します
''' </summary>
''' <param name="errorCode">エラーコード</param>
''' <returns>エラーハンドラー。未登録の場合はデフォルトハンドラー</returns>
Public Function GetErrorHandler(ByVal errorCode As ErrorCode) As IErrorHandler
    Dim handler As IErrorHandler
    
    mLock.AcquireLock
    
    On Error Resume Next
    Set handler = mHandlers(CStr(errorCode))
    If Err.Number <> 0 Then
        ' 該当するハンドラが見つからない場合は、エラーカテゴリに基づいてデフォルトハンドラを返す
        Set handler = GetDefaultHandlerForCategory(modErrorCodes.GetErrorCategory(errorCode))
    End If
    On Error GoTo 0
    
    mLock.ReleaseLock
    
    Set GetErrorHandler = handler
End Function

'==========================
' プライベートメソッド
'==========================

''' <summary>
''' デフォルトのエラーハンドラーを登録します
''' </summary>
Private Sub RegisterDefaultHandlers()
    ' データベース接続エラー用ハンドラ
    RegisterHandler ErrDbConnectionFailed, New DatabaseConnectionErrorHandler
    
    ' ファイル不在エラー用ハンドラ
    RegisterHandler ErrFileNotFound, New FileNotFoundErrorHandler
    
    ' 入力検証エラー用ハンドラ
    RegisterHandler ErrInvalidInput, New InvalidInputErrorHandler
End Sub

''' <summary>
''' エラーカテゴリに対応するデフォルトのエラーハンドラーを取得します
''' </summary>
''' <param name="category">エラーカテゴリ</param>
''' <returns>デフォルトのエラーハンドラー</returns>
Private Function GetDefaultHandlerForCategory(ByVal category As ErrorCodeCategory) As IErrorHandler
    Select Case category
        Case ECDatabase
            Set GetDefaultHandlerForCategory = New DatabaseConnectionErrorHandler
        Case ECFileIO
            Set GetDefaultHandlerForCategory = New FileNotFoundErrorHandler
        Case Else
            Set GetDefaultHandlerForCategory = New InvalidInputErrorHandler
    End Select
End Function

'==========================
' テストサポート（開発環境用）
'==========================
#If DEBUG Then
    Public Function GetHandlerCount() As Long
        mLock.AcquireLock
        GetHandlerCount = mHandlers.Count
        mLock.ReleaseLock
    End Function
    
    Public Sub ClearHandlers()
        mLock.AcquireLock
        Set mHandlers = New Collection
        mLock.ReleaseLock
    End Sub
#End If

================
File: ErrorImpl.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "ErrorImpl"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = True
Option Explicit

Implements IError

'==========================
' 定数
'==========================
Private Const MODULE_NAME As String = "ErrorImpl"
Private Const MAX_ERROR_RECURSION As Long = 3
Private Const ERROR_COUNT_DICT_SIZE As Long = 100

'==========================
' メンバ変数
'==========================
Private mHandlerManager As ErrorHandlerManager
Private mEmergencyLogger As IEmergencyLogger
Private mErrorCounts As Object ' Scripting.Dictionary
Private mLock As clsLock
Private mIsInitialized As Boolean
Private mErrorRecursionCount As Long
Private mPerformanceMonitor As clsPerformanceMonitor

'==========================
' 初期化・終了処理
'==========================
Private Sub Class_Initialize()
    Set mHandlerManager = New ErrorHandlerManager
    Set mEmergencyLogger = New EmergencyLogger
    Set mErrorCounts = CreateObject("Scripting.Dictionary")
    Set mLock = New clsLock
    Set mPerformanceMonitor = New clsPerformanceMonitor
    mErrorRecursionCount = 0
    mIsInitialized = True
End Sub

Private Sub Class_Terminate()
    Set mHandlerManager = Nothing
    Set mEmergencyLogger = Nothing
    Set mErrorCounts = Nothing
    Set mLock = Nothing
    Set mPerformanceMonitor = Nothing
    mIsInitialized = False
End Sub

'==========================
' IError 実装
'==========================
Private Function IError_HandleError(ByRef errorInfo As ErrorInfo) As Boolean
    If Not mIsInitialized Then Exit Function
    
    ' パフォーマンス計測開始
    mPerformanceMonitor.StartMeasurement "HandleError"
    
    ' エラーの再帰制御
    mErrorRecursionCount = mErrorRecursionCount + 1
    If mErrorRecursionCount > MAX_ERROR_RECURSION Then
        mEmergencyLogger.LogEmergencyError "エラー処理の再帰回数が上限を超えました。処理を中断します。", errorInfo
        IError_HandleError = False
        GoTo Cleanup
    End If
    
    mLock.AcquireLock
    On Error GoTo ErrorHandler
    
    ' エラー情報の補完
    CompleteErrorInfo errorInfo
    
    ' エラー発生回数をカウント
    IError_IncrementErrorCount errorInfo.Code
    
    ' エラーハンドラーの取得と実行
    Dim handler As IErrorHandler
    Set handler = mHandlerManager.GetErrorHandler(errorInfo.Code)
    
    If Not handler Is Nothing Then
        IError_HandleError = handler.HandleError(errorInfo)
    End If
    
    mLock.ReleaseLock
    GoTo Cleanup
    
ErrorHandler:
    mLock.ReleaseLock
    mEmergencyLogger.LogEmergencyError "HandleError中にエラーが発生しました: " & Err.Description, errorInfo
    IError_HandleError = False
    
Cleanup:
    mErrorRecursionCount = mErrorRecursionCount - 1
    mPerformanceMonitor.EndMeasurement "HandleError"
End Function

Private Sub IError_RegisterHandler(ByVal errorCode As ErrorCode, ByVal handler As IErrorHandler)
    If Not mIsInitialized Then Exit Sub
    mHandlerManager.RegisterHandler errorCode, handler
End Sub

Private Sub IError_UnregisterHandler(ByVal errorCode As ErrorCode)
    If Not mIsInitialized Then Exit Sub
    mHandlerManager.UnregisterHandler errorCode
End Sub

Private Sub IError_IncrementErrorCount(ByVal errorCode As ErrorCode)
    mLock.AcquireLock
    
    Dim key As String
    key = CStr(errorCode)
    
    If Not mErrorCounts.Exists(key) Then
        mErrorCounts.Add key, 1
    Else
        mErrorCounts(key) = mErrorCounts(key) + 1
    End If
    
    ' エラーカウントの上限を超えた場合、古いエントリを削除
    If mErrorCounts.Count > ERROR_COUNT_DICT_SIZE Then
        RemoveOldestErrorCount
    End If
    
    mLock.ReleaseLock
End Sub

Private Function IError_CheckErrorThreshold(ByVal errorCode As ErrorCode, ByVal threshold As Long) As Boolean
    mLock.AcquireLock
    
    Dim key As String
    key = CStr(errorCode)
    
    IError_CheckErrorThreshold = False
    If mErrorCounts.Exists(key) Then
        IError_CheckErrorThreshold = (mErrorCounts(key) >= threshold)
    End If
    
    mLock.ReleaseLock
End Function

'==========================
' プライベートメソッド
'==========================

''' <summary>
''' エラー情報を補完します
''' </summary>
Private Sub CompleteErrorInfo(ByRef errorInfo As ErrorInfo)
    With errorInfo
        If .OccurredAt = #12:00:00 AM# Then .OccurredAt = Now
        If .Category = 0 Then .Category = modErrorCodes.GetErrorCategory(.Code)
        If Len(.StackTrace) = 0 Then .StackTrace = modStackTrace.GetStackTrace()
    End With
End Sub

''' <summary>
''' 最も古いエラーカウントを削除します
''' </summary>
Private Sub RemoveOldestErrorCount()
    If mErrorCounts.Count = 0 Then Exit Sub
    
    Dim oldestKey As String
    oldestKey = mErrorCounts.Keys()(0)
    mErrorCounts.Remove oldestKey
End Sub

'==========================
' テストサポート（開発環境用）
'==========================
#If DEBUG Then
    Public Function GetErrorCount(ByVal errorCode As ErrorCode) As Long
        mLock.AcquireLock
        
        Dim key As String
        key = CStr(errorCode)
        
        GetErrorCount = 0
        If mErrorCounts.Exists(key) Then
            GetErrorCount = mErrorCounts(key)
        End If
        
        mLock.ReleaseLock
    End Function
    
    Public Sub ClearErrorCounts()
        mLock.AcquireLock
        mErrorCounts.RemoveAll
        mLock.ReleaseLock
    End Sub
    
    Public Function GetPerformanceReport() As String
        GetPerformanceReport = mPerformanceMonitor.GetAllMeasurements()
    End Function
#End If

================
File: ErrorInfo.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "ErrorInfo"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' プロパティ
' ======================
Private mCode As Long
Private mDescription As String
Private mCategory As ErrorCodeCategory
Private mSource As String
Private mProcedureName As String
Private mStackTrace As String
Private mOccurredAt As Date
Private mSeverity As ErrorSeverity
Private mAdditionalInfo As Collection
Private mInnerError As ErrorInfo
Private mRecoveryAttempted As Boolean
Private mRecoverySuccessful As Boolean

' ======================
' 列挙型
' ======================
Public Enum ErrorSeverity
    ESInfo = 1
    ESWarning = 2
    ESError = 3
    ESCritical = 4
End Enum

' ======================
' プロパティ
' ======================
Public Property Get Code() As Long
    Code = mCode
End Property
Public Property Let Code(ByVal value As Long)
    mCode = value
End Property

Public Property Get Description() As String
    Description = mDescription
End Property
Public Property Let Description(ByVal value As String)
    mDescription = value
End Property

Public Property Get Category() As ErrorCodeCategory
    Category = mCategory
End Property
Public Property Let Category(ByVal value As ErrorCodeCategory)
    mCategory = value
End Property

Public Property Get Source() As String
    Source = mSource
End Property
Public Property Let Source(ByVal value As String)
    mSource = value
End Property

Public Property Get ProcedureName() As String
    ProcedureName = mProcedureName
End Property
Public Property Let ProcedureName(ByVal value As String)
    mProcedureName = value
End Property

Public Property Get StackTrace() As String
    StackTrace = mStackTrace
End Property
Public Property Let StackTrace(ByVal value As String)
    mStackTrace = value
End Property

Public Property Get OccurredAt() As Date
    OccurredAt = mOccurredAt
End Property
Public Property Let OccurredAt(ByVal value As Date)
    mOccurredAt = value
End Property

Public Property Get Severity() As ErrorSeverity
    Severity = mSeverity
End Property
Public Property Let Severity(ByVal value As ErrorSeverity)
    mSeverity = value
End Property

Public Property Get InnerError() As ErrorInfo
    Set InnerError = mInnerError
End Property
Public Property Set InnerError(ByVal value As ErrorInfo)
    Set mInnerError = value
End Property

Public Property Get RecoveryAttempted() As Boolean
    RecoveryAttempted = mRecoveryAttempted
End Property
Public Property Let RecoveryAttempted(ByVal value As Boolean)
    mRecoveryAttempted = value
End Property

Public Property Get RecoverySuccessful() As Boolean
    RecoverySuccessful = mRecoverySuccessful
End Property
Public Property Let RecoverySuccessful(ByVal value As Boolean)
    mRecoverySuccessful = value
End Property

' ======================
' 初期化
' ======================
Private Sub Class_Initialize()
    Set mAdditionalInfo = New Collection
End Sub

' ======================
' パブリックメソッド
' ======================
Public Sub AddAdditionalInfo(ByVal key As String, ByVal value As Variant)
    On Error Resume Next
    mAdditionalInfo.Remove key
    On Error GoTo 0
    mAdditionalInfo.Add value, key
End Sub

Public Function GetAdditionalInfo(ByVal key As String) As Variant
    On Error Resume Next
    GetAdditionalInfo = mAdditionalInfo(key)
    On Error GoTo 0
End Function

Public Function HasAdditionalInfo(ByVal key As String) As Boolean
    On Error Resume Next
    Dim temp As Variant
    temp = mAdditionalInfo(key)
    HasAdditionalInfo = (Err.Number = 0)
    On Error GoTo 0
End Function

Public Function Clone() As ErrorInfo
    Dim result As New ErrorInfo
    With result
        .Code = mCode
        .Description = mDescription
        .Category = mCategory
        .Source = mSource
        .ProcedureName = mProcedureName
        .StackTrace = mStackTrace
        .OccurredAt = mOccurredAt
        .Severity = mSeverity
        .RecoveryAttempted = mRecoveryAttempted
        .RecoverySuccessful = mRecoverySuccessful
        If Not mInnerError Is Nothing Then
            Set .InnerError = mInnerError.Clone
        End If
        
        ' 追加情報のコピー
        Dim key As Variant
        For Each key In mAdditionalInfo
            .AddAdditionalInfo CStr(key), mAdditionalInfo(key)
        Next key
    End With
    Set Clone = result
End Function

Public Function ToString() As String
    Dim result As String
    result = "Error Details:" & vbCrLf & _
            "Code: " & mCode & vbCrLf & _
            "Description: " & mDescription & vbCrLf & _
            "Category: " & mCategory & vbCrLf & _
            "Source: " & mSource & vbCrLf & _
            "Procedure: " & mProcedureName & vbCrLf & _
            "Occurred At: " & Format(mOccurredAt, "yyyy/mm/dd hh:nn:ss") & vbCrLf & _
            "Severity: " & mSeverity & vbCrLf & _
            "Recovery Attempted: " & mRecoveryAttempted & vbCrLf & _
            "Recovery Successful: " & mRecoverySuccessful & vbCrLf & _
            "Stack Trace: " & vbCrLf & mStackTrace
    
    If Not mInnerError Is Nothing Then
        result = result & vbCrLf & vbCrLf & "Inner Error:" & vbCrLf & _
                mInnerError.ToString
    End If
    
    ToString = result
End Function

================
File: EventLogImpl.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "EventLogImpl"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements IEventLog

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "EventLogImpl"

' ======================
' メンバ変数
' ======================
Private mIsInitialized As Boolean
Private mLock As clsLock
Private mPerformanceMonitor As clsPerformanceMonitor
Private mLastError As String

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    Set mLock = New clsLock
    Set mPerformanceMonitor = New clsPerformanceMonitor
    mIsInitialized = True
End Sub

Private Sub Class_Terminate()
    Set mLock = Nothing
    Set mPerformanceMonitor = Nothing
    mIsInitialized = False
End Sub

' ======================
' IEventLog実装
' ======================
Private Function IEventLog_WriteToEventLog(ByVal source As String, _
                                         ByVal message As String, _
                                         ByVal eventType As EventLogType) As Boolean
    If Not mIsInitialized Then Exit Function
    
    mPerformanceMonitor.StartMeasurement "WriteToEventLog"
    mLock.AcquireLock
    
    On Error GoTo ErrorHandler
    
    ' ソースの存在確認
    If Not IEventLog_EventSourceExists(source) Then
        LogError "イベントソースが存在しません: " & source
        GoTo CleanUp
    End If
    
    ' メッセージの長さチェック
    If Len(message) > 32766 Then
        LogError "メッセージが長すぎます。32,766文字以内にしてください。"
        GoTo CleanUp
    End If
    
    ' Shell経由でイベントログに書き込み
    Dim shell As Object
    Set shell = CreateObject("WScript.Shell")
    
    ' イベントログ書き込み
    shell.LogEvent CInt(eventType), message, source
    
    Set shell = Nothing
    IEventLog_WriteToEventLog = True
    
CleanUp:
    mLock.ReleaseLock
    mPerformanceMonitor.EndMeasurement "WriteToEventLog"
    Exit Function

ErrorHandler:
    mLastError = "イベントログへの書き込み中にエラーが発生しました: " & Err.Description
    LogError mLastError
    IEventLog_WriteToEventLog = False
    Resume CleanUp
End Function

Private Function IEventLog_EventSourceExists(ByVal source As String) As Boolean
    If Not mIsInitialized Then Exit Function
    
    mPerformanceMonitor.StartMeasurement "EventSourceExists"
    mLock.AcquireLock
    
    On Error GoTo ErrorHandler
    
    ' レジストリキーの存在確認
    Dim shell As Object
    Set shell = CreateObject("WScript.Shell")
    
    Const HKLM As String = "HKLM\SYSTEM\CurrentControlSet\Services\Eventlog\Application\"
    
    ' レジストリキーの存在確認を試行
    Dim regValue
    regValue = shell.RegRead(HKLM & source & "\EventMessageFile")
    
    Set shell = Nothing
    IEventLog_EventSourceExists = True
    
CleanUp:
    mLock.ReleaseLock
    mPerformanceMonitor.EndMeasurement "EventSourceExists"
    Exit Function

ErrorHandler:
    ' レジストリキーが存在しない場合も含む
    mLastError = "イベントソースの確認中にエラーが発生しました: " & Err.Description
    IEventLog_EventSourceExists = False
    Resume CleanUp
End Function

' ======================
' プライベートメソッド
' ======================
Private Sub LogError(ByVal message As String)
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = ErrUnexpected
        .Description = message
        .Category = ECSystem
        .Source = MODULE_NAME
        .ProcedureName = "Unknown"  ' スタックトレースから取得可能
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errInfo
End Sub

' ======================
' パブリックプロパティ
' ======================
Public Property Get LastError() As String
    LastError = mLastError
End Property

' ======================
' テストサポート機能
' ======================
#If DEBUG Then
    Public Function ValidateState() As Boolean
        ValidateState = mIsInitialized And _
                       Not (mLock Is Nothing) And _
                       Not (mPerformanceMonitor Is Nothing)
    End Function
    
    Public Function GetPerformanceMonitor() As clsPerformanceMonitor
        Set GetPerformanceMonitor = mPerformanceMonitor
    End Function
    
    Public Function TestEventLogAccess(ByVal testSource As String) As Boolean
        ' イベントログへのアクセス権限をテスト
        Dim testMessage As String
        testMessage = "EventLogImpl Test Message @ " & Now
        
        TestEventLogAccess = IEventLog_WriteToEventLog(testSource, _
                                                      testMessage, _
                                                      EVENTLOG_INFORMATION_TYPE)
    End Function
#End If

================
File: EventLogLogger.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "EventLogLogger"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements ILogger

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "EventLogLogger"

' ======================
' メンバ変数
' ======================
Private mEventLog As IEventLog
Private mLock As ILock
Private mPerformanceMonitor As IPerformanceMonitor
Private mEventSource As String
Private Const MAX_RETRY_COUNT As Long = 3
Private Const RETRY_DELAY_MS As Long = 1000

' イベントログの種類定数
Private Const EVENTLOG_SUCCESS As Long = 0
Private Const EVENTLOG_ERROR As Long = 1
Private Const EVENTLOG_WARNING As Long = 2
Private Const EVENTLOG_INFORMATION As Long = 4

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    ' 何もしない（依存性は外部から注入）
End Sub

Private Sub Class_Terminate()
    Set mEventLog = Nothing
    Set mLock = Nothing
    Set mPerformanceMonitor = Nothing
End Sub

' ======================
' 公開メソッド
' ======================
Public Sub Initialize(ByVal eventLog As IEventLog, _
                     ByVal lock As ILock, _
                     ByVal performanceMonitor As IPerformanceMonitor, _
                     ByVal eventSource As String)
    Set mEventLog = eventLog
    Set mLock = lock
    Set mPerformanceMonitor = performanceMonitor
    mEventSource = eventSource
End Sub

' ======================
' ILogger実装
' ======================
Private Sub ILogger_Log(ByVal logLevel As String, _
                       ByVal message As String, _
                       Optional ByVal stackTrace As String, _
                       Optional ByVal errorCode As Long)
    If mEventLog Is Nothing Then Exit Sub
    
    mPerformanceMonitor.StartMeasurement "EventLogLogger_Log"
    mLock.AcquireLock
    
    On Error GoTo ErrorHandler
    
    Dim retryCount As Long
    Do While retryCount < MAX_RETRY_COUNT
        If WriteLogToEventLog(logLevel, message, stackTrace, errorCode) Then Exit Do
        retryCount = retryCount + 1
        If retryCount < MAX_RETRY_COUNT Then Sleep RETRY_DELAY_MS
    Loop
    
Cleanup:
    mLock.ReleaseLock
    mPerformanceMonitor.EndMeasurement "EventLogLogger_Log"
    Exit Sub
    
ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "イベントログ出力中にエラーが発生しました: " & Err.Description
        .Category = ECSystem
        .Source = MODULE_NAME
        .ProcedureName = "ILogger_Log"
        .StackTrace = stackTrace
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    Resume Cleanup
End Sub

' ======================
' プライベートメソッド
' ======================
Private Function WriteLogToEventLog(ByVal logLevel As String, _
                                  ByVal message As String, _
                                  ByVal stackTrace As String, _
                                  ByVal errorCode As Long) As Boolean
    On Error Resume Next
    
    ' イベントの種類を決定
    Dim eventType As Long
    Select Case UCase$(logLevel)
        Case "ERROR", "FATAL"
            eventType = EVENTLOG_ERROR
        Case "WARNING"
            eventType = EVENTLOG_WARNING
        Case "SUCCESS"
            eventType = EVENTLOG_SUCCESS
        Case Else
            eventType = EVENTLOG_INFORMATION
    End Select
    
    ' メッセージの組み立て
    Dim logMessage As String
    logMessage = Format$(Now, "yyyy/mm/dd hh:nn:ss") & vbCrLf & _
                 "Level: " & logLevel & vbCrLf & _
                 "Message: " & message
    
    If errorCode <> 0 Then
        logMessage = logMessage & vbCrLf & "Error Code: " & errorCode
    End If
    
    If Len(stackTrace) > 0 Then
        logMessage = logMessage & vbCrLf & "Stack Trace: " & stackTrace
    End If
    
    ' イベントログへの書き込み
    mEventLog.WriteEntry mEventSource, logMessage, eventType
    
    WriteLogToEventLog = (Err.Number = 0)
    On Error GoTo 0
End Function

================
File: FileLogger.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "FileLogger"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements ILogger

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "FileLogger"

' ======================
' メンバ変数
' ======================
Private mFileOperations As IFileOperations
Private mLock As ILock
Private mPerformanceMonitor As IPerformanceMonitor
Private mLogFilePath As String
Private Const MAX_RETRY_COUNT As Long = 3
Private Const RETRY_DELAY_MS As Long = 1000

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    ' 何もしない（依存性は外部から注入）
End Sub

Private Sub Class_Terminate()
    Set mFileOperations = Nothing
    Set mLock = Nothing
    Set mPerformanceMonitor = Nothing
End Sub

' ======================
' 公開メソッド
' ======================
Public Sub Initialize(ByVal fileOperations As IFileOperations, _
                     ByVal lock As ILock, _
                     ByVal performanceMonitor As IPerformanceMonitor, _
                     ByVal logFilePath As String)
    Set mFileOperations = fileOperations
    Set mLock = lock
    Set mPerformanceMonitor = performanceMonitor
    mLogFilePath = logFilePath
End Sub

' ======================
' ILogger実装
' ======================
Private Sub ILogger_Log(ByVal logLevel As String, _
                       ByVal message As String, _
                       Optional ByVal stackTrace As String, _
                       Optional ByVal errorCode As Long)
    If mFileOperations Is Nothing Then Exit Sub
    
    mPerformanceMonitor.StartMeasurement "FileLogger_Log"
    mLock.AcquireLock
    
    On Error GoTo ErrorHandler
    
    Dim logMessage As String
    logMessage = BuildLogMessage(logLevel, message, stackTrace, errorCode)
    
    Dim retryCount As Long
    Do While retryCount < MAX_RETRY_COUNT
        If WriteLogToFile(logMessage) Then Exit Do
        retryCount = retryCount + 1
        If retryCount < MAX_RETRY_COUNT Then Sleep RETRY_DELAY_MS
    Loop
    
Cleanup:
    mLock.ReleaseLock
    mPerformanceMonitor.EndMeasurement "FileLogger_Log"
    Exit Sub
    
ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "ファイルログ出力中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "ILogger_Log"
        .StackTrace = stackTrace
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    Resume Cleanup
End Sub

' ======================
' プライベートメソッド
' ======================
Private Function BuildLogMessage(ByVal logLevel As String, _
                               ByVal message As String, _
                               ByVal stackTrace As String, _
                               ByVal errorCode As Long) As String
    BuildLogMessage = Format$(Now, "yyyy/mm/dd hh:nn:ss") & " " & _
                     "[" & logLevel & "] " & _
                     IIf(errorCode <> 0, "(Code: " & errorCode & ") ", "") & _
                     message & _
                     IIf(Len(stackTrace) > 0, vbCrLf & "Stack Trace: " & stackTrace, "")
End Function

Private Function WriteLogToFile(ByVal logMessage As String) As Boolean
    On Error Resume Next
    
    ' ファイルの存在確認と作成
    If Not mFileOperations.FileExists(mLogFilePath) Then
        mFileOperations.CreateFile mLogFilePath
    End If
    
    ' ログメッセージの書き込み
    mFileOperations.AppendText mLogFilePath, logMessage & vbCrLf
    
    WriteLogToFile = (Err.Number = 0)
    On Error GoTo 0
End Function

================
File: InvalidInputErrorHandler.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "InvalidInputErrorHandler"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "InvalidInputErrorHandler"

' ======================
' プライベート変数
' ======================
Private mLock As ILock
Private mLogger As ILogger
Private mEmergencyLogger As IEmergencyLogger
Private mUserNotifier As IUserNotifier
Private mValidator As IValidator

Implements IErrorHandler

' =====================
' コンストラクタ
' =====================
Public Function Create( _
    ByVal lock As ILock, _
    ByVal logger As ILogger, _
    ByVal emergencyLogger As IEmergencyLogger, _
    ByVal userNotifier As IUserNotifier, _
    ByVal validator As IValidator _
) As InvalidInputErrorHandler
    
    Dim instance As New InvalidInputErrorHandler
    
    ' 依存性の注入
    With instance
        If lock Is Nothing Then
            Err.Raise 5, "InvalidInputErrorHandler.Create", "ILock is required"
        End If
        Set .Lock = lock
        
        If logger Is Nothing Then
            Err.Raise 5, "InvalidInputErrorHandler.Create", "ILogger is required"
        End If
        Set .Logger = logger
        
        If emergencyLogger Is Nothing Then
            Err.Raise 5, "InvalidInputErrorHandler.Create", "IEmergencyLogger is required"
        End If
        Set .EmergencyLogger = emergencyLogger
        
        If userNotifier Is Nothing Then
            Err.Raise 5, "InvalidInputErrorHandler.Create", "IUserNotifier is required"
        End If
        Set .UserNotifier = userNotifier
        
        If validator Is Nothing Then
            Err.Raise 5, "InvalidInputErrorHandler.Create", "IValidator is required"
        End If
        Set .Validator = validator
    End With
    
    Set Create = instance
End Function

' プロパティ
Public Property Set Lock(ByVal value As ILock)
    Set mLock = value
End Property

Public Property Set Logger(ByVal value As ILogger)
    Set mLogger = value
End Property

Public Property Set EmergencyLogger(ByVal value As IEmergencyLogger)
    Set mEmergencyLogger = value
End Property

Public Property Set UserNotifier(ByVal value As IUserNotifier)
    Set mUserNotifier = value
End Property

Public Property Set Validator(ByVal value As IValidator)
    Set mValidator = value
End Property

' ======================
' IErrorHandler実装
' ======================
Private Function IErrorHandler_HandleError(ByRef errorDetail As ErrorInfo) As Boolean
    Dim proceed As Boolean
    proceed = False  ' デフォルトでは処理を中断
    
    mLock.AcquireLock
    
    ' エラー情報をログに記録
    LogError errorDetail
    
    ' 入力値の自動補正を試みる
    If errorDetail.HasAdditionalInfo("InputValue") And _
       errorDetail.HasAdditionalInfo("InputType") Then
        
        Dim inputValue As Variant
        Dim inputType As String
        inputValue = errorDetail.GetAdditionalInfo("InputValue")
        inputType = errorDetail.GetAdditionalInfo("InputType")
        
        ' 入力値の自動補正を試みる
        Dim correctedValue As Variant
        If TryCorrectInput(inputValue, inputType, correctedValue) Then
            errorDetail.AddAdditionalInfo "CorrectedValue", correctedValue
            errorDetail.RecoveryAttempted = True
            errorDetail.RecoverySuccessful = True
            proceed = True
        End If
    End If
    
    mLock.ReleaseLock
    
    ' ユーザーに通知
    NotifyUser errorDetail, IIf(proceed, vbInformation, vbExclamation)
    
    IErrorHandler_HandleError = proceed
End Function

' ======================
' プライベートメソッド
' ======================
Private Function TryCorrectInput(ByVal value As Variant, ByVal inputType As String, ByRef correctedValue As Variant) As Boolean
    On Error GoTo ErrorHandler
    
    Select Case LCase(inputType)
        Case "number"
            If TryCorrectNumber(value, correctedValue) Then
                TryCorrectInput = True
                Exit Function
            End If
            
        Case "date"
            If TryCorrectDate(value, correctedValue) Then
                TryCorrectInput = True
                Exit Function
            End If
            
        Case "string"
            If TryCorrectString(value, correctedValue) Then
                TryCorrectInput = True
                Exit Function
            End If
    End Select
    
    TryCorrectInput = False
    Exit Function

ErrorHandler:
    TryCorrectInput = False
End Function

Private Function TryCorrectNumber(ByVal value As Variant, ByRef correctedValue As Variant) As Boolean
    On Error GoTo ErrorHandler
    
    ' 数値への変換を試みる
    If IsNumeric(value) Then
        correctedValue = CDbl(value)
        TryCorrectNumber = True
        Exit Function
    End If
    
    ' カンマや空白を除去して再試行
    Dim cleanValue As String
    cleanValue = Replace(Replace(CStr(value), ",", ""), " ", "")
    
    If IsNumeric(cleanValue) Then
        correctedValue = CDbl(cleanValue)
        TryCorrectNumber = True
        Exit Function
    End If
    
    TryCorrectNumber = False
    Exit Function

ErrorHandler:
    TryCorrectNumber = False
End Function

Private Function TryCorrectDate(ByVal value As Variant, ByRef correctedValue As Variant) As Boolean
    On Error GoTo ErrorHandler
    
    ' 日付への変換を試みる
    If IsDate(value) Then
        correctedValue = CDate(value)
        TryCorrectDate = True
        Exit Function
    End If
    
    ' 一般的な日付形式を試行
    Dim formats() As String
    formats = Array("yyyy/mm/dd", "dd/mm/yyyy", "mm/dd/yyyy", "yyyy-mm-dd", "dd-mm-yyyy", "mm-dd-yyyy")
    
    Dim i As Long
    For i = LBound(formats) To UBound(formats)
        If mValidator.IsValidDate(CStr(value), formats(i)) Then
            correctedValue = CDate(value)
            TryCorrectDate = True
            Exit Function
        End If
    Next i
    
    TryCorrectDate = False
    Exit Function

ErrorHandler:
    TryCorrectDate = False
End Function

Private Function TryCorrectString(ByVal value As Variant, ByRef correctedValue As Variant) As Boolean
    On Error GoTo ErrorHandler
    
    ' 文字列の基本的なクリーニング
    Dim cleanValue As String
    cleanValue = Trim(CStr(value))
    
    ' 制御文字の除去
    Dim i As Long
    Dim result As String
    For i = 1 To Len(cleanValue)
        Dim ch As String
        ch = Mid(cleanValue, i, 1)
        If Asc(ch) >= 32 Or ch = vbTab Then
            result = result & ch
        End If
    Next i
    
    If Len(result) > 0 Then
        correctedValue = result
        TryCorrectString = True
    Else
        TryCorrectString = False
    End If
    Exit Function

ErrorHandler:
    TryCorrectString = False
End Function

Private Sub LogError(ByRef errorDetail As ErrorInfo)
    On Error GoTo ErrorHandler
    
    ' 通常のログ出力
    mLogger.Log MODULE_NAME, "無効な入力: " & errorDetail.Description, errorDetail.Code
    
    ' 重要なエラーは緊急ログにも記録
    If errorDetail.Severity >= ESError Then
        mEmergencyLogger.LogEmergency MODULE_NAME, errorDetail.ToString
    End If
    
    Exit Sub

ErrorHandler:
    Dim errDetail As ErrorInfo
    Set errDetail = New ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "入力エラーのログ出力中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "LogError"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
        .Severity = ESError
        Set .InnerError = errorDetail.Clone
    End With
    modError.HandleError errDetail
End Sub

Private Sub NotifyUser(ByRef errorDetail As ErrorInfo, ByVal style As VbMsgBoxStyle)
    On Error GoTo ErrorHandler
    
    Dim message As String
    message = "無効な入力: " & errorDetail.Description
    
    If errorDetail.HasAdditionalInfo("CorrectedValue") Then
        message = message & vbCrLf & vbCrLf & _
                 "推奨される値: " & errorDetail.GetAdditionalInfo("CorrectedValue")
    End If
    
    mUserNotifier.Notify errorDetail, style, "入力エラー"
    Exit Sub

ErrorHandler:
    Dim errDetail As ErrorInfo
    Set errDetail = New ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "入力エラーの通知中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "NotifyUser"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
        .Severity = ESError
        Set .InnerError = errorDetail.Clone
    End With
    modError.HandleError errDetail
End Sub

================
File: modAppInitializer.bas
================
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "modAppInitializer"

' ======================
' 初期化状態管理
' ======================
Private Type InitializationState
    ConfigInitialized As Boolean
    LoggingInitialized As Boolean
    DatabaseInitialized As Boolean
    ErrorHandlersInitialized As Boolean
End Type

Private mInitState As InitializationState

' ======================
' 公開メソッド
' ======================
Public Sub InitializeApplication()
    On Error GoTo ErrorHandler
    
    ' 設定の初期化（最初に実行）
    If Not mInitState.ConfigInitialized Then
        modConfig.InitializeModule
        mInitState.ConfigInitialized = True
    End If
    
    ' ロギングシステムの初期化
    If Not mInitState.LoggingInitialized Then
        InitializeLogging
        mInitState.LoggingInitialized = True
    End If
    
    ' データベース関連の初期化
    If Not mInitState.DatabaseInitialized Then
        InitializeDatabase
        mInitState.DatabaseInitialized = True
    End If
    
    ' エラーハンドラーの初期化（最後に実行）
    If Not mInitState.ErrorHandlersInitialized Then
        InitializeErrorHandlers
        mInitState.ErrorHandlersInitialized = True
    End If
    
    Exit Sub

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "アプリケーションの初期化中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "InitializeApplication"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
End Sub

' ======================
' プライベートメソッド
' ======================
Private Sub InitializeLogging()
    On Error GoTo ErrorHandler
    
    ' ロガー設定の初期化
    Dim loggerSettings As DefaultLoggerSettings
    Set loggerSettings = New DefaultLoggerSettings
    loggerSettings.Initialize modConfig.Settings.DatabaseConnectionString
    
    ' デフォルトロガーの設定
    With New clsLogger
        .Configure loggerSettings, modConfig
        .Log MODULE_NAME, "ロギングシステムが初期化されました", 0
    End With
    
    Exit Sub

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "ロギングシステムの初期化中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "InitializeLogging"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
End Sub

Private Sub InitializeDatabase()
    On Error GoTo ErrorHandler
    
    ' データベースユーティリティの初期化
    modDatabaseUtils.InitializeModule
    
    ' データベース接続プールの初期化
    With New ConnectionPool
        ' IDatabaseConfigインターフェースを通じて接続文字列を取得
        .Initialize modConfig
    End With
    
    Exit Sub

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "データベースシステムの初期化中にエラーが発生しました: " & Err.Description
        .Category = ECDatabase
        .Source = MODULE_NAME
        .ProcedureName = "InitializeDatabase"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
End Sub

Private Sub InitializeErrorHandlers()
    On Error GoTo ErrorHandler
    
    ' エラーハンドラーの初期化
    ' この時点で設定とロギングは初期化済みであることが保証される
    With DatabaseConnectionErrorHandler.Create(modConfig)
        ' 必要な初期化処理があれば実行
    End With
    
    Exit Sub

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "エラーハンドラーの初期化中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "InitializeErrorHandlers"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
End Sub

================
File: modConfig.bas
================
Option Explicit
Implements IDatabaseConfig

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "modConfig"

' ======================
' 定数定義
' ======================
Private Const CONFIG_FILE_PATH As String = "config.ini"
Private Const MAX_BUFFER_SIZE As Long = 1024
Private Const DEFAULT_SECTION As String = "Settings"

' ======================
' 型定義
' ======================
Private Type ConfigurationSettings
    LogLevel As LogLevel
    LogDestination As LogDestination
    LogFilePath As String
    DatabaseConnectionString As String
    SecurityLevel As SecurityLevel
    PerformanceMonitoringEnabled As Boolean
    DiagnosticsEnabled As Boolean
    EncryptionKey As String
    AutoSave As Boolean
End Type

' ======================
' プライベート変数
' ======================
Private settings As ConfigurationSettings
Private settingsLock As clsLock
Private performanceMonitor As clsPerformanceMonitor
Private isInitialized As Boolean
Private isDirty As Boolean

' ======================
' 初期化・終了処理
' ======================
Public Sub InitializeModule()
    If isInitialized Then Exit Sub
    
    Set settingsLock = New clsLock
    Set performanceMonitor = New clsPerformanceMonitor
    
    LoadDefaultSettings
    LoadConfigurationFromFile
    
    isInitialized = True
    
    ' パフォーマンスモニタリング開始
    If settings.PerformanceMonitoringEnabled Then
        performanceMonitor.StartMeasurement "ConfigInitialization"
    End If
End Sub

Public Sub TerminateModule()
    If Not isInitialized Then Exit Sub
    
    ' パフォーマンスモニタリング終了
    If settings.PerformanceMonitoringEnabled Then
        performanceMonitor.EndMeasurement "ConfigInitialization"
    End If
    
    ' 変更された設定を保存
    If isDirty And settings.AutoSave Then
        SaveConfigurationToFile
    End If
    Set settingsLock = Nothing
    Set performanceMonitor = Nothing
    isInitialized = False
End Sub

' ======================
' 公開プロパティ
' ======================
Public Property Get Settings() As ConfigurationSettings
    If Not isInitialized Then InitializeModule
    
    settingsLock.AcquireLock
    Settings = settings
    settingsLock.ReleaseLock
End Property

Public Property Let Settings(ByVal Value As ConfigurationSettings)
    If Not isInitialized Then InitializeModule
    
    settingsLock.AcquireLock
    settings = Value
    settingsLock.ReleaseLock
    
    isDirty = True
    If settings.AutoSave Then
        SaveConfigurationToFile
    End If
End Property

' ======================
' 公開メソッド
' ======================
Public Function GetConfigValue(ByVal section As String, ByVal key As String, _
                             Optional ByVal defaultValue As String = "") As String
    If Not isInitialized Then InitializeModule
    
    Dim buffer As String
    Dim result As Long
    
    buffer = String$(MAX_BUFFER_SIZE, 0)
    result = modWindowsAPI.GetPrivateProfileString(section, key, defaultValue, buffer, Len(buffer), GetConfigFilePath())
    
    If result > 0 Then
        GetConfigValue = Left$(buffer, result)
    Else
        GetConfigValue = defaultValue
    End If
End Function

Public Function SetConfigValue(ByVal section As String, ByVal key As String, _
                             ByVal Value As String) As Boolean
    If Not isInitialized Then InitializeModule
    
    Dim result As Boolean
    result = (modWindowsAPI.WritePrivateProfileString(section, key, Value, GetConfigFilePath()) <> 0)
    
    If result Then
        isDirty = True
    End If
    SetConfigValue = result
End Function

' ======================
' プライベートメソッド
' ======================
Private Sub LoadDefaultSettings()
    With settings
        .LogLevel = LevelInfo
        .LogDestination = DestFile
        .LogFilePath = DEFAULT_LOG_FILE
        .SecurityLevel = LevelMedium
        .PerformanceMonitoringEnabled = True
        .DiagnosticsEnabled = True
        .AutoSave = True
    End With
End Sub

Private Sub LoadConfigurationFromFile()
    On Error GoTo ErrorHandler
    
    With settings
        ' ログ設定
        .LogLevel = CInt(GetConfigValue(DEFAULT_SECTION, "LogLevel", CStr(LevelInfo)))
        .LogDestination = CInt(GetConfigValue(DEFAULT_SECTION, "LogDestination", CStr(DestFile)))
        .LogFilePath = GetConfigValue(DEFAULT_SECTION, "LogFilePath", DEFAULT_LOG_FILE)
        
        ' データベース設定
        .DatabaseConnectionString = GetConfigValue("Database", "ConnectionString", "")
        
        ' セキュリティ設定
        .SecurityLevel = CInt(GetConfigValue("Security", "Level", CStr(LevelMedium)))
        .EncryptionKey = GetConfigValue("Security", "EncryptionKey", "")
        
        ' 診断設定
        .PerformanceMonitoringEnabled = CBool(GetConfigValue("Diagnostics", "PerformanceMonitoring", "True"))
        .DiagnosticsEnabled = CBool(GetConfigValue("Diagnostics", "Enabled", "True"))
        
        ' 自動保存設定
        .AutoSave = CBool(GetConfigValue(DEFAULT_SECTION, "AutoSave", "True"))
    End With
    
    Exit Sub

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrFileInvalidFormat
        .Description = "設定ファイルの読み込み中にエラーが発生しました: " & Err.Description
        .Category = ECFileIO
        .Source = MODULE_NAME
        .ProcedureName = "LoadConfigurationFromFile"
        .StackTrace = GetCurrentCallStack
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    Resume Next
End Sub

Private Sub SaveConfigurationToFile()
    On Error GoTo ErrorHandler
    
    With settings
        ' ログ設定
        SetConfigValue DEFAULT_SECTION, "LogLevel", CStr(.LogLevel)
        SetConfigValue DEFAULT_SECTION, "LogDestination", CStr(.LogDestination)
        SetConfigValue DEFAULT_SECTION, "LogFilePath", .LogFilePath
        
        ' データベース設定
        SetConfigValue "Database", "ConnectionString", .DatabaseConnectionString
        
        ' セキュリティ設定
        SetConfigValue "Security", "Level", CStr(.SecurityLevel)
        SetConfigValue "Security", "EncryptionKey", .EncryptionKey
        
        ' 診断設定
        SetConfigValue "Diagnostics", "PerformanceMonitoring", CStr(.PerformanceMonitoringEnabled)
        SetConfigValue "Diagnostics", "Enabled", CStr(.DiagnosticsEnabled)
        
        ' 自動保存設定
        SetConfigValue DEFAULT_SECTION, "AutoSave", CStr(.AutoSave)
    End With
    
    isDirty = False
    Exit Sub

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrFileAccessDenied
        .Description = "設定ファイルの保存中にエラーが発生しました: " & Err.Description
        .Category = ECFileIO
        .Source = MODULE_NAME
        .ProcedureName = "SaveConfigurationToFile"
        .StackTrace = GetCurrentCallStack
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    Resume Next
End Sub

Private Function GetConfigFilePath() As String
    GetConfigFilePath = App.Path & "\" & CONFIG_FILE_PATH
End Function

' ======================
' 設定管理
' ======================
Public Sub SaveChanges()
    If Not isInitialized Then InitializeModule
    
    If isDirty Then
        SaveConfigurationToFile
    End If
End Sub

Public Property Get HasUnsavedChanges() As Boolean
    HasUnsavedChanges = isDirty
End Property

Public Property Let AutoSave(ByVal Value As Boolean)
    settings.AutoSave = Value
End Property

' ======================
' ヘルパー関数
' ======================
Private Function GetCurrentCallStack() As String
    Dim callStack As New clsCallStack
    
    ' 現在のプロシージャ情報をスタックに追加
    callStack.Push MODULE_NAME, "GetCurrentCallStack"
    
    ' スタックトレースを取得
    GetCurrentCallStack = callStack.StackTrace
End Function

' ======================
' IDatabaseConfig インターフェースの実装
' ======================
Private Function IDatabaseConfig_GetConnectionString() As String
    If Not isInitialized Then InitializeModule
    
    IDatabaseConfig_GetConnectionString = Me.Settings.DatabaseConnectionString
End Function

' ======================
' テストサポート機能
' ======================
#If DEBUG Then
    Public Sub ResetModule()
        TerminateModule
        InitializeModule
    End Sub
    
    Public Function ValidateSettings() As Boolean
        With settings
            ValidateSettings = _
                .LogLevel >= LevelDebug And .LogLevel <= LevelFatal And _
                .LogDestination >= DestNone And .LogDestination <= DestEmail And _
                .SecurityLevel >= LevelLow And .SecurityLevel <= LevelExtreme
        End With
    End Function
#End If

================
File: modError.bas
================
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "modError"

' ======================
' プライベート変数
' ======================
Private errorHandlers As Collection
Private isInitialized As Boolean
Private mLock As clsLock
Private Const MAX_ERROR_RECURSION As Long = 3
Private errorRecursionCount As Long
Private mPerformanceMonitor As clsPerformanceMonitor

' ======================
' 初期化・終了処理
' ======================
Public Property Get IsInitialized() As Boolean
    IsInitialized = isInitialized
End Property

Public Sub InitializeModule()
    If isInitialized Then Exit Sub
    
    Set errorHandlers = New Collection
    Set mLock = New clsLock
    Set mPerformanceMonitor = New clsPerformanceMonitor
    errorRecursionCount = 0
    RegisterDefaultHandlers
    
    isInitialized = True
End Sub

Public Sub TerminateModule()
    If Not isInitialized Then Exit Sub
    
    Set errorHandlers = Nothing
    Set mLock = Nothing
    Set mPerformanceMonitor = Nothing
    errorRecursionCount = 0
    isInitialized = False
End Sub

' ======================
' エラーハンドリング
' ======================
Private Type ErrorContext
    Info As ErrorInfo
    Handler As IErrorHandler
    IsLocked As Boolean
    IsEmergency As Boolean
End Type

Private Function TryHandleError(ByRef context As ErrorContext) As Boolean
    On Error GoTo ErrorHandler
    
    ' パフォーマンス計測開始
    If Not mPerformanceMonitor Is Nothing Then
        mPerformanceMonitor.StartMeasurement "TryHandleError"
    End If
    
    ' エラー情報の補完
    With context.Info
        If .OccurredAt = #12:00:00 AM# Then .OccurredAt = Now
        If .Category = 0 Then .Category = modErrorCodes.GetErrorCategory(.Code)
        If Len(.StackTrace) = 0 Then .StackTrace = modStackTrace.GetStackTrace()
    End With
    
    ' エラーハンドラの取得
    Set context.Handler = GetErrorHandler(context.Info.Code)
    
    ' パフォーマンス計測終了
    If Not mPerformanceMonitor Is Nothing Then
        mPerformanceMonitor.EndMeasurement "TryHandleError"
    End If
    
    TryHandleError = True
    Exit Function
    
ErrorHandler:
    If Not mPerformanceMonitor Is Nothing Then
        mPerformanceMonitor.EndMeasurement "TryHandleError"
    End If
    TryHandleError = False
End Function

Public Sub HandleError(ByRef errInfo As ErrorInfo)
    If Not isInitialized Then InitializeModule
    
    ' パフォーマンス計測開始
    If Not mPerformanceMonitor Is Nothing Then
        mPerformanceMonitor.StartMeasurement "HandleError"
    End If
    
    Dim context As ErrorContext
    context.Info = errInfo
    
    ' エラーの再帰を防ぐ
    errorRecursionCount = errorRecursionCount + 1
    If errorRecursionCount > MAX_ERROR_RECURSION Then
        EmergencyErrorLog "エラー処理の再帰回数が上限を超えました。処理を中断します。"
        context.IsEmergency = True
        GoTo Cleanup
    End If

    ' ロック取得
    On Error Resume Next
    mLock.AcquireLock
    context.IsLocked = (Err.Number = 0)
    On Error GoTo 0

    ' エラー処理のメイン部分
    If TryHandleError(context) Then
        If Not context.Handler Is Nothing Then
            Dim proceed As Boolean
            proceed = context.Handler.HandleError(context.Info)
            
            ' エラー処理の結果に基づいて処理を継続するかどうかを判断
            If Not proceed Then
                context.IsEmergency = True
                GoTo Cleanup
            End If
        End If
    Else
        context.IsEmergency = True
    End If

Cleanup:
    ' クリーンアップ処理
    If context.IsLocked Then
        mLock.ReleaseLock
    End If

    If context.IsEmergency Then
        EmergencyErrorLog "HandleError中にエラーが発生しました: " & Err.Description
    End If
    
    ' パフォーマンス計測終了
    If Not mPerformanceMonitor Is Nothing Then
        mPerformanceMonitor.EndMeasurement "HandleError"
    End If

    errorRecursionCount = errorRecursionCount - 1
End Sub

' ======================
' プライベートメソッド
' ======================
Private Sub RegisterDefaultHandlers()
    ' データベース接続エラー用ハンドラ
    RegisterErrorHandler ErrDbConnectionFailed, New DatabaseConnectionErrorHandler
    
    ' ファイル不在エラー用ハンドラ
    RegisterErrorHandler ErrFileNotFound, New FileNotFoundErrorHandler
    
    ' 入力検証エラー用ハンドラ
    RegisterErrorHandler ErrInvalidInput, New InvalidInputErrorHandler
End Sub

Private Function GetErrorHandler(ByVal errorCode As ErrorCode) As IErrorHandler
    Dim handler As IErrorHandler
    
    On Error Resume Next
    Set handler = errorHandlers(CStr(errorCode))
    If Err.Number <> 0 Then
        ' 該当するハンドラが見つからない場合は、エラーカテゴリに基づいてデフォルトハンドラを返す
        Set handler = GetDefaultHandlerForCategory(modErrorCodes.GetErrorCategory(errorCode))
    End If
    On Error GoTo 0
    
    Set GetErrorHandler = handler
End Function

Private Function GetDefaultHandlerForCategory(ByVal category As ErrorCodeCategory) As IErrorHandler
    Select Case category
        Case ECDatabase
            Set GetDefaultHandlerForCategory = New DatabaseConnectionErrorHandler
        Case ECFileIO
            Set GetDefaultHandlerForCategory = New FileNotFoundErrorHandler
        Case Else
            Set GetDefaultHandlerForCategory = New InvalidInputErrorHandler
    End Select
End Function

' ======================
' パブリックメソッド
' ======================
Public Sub RegisterErrorHandler(ByVal errorCode As ErrorCode, ByVal handler As IErrorHandler)
    If Not isInitialized Then InitializeModule
    
    mLock.AcquireLock
    On Error Resume Next
    errorHandlers.Remove CStr(errorCode)
    On Error GoTo 0
    
    errorHandlers.Add handler, CStr(errorCode)
    mLock.ReleaseLock
End Sub

Public Sub UnregisterErrorHandler(ByVal errorCode As ErrorCode)
    If Not isInitialized Then Exit Sub
    
    mLock.AcquireLock
    On Error Resume Next
    errorHandlers.Remove CStr(errorCode)
    On Error GoTo 0
    mLock.ReleaseLock
End Sub

' ======================
' テストサポート機能
' ======================
#If DEBUG Then
    ' === エラー処理テスト ===
    Public Sub TestErrorHandling()
        Dim testError As ErrorInfo
        With testError
            .Code = ErrUnexpected
            .Description = "テスト用エラー"
            .Category = ECGeneral
            .Source = MODULE_NAME
            .ProcedureName = "TestErrorHandling"
            .StackTrace = ""
            .OccurredAt = Now
        End With
        
        mPerformanceMonitor.StartMeasurement "ErrorHandlingTest"
        HandleError testError
        mPerformanceMonitor.EndMeasurement "ErrorHandlingTest"
        
        Debug.Print "テスト実行時間: " & _
                   mPerformanceMonitor.GetMeasurement("ErrorHandlingTest")
    End Sub
    
    ' === 再帰制御テスト ===
    Public Sub TestErrorRecursion()
        Dim i As Long
        For i = 1 To MAX_ERROR_RECURSION + 1
            Dim testError As ErrorInfo
            With testError
                .Code = ErrUnexpected
                .Description = "再帰テスト" & i
                .Category = ECGeneral
                .Source = MODULE_NAME
                .ProcedureName = "TestErrorRecursion"
                .StackTrace = ""
                .OccurredAt = Now
            End With
            
            mPerformanceMonitor.StartMeasurement "RecursionTest_" & i
            HandleError testError
            mPerformanceMonitor.EndMeasurement "RecursionTest_" & i
            
            Debug.Print "再帰テスト" & i & "実行時間: " & _
                       mPerformanceMonitor.GetMeasurement("RecursionTest_" & i)
        Next i
    End Sub
    
    ' === リソース管理テスト ===
    Public Sub TestResourceManagement()
        Dim lockCountBefore As Long
        lockCountBefore = GetActiveLockCount()
        
        Dim testError As ErrorInfo
        With testError
            .Code = ErrUnexpected
            .Description = "リソース管理テスト"
            .Category = ECGeneral
            .Source = MODULE_NAME
            .ProcedureName = "TestResourceManagement"
            .StackTrace = ""
            .OccurredAt = Now
        End With
        
        mPerformanceMonitor.StartMeasurement "ResourceTest"
        
        On Error Resume Next
        HandleError testError
        
        mPerformanceMonitor.EndMeasurement "ResourceTest"
        
        Dim lockCountAfter As Long
        lockCountAfter = GetActiveLockCount()
        
        Debug.Print "リソース管理テスト実行時間: " & _
                   mPerformanceMonitor.GetMeasurement("ResourceTest")
        
        If lockCountBefore <> lockCountAfter Then
            Debug.Print "警告: リソースリークの可能性があります"
            Debug.Print "ロック数 Before: " & lockCountBefore & _
                       ", After: " & lockCountAfter
        End If
    End Sub
    
    ' === パフォーマンスレポート ===
    Public Function GetPerformanceReport() As String
        If Not mPerformanceMonitor Is Nothing Then
            GetPerformanceReport = mPerformanceMonitor.GetAllMeasurements()
        Else
            GetPerformanceReport = "パフォーマンスモニターが初期化されていません。"
        End If
    End Function
    
    ' === 内部状態取得 ===
    Private Function GetRegisteredHandlerCount() As Long
        mLock.AcquireLock
        GetRegisteredHandlerCount = errorHandlers.Count
        mLock.ReleaseLock
    End Function
    
    Private Sub ClearHandlers()
        mLock.AcquireLock
        Set errorHandlers = New Collection
        mLock.ReleaseLock
    End Sub
    
    Private Sub ResetModule()
        TerminateModule
        InitializeModule
    End Sub
    
    Private Function GetActiveLockCount() As Long
        Dim result As Long
        result = 0
        
        If Not mLock Is Nothing Then
            If mLock.IsLocked Then
                result = result + 1
            End If
        End If
        
        GetActiveLockCount = result
    End Function
#End If

' ======================
' エラーログ出力
' ======================
Private Sub EmergencyErrorLog(ByVal message As String)
    On Error Resume Next
    
    ' イベントログへの出力を試みる
    WriteToEventLog message
    
    ' ファイルへの出力を試みる
    WriteToEmergencyFile message
End Sub

Private Sub WriteToEventLog(ByVal message As String)
    ' Windowsイベントログへの出力
    modWindowsAPI.WriteToEventLog "PDI Error", message, EVENTLOG_ERROR_TYPE
End Sub

Private Sub WriteToEmergencyFile(ByVal message As String)
    Dim fso As Object
    Set fso = CreateObject("Scripting.FileSystemObject")
    fso.OpenTextFile(Environ$("TEMP") & "\PDI_emergency.log", 8, True).WriteLine Now & ": " & message
End Sub

================
File: modErrorCodes.bas
================
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "modErrorCodes"

' ======================
' エラーコード定義
' ======================
Public Enum ErrorCodeCategory
    ECGeneral = 1000    ' 一般エラー
    ECFileIO = 2000     ' ファイル操作エラー
    ECDatabase = 3000   ' データベースエラー
    ECNetwork = 4000    ' ネットワークエラー
    ECSystem = 5000     ' システムエラー
    ECSecurity = 6000   ' セキュリティエラー
End Enum

Public Enum ErrorCode
    ' 一般エラー (1000-1999)
    ErrUnexpected = vbObjectError + 1000             ' 予期せぬエラー
    ErrInvalidInput = vbObjectError + 1001           ' 無効な入力
    
    ' ファイル操作エラー (2000-2999)
    ErrFileNotFound = vbObjectError + 2000           ' ファイルが見つからない
    ErrFileInvalidFormat = vbObjectError + 2001      ' ファイル形式エラー
    ErrFileAccessDenied = vbObjectError + 2002       ' アクセス拒否
    
    ' データベースエラー (3000-3999)
    ErrDbConnectionFailed = vbObjectError + 3000     ' データベース接続エラー
    ErrDbQueryFailed = vbObjectError + 3001         ' データベースクエリエラー
    
    ' ネットワークエラー (4000-4999)
    ErrNetworkError = vbObjectError + 4000          ' ネットワークエラー
    ErrNetworkTimeout = vbObjectError + 4001        ' タイムアウト
    
    ' システムエラー (5000-5999)
    ErrSystemOutOfMemory = vbObjectError + 5000     ' メモリ不足
    ErrSystemResourceUnavailable = vbObjectError + 5001 ' リソース利用不可
    
    ' セキュリティエラー (6000-6999)
    ErrSecurityAccessDenied = vbObjectError + 6000  ' セキュリティアクセス拒否
    ErrSecurityInvalidCredentials = vbObjectError + 6001 ' 無効な認証情報
    
    ' 暗号化エラー (7000-7099)
    ErrCryptoProviderInitFailed = vbObjectError + 7000  ' 暗号化プロバイダーの初期化失敗
    ErrCryptoNotInitialized = vbObjectError + 7001      ' 暗号化プロバイダー未初期化
    ErrCryptoKeyNotSpecified = vbObjectError + 7002     ' 暗号化キー未指定
    ErrCryptoHashCreateFailed = vbObjectError + 7003    ' ハッシュオブジェクト作成失敗
    ErrCryptoHashDataFailed = vbObjectError + 7004      ' データハッシュ化失敗
    ErrCryptoKeyDerivationFailed = vbObjectError + 7005 ' キー生成失敗
    ErrCryptoEncryptionFailed = vbObjectError + 7006    ' 暗号化失敗
    ErrCryptoDecryptionFailed = vbObjectError + 7007    ' 復号化失敗
    ErrCryptoInvalidKeyLength = vbObjectError + 7008    ' 無効なキー長
    
    ' ロック関連エラー (7100-7199)
    ErrLockMutexCreateFailed = vbObjectError + 7100     ' Mutexの作成失敗
    ErrLockAcquireFailed = vbObjectError + 7101         ' ロックの取得失敗
    ErrLockReleaseFailed = vbObjectError + 7102         ' ロックの解放失敗
    
    ' スタックトレース関連エラー (7200-7299)
    ErrStackTracePushFailed = vbObjectError + 7200      ' スタックトレースへの追加失敗
    ErrStackTracePopFailed = vbObjectError + 7201       ' スタックトレースからの取得失敗
    ErrStackTraceGetFailed = vbObjectError + 7202       ' スタックトレース文字列の生成失敗
    
    ' イベントログ関連エラー (7300-7399)
    ErrEventLogCreateFailed = vbObjectError + 7300      ' イベントログオブジェクトの作成失敗
    ErrEventLogWriteFailed = vbObjectError + 7301       ' イベントログへの書き込み失敗
    ErrEventLogSourceInvalid = vbObjectError + 7302     ' イベントログソースが無効
End Enum

' ======================
' エラーカテゴリ取得
' ======================
Public Function GetErrorCategory(ByVal errCode As ErrorCode) As ErrorCodeCategory
    If errCode >= ECGeneral And errCode < ECFileIO Then
        GetErrorCategory = ECGeneral
    ElseIf errCode >= ECFileIO And errCode < ECDatabase Then
        GetErrorCategory = ECFileIO
    ElseIf errCode >= ECDatabase And errCode < ECNetwork Then
        GetErrorCategory = ECDatabase
    ElseIf errCode >= ECNetwork And errCode < ECSystem Then
        GetErrorCategory = ECNetwork
    ElseIf errCode >= ECSystem And errCode < ECSecurity Then
        GetErrorCategory = ECSystem
    ElseIf errCode >= ECSecurity Then
        GetErrorCategory = ECSecurity
    End If
End Function

================
File: PerformanceCounterImpl.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "PerformanceCounterImpl"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements IPerformanceCounter

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "PerformanceCounterImpl"

' ======================
' メンバ変数
' ======================
Private mIsInitialized As Boolean
Private mFrequency As Currency
Private mLock As clsLock
Private mIsHighResolutionSupported As Boolean

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    Set mLock = New clsLock
    
    ' 高分解能タイマーのサポートを確認
    mIsHighResolutionSupported = CheckHighResolutionSupport()
    If mIsHighResolutionSupported Then
        ' 周波数の取得
        If Not modWindowsAPI.QueryPerformanceFrequency(mFrequency) Then
            LogError "パフォーマンスカウンターの周波数取得に失敗しました。"
            mIsHighResolutionSupported = False
        End If
    End If
    
    mIsInitialized = True
End Sub

Private Sub Class_Terminate()
    Set mLock = Nothing
    mIsInitialized = False
End Sub

' ======================
' IPerformanceCounter実装
' ======================
Private Function IPerformanceCounter_QueryPerformanceCounter(ByRef performanceCount As Currency) As Boolean
    If Not mIsInitialized Then Exit Function
    If Not mIsHighResolutionSupported Then Exit Function
    
    mLock.AcquireLock
    
    On Error GoTo ErrorHandler
    
    IPerformanceCounter_QueryPerformanceCounter = modWindowsAPI.QueryPerformanceCounter(performanceCount)
    
CleanUp:
    mLock.ReleaseLock
    Exit Function

ErrorHandler:
    LogError "パフォーマンスカウンターの値取得中にエラーが発生しました: " & Err.Description
    IPerformanceCounter_QueryPerformanceCounter = False
    Resume CleanUp
End Function

Private Function IPerformanceCounter_QueryPerformanceFrequency(ByRef frequency As Currency) As Boolean
    If Not mIsInitialized Then Exit Function
    If Not mIsHighResolutionSupported Then Exit Function
    
    mLock.AcquireLock
    
    On Error GoTo ErrorHandler
    
    ' キャッシュされた周波数を返す
    frequency = mFrequency
    IPerformanceCounter_QueryPerformanceFrequency = True
    
CleanUp:
    mLock.ReleaseLock
    Exit Function

ErrorHandler:
    LogError "パフォーマンスカウンターの周波数取得中にエラーが発生しました: " & Err.Description
    IPerformanceCounter_QueryPerformanceFrequency = False
    Resume CleanUp
End Function

' ======================
' プライベートメソッド
' ======================
Private Function CheckHighResolutionSupport() As Boolean
    On Error GoTo ErrorHandler
    
    Dim counter As Currency
    Dim frequency As Currency
    
    ' カウンターと周波数の取得を試みる
    CheckHighResolutionSupport = (modWindowsAPI.QueryPerformanceCounter(counter) <> 0) And _
                                (modWindowsAPI.QueryPerformanceFrequency(frequency) <> 0)
    Exit Function

ErrorHandler:
    CheckHighResolutionSupport = False
End Function

Private Sub LogError(ByVal message As String)
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = ErrUnexpected
        .Description = message
        .Category = ECSystem
        .Source = MODULE_NAME
        .ProcedureName = "Unknown"  ' スタックトレースから取得可能
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errInfo
End Sub

' ======================
' パブリックメソッド
' ======================
Public Function GetResolution() As Double
    ' 分解能を秒単位で返す
    If mIsHighResolutionSupported And mFrequency <> 0 Then
        GetResolution = 1 / CDbl(mFrequency)
    Else
        GetResolution = 0
    End If
End Function

' ======================
' テストサポート機能
' ======================
#If DEBUG Then
    Public Function ValidateState() As Boolean
        ValidateState = mIsInitialized And _
                       Not (mLock Is Nothing) And _
                       mIsHighResolutionSupported And _
                       mFrequency > 0
    End Function
    
    Public Function GetFrequency() As Currency
        GetFrequency = mFrequency
    End Function
    
    Public Function IsHighResolutionSupported() As Boolean
        IsHighResolutionSupported = mIsHighResolutionSupported
    End Function
    
    Public Function TestTimerConsistency() As Boolean
        ' タイマーの一貫性をテスト
        Dim counter1 As Currency
        Dim counter2 As Currency
        
        If Not IPerformanceCounter_QueryPerformanceCounter(counter1) Then
            TestTimerConsistency = False
            Exit Function
        End If
        
        If Not IPerformanceCounter_QueryPerformanceCounter(counter2) Then
            TestTimerConsistency = False
            Exit Function
        End If
        
        ' 2回目のカウンターが1回目より大きいことを確認
        TestTimerConsistency = (counter2 >= counter1)
    End Function
#End If

================
File: PerformanceMonitorImpl.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "PerformanceMonitorImpl"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements IPerformanceMonitor

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "PerformanceMonitorImpl"

' ======================
' 型定義
' ======================
Private Type PerformanceData
    StartTime As Currency
    EndTime As Currency
    ElapsedTime As Double
    MemoryUsage As Currency
    PeakMemoryUsage As Currency
    Description As String
End Type

Private Type PROCESS_MEMORY_COUNTERS
    cb As Long
    PageFaultCount As Long
    PeakWorkingSetSize As Currency
    WorkingSetSize As Currency
    QuotaPeakPagedPoolUsage As Currency
    QuotaPagedPoolUsage As Currency
    QuotaPeakNonPagedPoolUsage As Currency
    QuotaNonPagedPoolUsage As Currency
    PagefileUsage As Currency
    PeakPagefileUsage As Currency
End Type

' ======================
' メンバ変数
' ======================
Private mFrequency As Currency
Private mMeasurements As Collection
Private mIsEnabled As Boolean
Private mCurrentOperation As String
Private mLock As clsLock
Private mConfig As IAppConfig

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    modWindowsAPI.QueryPerformanceFrequency mFrequency
    Set mMeasurements = New Collection
    Set mLock = New clsLock
    Set mConfig = modConfig.GetAppConfig()
    mIsEnabled = mConfig.GetSetting("PerformanceMonitorEnabled", True)
End Sub

Private Sub Class_Terminate()
    Set mMeasurements = Nothing
    Set mLock = Nothing
    Set mConfig = Nothing
End Sub

' ======================
' IPerformanceMonitor実装
' ======================
Private Sub IPerformanceMonitor_Start(ByVal measurementName As String)
    If Not mIsEnabled Then Exit Sub
    
    mLock.AcquireLock
    On Error GoTo ErrorHandler
    
    Dim perfData As PerformanceData
    Dim memInfo As PROCESS_MEMORY_COUNTERS
    
    ' 現在の時刻を取得
    modWindowsAPI.QueryPerformanceCounter perfData.StartTime
    
    ' メモリ使用量を取得
    memInfo.cb = LenB(memInfo)
    modWindowsAPI.GetProcessMemoryInfo modWindowsAPI.GetCurrentProcess(), memInfo, LenB(memInfo)
    perfData.MemoryUsage = memInfo.WorkingSetSize
    
    perfData.Description = measurementName
    mCurrentOperation = measurementName
    
    ' コレクションに追加
    mMeasurements.Add perfData, measurementName
    
    mLock.ReleaseLock
    Exit Sub

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "パフォーマンス測定の開始中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "IPerformanceMonitor_Start"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    mLock.ReleaseLock
End Sub

Private Sub IPerformanceMonitor_Stop(ByVal measurementName As String)
    If Not mIsEnabled Then Exit Sub
    
    mLock.AcquireLock
    On Error GoTo ErrorHandler
    
    Dim perfData As PerformanceData
    Dim memInfo As PROCESS_MEMORY_COUNTERS
    Dim i As Long
    
    ' 対応する測定データを検索
    For i = mMeasurements.Count To 1 Step -1
        If TypeName(mMeasurements(i)) = "PerformanceData" Then
            perfData = mMeasurements(i)
            If perfData.Description = measurementName Then
                ' 終了時刻を記録
                modWindowsAPI.QueryPerformanceCounter perfData.EndTime
                
                ' メモリ情報を更新
                memInfo.cb = LenB(memInfo)
                modWindowsAPI.GetProcessMemoryInfo modWindowsAPI.GetCurrentProcess(), memInfo, LenB(memInfo)
                perfData.PeakMemoryUsage = memInfo.PeakWorkingSetSize
                
                ' 経過時間を計算（ミリ秒単位）
                perfData.ElapsedTime = (perfData.EndTime - perfData.StartTime) * 1000 / mFrequency
                
                ' コレクションを更新
                mMeasurements.Remove i
                mMeasurements.Add perfData, measurementName
                Exit For
            End If
        End If
    Next i
    
    mLock.ReleaseLock
    Exit Sub

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "パフォーマンス測定の終了中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "IPerformanceMonitor_Stop"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    mLock.ReleaseLock
End Sub

Private Function IPerformanceMonitor_GetMeasurement(ByVal measurementName As String) As Double
    If Not mIsEnabled Then Exit Function
    
    mLock.AcquireLock
    On Error GoTo ErrorHandler
    
    Dim perfData As PerformanceData
    perfData = mMeasurements(measurementName)
    IPerformanceMonitor_GetMeasurement = perfData.ElapsedTime
    
    mLock.ReleaseLock
    Exit Function

ErrorHandler:
    If Err.Number = 5 Then ' Item not found in collection
        IPerformanceMonitor_GetMeasurement = 0
    Else
        Dim errDetail As ErrorInfo
        With errDetail
            .Code = ErrUnexpected
            .Description = "パフォーマンス測定データの取得中にエラーが発生しました: " & Err.Description
            .Category = ECGeneral
            .Source = MODULE_NAME
            .ProcedureName = "IPerformanceMonitor_GetMeasurement"
            .StackTrace = modStackTrace.GetStackTrace()
            .OccurredAt = Now
        End With
        modError.HandleError errDetail
    End If
    mLock.ReleaseLock
End Function

Private Function IPerformanceMonitor_GetAllMeasurements() As Variant
    If Not mIsEnabled Then Exit Function
    
    mLock.AcquireLock
    On Error GoTo ErrorHandler
    
    Dim results() As Double
    ReDim results(0 To mMeasurements.Count - 1)
    
    Dim i As Long
    Dim perfData As PerformanceData
    For i = 1 To mMeasurements.Count
        perfData = mMeasurements(i)
        results(i - 1) = perfData.ElapsedTime
    Next i
    
    IPerformanceMonitor_GetAllMeasurements = results
    
    mLock.ReleaseLock
    Exit Function

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "パフォーマンス測定データの一括取得中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "IPerformanceMonitor_GetAllMeasurements"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    mLock.ReleaseLock
End Function

Private Sub IPerformanceMonitor_Clear()
    mLock.AcquireLock
    Set mMeasurements = New Collection
    mLock.ReleaseLock
End Sub

Private Property Get IPerformanceMonitor_IsEnabled() As Boolean
    IPerformanceMonitor_IsEnabled = mIsEnabled
End Property

Private Sub IPerformanceMonitor_Enable()
    mIsEnabled = True
    mConfig.SetSetting "PerformanceMonitorEnabled", True
End Sub

Private Sub IPerformanceMonitor_Disable()
    mIsEnabled = False
    mConfig.SetSetting "PerformanceMonitorEnabled", False
End Sub

' ======================
' パブリックメソッド
' ======================
Public Function GetDetailedMeasurement(ByVal measurementName As String) As String
    If Not mIsEnabled Then Exit Function
    
    mLock.AcquireLock
    
    Dim perfData As PerformanceData
    Dim result As String
    
    On Error Resume Next
    perfData = mMeasurements(measurementName)
    If Err.Number = 0 Then
        result = "Performance Report for: " & measurementName & vbCrLf & _
                "Elapsed Time: " & Format$(perfData.ElapsedTime, "0.000") & " ms" & vbCrLf & _
                "Initial Memory: " & Format$(perfData.MemoryUsage / 1024 / 1024, "0.00") & " MB" & vbCrLf & _
                "Peak Memory: " & Format$(perfData.PeakMemoryUsage / 1024 / 1024, "0.00") & " MB"
    End If
    On Error GoTo 0
    
    mLock.ReleaseLock
    GetDetailedMeasurement = result
End Function

' ======================
' テストサポート機能（開発環境専用）
' ======================
#If DEBUG Then
    ''' <summary>
    ''' パフォーマンスカウンターの有効性を検証（テスト用）
    ''' </summary>
    Private Function ValidatePerformanceCounter() As Boolean
        Dim counter As Currency
        ValidatePerformanceCounter = (modWindowsAPI.QueryPerformanceCounter(counter) <> 0) And (mFrequency <> 0)
    End Function
    
    ''' <summary>
    ''' 測定データの数を取得（テスト用）
    ''' </summary>
    Private Function GetMeasurementCount() As Long
        mLock.AcquireLock
        GetMeasurementCount = mMeasurements.Count
        mLock.ReleaseLock
    End Function
    
    ''' <summary>
    ''' テスト用の測定データを追加（テスト用）
    ''' </summary>
    Private Sub SimulateMeasurement(ByVal description As String, ByVal elapsedTime As Double)
        mLock.AcquireLock
        Dim perfData As PerformanceData
        perfData.Description = description
        perfData.ElapsedTime = elapsedTime
        perfData.MemoryUsage = 1000000 ' 1MB
        perfData.PeakMemoryUsage = 2000000 ' 2MB
        mMeasurements.Add perfData, description
        mLock.ReleaseLock
    End Sub
    
    ''' <summary>
    ''' 現在の操作名を取得します
    ''' </summary>
    Public Property Get CurrentOperation() As String
        CurrentOperation = mCurrentOperation
    End Property
#End If

================
File: core/ValidationResult.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "ValidationResult"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = True
Option Explicit

'@Description("バリデーション結果を格納するクラス")
'@Remarks("設定値の検証結果と詳細情報を保持")

' メンバ変数
Private mIsValid As Boolean
Private mErrors As Collection
Private mWarnings As Collection
Private mValidatedRules As Collection
Private mState As ValidationState
Private mStartTime As Date
Private mEndTime As Date
Private mValidatedSettingCount As Long

'@Description("クラスの初期化")
Private Sub Class_Initialize()
    Set mErrors = New Collection
    Set mWarnings = New Collection
    Set mValidatedRules = New Collection
    mIsValid = True
    mState = vsNotStarted
    mValidatedSettingCount = 0
End Sub

'@Description("クラスの終了処理")
Private Sub Class_Terminate()
    Set mErrors = Nothing
    Set mWarnings = Nothing
    Set mValidatedRules = Nothing
End Sub

'@Description("バリデーション結果が有効かどうか")
Public Property Get IsValid() As Boolean
    IsValid = mIsValid
End Property

Public Property Let IsValid(ByVal value As Boolean)
    mIsValid = value
End Property

'@Description("エラーメッセージのコレクション")
Public Property Get Errors() As Collection
    Set Errors = mErrors
End Property

Public Property Set Errors(ByVal value As Collection)
    Set mErrors = value
End Property

'@Description("警告メッセージのコレクション")
Public Property Get Warnings() As Collection
    Set Warnings = mWarnings
End Property

Public Property Set Warnings(ByVal value As Collection)
    Set mWarnings = value
End Property

'@Description("検証されたルールのコレクション")
Public Property Get ValidatedRules() As Collection
    Set ValidatedRules = mValidatedRules
End Property

Public Property Set ValidatedRules(ByVal value As Collection)
    Set mValidatedRules = value
End Property

'@Description("バリデーションの状態")
Public Property Get State() As ValidationState
    State = mState
End Property

Public Property Let State(ByVal value As ValidationState)
    mState = value
End Property

'@Description("バリデーション開始時刻")
Public Property Get StartTime() As Date
    StartTime = mStartTime
End Property

Public Property Let StartTime(ByVal value As Date)
    mStartTime = value
End Property

'@Description("バリデーション終了時刻")
Public Property Get EndTime() As Date
    EndTime = mEndTime
End Property

Public Property Let EndTime(ByVal value As Date)
    mEndTime = value
End Property

'@Description("検証された設定の数")
Public Property Get ValidatedSettingCount() As Long
    ValidatedSettingCount = mValidatedSettingCount
End Property

Public Property Let ValidatedSettingCount(ByVal value As Long)
    mValidatedSettingCount = value
End Property

'@Description("エラーを追加する")
'@Param("errorMessage: エラーメッセージ")
Public Sub AddError(ByVal errorMessage As String)
    mErrors.Add errorMessage
    mIsValid = False
End Sub

'@Description("警告を追加する")
'@Param("warningMessage: 警告メッセージ")
Public Sub AddWarning(ByVal warningMessage As String)
    mWarnings.Add warningMessage
End Sub

'@Description("検証ルールを追加する")
'@Param("ruleName: ルール名")
'@Param("ruleResult: ルールの検証結果")
Public Sub AddValidatedRule(ByVal ruleName As String, ByVal ruleResult As Boolean)
    Dim ruleInfo As New Dictionary
    ruleInfo.Add "Name", ruleName
    ruleInfo.Add "Result", ruleResult
    ruleInfo.Add "Timestamp", Now
    mValidatedRules.Add ruleInfo
End Sub

'@Description("バリデーション結果の要約を取得する")
'@Return("要約文字列")
Public Function GetSummary() As String
    Dim summary As String
    summary = "バリデーション結果:" & vbCrLf
    summary = summary & "- 有効性: " & IIf(mIsValid, "有効", "無効") & vbCrLf
    summary = summary & "- 状態: " & GetStateName(mState) & vbCrLf
    summary = summary & "- エラー数: " & mErrors.Count & vbCrLf
    summary = summary & "- 警告数: " & mWarnings.Count & vbCrLf
    summary = summary & "- 検証ルール数: " & mValidatedRules.Count & vbCrLf
    summary = summary & "- 検証設定数: " & mValidatedSettingCount & vbCrLf
    
    If mStartTime <> 0 And mEndTime <> 0 Then
        summary = summary & "- 実行時間: " & Format$(mEndTime - mStartTime, "hh:nn:ss") & vbCrLf
    End If
    
    GetSummary = summary
End Function

'@Description("バリデーション状態名を取得する")
'@Param("state: ValidationState列挙型の値")
'@Return("状態名")
Private Function GetStateName(ByVal state As ValidationState) As String
    Select Case state
        Case vsNotStarted: GetStateName = "未開始"
        Case vsPending: GetStateName = "保留中"
        Case vsRunning: GetStateName = "実行中"
        Case vsPaused: GetStateName = "一時停止"
        Case vsCompleted: GetStateName = "完了"
        Case vsFailed: GetStateName = "失敗"
        Case vsCancelled: GetStateName = "キャンセル"
        Case Else: GetStateName = "不明"
    End Select
End Function

================
File: data/ConnectionPool.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "ConnectionPool"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements IConnectionPool

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "ConnectionPool"

' ======================
' 定数定義
' ======================
Private Const CONNECTION_TIMEOUT As Long = 30 ' 秒

' ======================
' メンバ変数
' ======================
Private Type ConnectionInfo
    Connection As Object
    InUse As Boolean
    LastUsed As Date
End Type

Private mConnections() As ConnectionInfo
Private mConnectionString As String
Private mPoolSize As Long
Private mLock As clsLock
Private mPerformanceMonitor As clsPerformanceMonitor
Private mLogger As ILogger
Private mConfig As IDatabaseConfig

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    Dim MAX_POOL_SIZE As Long
    ReDim mConnections(1 To MAX_POOL_SIZE)
    mPoolSize = 0
    Set mLock = New clsLock
    Set mPerformanceMonitor = New clsPerformanceMonitor
End Sub

Private Sub Class_Terminate()
    Dim i As Long
    Dim MAX_POOL_SIZE As Long
    For i = 1 To MAX_POOL_SIZE
        If Not mConnections(i).Connection Is Nothing Then
            If mConnections(i).Connection.State = 1 Then ' adStateOpen
                mConnections(i).Connection.Close
            End If
            Set mConnections(i).Connection = Nothing
        End If
    Next i
    Set mLock = Nothing
    Set mConfig = Nothing
    Set mLogger = Nothing
    Set mPerformanceMonitor = Nothing
End Sub

' ======================
' パブリックメソッド
' ======================

''' <summary>
''' コネクションプールを初期化します
''' </summary>
''' <param name="config">データベース設定を提供するインターフェース</param>
''' <param name="performanceMonitor">パフォーマンスモニター</param>
''' <param name="lock">ロックオブジェクト</param>
''' <param name="logger">ロガー</param>
Public Sub Initialize(ByVal config As IDatabaseConfig, _
                     ByVal performanceMonitor As IPerformanceMonitor, _
                     ByVal lock As ILock, _
                     ByVal logger As ILogger)
    Set mConfig = config
    Set mPerformanceMonitor = performanceMonitor
    Set mLock = lock
    Set mLogger = logger
    mConnectionString = mConfig.GetConnectionString
End Sub

''' <summary>
''' データベース接続を取得します（IConnectionPool実装）
''' </summary>
Private Function IConnectionPool_AcquireConnection() As Object
    On Error GoTo ErrorHandler
    mPerformanceMonitor.StartMeasurement "Get Database Connection"
    
    mLock.AcquireLock
    
    ' 未使用のコネクションを探す
    Dim i As Long
    For i = 1 To mPoolSize
        If Not mConnections(i).InUse Then
            ' コネクションの状態をチェック
            If ValidateConnection(mConnections(i).Connection) Then
                mConnections(i).InUse = True
                mConnections(i).LastUsed = Now
                Set IConnectionPool_AcquireConnection = mConnections(i).Connection
                GoTo Cleanup
            Else
                ' 無効なコネクションを破棄して再作成
                Set mConnections(i).Connection = CreateNewConnection()
                If Not mConnections(i).Connection Is Nothing Then
                    mConnections(i).InUse = True
                    mConnections(i).LastUsed = Now
                    Set IConnectionPool_AcquireConnection = mConnections(i).Connection
                    GoTo Cleanup
                End If
            End If
        End If
    Next i
    
    ' 新しいコネクションを作成（プールサイズが上限に達していない場合）
    Dim MAX_POOL_SIZE As Long
    MAX_POOL_SIZE = mConfig.GetMaxPoolSize
    If mPoolSize < MAX_POOL_SIZE Then
        mPoolSize = mPoolSize + 1
        Set mConnections(mPoolSize).Connection = CreateNewConnection()
        If Not mConnections(mPoolSize).Connection Is Nothing Then
            mConnections(mPoolSize).InUse = True
            mConnections(mPoolSize).LastUsed = Now
            GoTo Cleanup
        End If
    End If
    
    ' 利用可能なコネクションがない場合はエラー
    Err.Raise vbObjectError + 1, MODULE_NAME, "利用可能なコネクションがありません。"
    
Cleanup:
    mLock.ReleaseLock
    mPerformanceMonitor.EndMeasurement "Get Database Connection"
    Exit Function
    
ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrDatabaseConnectionFailed
        .Description = "コネクション取得中にエラーが発生しました: " & Err.Description
        .Category = ECDatabase
        .Source = MODULE_NAME
        .ProcedureName = "GetConnection"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    If Not mLock Is Nothing Then mLock.ReleaseLock
    mPerformanceMonitor.EndMeasurement "Get Database Connection"
    Set IConnectionPool_AcquireConnection = Nothing
End Function

''' <summary>
''' データベース接続を解放します（IConnectionPool実装）
''' </summary>
''' <param name="connection">解放するコネクション</param>
Private Sub IConnectionPool_ReleaseConnection(ByVal connection As Object)
    If connection Is Nothing Then Exit Sub
    
    mLock.AcquireLock
    
    Dim i As Long
    For i = 1 To mPoolSize
        If mConnections(i).Connection Is connection Then
            mConnections(i).InUse = False
            mConnections(i).LastUsed = Now
            Exit For
        End If
    Next i
    
    mLock.ReleaseLock
End Sub

''' <summary>
''' 現在のアクティブな接続数を取得します（IConnectionPool実装）
''' </summary>
Private Property Get IConnectionPool_ActiveConnections() As Long
    Dim count As Long
    Dim i As Long
    For i = 1 To mPoolSize
        If mConnections(i).InUse Then count = count + 1
    Next i
    IConnectionPool_ActiveConnections = count
End Property

''' <summary>
''' プールの最大接続数を取得または設定します（IConnectionPool実装）
''' </summary>
Private Property Get IConnectionPool_MaxConnections() As Long
    IConnectionPool_MaxConnections = mConfig.GetMaxPoolSize
End Property

Private Property Let IConnectionPool_MaxConnections(ByVal value As Long)
    ' 設定は無視 - 設定はIDatabaseConfigで管理
End Property

''' <summary>
''' 接続タイムアウト時間を取得または設定します（IConnectionPool実装）
''' </summary>
Private Property Get IConnectionPool_ConnectionTimeout() As Long
    IConnectionPool_ConnectionTimeout = mConfig.GetConnectionTimeout
End Property

Private Property Let IConnectionPool_ConnectionTimeout(ByVal value As Long)
    ' 設定は無視 - 設定はIDatabaseConfigで管理
End Property

' ======================
' プライベートメソッド
' ======================

''' <summary>
''' 新しいデータベース接続を作成します
''' </summary>
Private Function CreateNewConnection() As Object
    On Error GoTo ErrorHandler
    mPerformanceMonitor.StartMeasurement "Create Database Connection"
    
    ' 接続文字列の検証
    If Not ValidateConnectionString(mConnectionString) Then
        mLogger.LogError MODULE_NAME, "CreateNewConnection", "不正な接続文字列です: " & mConnectionString
        Exit Function
    End If
    mLock.AcquireLock
    
    Dim conn As Object
    Set conn = CreateObject("ADODB.Connection")
    conn.ConnectionString = mConnectionString
    conn.ConnectionTimeout = CONNECTION_TIMEOUT
    
    ' リトライ処理を実装
    Dim retryCount As Long
    Dim retryInterval As Long
    retryCount = mConfig.GetRetryCount
    retryInterval = mConfig.GetRetryInterval
    
    Do While retryCount >= 0
        On Error Resume Next
        conn.Open
        If Err.Number = 0 Then Exit Do
        retryCount = retryCount - 1
        If retryCount >= 0 Then Sleep retryInterval
    Loop
    
    Set CreateNewConnection = conn
    
Cleanup:
    mLock.ReleaseLock
    mPerformanceMonitor.EndMeasurement "Create Database Connection"
    Exit Function
    
ErrorHandler:
    mLogger.LogError MODULE_NAME, "CreateNewConnection", "接続の作成に失敗しました: " & Err.Description
    Set CreateNewConnection = Nothing
    Resume Cleanup
End Function

''' <summary>
''' コネクションが有効かどうかを確認します
''' </summary>
Private Function ValidateConnection(ByVal connection As Object) As Boolean
    If connection Is Nothing Then
        ValidateConnection = False
        Exit Function
    End If
    
    On Error Resume Next
    ValidateConnection = (connection.State = 1) ' adStateOpen
    If Err.Number <> 0 Then
        ValidateConnection = False
    End If
    On Error GoTo 0
End Function

''' <summary>
''' 接続文字列を検証します
''' </summary>
Private Function ValidateConnectionString(ByVal connectionString As String) As Boolean
    If Len(Trim(connectionString)) = 0 Then
        ValidateConnectionString = False
        Exit Function
    End If
    
    ' 基本的な接続文字列の形式チェック
    If InStr(1, connectionString, "Provider=", vbTextCompare) = 0 And _
       InStr(1, connectionString, "Driver=", vbTextCompare) = 0 Then
        ValidateConnectionString = False
        Exit Function
    End If
    
    ValidateConnectionString = True
End Function

' ======================
' テストサポート機能
' 警告: これらのメソッドは開発時のテスト目的でのみ使用し、
' 本番環境では使用しないでください。
' ======================
#If DEBUG Then
    ''' <summary>
    ''' コネクションプールの現在のサイズを取得（テスト用）
    ''' </summary>
    Private Property Get PoolSize() As Long
        PoolSize = mPoolSize
    End Property
    
    ''' <summary>
    ''' アクティブなコネクション数を取得（テスト用）
    ''' </summary>
    Private Property Get ActiveConnections() As Long
        Dim count As Long
        Dim i As Long
        For i = 1 To mPoolSize
            If mConnections(i).InUse Then count = count + 1
        Next i
        ActiveConnections = count
    End Property
    
    ''' <summary>
    ''' コネクションプールをクリア（テスト用）
    ''' </summary>
    Private Sub ClearPool()
        Class_Terminate
        Class_Initialize
    End Sub
#End If

================
File: data/DatabaseConnectionErrorHandler.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "DatabaseConnectionErrorHandler"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' モジュール情報
Private Const MODULE_NAME As String = "DatabaseConnectionErrorHandler"

' 定数定義
Private Const DEFAULT_RETRY_INTERVAL As Long = 1000    ' ミリ秒
Private Const MAX_RETRY_COUNT As Long = 3
Private Const MAX_POOL_SIZE As Long = 100              ' 最大プールサイズ
Private Const MIN_POOL_SIZE As Long = 5                ' 最小プールサイズ
Private Const POOL_CLEANUP_INTERVAL As Long = 300000   ' プールクリーンアップ間隔（5分）
Private Const DIAGNOSTIC_TIMEOUT As Long = 5000        ' 診断タイムアウト（5秒）
Private Const MAX_FALLBACK_ATTEMPTS As Long = 2        ' 最大フォールバック試行回数
Private Const METRICS_INTERVAL As Long = 60000         ' メトリクス収集間隔（1分）

' イベント定義
Public Event RetryAttempted(ByVal attempt As Long, ByVal success As Boolean)
Public Event FallbackActivated(ByVal reason As String, ByVal connectionString As String)
Public Event PoolStateChanged(ByVal activeConnections As Long, ByVal maxPoolSize As Long)
Public Event DiagnosticsCompleted(ByVal results As Collection)
Public Event PerformanceAlert(ByVal metricType As String, ByVal currentValue As Double, ByVal threshold As Double)
Public Event ConnectionRecovered(ByVal originalError As ErrorInfo, ByVal recoveryTime As Double)
Public Event MetricsCollected(ByVal metrics As Collection)

' プライベート変数
Private mConnectionString As String
Private mFallbackConnectionString As String
Private mLock As ILock
Private mLogger As ILogger
Private mEmergencyLogger As IEmergencyLogger
Private mConfig As IDatabaseConfig
Private mUserNotifier As IUserNotifier
Private mPerformanceMonitor As IPerformanceMonitor
Private mConnectionPool As Collection
Private mLastCleanupTime As Date
Private mLastMetricsTime As Date
Private mRetryStrategies As Collection
Private mDiagnosticResults As Collection

Implements IErrorHandler

' コンストラクタ
Public Function Create( _
    ByVal lock As ILock, _
    ByVal logger As ILogger, _
    ByVal emergencyLogger As IEmergencyLogger, _
    ByVal config As IDatabaseConfig, _
    ByVal userNotifier As IUserNotifier, _
    ByVal performanceMonitor As IPerformanceMonitor _
) As DatabaseConnectionErrorHandler
    
    Dim instance As New DatabaseConnectionErrorHandler
    
    ' 依存性の注入と検証
    With instance
        ValidateDependency lock, "ILock"
        Set .Lock = lock
        
        ValidateDependency logger, "ILogger"
        Set .Logger = logger
        
        ValidateDependency emergencyLogger, "IEmergencyLogger"
        Set .EmergencyLogger = emergencyLogger
        
        ValidateDependency config, "IDatabaseConfig"
        Set .Config = config
        
        ValidateDependency userNotifier, "IUserNotifier"
        Set .UserNotifier = userNotifier
        
        ValidateDependency performanceMonitor, "IPerformanceMonitor"
        Set .PerformanceMonitor = performanceMonitor
        
        .Initialize
    End With
    
    Set Create = instance
End Function

' プロパティ
Public Property Set Lock(ByVal value As ILock)
    Set mLock = value
End Property

Public Property Set Logger(ByVal value As ILogger)
    Set mLogger = value
End Property

Public Property Set EmergencyLogger(ByVal value As IEmergencyLogger)
    Set mEmergencyLogger = value
End Property

Public Property Set Config(ByVal value As IDatabaseConfig)
    Set mConfig = value
    mConnectionString = mConfig.GetConnectionString
    mFallbackConnectionString = mConfig.GetFallbackConnectionString
End Property

Public Property Set UserNotifier(ByVal value As IUserNotifier)
    Set mUserNotifier = value
End Property

Public Property Set PerformanceMonitor(ByVal value As IPerformanceMonitor)
    Set mPerformanceMonitor = value
End Property

' 初期化
Private Sub Initialize()
    Set mConnectionPool = New Collection
    Set mRetryStrategies = New Collection
    Set mDiagnosticResults = New Collection
    mLastCleanupTime = Now
    mLastMetricsTime = Now
    InitializeRetryStrategies
End Sub

' IErrorHandler実装
Private Function IErrorHandler_HandleError(ByRef errorDetail As ErrorInfo) As Boolean
    Dim proceed As Boolean
    proceed = False
    
    mPerformanceMonitor.StartMeasurement "HandleError"
    
    ' エラー情報をログに記録
    LogError errorDetail
    
    ' エラー情報の補完
    CompleteErrorInfo errorDetail
    
    ' 診断の実行
    ExecuteDiagnostics errorDetail
    
    ' リトライ処理の実行
    If AttemptRetry(errorDetail) Then
        proceed = True
        errorDetail.RecoverySuccessful = True
        RaiseEvent ConnectionRecovered(errorDetail, mPerformanceMonitor.GetElapsedTime)
    Else
        ' フォールバック処理の実行
        If AttemptFallback(errorDetail) Then
            proceed = True
            errorDetail.RecoverySuccessful = True
        Else
            errorDetail.RecoverySuccessful = False
            NotifyUser errorDetail, vbCritical
        End If
    End If
    
    ' メトリクスの収集
    CollectMetrics
    
    ' プールの管理
    ManageConnectionPool
    
    mPerformanceMonitor.EndMeasurement "HandleError"
    
    IErrorHandler_HandleError = proceed
End Function

' プライベートメソッド
Private Sub InitializeRetryStrategies()
    With mRetryStrategies
        .Add New LinearRetryStrategy
        .Add New ExponentialRetryStrategy
        .Add New FibonacciRetryStrategy
    End With
End Sub

Private Sub CompleteErrorInfo(ByRef errorDetail As ErrorInfo)
    With errorDetail
        .AddAdditionalInfo "ConnectionString", mConnectionString
        .AddAdditionalInfo "MaxRetries", CStr(MAX_RETRY_COUNT)
        .AddAdditionalInfo "PoolSize", CStr(mConnectionPool.Count)
        .AddAdditionalInfo "LastDiagnostic", GetLastDiagnosticResult
        .RecoveryAttempted = True
    End With
End Sub

Private Function AttemptRetry(ByRef errorDetail As ErrorInfo) As Boolean
    Dim strategy As IRetryStrategy
    Set strategy = SelectRetryStrategy(errorDetail)
    
    Dim retryCount As Long
    Dim success As Boolean
    
    For retryCount = 1 To MAX_RETRY_COUNT
        Wait strategy.GetNextInterval(retryCount)
        
        errorDetail.AddAdditionalInfo "CurrentRetry", CStr(retryCount)
        
        If TryDatabaseConnection Then
            success = True
            Exit For
        End If
        
        RaiseEvent RetryAttempted(retryCount, False)
        LogRetryAttempt retryCount, errorDetail
    Next retryCount
    
    If success Then RaiseEvent RetryAttempted(retryCount, True)
    
    AttemptRetry = success
End Function

Private Function AttemptFallback(ByRef errorDetail As ErrorInfo) As Boolean
    If Len(mFallbackConnectionString) = 0 Then Exit Function
    
    Dim originalConnection As String
    originalConnection = mConnectionString
    mConnectionString = mFallbackConnectionString
    
    RaiseEvent FallbackActivated("Primary connection failed", mFallbackConnectionString)
    
    Dim success As Boolean
    success = TryDatabaseConnection
    
    If Not success Then mConnectionString = originalConnection
    
    AttemptFallback = success
End Function

Private Sub ExecuteDiagnostics(ByRef errorDetail As ErrorInfo)
    mPerformanceMonitor.StartMeasurement "Diagnostics"
    
    Dim results As New Collection
    
    ' ネットワーク診断
    results.Add DiagnoseNetwork
    
    ' サーバー診断
    results.Add DiagnoseServer
    
    ' 認証診断
    results.Add DiagnoseAuthentication
    
    Set mDiagnosticResults = results
    RaiseEvent DiagnosticsCompleted(results)
    
    mPerformanceMonitor.EndMeasurement "Diagnostics"
End Sub

Private Sub ManageConnectionPool()
    If DateDiff("s", mLastCleanupTime, Now) > POOL_CLEANUP_INTERVAL / 1000 Then
        CleanupConnectionPool
        mLastCleanupTime = Now
    End If
    
    RaiseEvent PoolStateChanged(mConnectionPool.Count, MAX_POOL_SIZE)
End Sub

Private Sub CollectMetrics()
    If DateDiff("s", mLastMetricsTime, Now) > METRICS_INTERVAL / 1000 Then
        Dim metrics As New Collection
        
        With metrics
            .Add mPerformanceMonitor.GetAllMeasurements
            .Add GetConnectionPoolMetrics
            .Add GetRetryMetrics
            .Add GetDiagnosticMetrics
        End With
        
        RaiseEvent MetricsCollected(metrics)
        mLastMetricsTime = Now
    End If
End Sub

Private Function SelectRetryStrategy(ByRef errorDetail As ErrorInfo) As IRetryStrategy
    ' エラーの種類に応じて最適な戦略を選択
    ' 実装は省略
End Function

Private Function DiagnoseNetwork() As DiagnosticResult
    ' ネットワーク診断の実装
    ' 実装は省略
End Function

Private Function DiagnoseServer() As DiagnosticResult
    ' サーバー診断の実装
    ' 実装は省略
End Function

Private Function DiagnoseAuthentication() As DiagnosticResult
    ' 認証診断の実装
    ' 実装は省略
End Function

Private Sub CleanupConnectionPool()
    ' 接続プールのクリーンアップ
    ' 実装は省略
End Sub

Private Function GetConnectionPoolMetrics() As Collection
    ' 接続プールのメトリクス取得
    ' 実装は省略
End Function

Private Function GetRetryMetrics() As Collection
    ' リトライのメトリクス取得
    ' 実装は省略
End Function

Private Function GetDiagnosticMetrics() As Collection
    ' 診断のメトリクス取得
    ' 実装は省略
End Function

Private Function GetLastDiagnosticResult() As String
    ' 最後の診断結果を取得
    ' 実装は省略
End Function

Private Sub ValidateDependency(ByVal dependency As Object, ByVal name As String)
    If dependency Is Nothing Then
        Err.Raise 5, "DatabaseConnectionErrorHandler.Create", name & " is required"
    End If
End Sub

' 既存のメソッド（TryDatabaseConnection, LogError, NotifyUser, Wait）は変更なし

================
File: data/FileIOImpl.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "FileIOImpl"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "FileIOImpl"

' ======================
' インターフェース実装
' ======================
Implements IFileIO

' ======================
' プライベート変数
' ======================
Private mFSO As Object ' Scripting.FileSystemObject
Private mIsInitialized As Boolean

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    Set mFSO = CreateObject("Scripting.FileSystemObject")
    mIsInitialized = True
End Sub

Private Sub Class_Terminate()
    Set mFSO = Nothing
    mIsInitialized = False
End Sub

Private Sub InitializeIfNeeded()
    If Not mIsInitialized Then
        Class_Initialize
    End If
End Sub

' ======================
' IFileIO実装
' ======================
Private Function IFileIO_FileExists(ByVal filePath As String) As Boolean
    InitializeIfNeeded
    On Error Resume Next
    IFileIO_FileExists = mFSO.FileExists(filePath)
    On Error GoTo 0
End Function

Private Function IFileIO_FolderExists(ByVal folderPath As String) As Boolean
    InitializeIfNeeded
    On Error Resume Next
    IFileIO_FolderExists = mFSO.FolderExists(folderPath)
    On Error GoTo 0
End Function

Private Function IFileIO_CreateFolder(ByVal folderPath As String) As Boolean
    InitializeIfNeeded
    On Error GoTo ErrorHandler
    
    If IFileIO_FolderExists(folderPath) Then
        IFileIO_CreateFolder = True
        Exit Function
    End If
    
    mFSO.CreateFolder folderPath
    IFileIO_CreateFolder = True
    Exit Function
    
ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = ErrFileAccessDenied
        .Description = "フォルダの作成に失敗しました: " & folderPath
        .Source = MODULE_NAME & ".IFileIO_CreateFolder"
    End With
    Call modError.HandleError(errInfo)
    IFileIO_CreateFolder = False
End Function

Private Function IFileIO_DeleteFile(ByVal filePath As String) As Boolean
    InitializeIfNeeded
    On Error GoTo ErrorHandler
    
    If Not IFileIO_FileExists(filePath) Then
        IFileIO_DeleteFile = True
        Exit Function
    End If
    
    mFSO.DeleteFile filePath, True ' Force = True
    IFileIO_DeleteFile = True
    Exit Function
    
ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = ErrFileAccessDenied
        .Description = "ファイルの削除に失敗しました: " & filePath
        .Source = MODULE_NAME & ".IFileIO_DeleteFile"
    End With
    Call modError.HandleError(errInfo)
    IFileIO_DeleteFile = False
End Function

Private Function IFileIO_CopyFile(ByVal sourceFilePath As String, ByVal destinationFilePath As String) As Boolean
    InitializeIfNeeded
    On Error GoTo ErrorHandler
    
    If Not IFileIO_FileExists(sourceFilePath) Then
        Err.Raise ErrFileNotFound, MODULE_NAME & ".IFileIO_CopyFile", "コピー元ファイルが存在しません: " & sourceFilePath
    End If
    
    mFSO.CopyFile sourceFilePath, destinationFilePath, True ' OverWrite = True
    IFileIO_CopyFile = True
    Exit Function
    
ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = Err.Number
        .Description = "ファイルのコピーに失敗しました: " & Err.Description
        .Source = MODULE_NAME & ".IFileIO_CopyFile"
    End With
    Call modError.HandleError(errInfo)
    IFileIO_CopyFile = False
End Function

Private Function IFileIO_MoveFile(ByVal sourceFilePath As String, ByVal destinationFilePath As String) As Boolean
    InitializeIfNeeded
    On Error GoTo ErrorHandler
    
    If Not IFileIO_FileExists(sourceFilePath) Then
        Err.Raise ErrFileNotFound, MODULE_NAME & ".IFileIO_MoveFile", "移動元ファイルが存在しません: " & sourceFilePath
    End If
    
    mFSO.MoveFile sourceFilePath, destinationFilePath
    IFileIO_MoveFile = True
    Exit Function
    
ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = Err.Number
        .Description = "ファイルの移動に失敗しました: " & Err.Description
        .Source = MODULE_NAME & ".IFileIO_MoveFile"
    End With
    Call modError.HandleError(errInfo)
    IFileIO_MoveFile = False
End Function

Private Function IFileIO_OpenFile(ByVal filePath As String, ByVal mode As String) As Object
    InitializeIfNeeded
    On Error GoTo ErrorHandler
    
    Dim fileMode As Integer
    Select Case UCase$(mode)
        Case "READ"
            fileMode = 1 ' ForReading
        Case "WRITE"
            fileMode = 2 ' ForWriting
        Case "APPEND"
            fileMode = 8 ' ForAppending
        Case Else
            Err.Raise vbObjectError + 1001, MODULE_NAME & ".IFileIO_OpenFile", "無効なファイルモード: " & mode
    End Select
    
    Set IFileIO_OpenFile = mFSO.OpenTextFile(filePath, fileMode, True) ' Create = True
    Exit Function
    
ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = Err.Number
        .Description = "ファイルを開けませんでした: " & Err.Description
        .Source = MODULE_NAME & ".IFileIO_OpenFile"
    End With
    Call modError.HandleError(errInfo)
    Set IFileIO_OpenFile = Nothing
End Function

Private Function IFileIO_CloseFile(ByVal file As Object) As Boolean
    On Error GoTo ErrorHandler
    
    If file Is Nothing Then
        IFileIO_CloseFile = True
        Exit Function
    End If
    
    file.Close
    IFileIO_CloseFile = True
    Exit Function
    
ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = Err.Number
        .Description = "ファイルを閉じる際にエラーが発生しました: " & Err.Description
        .Source = MODULE_NAME & ".IFileIO_CloseFile"
    End With
    Call modError.HandleError(errInfo)
    IFileIO_CloseFile = False
End Function

' ======================
' パブリックメソッド
' ======================
Public Function CreateInstance() As IFileIO
    Set CreateInstance = New FileIOImpl
End Function

' ======================
' テストサポート機能（開発環境専用）
' ======================
#If DEBUG Then
    ''' <summary>
    ''' モジュールの状態を初期化（テスト用）
    ''' </summary>
    Private Sub ResetModule()
        Class_Terminate
        Class_Initialize
    End Sub
    
    ''' <summary>
    ''' 初期化状態を取得（テスト用）
    ''' </summary>
    Private Property Get IsInitialized() As Boolean
        IsInitialized = mIsInitialized
    End Property
#End If

================
File: data/FileNotFoundErrorHandler.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "FileNotFoundErrorHandler"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "FileNotFoundErrorHandler"

' ======================
' プライベート変数
' ======================
Private mLock As ILock
Private mLogger As ILogger
Private mEmergencyLogger As IEmergencyLogger
Private mUserNotifier As IUserNotifier
Private mFileOperations As IFileOperations

Implements IErrorHandler

' =====================
' コンストラクタ
' =====================
Public Function Create( _
    ByVal lock As ILock, _
    ByVal logger As ILogger, _
    ByVal emergencyLogger As IEmergencyLogger, _
    ByVal userNotifier As IUserNotifier, _
    ByVal fileOperations As IFileOperations _
) As FileNotFoundErrorHandler
    
    Dim instance As New FileNotFoundErrorHandler
    
    ' 依存性の注入
    With instance
        If lock Is Nothing Then
            Err.Raise 5, "FileNotFoundErrorHandler.Create", "ILock is required"
        End If
        Set .Lock = lock
        
        If logger Is Nothing Then
            Err.Raise 5, "FileNotFoundErrorHandler.Create", "ILogger is required"
        End If
        Set .Logger = logger
        
        If emergencyLogger Is Nothing Then
            Err.Raise 5, "FileNotFoundErrorHandler.Create", "IEmergencyLogger is required"
        End If
        Set .EmergencyLogger = emergencyLogger
        
        If userNotifier Is Nothing Then
            Err.Raise 5, "FileNotFoundErrorHandler.Create", "IUserNotifier is required"
        End If
        Set .UserNotifier = userNotifier
        
        If fileOperations Is Nothing Then
            Err.Raise 5, "FileNotFoundErrorHandler.Create", "IFileOperations is required"
        End If
        Set .FileOperations = fileOperations
    End With
    
    Set Create = instance
End Function

' プロパティ
Public Property Set Lock(ByVal value As ILock)
    Set mLock = value
End Property

Public Property Set Logger(ByVal value As ILogger)
    Set mLogger = value
End Property

Public Property Set EmergencyLogger(ByVal value As IEmergencyLogger)
    Set mEmergencyLogger = value
End Property

Public Property Set UserNotifier(ByVal value As IUserNotifier)
    Set mUserNotifier = value
End Property

Public Property Set FileOperations(ByVal value As IFileOperations)
    Set mFileOperations = value
End Property

' ======================
' IErrorHandler実装
' ======================
Private Function IErrorHandler_HandleError(ByRef errorDetail As ErrorInfo) As Boolean
    Dim proceed As Boolean
    proceed = False  ' デフォルトでは処理を中断
    
    mLock.AcquireLock
    
    ' エラー情報をログに記録
    LogError errorDetail
    
    ' エラー情報の補完
    If errorDetail.HasAdditionalInfo("FilePath") Then
        Dim filePath As String
        filePath = errorDetail.GetAdditionalInfo("FilePath")
        
        ' 代替ファイルパスの確認
        Dim alternativePath As String
        alternativePath = FindAlternativeFile(filePath)
        
        If alternativePath <> "" Then
            errorDetail.AddAdditionalInfo "AlternativeFilePath", alternativePath
            errorDetail.RecoveryAttempted = True
            errorDetail.RecoverySuccessful = True
            proceed = True
        Else
            ' バックアップファイルの確認
            Dim backupPath As String
            backupPath = CheckBackupFile(filePath)
            
            If backupPath <> "" Then
                errorDetail.AddAdditionalInfo "BackupFilePath", backupPath
                errorDetail.RecoveryAttempted = True
                errorDetail.RecoverySuccessful = True
                proceed = True
            End If
        End If
    End If
    
    mLock.ReleaseLock
    
    ' ユーザーに通知
    NotifyUser errorDetail, IIf(proceed, vbInformation, vbExclamation)
    
    IErrorHandler_HandleError = proceed
End Function

' ======================
' プライベートメソッド
' ======================
Private Function FindAlternativeFile(ByVal originalPath As String) As String
    On Error GoTo ErrorHandler
    
    ' 1. 異なる拡張子のファイルを確認
    Dim extensions() As String
    extensions = Array(".bak", ".tmp", ".old")
    
    Dim basePath As String
    basePath = Left(originalPath, InStrRev(originalPath, ".") - 1)
    
    Dim i As Long
    For i = LBound(extensions) To UBound(extensions)
        Dim altPath As String
        altPath = basePath & extensions(i)
        
        If mFileOperations.FileExists(altPath) Then
            FindAlternativeFile = altPath
            Exit Function
        End If
    Next i
    
    ' 2. 同じ名前の異なるディレクトリを確認
    Dim parentPath As String
    parentPath = Left(originalPath, InStrRev(originalPath, "\") - 1)
    
    Dim fileName As String
    fileName = Mid(originalPath, InStrRev(originalPath, "\") + 1)
    
    Dim altDirs() As String
    altDirs = Array("\backup", "\archive", "\old")
    
    For i = LBound(altDirs) To UBound(altDirs)
        altPath = parentPath & altDirs(i) & "\" & fileName
        
        If mFileOperations.FileExists(altPath) Then
            FindAlternativeFile = altPath
            Exit Function
        End If
    Next i
    
    FindAlternativeFile = ""
    Exit Function

ErrorHandler:
    FindAlternativeFile = ""
End Function

Private Function CheckBackupFile(ByVal originalPath As String) As String
    On Error GoTo ErrorHandler
    
    Dim backupPath As String
    backupPath = originalPath & ".bak"
    
    If mFileOperations.FileExists(backupPath) Then
        CheckBackupFile = backupPath
    Else
        CheckBackupFile = ""
    End If
    Exit Function

ErrorHandler:
    CheckBackupFile = ""
End Function

Private Sub LogError(ByRef errorDetail As ErrorInfo)
    On Error GoTo ErrorHandler
    
    ' 通常のログ出力
    mLogger.Log MODULE_NAME, "ファイルが見つかりません: " & errorDetail.Description, errorDetail.Code
    
    ' 重要なエラーは緊急ログにも記録
    If errorDetail.Severity >= ESError Then
        mEmergencyLogger.LogEmergency MODULE_NAME, errorDetail.ToString
    End If
    
    Exit Sub

ErrorHandler:
    Dim errDetail As ErrorInfo
    Set errDetail = New ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "ファイルエラーのログ出力中にエラーが発生しました: " & Err.Description
        .Category = ECFileIO
        .Source = MODULE_NAME
        .ProcedureName = "LogError"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
        .Severity = ESError
        Set .InnerError = errorDetail.Clone
    End With
    modError.HandleError errDetail
End Sub

Private Sub NotifyUser(ByRef errorDetail As ErrorInfo, ByVal style As VbMsgBoxStyle)
    On Error GoTo ErrorHandler
    
    Dim message As String
    message = "ファイルが見つかりません: " & errorDetail.Description
    
    If errorDetail.HasAdditionalInfo("AlternativeFilePath") Then
        message = message & vbCrLf & vbCrLf & _
                 "代替ファイルが見つかりました: " & _
                 errorDetail.GetAdditionalInfo("AlternativeFilePath")
    ElseIf errorDetail.HasAdditionalInfo("BackupFilePath") Then
        message = message & vbCrLf & vbCrLf & _
                 "バックアップファイルが見つかりました: " & _
                 errorDetail.GetAdditionalInfo("BackupFilePath")
    End If
    
    mUserNotifier.Notify errorDetail, style, "ファイルエラー"
    Exit Sub

ErrorHandler:
    Dim errDetail As ErrorInfo
    Set errDetail = New ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "ファイルエラーの通知中にエラーが発生しました: " & Err.Description
        .Category = ECFileIO
        .Source = MODULE_NAME
        .ProcedureName = "NotifyUser"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
        .Severity = ESError
        Set .InnerError = errorDetail.Clone
    End With
    modError.HandleError errDetail
End Sub

================
File: data/FileSystemOperations.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "FileSystemOperations"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "FileSystemOperations"

' ======================
' インターフェース実装
' ======================
Implements IFileOperations

' ======================
' プライベート変数
' ======================
Private mLock As ILock
Private mPerformanceMonitor As IPerformanceMonitor
Private mFileIO As IFileIO
Private mIsInitialized As Boolean

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    ' 依存性は外部から注入されるため、ここでは初期化しない
    mIsInitialized = False
End Sub

''' <summary>
''' 依存性を注入して初期化します
''' </summary>
''' <param name="lock">ロック機構</param>
''' <param name="performanceMonitor">パフォーマンスモニター</param>
''' <param name="fileIO">ファイルI/O操作</param>
''' <remarks>
''' このメソッドは必ずインスタンス作成後に呼び出す必要があります
''' </remarks>
Public Sub Initialize(ByVal lock As ILock, _
                     ByVal performanceMonitor As IPerformanceMonitor, _
                     ByVal fileIO As IFileIO)
    Set mLock = lock
    Set mPerformanceMonitor = performanceMonitor
    Set mFileIO = fileIO
    mIsInitialized = True
End Sub

Private Sub Class_Terminate()
    Set mLock = Nothing
    Set mPerformanceMonitor = Nothing
    Set mFileIO = Nothing
    mIsInitialized = False
End Sub

Private Sub InitializeIfNeeded()
    If Not mIsInitialized Then
        Err.Raise vbObjectError + 1000, MODULE_NAME, "オブジェクトが初期化されていません。Initialize メソッドを呼び出してください。"
    End If
End Sub

' ======================
' IFileOperations実装
' ======================
Private Function IFileOperations_ReadTextFile(ByVal filePath As String, _
                                           Optional ByVal encoding As String) As String
    InitializeIfNeeded
    mPerformanceMonitor.StartMeasurement "Read Text File"
    Dim content As String
    On Error GoTo ErrorHandler
    content = ReadTextFileUsingFileIO(filePath, encoding)
    IFileOperations_ReadTextFile = content
    mPerformanceMonitor.EndMeasurement "Read Text File"
    Exit Function
ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = ErrFileNotFound
        .Description = "ファイルの読み込みに失敗しました: " & filePath
        .Source = MODULE_NAME & ".IFileOperations_ReadTextFile"
    End With
    Call modError.HandleError(errInfo)
    mPerformanceMonitor.EndMeasurement "Read Text File"
    IFileOperations_ReadTextFile = vbNullString
End Function

Private Function IFileOperations_WriteTextFile(ByVal filePath As String, _
                                            ByVal content As String, _
                                            Optional ByVal append As Boolean = False, _
                                            Optional ByVal encoding As String) As Boolean
    InitializeIfNeeded
    mPerformanceMonitor.StartMeasurement "Write Text File"
    Dim result As Boolean
    On Error GoTo ErrorHandler
    result = WriteTextFileUsingFileIO(filePath, content, append, encoding)
    IFileOperations_WriteTextFile = result
    mPerformanceMonitor.EndMeasurement "Write Text File"
    Exit Function
ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = ErrFileAccessDenied
        .Description = "ファイルの書き込みに失敗しました: " & filePath
        .Source = MODULE_NAME & ".IFileOperations_WriteTextFile"
    End With
    Call modError.HandleError(errInfo)
    mPerformanceMonitor.EndMeasurement "Write Text File"
    IFileOperations_WriteTextFile = False
End Function

Private Function IFileOperations_ReadBinaryFile(ByVal filePath As String) As Byte()
    InitializeIfNeeded
    mPerformanceMonitor.StartMeasurement "Read Binary File"
    On Error GoTo ErrorHandler
    IFileOperations_ReadBinaryFile = ReadBinaryFileUsingFileIO(filePath)
    mPerformanceMonitor.EndMeasurement "Read Binary File"
    Exit Function
ErrorHandler:
    mPerformanceMonitor.EndMeasurement "Read Binary File"
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = ErrFileNotFound
        .Description = "バイナリファイルの読み込みに失敗しました: " & filePath
        .Source = MODULE_NAME & ".IFileOperations_ReadBinaryFile"
    End With
    Call modError.HandleError(errInfo)
    IFileOperations_ReadBinaryFile = Array()
End Function

Private Function IFileOperations_WriteBinaryFile(ByVal filePath As String, _
                                              ByRef data() As Byte) As Boolean
    InitializeIfNeeded
    mPerformanceMonitor.StartMeasurement "Write Binary File"
    On Error GoTo ErrorHandler
    IFileOperations_WriteBinaryFile = WriteBinaryFileUsingFileIO(filePath, data)
    mPerformanceMonitor.EndMeasurement "Write Binary File"
    Exit Function
ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = ErrFileAccessDenied
        .Description = "バイナリファイルの書き込みに失敗しました: " & filePath
        .Source = MODULE_NAME & ".IFileOperations_WriteBinaryFile"
    End With
    Call modError.HandleError(errInfo)
    mPerformanceMonitor.EndMeasurement "Write Binary File"
    IFileOperations_WriteBinaryFile = False
End Function

Private Function IFileOperations_FileExists(ByVal filePath As String) As Boolean
    InitializeIfNeeded
    IFileOperations_FileExists = mFileIO.FileExists(filePath)
End Function

Private Function IFileOperations_FolderExists(ByVal folderPath As String) As Boolean
    InitializeIfNeeded
    IFileOperations_FolderExists = mFileIO.FolderExists(folderPath)
End Function

Private Function IFileOperations_CreateFolder(ByVal folderPath As String) As Boolean
    InitializeIfNeeded
    mPerformanceMonitor.StartMeasurement "Create Folder"
    On Error GoTo ErrorHandler
    IFileOperations_CreateFolder = mFileIO.CreateFolder(folderPath)
    mPerformanceMonitor.EndMeasurement "Create Folder"
    Exit Function
ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = ErrFileAccessDenied
        .Description = "フォルダの作成に失敗しました: " & folderPath
        .Source = MODULE_NAME & ".IFileOperations_CreateFolder"
    End With
    Call modError.HandleError(errInfo)
    mPerformanceMonitor.EndMeasurement "Create Folder"
    IFileOperations_CreateFolder = False
End Function

Private Function IFileOperations_DeleteFile(ByVal filePath As String) As Boolean
    InitializeIfNeeded
    mPerformanceMonitor.StartMeasurement "Delete File"
    On Error GoTo ErrorHandler
    IFileOperations_DeleteFile = mFileIO.DeleteFile(filePath)
    mPerformanceMonitor.EndMeasurement "Delete File"
    Exit Function
ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = ErrFileAccessDenied
        .Description = "ファイルの削除に失敗しました: " & filePath
        .Source = MODULE_NAME & ".IFileOperations_DeleteFile"
    End With
    Call modError.HandleError(errInfo)
    mPerformanceMonitor.EndMeasurement "Delete File"
    IFileOperations_DeleteFile = False
End Function

Private Function IFileOperations_DeleteFolder(ByVal folderPath As String) As Boolean
    InitializeIfNeeded
    mPerformanceMonitor.StartMeasurement "Delete Folder"
    On Error GoTo ErrorHandler
    IFileOperations_DeleteFolder = mFileIO.DeleteFolder(folderPath)
    mPerformanceMonitor.EndMeasurement "Delete Folder"
    Exit Function
ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = ErrFileAccessDenied
        .Description = "フォルダの削除に失敗しました: " & folderPath
        .Source = MODULE_NAME & ".IFileOperations_DeleteFolder"
    End With
    Call modError.HandleError(errInfo)
    mPerformanceMonitor.EndMeasurement "Delete Folder"
    IFileOperations_DeleteFolder = False
End Function

Private Function IFileOperations_GetAbsolutePath(ByVal relativePath As String, _
                                              Optional ByVal basePath As String) As String
    InitializeIfNeeded
    ' FileIOImplでは絶対パスの解決は実装していないため、
    ' FSO（FileSystemObject）の機能を直接使用
    On Error Resume Next
    Dim fso As Object
    Set fso = CreateObject("Scripting.FileSystemObject")
    If basePath = "" Then basePath = CurDir()
    IFileOperations_GetAbsolutePath = fso.GetAbsolutePathName(fso.BuildPath(basePath, relativePath))
    Set fso = Nothing
    On Error GoTo 0
End Function

' ======================
' パブリックメソッド
' ======================
Public Function CreateInstance(ByVal lock As ILock, _
                             ByVal performanceMonitor As IPerformanceMonitor, _
                             ByVal fileIO As IFileIO) As IFileOperations
    Dim instance As New FileSystemOperations
    instance.Initialize lock, performanceMonitor, fileIO
    Set CreateInstance = instance
End Function

' ======================
' プライベートヘルパーメソッド
' ======================
Private Function ReadTextFileUsingFileIO(ByVal filePath As String, _
                                       Optional ByVal encoding As String) As String
    Dim file As Object
    Set file = mFileIO.OpenFile(filePath, "READ")
    
    If file Is Nothing Then Exit Function
    
    On Error GoTo ErrorHandler
    ReadTextFileUsingFileIO = file.ReadAll
    mFileIO.CloseFile file
    Exit Function
    
ErrorHandler:
    If Not file Is Nothing Then mFileIO.CloseFile file
    ReadTextFileUsingFileIO = vbNullString
End Function

Private Function WriteTextFileUsingFileIO(ByVal filePath As String, _
                                        ByVal content As String, _
                                        ByVal append As Boolean, _
                                        Optional ByVal encoding As String) As Boolean
    Dim file As Object
    Set file = mFileIO.OpenFile(filePath, IIf(append, "APPEND", "WRITE"))
    
    If file Is Nothing Then Exit Function
    
    On Error GoTo ErrorHandler
    file.Write content
    mFileIO.CloseFile file
    WriteTextFileUsingFileIO = True
    Exit Function
    
ErrorHandler:
    If Not file Is Nothing Then mFileIO.CloseFile file
    WriteTextFileUsingFileIO = False
End Function

Private Function ReadBinaryFileUsingFileIO(ByVal filePath As String) As Byte()
    Dim file As Object
    Set file = mFileIO.OpenFile(filePath, "READ")
    
    If file Is Nothing Then
        ReadBinaryFileUsingFileIO = Array()
        Exit Function
    End If
    
    On Error GoTo ErrorHandler
    Dim fileContent As String
    fileContent = file.ReadAll
    mFileIO.CloseFile file
    
    ' 文字列をバイト配列に変換
    Dim bytes() As Byte
    bytes = StrConv(fileContent, vbFromUnicode)
    ReadBinaryFileUsingFileIO = bytes
    Exit Function
    
ErrorHandler:
    If Not file Is Nothing Then mFileIO.CloseFile file
    ReadBinaryFileUsingFileIO = Array()
End Function

Private Function WriteBinaryFileUsingFileIO(ByVal filePath As String, _
                                          ByRef data() As Byte) As Boolean
    Dim file As Object
    Set file = mFileIO.OpenFile(filePath, "WRITE")
    
    If file Is Nothing Then Exit Function
    
    On Error GoTo ErrorHandler
    ' バイト配列を文字列に変換
    Dim content As String
    content = StrConv(data, vbUnicode)
    file.Write content
    mFileIO.CloseFile file
    WriteBinaryFileUsingFileIO = True
    Exit Function
    
ErrorHandler:
    If Not file Is Nothing Then mFileIO.CloseFile file
    WriteBinaryFileUsingFileIO = False
End Function

' ======================
' テストサポート機能（開発環境専用）
' ======================
#If DEBUG Then
    ''' <summary>
    ''' モジュールの状態を初期化（テスト用）
    ''' </summary>
    Private Sub ResetModule()
        Class_Terminate
        Class_Initialize
    End Sub
    
    ''' <summary>
    ''' 初期化状態を取得（テスト用）
    ''' </summary>
    Private Property Get IsInitialized() As Boolean
        IsInitialized = mIsInitialized
    End Property
#End If

================
File: data/IniFileImpl.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IniFileImpl"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements IIniFile

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "IniFileImpl"

' ======================
' 定数定義
' ======================
Private Const MAX_BUFFER_SIZE As Long = 32767 ' Win32 APIの制限
Private Const DEFAULT_BUFFER_SIZE As Long = 1024

' ======================
' メンバ変数
' ======================
Private mIsInitialized As Boolean
Private mPerformanceMonitor As clsPerformanceMonitor
Private mLock As clsLock

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    Set mPerformanceMonitor = New clsPerformanceMonitor
    Set mLock = New clsLock
    mIsInitialized = True
End Sub

Private Sub Class_Terminate()
    Set mPerformanceMonitor = Nothing
    Set mLock = Nothing
    mIsInitialized = False
End Sub

' ======================
' IIniFile実装
' ======================
Private Function IIniFile_GetPrivateProfileString(ByVal section As String, _
                                                ByVal key As String, _
                                                ByVal defaultValue As String, _
                                                ByVal filePath As String) As String
    If Not mIsInitialized Then Exit Function
    
    mPerformanceMonitor.StartMeasurement "GetPrivateProfileString"
    mLock.AcquireLock
    
    On Error GoTo ErrorHandler
    
    Dim buffer As String
    Dim result As Long
    Dim retryCount As Long
    Const MAX_RETRIES As Long = 3
    
    ' 徐々にバッファサイズを大きくしながら値の取得を試みる
    Dim bufferSize As Long
    bufferSize = DEFAULT_BUFFER_SIZE
    
    Do
        buffer = String$(bufferSize, 0)
        result = modWindowsAPI.GetPrivateProfileString(section, key, defaultValue, _
                                                     buffer, bufferSize, filePath)
        
        ' バッファが不足している場合は拡張して再試行
        If result = bufferSize - 1 Then
            bufferSize = bufferSize * 2
            If bufferSize > MAX_BUFFER_SIZE Then
                LogError "バッファサイズが最大値を超えました。"
                IIniFile_GetPrivateProfileString = defaultValue
                GoTo CleanUp
            End If
        Else
            Exit Do
        End If
        
        retryCount = retryCount + 1
    Loop While retryCount < MAX_RETRIES
    
    If result > 0 Then
        IIniFile_GetPrivateProfileString = Left$(buffer, result)
    Else
        IIniFile_GetPrivateProfileString = defaultValue
    End If
    
CleanUp:
    mLock.ReleaseLock
    mPerformanceMonitor.EndMeasurement "GetPrivateProfileString"
    Exit Function

ErrorHandler:
    LogError "INIファイルからの読み取り中にエラーが発生しました: " & Err.Description
    IIniFile_GetPrivateProfileString = defaultValue
    Resume CleanUp
End Function

Private Function IIniFile_WritePrivateProfileString(ByVal section As String, _
                                                  ByVal key As String, _
                                                  ByVal value As String, _
                                                  ByVal filePath As String) As Boolean
    If Not mIsInitialized Then Exit Function
    
    mPerformanceMonitor.StartMeasurement "WritePrivateProfileString"
    mLock.AcquireLock
    
    On Error GoTo ErrorHandler
    
    Dim result As Long
    result = modWindowsAPI.WritePrivateProfileString(section, key, value, filePath)
    
    IIniFile_WritePrivateProfileString = (result <> 0)
    
CleanUp:
    mLock.ReleaseLock
    mPerformanceMonitor.EndMeasurement "WritePrivateProfileString"
    Exit Function

ErrorHandler:
    LogError "INIファイルへの書き込み中にエラーが発生しました: " & Err.Description
    IIniFile_WritePrivateProfileString = False
    Resume CleanUp
End Function

' ======================
' プライベートメソッド
' ======================
Private Sub LogError(ByVal message As String)
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = ErrUnexpected
        .Description = message
        .Category = ECFileIO
        .Source = MODULE_NAME
        .ProcedureName = "Unknown"  ' スタックトレースから取得可能
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errInfo
End Sub

' ======================
' テストサポート機能
' ======================
#If DEBUG Then
    Public Function ValidateState() As Boolean
        ValidateState = mIsInitialized And _
                       Not (mPerformanceMonitor Is Nothing) And _
                       Not (mLock Is Nothing)
    End Function
    
    Public Function GetPerformanceMonitor() As clsPerformanceMonitor
        Set GetPerformanceMonitor = mPerformanceMonitor
    End Function
    
    Public Function TestBufferHandling(ByVal testValue As String) As String
        ' 大きな値の読み書きをテスト
        Const TEST_SECTION As String = "TestSection"
        Const TEST_KEY As String = "TestKey"
        Const TEST_FILE As String = "test.ini"
        
        ' 書き込み
        IIniFile_WritePrivateProfileString TEST_SECTION, TEST_KEY, testValue, TEST_FILE
        
        ' 読み込み
        TestBufferHandling = IIniFile_GetPrivateProfileString(TEST_SECTION, TEST_KEY, "", TEST_FILE)
    End Function
#End If

================
File: data/modDatabaseUtils.bas
================
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "modDatabaseUtils"

' ======================
' 定数定義
' ======================
Private Const ERR_MODULE_NOT_INITIALIZED As String = "モジュールが初期化されていません。"
Private Const DEFAULT_CONNECTION_STRING As String = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=default.accdb;"

' ======================
' プライベート変数
' ======================
Private mPerformanceMonitor As clsPerformanceMonitor
Private mIsInitialized As Boolean
Private mLock As clsLock
Private mDefaultConnection As Object ' ADODB.Connection
Private mConfig As IDatabaseConfig ' データベース設定
Private mConnectionPool As ConnectionPool ' コネクションプール

' ======================
' 初期化・終了処理
' ======================
''' <summary>モジュールを初期化します</summary>
''' <param name="config">データベース設定を提供するインターフェース（必須）</param>
Public Sub InitializeModule(ByVal config As IDatabaseConfig)
    If mIsInitialized Then Exit Sub
    
    Set mPerformanceMonitor = New clsPerformanceMonitor
    If config Is Nothing Then
        Err.Raise vbObjectError + 1001, MODULE_NAME, _
            "データベース設定が指定されていません。"
    End If
    Set mConfig = config
    Set mLock = New clsLock
    Set mConnectionPool = New ConnectionPool
    
    ' コネクションプールの初期化
    With mConnectionPool
        .MinPoolSize = CLng(mConfig.GetDatabaseSetting("MinPoolSize"))
        .MaxPoolSize = CLng(mConfig.GetDatabaseSetting("MaxPoolSize"))
        .ConnectionTimeout = mConfig.ConnectionTimeout
    End With
    
    mIsInitialized = True
End Sub

Public Sub TerminateModule()
    If Not mIsInitialized Then Exit Sub
    
    CloseConnection
    Set mPerformanceMonitor = Nothing
    Set mLock = Nothing
    Set mConfig = Nothing
    Set mConnectionPool = Nothing
    mIsInitialized = False
End Sub

' ======================
' 公開関数
' ======================

''' <summary>
''' データベース接続文字列を取得します
''' </summary>
''' <returns>接続文字列</returns>
Public Function GetConnectionString() As String
    If Not mIsInitialized Then Err.Raise vbObjectError + 1002, MODULE_NAME, ERR_MODULE_NOT_INITIALIZED
    
    On Error GoTo ErrorHandler

    If Not mPerformanceMonitor Is Nothing Then
        mPerformanceMonitor.StartMeasurement "GetConnectionString"
    End If
    
    mLock.AcquireLock
    
    ' IDatabaseConfigから接続文字列を取得
    GetConnectionString = mConfig.GetConnectionString
    
    mLock.ReleaseLock
    
    ' 接続文字列が空の場合、デフォルト値を使用
    If GetConnectionString = "" Then
        ' デフォルト接続文字列を使用する前に警告をログ
        LogWarning "接続文字列が設定されていません。デフォルト値を使用します。", _
                  "GetConnectionString"
        
        GetConnectionString = DEFAULT_CONNECTION_STRING
    End If
    
    If Not mPerformanceMonitor Is Nothing Then
        mPerformanceMonitor.EndMeasurement "GetConnectionString"
    End If
    Exit Function

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrDatabaseConnectionFailed
        .Description = "接続文字列の取得中にエラーが発生しました: " & Err.Description
        .Category = ECDatabase
        .Source = MODULE_NAME
        .ProcedureName = "GetConnectionString"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    If Not mPerformanceMonitor Is Nothing Then
        mPerformanceMonitor.EndMeasurement "GetConnectionString"
    End If
    GetConnectionString = DEFAULT_CONNECTION_STRING
End Function

''' <summary>
''' データベース接続を取得します
''' </summary>
''' <returns>データベース接続オブジェクト</returns>
Public Function GetConnection() As Object ' ADODB.Connection
    If Not mIsInitialized Then Err.Raise vbObjectError + 1002, MODULE_NAME, ERR_MODULE_NOT_INITIALIZED
    
    If Not mPerformanceMonitor Is Nothing Then
        mPerformanceMonitor.StartMeasurement "GetConnection"
    End If
    
    On Error GoTo ErrorHandler
    
    mLock.AcquireLock
    
    ' コネクションプールから接続を取得
    Set GetConnection = mConnectionPool.GetConnection(GetConnectionString())
    
    GoTo CleanupAndExit

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrDatabaseConnectionFailed
        .Description = "データベース接続の取得中にエラーが発生しました: " & Err.Description
        .Category = ECDatabase
        .Source = MODULE_NAME
        .ProcedureName = "GetConnection"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    Set GetConnection = Nothing

CleanupAndExit:
    mLock.ReleaseLock
    If Not mPerformanceMonitor Is Nothing Then
        mPerformanceMonitor.EndMeasurement "GetConnection"
    End If
End Function

''' <summary>
''' データベース接続を閉じます
''' </summary>
Public Sub CloseConnection()
    If Not mConnectionPool Is Nothing Then
        mLock.AcquireLock
        
        On Error Resume Next
        mConnectionPool.ReleaseAllConnections
        
        mLock.ReleaseLock
        On Error GoTo 0
    End If
End Sub

''' <summary>
''' データベース接続をテストします
''' </summary>
''' <returns>接続成功の場合True</returns>
Public Function TestConnection() As Boolean
    If Not mIsInitialized Then Err.Raise vbObjectError + 1002, MODULE_NAME, ERR_MODULE_NOT_INITIALIZED
    
    Dim conn As Object
    Set conn = GetConnection()
    
    TestConnection = Not (conn Is Nothing)
    
    If Not conn Is Nothing Then
        If conn.State = 1 Then ' adStateOpen
            TestConnection = True
            mConnectionPool.ReleaseConnection conn
        End If
    End If
End Function

''' <summary>
''' SQLクエリを実行し、結果を取得します
''' </summary>
''' <param name="sql">SQLクエリ</param>
''' <param name="params">パラメータ配列（オプション）</param>
''' <returns>レコードセット</returns>
Public Function ExecuteQuery(ByVal sql As String, _
                           Optional ByRef params As Variant) As Object ' ADODB.Recordset
    If Not mIsInitialized Then Err.Raise vbObjectError + 1002, MODULE_NAME, ERR_MODULE_NOT_INITIALIZED
    
    If Not mPerformanceMonitor Is Nothing Then
        mPerformanceMonitor.StartMeasurement "ExecuteQuery"
    End If
    
    On Error GoTo ErrorHandler
    
    Dim conn As Object
    Set conn = GetConnection()
    If conn Is Nothing Then Exit Function
    
    Dim cmd As Object
    Set cmd = CreateObject("ADODB.Command")
    With cmd
        Set .ActiveConnection = conn
        .CommandText = sql
        .CommandType = 1 ' adCmdText
        .CommandTimeout = mConfig.CommandTimeout
        
        ' パラメータの設定
        If Not IsMissing(params) Then
            ' 単一値のパラメータを配列に変換
            Dim paramArray As Variant
            If IsArray(params) Then
                paramArray = params
            Else
                ReDim paramArray(0)
                paramArray(0) = params
            End If
            
            ' パラメータのバリデーション
            ValidateParameters paramArray
            
            ' パラメータの追加
            Dim i As Long
            For i = LBound(paramArray) To UBound(paramArray)
                Dim paramValue As Variant
                paramValue = paramArray(i)
                If Not IsNull(paramValue) Then
                    .Parameters.Append .CreateParameter("p" & i, GetParameterType(paramValue), 1, , paramValue)
                End If
            Next i
        End If
        
        Set ExecuteQuery = .Execute
    End With
    
    ' 接続をプールに返却
    mConnectionPool.ReleaseConnection conn
    
    If Not mPerformanceMonitor Is Nothing Then
        mPerformanceMonitor.EndMeasurement "ExecuteQuery"
    End If
    Exit Function

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrDatabaseQueryFailed
        .Description = "クエリの実行中にエラーが発生しました: " & Err.Description
        .Category = ECDatabase
        .Source = MODULE_NAME
        .ProcedureName = "ExecuteQuery"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    If Not mPerformanceMonitor Is Nothing Then
        mPerformanceMonitor.EndMeasurement "ExecuteQuery"
    End If
    Set ExecuteQuery = Nothing
End Function

' ======================
' プライベート関数
' ======================
Private Function GetParameterType(ByVal Value As Variant) As Integer
    Select Case VarType(Value)
        Case vbInteger, vbLong
            GetParameterType = 3 ' adInteger
        Case vbSingle, vbDouble
            GetParameterType = 5 ' adDouble
        Case vbString
            GetParameterType = 200 ' adVarChar
        Case vbDate
            GetParameterType = 7 ' adDate
        Case vbBoolean
            GetParameterType = 11 ' adBoolean
        Case Else
            GetParameterType = 12 ' adVariant
    End Select
End Function

Private Sub ValidateParameters(ByRef params As Variant)
    If Not IsArray(params) Then Exit Sub
    
    Dim i As Long
    For i = LBound(params) To UBound(params)
        If Not IsNull(params(i)) Then
            Select Case VarType(params(i))
                Case vbInteger, vbLong, vbSingle, vbDouble, vbString, vbDate, vbBoolean
                    ' サポートされている型
                Case Else
                    Err.Raise vbObjectError + 1003, MODULE_NAME, _
                        "サポートされていないパラメータ型です: " & TypeName(params(i))
            End Select
        End If
    Next i
End Sub

Private Sub LogWarning(ByVal message As String, ByVal procedureName As String)
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrDatabaseWarning
        .Description = message
        .Category = ECDatabase
        .Source = MODULE_NAME
        .ProcedureName = procedureName
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
End Sub

' ======================
' テストサポート機能
' 警告: これらのメソッドは開発時のテスト目的でのみ使用し、
' 本番環境では使用しないでください。
' ======================
#If DEBUG Then
    ''' <summary>
    ''' モジュールの状態を初期化（テスト用）
    ''' </summary>
    Private Sub ResetModule()
        TerminateModule
        InitializeModule mConfig
    End Sub
    
    ''' <summary>
    ''' パフォーマンスモニターの参照を取得（テスト用）
    ''' </summary>
    Private Function GetPerformanceMonitor() As clsPerformanceMonitor
        Set GetPerformanceMonitor = mPerformanceMonitor
    End Function
    
    ''' <summary>
    ''' コネクションプールの参照を取得（テスト用）
    ''' </summary>
    Private Function GetConnectionPool() As ConnectionPool
        Set GetConnectionPool = mConnectionPool
    End Function
#End If

================
File: data/modFileIO.bas
================
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "modFileIO"

' ======================
' 定数定義
' ======================
Private Const MAX_BUFFER_SIZE As Long = 1024
Private Const DEFAULT_ENCODING As String = "UTF-8"

' ======================
' プライベート変数
' ======================
Private performanceMonitor As clsPerformanceMonitor
Private isInitialized As Boolean

' ======================
' 初期化・終了処理
' ======================
Public Property Get IsInitialized() As Boolean
    IsInitialized = isInitialized
End Property

Private Sub InitializeIfNeeded()
    If Not isInitialized Then InitializeModule
End Sub

Public Sub InitializeModule()
    If isInitialized Then Exit Sub
    Set performanceMonitor = New clsPerformanceMonitor
    isInitialized = True
End Sub

Public Sub TerminateModule()
    If Not isInitialized Then Exit Sub
    Set performanceMonitor = Nothing
    isInitialized = False
End Sub

' ======================
' 公開メソッド
' ======================

''' <summary>
''' テキストファイルを読み込みます
''' </summary>
''' <param name="filePath">ファイルパス</param>
''' <param name="encoding">文字エンコーディング（オプション）</param>
''' <returns>ファイルの内容、エラー時は空文字列</returns>
''' <remarks>
''' エラー処理要件：
''' - ファイルの存在確認
''' - エンコーディングの検証
''' - ファイルロックの確認
''' - メモリ不足への対応
''' </remarks>
Public Function ReadTextFile(ByVal filePath As String, _
                           Optional ByVal encoding As String = DEFAULT_ENCODING) As String
    InitializeIfNeeded
    
    performanceMonitor.StartMeasurement "Read Text File"
    On Error GoTo ErrorHandler
    
    If Not FileExists(filePath) Then
        RaiseFileError modErrorCodes.ErrFileNotFound, "ファイルが見つかりません: " & filePath
    End If
    
    Dim fileNum As Integer
    fileNum = FreeFile
    
    Open filePath For Input As #fileNum Encoding encoding
        ReadTextFile = Input$(LOF(fileNum), fileNum)
    Close #fileNum
    
CleanUp:
    performanceMonitor.EndMeasurement "Read Text File"
    Exit Function
    
ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = GetFileErrorCode(Err.Number)
        .Category = modErrorCodes.ECFileIO
        .Description = Err.Description
        .Source = MODULE_NAME
        .ProcedureName = "ReadTextFile"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    
    modError.HandleError errInfo
    ReadTextFile = ""  ' エラー時は空文字列を返す（IFileOperationsの規定に従う）
    Resume CleanUp
End Function

''' <summary>
''' テキストファイルに書き込みます
''' </summary>
''' <param name="filePath">ファイルパス</param>
''' <param name="content">書き込む内容</param>
''' <param name="append">追記モード（オプション）</param>
''' <param name="encoding">文字エンコーディング（オプション）</param>
''' <returns>成功時True、失敗時False</returns>
''' <remarks>
''' エラー処理要件：
''' - 書き込み権限の確認
''' - ディスク容量の確認
''' - 既存ファイルのバックアップ
''' - 書き込み失敗時の復旧処理
''' </remarks>
Public Function WriteTextFile(ByVal filePath As String, _
                            ByVal content As String, _
                            Optional ByVal append As Boolean = False, _
                            Optional ByVal encoding As String = DEFAULT_ENCODING) As Boolean
    InitializeIfNeeded
    
    performanceMonitor.StartMeasurement "Write Text File"
    On Error GoTo ErrorHandler
    
    Dim fileNum As Integer
    fileNum = FreeFile
    
    If append Then
        Open filePath For Append As #fileNum Encoding encoding
    Else
        Open filePath For Output As #fileNum Encoding encoding
    End If
    
    Print #fileNum, content
    Close #fileNum
    
    WriteTextFile = True
    
CleanUp:
    performanceMonitor.EndMeasurement "Write Text File"
    Exit Function
    
ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = GetFileErrorCode(Err.Number)
        .Category = modErrorCodes.ECFileIO
        .Description = Err.Description
        .Source = MODULE_NAME
        .ProcedureName = "WriteTextFile"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    
    modError.HandleError errInfo
    WriteTextFile = False
    Resume CleanUp
End Function

''' <summary>
''' バイナリファイルを読み込みます
''' </summary>
''' <param name="filePath">ファイルパス</param>
''' <returns>ファイルのバイトデータ、エラー時は空配列</returns>
''' <remarks>
''' エラー処理要件：
''' - ファイルサイズの検証
''' - メモリ使用量の監視
''' - 破損ファイルの検出
''' - エラー発生時は空配列を返す
''' </remarks>
Public Function ReadBinaryFile(ByVal filePath As String) As Byte()
    InitializeIfNeeded
    
    performanceMonitor.StartMeasurement "Read Binary File"
    On Error GoTo ErrorHandler
    
    If Not FileExists(filePath) Then
        RaiseFileError modErrorCodes.ErrFileNotFound, "ファイルが見つかりません: " & filePath
    End If
    
    Dim fileNum As Integer
    fileNum = FreeFile
    
    Open filePath For Binary Access Read As #fileNum
        Dim fileData() As Byte
        ReDim fileData(LOF(fileNum) - 1)
        Get #fileNum, , fileData
    Close #fileNum
    
    ReadBinaryFile = fileData
    
CleanUp:
    performanceMonitor.EndMeasurement "Read Binary File"
    Exit Function
    
ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = GetFileErrorCode(Err.Number)
        .Category = modErrorCodes.ECFileIO
        .Description = Err.Description
        .Source = MODULE_NAME
        .ProcedureName = "ReadBinaryFile"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    
    modError.HandleError errInfo
    ReadBinaryFile = Array()  ' エラー時は空配列を返す
    Resume CleanUp
End Function

''' <summary>
''' バイナリファイルに書き込みます
''' </summary>
''' <param name="filePath">ファイルパス</param>
''' <param name="data">書き込むバイトデータ</param>
''' <returns>成功時True、失敗時False</returns>
''' <remarks>
''' エラー処理要件：
''' - データの整合性チェック
''' - 部分書き込みの防止
''' - 書き込み失敗時のロールバック
''' - エラー発生時はFalseを返す
''' </remarks>
Public Function WriteBinaryFile(ByVal filePath As String, _
                              ByRef data() As Byte) As Boolean
    InitializeIfNeeded
    
    performanceMonitor.StartMeasurement "Write Binary File"
    On Error GoTo ErrorHandler
    
    Dim fileNum As Integer
    fileNum = FreeFile
    
    Open filePath For Binary Access Write As #fileNum
        Put #fileNum, , data
    Close #fileNum
    
    WriteBinaryFile = True
    
CleanUp:
    performanceMonitor.EndMeasurement "Write Binary File"
    Exit Function
    
ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = GetFileErrorCode(Err.Number)
        .Category = modErrorCodes.ECFileIO
        .Description = Err.Description
        .Source = MODULE_NAME
        .ProcedureName = "WriteBinaryFile"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    
    modError.HandleError errInfo
    WriteBinaryFile = False
    Resume CleanUp
End Function

Public Function FileExists(ByVal filePath As String) As Boolean
    InitializeIfNeeded
    
    performanceMonitor.StartMeasurement "FileExists"
    On Error GoTo ErrorHandler
    
    FileExists = (Dir(filePath) <> "")
    
CleanUp:
    performanceMonitor.EndMeasurement "FileExists"
    Exit Function
    
ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = GetFileErrorCode(Err.Number)
        .Category = modErrorCodes.ECFileIO
        .Description = "ファイルの存在確認中にエラーが発生しました: " & filePath & vbCrLf & Err.Description
        .Source = MODULE_NAME
        .ProcedureName = "FileExists"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    
    modError.HandleError errInfo
    FileExists = False
    Resume CleanUp
End Function
 
Public Function FolderExists(ByVal folderPath As String) As Boolean
    InitializeIfNeeded
    
    performanceMonitor.StartMeasurement "FolderExists"
    On Error GoTo ErrorHandler
    
    FolderExists = (Dir(folderPath, vbDirectory) <> "")
    
CleanUp:
    performanceMonitor.EndMeasurement "FolderExists"
    Exit Function
    
ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = GetFileErrorCode(Err.Number)
        .Category = modErrorCodes.ECFileIO
        .Description = "フォルダの存在確認中にエラーが発生しました: " & folderPath & vbCrLf & Err.Description
        .Source = MODULE_NAME
        .ProcedureName = "FolderExists"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    
    modError.HandleError errInfo
    FolderExists = False
    Resume CleanUp
End Function
 
Public Function CreateFolder(ByVal folderPath As String) As Boolean
    InitializeIfNeeded
    
    performanceMonitor.StartMeasurement "Create Folder"
    On Error GoTo ErrorHandler
    
    MkDir folderPath
    CreateFolder = True
    
CleanUp:
    performanceMonitor.EndMeasurement "Create Folder"
    Exit Function
    
ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = GetFileErrorCode(Err.Number)
        .Category = modErrorCodes.ECFileIO
        .Description = "フォルダの作成中にエラーが発生しました: " & folderPath & vbCrLf & Err.Description
        .Source = MODULE_NAME
        .ProcedureName = "CreateFolder"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    
    modError.HandleError errInfo
    CreateFolder = False
    Resume CleanUp
End Function
 
Public Function DeleteFile(ByVal filePath As String) As Boolean
    InitializeIfNeeded
    
    performanceMonitor.StartMeasurement "Delete File"
    On Error GoTo ErrorHandler
    
    Kill filePath
    DeleteFile = True
    
CleanUp:
    performanceMonitor.EndMeasurement "Delete File"
    Exit Function
    
ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = GetFileErrorCode(Err.Number)
        .Category = modErrorCodes.ECFileIO
        .Description = "ファイルの削除中にエラーが発生しました: " & filePath & vbCrLf & Err.Description
        .Source = MODULE_NAME
        .ProcedureName = "DeleteFile"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    
    modError.HandleError errInfo
    DeleteFile = False
    Resume CleanUp
End Function
 
Public Function DeleteFolder(ByVal folderPath As String) As Boolean
    InitializeIfNeeded
    
    performanceMonitor.StartMeasurement "Delete Folder"
    On Error GoTo ErrorHandler
    
    RmDir folderPath
    DeleteFolder = True
    
CleanUp:
    performanceMonitor.EndMeasurement "Delete Folder"
    Exit Function
    
ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = GetFileErrorCode(Err.Number)
        .Category = modErrorCodes.ECFileIO
        .Description = "フォルダの削除中にエラーが発生しました: " & folderPath & vbCrLf & Err.Description
        .Source = MODULE_NAME
        .ProcedureName = "DeleteFolder"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    
    modError.HandleError errInfo
    DeleteFolder = False
    Resume CleanUp
End Function

Public Function GetAbsolutePath(ByVal relativePath As String, _
                              Optional ByVal basePath As String) As String
    InitializeIfNeeded
    
    performanceMonitor.StartMeasurement "GetAbsolutePath"
    On Error GoTo ErrorHandler
    
    If Len(basePath) = 0 Then basePath = CurDir
    GetAbsolutePath = CreateObject("Scripting.FileSystemObject").GetAbsolutePathName(basePath & "\" & relativePath)
    
CleanUp:
    performanceMonitor.EndMeasurement "GetAbsolutePath"
    Exit Function
    
ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = GetFileErrorCode(Err.Number)
        .Category = modErrorCodes.ECFileIO
        .Description = "絶対パスの取得中にエラーが発生しました: " & relativePath & vbCrLf & Err.Description
        .Source = MODULE_NAME
        .ProcedureName = "GetAbsolutePath"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    
    modError.HandleError errInfo
    GetAbsolutePath = ""
    Resume CleanUp
End Function

' ======================
' プライベートメソッド
' ======================
Private Function GetFileErrorCode(ByVal errNumber As Long) As ErrorCode
    Select Case errNumber
        Case 53 ' File not found
            GetFileErrorCode = modErrorCodes.ErrFileNotFound
        Case 70 ' Permission denied
            GetFileErrorCode = modErrorCodes.ErrFileAccessDenied
        Case 75, 76 ' Path/File access error
            GetFileErrorCode = modErrorCodes.ErrFileAccessDenied
        Case Else
            GetFileErrorCode = modErrorCodes.ErrUnexpected
    End Select
End Function

Private Sub RaiseFileError(ByVal errorCode As ErrorCode, ByVal description As String)
    Err.Raise errorCode, MODULE_NAME, description
End Sub

' ======================
' テストサポート機能（開発環境専用）
' 警告: これらのメソッドは開発時のテスト目的でのみ使用し、
' 本番環境では使用しないでください。
' ======================
#If DEBUG Then
    ''' <summary>
    ''' モジュールの状態を初期化（テスト用）
    ''' </summary>
    Private Sub ResetModule()
        TerminateModule
        InitializeModule
    End Sub
#End If

================
File: data/ODBCConnectionStringBuilder.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "ODBCConnectionStringBuilder"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements IConnectionStringBuilder

' ======================
' メンバ変数
' ======================
Private mServer As String
Private mDatabase As String
Private mUserName As String
Private mPassword As String
Private mAdditionalParameters As String

' ======================
' IConnectionStringBuilder実装
' ======================
Private Function IConnectionStringBuilder_BuildConnectionString() As String
    Dim connectionString As String
    
    connectionString = "Driver={SQL Server};"
    
    ' サーバー名
    If Len(mServer) > 0 Then
        connectionString = connectionString & "Server=" & mServer & ";"
    End If
    
    ' データベース名
    If Len(mDatabase) > 0 Then
        connectionString = connectionString & "Database=" & mDatabase & ";"
    End If
    
    ' ユーザー名
    If Len(mUserName) > 0 Then
        connectionString = connectionString & "Uid=" & mUserName & ";"
    End If
    
    ' パスワード
    If Len(mPassword) > 0 Then
        connectionString = connectionString & "Pwd=" & mPassword & ";"
    End If
    
    ' 追加のパラメータ
    If Len(mAdditionalParameters) > 0 Then
        connectionString = connectionString & mAdditionalParameters
    End If
    
    IConnectionStringBuilder_BuildConnectionString = connectionString
End Function

Private Property Get IConnectionStringBuilder_Server() As String
    IConnectionStringBuilder_Server = mServer
End Property

Private Property Let IConnectionStringBuilder_Server(ByVal value As String)
    mServer = value
End Property

Private Property Get IConnectionStringBuilder_Database() As String
    IConnectionStringBuilder_Database = mDatabase
End Property

Private Property Let IConnectionStringBuilder_Database(ByVal value As String)
    mDatabase = value
End Property

Private Property Get IConnectionStringBuilder_UserName() As String
    IConnectionStringBuilder_UserName = mUserName
End Property

Private Property Let IConnectionStringBuilder_UserName(ByVal value As String)
    mUserName = value
End Property

Private Property Get IConnectionStringBuilder_Password() As String
    IConnectionStringBuilder_Password = mPassword
End Property

Private Property Let IConnectionStringBuilder_Password(ByVal value As String)
    mPassword = value
End Property

Private Property Get IConnectionStringBuilder_AdditionalParameters() As String
    IConnectionStringBuilder_AdditionalParameters = mAdditionalParameters
End Property

Private Property Let IConnectionStringBuilder_AdditionalParameters(ByVal value As String)
    mAdditionalParameters = value
End Property

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    mServer = ""
    mDatabase = ""
    mUserName = ""
    mPassword = ""
    mAdditionalParameters = ""
End Sub

================
File: data/OLEDBConnectionStringBuilder.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "OLEDBConnectionStringBuilder"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements IConnectionStringBuilder

' ======================
' メンバ変数
' ======================
Private mServer As String
Private mDatabase As String
Private mUserName As String
Private mPassword As String
Private mAdditionalParameters As String

' ======================
' IConnectionStringBuilder実装
' ======================
Private Function IConnectionStringBuilder_BuildConnectionString() As String
    Dim connectionString As String
    
    connectionString = "Provider=SQLOLEDB;"
    
    ' サーバー名
    If Len(mServer) > 0 Then
        connectionString = connectionString & "Data Source=" & mServer & ";"
    End If
    
    ' データベース名
    If Len(mDatabase) > 0 Then
        connectionString = connectionString & "Initial Catalog=" & mDatabase & ";"
    End If
    
    ' ユーザー名とパスワード
    If Len(mUserName) > 0 Then
        connectionString = connectionString & "User ID=" & mUserName & ";"
        If Len(mPassword) > 0 Then
            connectionString = connectionString & "Password=" & mPassword & ";"
        End If
    Else
        ' 統合認証を使用
        connectionString = connectionString & "Integrated Security=SSPI;"
    End If
    
    ' 追加のパラメータ
    If Len(mAdditionalParameters) > 0 Then
        connectionString = connectionString & mAdditionalParameters
    End If
    
    IConnectionStringBuilder_BuildConnectionString = connectionString
End Function

Private Property Get IConnectionStringBuilder_Server() As String
    IConnectionStringBuilder_Server = mServer
End Property

Private Property Let IConnectionStringBuilder_Server(ByVal value As String)
    mServer = value
End Property

Private Property Get IConnectionStringBuilder_Database() As String
    IConnectionStringBuilder_Database = mDatabase
End Property

Private Property Let IConnectionStringBuilder_Database(ByVal value As String)
    mDatabase = value
End Property

Private Property Get IConnectionStringBuilder_UserName() As String
    IConnectionStringBuilder_UserName = mUserName
End Property

Private Property Let IConnectionStringBuilder_UserName(ByVal value As String)
    mUserName = value
End Property

Private Property Get IConnectionStringBuilder_Password() As String
    IConnectionStringBuilder_Password = mPassword
End Property

Private Property Let IConnectionStringBuilder_Password(ByVal value As String)
    mPassword = value
End Property

Private Property Get IConnectionStringBuilder_AdditionalParameters() As String
    IConnectionStringBuilder_AdditionalParameters = mAdditionalParameters
End Property

Private Property Let IConnectionStringBuilder_AdditionalParameters(ByVal value As String)
    mAdditionalParameters = value
End Property

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    mServer = ""
    mDatabase = ""
    mUserName = ""
    mPassword = ""
    mAdditionalParameters = ""
End Sub

================
File: data/repomix-output.txt
================
This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-27T00:45:23.072Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
ConnectionPool.cls
DatabaseConnectionErrorHandler.cls
FileIOImpl.cls
FileNotFoundErrorHandler.cls
FileSystemOperations.cls
IniFileImpl.cls
modDatabaseUtils.bas
modFileIO.bas
ODBCConnectionStringBuilder.cls
OLEDBConnectionStringBuilder.cls

================================================================
Files
================================================================

================
File: ConnectionPool.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "ConnectionPool"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements IConnectionPool

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "ConnectionPool"

' ======================
' 定数定義
' ======================
Private Const CONNECTION_TIMEOUT As Long = 30 ' 秒

' ======================
' メンバ変数
' ======================
Private Type ConnectionInfo
    Connection As Object
    InUse As Boolean
    LastUsed As Date
End Type

Private mConnections() As ConnectionInfo
Private mConnectionString As String
Private mPoolSize As Long
Private mLock As clsLock
Private mPerformanceMonitor As clsPerformanceMonitor
Private mLogger As ILogger
Private mConfig As IDatabaseConfig

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    Dim MAX_POOL_SIZE As Long
    ReDim mConnections(1 To MAX_POOL_SIZE)
    mPoolSize = 0
    Set mLock = New clsLock
    Set mPerformanceMonitor = New clsPerformanceMonitor
End Sub

Private Sub Class_Terminate()
    Dim i As Long
    Dim MAX_POOL_SIZE As Long
    For i = 1 To MAX_POOL_SIZE
        If Not mConnections(i).Connection Is Nothing Then
            If mConnections(i).Connection.State = 1 Then ' adStateOpen
                mConnections(i).Connection.Close
            End If
            Set mConnections(i).Connection = Nothing
        End If
    Next i
    Set mLock = Nothing
    Set mConfig = Nothing
    Set mLogger = Nothing
    Set mPerformanceMonitor = Nothing
End Sub

' ======================
' パブリックメソッド
' ======================

''' <summary>
''' コネクションプールを初期化します
''' </summary>
''' <param name="config">データベース設定を提供するインターフェース</param>
''' <param name="performanceMonitor">パフォーマンスモニター</param>
''' <param name="lock">ロックオブジェクト</param>
''' <param name="logger">ロガー</param>
Public Sub Initialize(ByVal config As IDatabaseConfig, _
                     ByVal performanceMonitor As IPerformanceMonitor, _
                     ByVal lock As ILock, _
                     ByVal logger As ILogger)
    Set mConfig = config
    Set mPerformanceMonitor = performanceMonitor
    Set mLock = lock
    Set mLogger = logger
    mConnectionString = mConfig.GetConnectionString
End Sub

''' <summary>
''' データベース接続を取得します（IConnectionPool実装）
''' </summary>
Private Function IConnectionPool_AcquireConnection() As Object
    On Error GoTo ErrorHandler
    mPerformanceMonitor.StartMeasurement "Get Database Connection"
    
    mLock.AcquireLock
    
    ' 未使用のコネクションを探す
    Dim i As Long
    For i = 1 To mPoolSize
        If Not mConnections(i).InUse Then
            ' コネクションの状態をチェック
            If ValidateConnection(mConnections(i).Connection) Then
                mConnections(i).InUse = True
                mConnections(i).LastUsed = Now
                Set IConnectionPool_AcquireConnection = mConnections(i).Connection
                GoTo Cleanup
            Else
                ' 無効なコネクションを破棄して再作成
                Set mConnections(i).Connection = CreateNewConnection()
                If Not mConnections(i).Connection Is Nothing Then
                    mConnections(i).InUse = True
                    mConnections(i).LastUsed = Now
                    Set IConnectionPool_AcquireConnection = mConnections(i).Connection
                    GoTo Cleanup
                End If
            End If
        End If
    Next i
    
    ' 新しいコネクションを作成（プールサイズが上限に達していない場合）
    Dim MAX_POOL_SIZE As Long
    MAX_POOL_SIZE = mConfig.GetMaxPoolSize
    If mPoolSize < MAX_POOL_SIZE Then
        mPoolSize = mPoolSize + 1
        Set mConnections(mPoolSize).Connection = CreateNewConnection()
        If Not mConnections(mPoolSize).Connection Is Nothing Then
            mConnections(mPoolSize).InUse = True
            mConnections(mPoolSize).LastUsed = Now
            GoTo Cleanup
        End If
    End If
    
    ' 利用可能なコネクションがない場合はエラー
    Err.Raise vbObjectError + 1, MODULE_NAME, "利用可能なコネクションがありません。"
    
Cleanup:
    mLock.ReleaseLock
    mPerformanceMonitor.EndMeasurement "Get Database Connection"
    Exit Function
    
ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrDatabaseConnectionFailed
        .Description = "コネクション取得中にエラーが発生しました: " & Err.Description
        .Category = ECDatabase
        .Source = MODULE_NAME
        .ProcedureName = "GetConnection"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    If Not mLock Is Nothing Then mLock.ReleaseLock
    mPerformanceMonitor.EndMeasurement "Get Database Connection"
    Set IConnectionPool_AcquireConnection = Nothing
End Function

''' <summary>
''' データベース接続を解放します（IConnectionPool実装）
''' </summary>
''' <param name="connection">解放するコネクション</param>
Private Sub IConnectionPool_ReleaseConnection(ByVal connection As Object)
    If connection Is Nothing Then Exit Sub
    
    mLock.AcquireLock
    
    Dim i As Long
    For i = 1 To mPoolSize
        If mConnections(i).Connection Is connection Then
            mConnections(i).InUse = False
            mConnections(i).LastUsed = Now
            Exit For
        End If
    Next i
    
    mLock.ReleaseLock
End Sub

''' <summary>
''' 現在のアクティブな接続数を取得します（IConnectionPool実装）
''' </summary>
Private Property Get IConnectionPool_ActiveConnections() As Long
    Dim count As Long
    Dim i As Long
    For i = 1 To mPoolSize
        If mConnections(i).InUse Then count = count + 1
    Next i
    IConnectionPool_ActiveConnections = count
End Property

''' <summary>
''' プールの最大接続数を取得または設定します（IConnectionPool実装）
''' </summary>
Private Property Get IConnectionPool_MaxConnections() As Long
    IConnectionPool_MaxConnections = mConfig.GetMaxPoolSize
End Property

Private Property Let IConnectionPool_MaxConnections(ByVal value As Long)
    ' 設定は無視 - 設定はIDatabaseConfigで管理
End Property

''' <summary>
''' 接続タイムアウト時間を取得または設定します（IConnectionPool実装）
''' </summary>
Private Property Get IConnectionPool_ConnectionTimeout() As Long
    IConnectionPool_ConnectionTimeout = mConfig.GetConnectionTimeout
End Property

Private Property Let IConnectionPool_ConnectionTimeout(ByVal value As Long)
    ' 設定は無視 - 設定はIDatabaseConfigで管理
End Property

' ======================
' プライベートメソッド
' ======================

''' <summary>
''' 新しいデータベース接続を作成します
''' </summary>
Private Function CreateNewConnection() As Object
    On Error GoTo ErrorHandler
    mPerformanceMonitor.StartMeasurement "Create Database Connection"
    
    ' 接続文字列の検証
    If Not ValidateConnectionString(mConnectionString) Then
        mLogger.LogError MODULE_NAME, "CreateNewConnection", "不正な接続文字列です: " & mConnectionString
        Exit Function
    End If
    mLock.AcquireLock
    
    Dim conn As Object
    Set conn = CreateObject("ADODB.Connection")
    conn.ConnectionString = mConnectionString
    conn.ConnectionTimeout = CONNECTION_TIMEOUT
    
    ' リトライ処理を実装
    Dim retryCount As Long
    Dim retryInterval As Long
    retryCount = mConfig.GetRetryCount
    retryInterval = mConfig.GetRetryInterval
    
    Do While retryCount >= 0
        On Error Resume Next
        conn.Open
        If Err.Number = 0 Then Exit Do
        retryCount = retryCount - 1
        If retryCount >= 0 Then Sleep retryInterval
    Loop
    
    Set CreateNewConnection = conn
    
Cleanup:
    mLock.ReleaseLock
    mPerformanceMonitor.EndMeasurement "Create Database Connection"
    Exit Function
    
ErrorHandler:
    mLogger.LogError MODULE_NAME, "CreateNewConnection", "接続の作成に失敗しました: " & Err.Description
    Set CreateNewConnection = Nothing
    Resume Cleanup
End Function

''' <summary>
''' コネクションが有効かどうかを確認します
''' </summary>
Private Function ValidateConnection(ByVal connection As Object) As Boolean
    If connection Is Nothing Then
        ValidateConnection = False
        Exit Function
    End If
    
    On Error Resume Next
    ValidateConnection = (connection.State = 1) ' adStateOpen
    If Err.Number <> 0 Then
        ValidateConnection = False
    End If
    On Error GoTo 0
End Function

''' <summary>
''' 接続文字列を検証します
''' </summary>
Private Function ValidateConnectionString(ByVal connectionString As String) As Boolean
    If Len(Trim(connectionString)) = 0 Then
        ValidateConnectionString = False
        Exit Function
    End If
    
    ' 基本的な接続文字列の形式チェック
    If InStr(1, connectionString, "Provider=", vbTextCompare) = 0 And _
       InStr(1, connectionString, "Driver=", vbTextCompare) = 0 Then
        ValidateConnectionString = False
        Exit Function
    End If
    
    ValidateConnectionString = True
End Function

' ======================
' テストサポート機能
' 警告: これらのメソッドは開発時のテスト目的でのみ使用し、
' 本番環境では使用しないでください。
' ======================
#If DEBUG Then
    ''' <summary>
    ''' コネクションプールの現在のサイズを取得（テスト用）
    ''' </summary>
    Private Property Get PoolSize() As Long
        PoolSize = mPoolSize
    End Property
    
    ''' <summary>
    ''' アクティブなコネクション数を取得（テスト用）
    ''' </summary>
    Private Property Get ActiveConnections() As Long
        Dim count As Long
        Dim i As Long
        For i = 1 To mPoolSize
            If mConnections(i).InUse Then count = count + 1
        Next i
        ActiveConnections = count
    End Property
    
    ''' <summary>
    ''' コネクションプールをクリア（テスト用）
    ''' </summary>
    Private Sub ClearPool()
        Class_Terminate
        Class_Initialize
    End Sub
#End If

================
File: DatabaseConnectionErrorHandler.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "DatabaseConnectionErrorHandler"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "DatabaseConnectionErrorHandler"

' ======================
' 定数定義
' ======================
Private Const DEFAULT_RETRY_INTERVAL As Long = 1000 ' ミリ秒
Private Const MAX_RETRY_COUNT As Long = 3

' ======================
' プライベート変数
' ======================
Private mConnectionString As String
Private mLock As ILock
Private mLogger As ILogger
Private mEmergencyLogger As IEmergencyLogger
Private mConfig As IDatabaseConfig
Private mUserNotifier As IUserNotifier

Implements IErrorHandler

' =====================
' コンストラクタ
' =====================
Public Function Create( _
    ByVal lock As ILock, _
    ByVal logger As ILogger, _
    ByVal emergencyLogger As IEmergencyLogger, _
    ByVal config As IDatabaseConfig, _
    ByVal userNotifier As IUserNotifier _
) As DatabaseConnectionErrorHandler
    
    Dim instance As New DatabaseConnectionErrorHandler
    
    ' 依存性の注入
    With instance
        If lock Is Nothing Then
            Err.Raise 5, "DatabaseConnectionErrorHandler.Create", "ILock is required"
        End If
        Set .Lock = lock
        
        If logger Is Nothing Then
            Err.Raise 5, "DatabaseConnectionErrorHandler.Create", "ILogger is required"
        End If
        Set .Logger = logger
        
        If emergencyLogger Is Nothing Then
            Err.Raise 5, "DatabaseConnectionErrorHandler.Create", "IEmergencyLogger is required"
        End If
        Set .EmergencyLogger = emergencyLogger
        
        If config Is Nothing Then
            Err.Raise 5, "DatabaseConnectionErrorHandler.Create", "IDatabaseConfig is required"
        End If
        Set .Config = config
        
        If userNotifier Is Nothing Then
            Err.Raise 5, "DatabaseConnectionErrorHandler.Create", "IUserNotifier is required"
        End If
        Set .UserNotifier = userNotifier
    End With
    
    Set Create = instance
End Function

' プロパティ
Public Property Set Lock(ByVal value As ILock)
    Set mLock = value
End Property

Public Property Set Logger(ByVal value As ILogger)
    Set mLogger = value
End Property

Public Property Set EmergencyLogger(ByVal value As IEmergencyLogger)
    Set mEmergencyLogger = value
End Property

Public Property Set Config(ByVal value As IDatabaseConfig)
    Set mConfig = value
    mConnectionString = mConfig.GetConnectionString
End Property

Public Property Set UserNotifier(ByVal value As IUserNotifier)
    Set mUserNotifier = value
End Property

' ======================
' IErrorHandler実装
' ======================
Private Function IErrorHandler_HandleError(ByRef errorDetail As ErrorInfo) As Boolean
    Dim proceed As Boolean
    proceed = False  ' デフォルトでは処理を中断
    
    ' エラー情報をログに記録
    LogError errorDetail
    
    ' エラー情報の補完
    errorDetail.AddAdditionalInfo "ConnectionString", mConnectionString
    errorDetail.AddAdditionalInfo "MaxRetries", CStr(MAX_RETRY_COUNT)
    errorDetail.RecoveryAttempted = True
    
    ' リトライ処理の実行
    If AttemptRetry(errorDetail) Then
        proceed = True  ' リトライ成功
        errorDetail.RecoverySuccessful = True
    Else
        ' リトライ失敗時はユーザーに通知
        errorDetail.RecoverySuccessful = False
        NotifyUser errorDetail, vbCritical
    End If
    
    IErrorHandler_HandleError = proceed
End Function

' ======================
' プライベートメソッド
' ======================
Private Function AttemptRetry(ByRef errorDetail As ErrorInfo) As Boolean
    On Error GoTo ErrorHandler
    
    Dim retryCount As Long
    Dim success As Boolean
    
    For retryCount = 1 To MAX_RETRY_COUNT
        ' リトライ間隔を設ける
        Wait DEFAULT_RETRY_INTERVAL
        
        errorDetail.AddAdditionalInfo "CurrentRetry", CStr(retryCount)
        
        If TryDatabaseConnection Then
            success = True
            Exit For
        End If
        
        ' リトライ試行をログに記録
        With mLogger
            .Log MODULE_NAME, "データベース接続リトライ " & retryCount & "/" & MAX_RETRY_COUNT, errorDetail.Code
        End With
    Next retryCount
    
    AttemptRetry = success
    Exit Function

ErrorHandler:
    Dim errDetail As ErrorInfo
    Set errDetail = New ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "データベース接続のリトライ中にエラーが発生しました: " & Err.Description
        .Category = ECDatabase
        .Source = MODULE_NAME
        .ProcedureName = "AttemptRetry"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
        .Severity = ESError
        Set .InnerError = errorDetail.Clone
    End With
    modError.HandleError errDetail
    AttemptRetry = False
    Exit Function
End Function

Private Function TryDatabaseConnection() As Boolean
    On Error GoTo ErrorHandler
    
    Dim conn As Object
    Set conn = CreateObject("ADODB.Connection")
    conn.Open mConnectionString
    
    ' 接続テストのためのシンプルなクエリを実行
    conn.Execute "SELECT 1"
    
    conn.Close
    Set conn = Nothing
    TryDatabaseConnection = True
    Exit Function
    
ErrorHandler:
    Dim errNum As Long
    errNum = Err.Number
    
    ' エラー種別に応じた処理
    Select Case errNum
        Case -2147467259  ' ネットワークエラー
            LogSpecificError "ネットワーク接続エラー: サーバーに接続できません。", ECNetwork
        Case -2147217843  ' タイムアウト
            LogSpecificError "データベース接続がタイムアウトしました。", ECNetwork
        Case -2147217865  ' 認証エラー
            LogSpecificError "データベース認証エラー: ユーザー名またはパスワードが無効です。", ECSecurity
        Case Else
            LogSpecificError "データベース接続エラー: " & Err.Description, ECDatabase
    End Select
    
    If Not conn Is Nothing Then
        If conn.State = 1 Then  ' adStateOpen
            conn.Close
        End If
        Set conn = Nothing
    End If
    
    TryDatabaseConnection = False
    Exit Function
End Function

Private Sub LogSpecificError(ByVal message As String, ByVal category As ErrorCodeCategory)
    Dim errDetail As ErrorInfo
    Set errDetail = New ErrorInfo
    With errDetail
        .Code = ErrDbConnectionFailed
        .Description = message
        .Category = category
        .Source = MODULE_NAME
        .ProcedureName = "TryDatabaseConnection"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
        .Severity = ESError
    End With
    modError.HandleError errDetail
End Sub

Private Sub LogError(ByRef errorDetail As ErrorInfo)
    On Error GoTo ErrorHandler
    
    mLock.AcquireLock
    
    ' 通常のログ出力
    mLogger.Log MODULE_NAME, "データベース接続エラー: " & errorDetail.Description, errorDetail.Code
    ' 重要なエラーは緊急ログにも記録
    mEmergencyLogger.LogEmergency MODULE_NAME, errorDetail.ToString
    
    mLock.ReleaseLock
    Exit Sub

ErrorHandler:
    Dim errDetail As ErrorInfo
    Set errDetail = New ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "データベースエラーのログ出力中にエラーが発生しました: " & Err.Description
        .Category = ECDatabase
        .Source = MODULE_NAME
        .ProcedureName = "LogError"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
        .Severity = ESError
        Set .InnerError = errorDetail.Clone
    End With
    modError.HandleError errDetail
End Sub

Private Sub NotifyUser(ByRef errorDetail As ErrorInfo, ByVal style As VbMsgBoxStyle)
    On Error GoTo ErrorHandler
    
    mUserNotifier.Notify errorDetail, style, "データベースエラー"
    Exit Sub

ErrorHandler:
    Dim errDetail As ErrorInfo
    Set errDetail = New ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "データベースエラーの通知中にエラーが発生しました: " & Err.Description
        .Category = ECDatabase
        .Source = MODULE_NAME
        .ProcedureName = "NotifyUser"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
        .Severity = ESError
        Set .InnerError = errorDetail.Clone
    End With
    modError.HandleError errDetail
End Sub

Private Sub Wait(ByVal milliseconds As Long)
    ' Sleep APIを使用して待機
    modWindowsAPI.Sleep milliseconds
End Sub

================
File: FileIOImpl.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "FileIOImpl"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "FileIOImpl"

' ======================
' インターフェース実装
' ======================
Implements IFileIO

' ======================
' プライベート変数
' ======================
Private mFSO As Object ' Scripting.FileSystemObject
Private mIsInitialized As Boolean

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    Set mFSO = CreateObject("Scripting.FileSystemObject")
    mIsInitialized = True
End Sub

Private Sub Class_Terminate()
    Set mFSO = Nothing
    mIsInitialized = False
End Sub

Private Sub InitializeIfNeeded()
    If Not mIsInitialized Then
        Class_Initialize
    End If
End Sub

' ======================
' IFileIO実装
' ======================
Private Function IFileIO_FileExists(ByVal filePath As String) As Boolean
    InitializeIfNeeded
    On Error Resume Next
    IFileIO_FileExists = mFSO.FileExists(filePath)
    On Error GoTo 0
End Function

Private Function IFileIO_FolderExists(ByVal folderPath As String) As Boolean
    InitializeIfNeeded
    On Error Resume Next
    IFileIO_FolderExists = mFSO.FolderExists(folderPath)
    On Error GoTo 0
End Function

Private Function IFileIO_CreateFolder(ByVal folderPath As String) As Boolean
    InitializeIfNeeded
    On Error GoTo ErrorHandler
    
    If IFileIO_FolderExists(folderPath) Then
        IFileIO_CreateFolder = True
        Exit Function
    End If
    
    mFSO.CreateFolder folderPath
    IFileIO_CreateFolder = True
    Exit Function
    
ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = ErrFileAccessDenied
        .Description = "フォルダの作成に失敗しました: " & folderPath
        .Source = MODULE_NAME & ".IFileIO_CreateFolder"
    End With
    Call modError.HandleError(errInfo)
    IFileIO_CreateFolder = False
End Function

Private Function IFileIO_DeleteFile(ByVal filePath As String) As Boolean
    InitializeIfNeeded
    On Error GoTo ErrorHandler
    
    If Not IFileIO_FileExists(filePath) Then
        IFileIO_DeleteFile = True
        Exit Function
    End If
    
    mFSO.DeleteFile filePath, True ' Force = True
    IFileIO_DeleteFile = True
    Exit Function
    
ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = ErrFileAccessDenied
        .Description = "ファイルの削除に失敗しました: " & filePath
        .Source = MODULE_NAME & ".IFileIO_DeleteFile"
    End With
    Call modError.HandleError(errInfo)
    IFileIO_DeleteFile = False
End Function

Private Function IFileIO_CopyFile(ByVal sourceFilePath As String, ByVal destinationFilePath As String) As Boolean
    InitializeIfNeeded
    On Error GoTo ErrorHandler
    
    If Not IFileIO_FileExists(sourceFilePath) Then
        Err.Raise ErrFileNotFound, MODULE_NAME & ".IFileIO_CopyFile", "コピー元ファイルが存在しません: " & sourceFilePath
    End If
    
    mFSO.CopyFile sourceFilePath, destinationFilePath, True ' OverWrite = True
    IFileIO_CopyFile = True
    Exit Function
    
ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = Err.Number
        .Description = "ファイルのコピーに失敗しました: " & Err.Description
        .Source = MODULE_NAME & ".IFileIO_CopyFile"
    End With
    Call modError.HandleError(errInfo)
    IFileIO_CopyFile = False
End Function

Private Function IFileIO_MoveFile(ByVal sourceFilePath As String, ByVal destinationFilePath As String) As Boolean
    InitializeIfNeeded
    On Error GoTo ErrorHandler
    
    If Not IFileIO_FileExists(sourceFilePath) Then
        Err.Raise ErrFileNotFound, MODULE_NAME & ".IFileIO_MoveFile", "移動元ファイルが存在しません: " & sourceFilePath
    End If
    
    mFSO.MoveFile sourceFilePath, destinationFilePath
    IFileIO_MoveFile = True
    Exit Function
    
ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = Err.Number
        .Description = "ファイルの移動に失敗しました: " & Err.Description
        .Source = MODULE_NAME & ".IFileIO_MoveFile"
    End With
    Call modError.HandleError(errInfo)
    IFileIO_MoveFile = False
End Function

Private Function IFileIO_OpenFile(ByVal filePath As String, ByVal mode As String) As Object
    InitializeIfNeeded
    On Error GoTo ErrorHandler
    
    Dim fileMode As Integer
    Select Case UCase$(mode)
        Case "READ"
            fileMode = 1 ' ForReading
        Case "WRITE"
            fileMode = 2 ' ForWriting
        Case "APPEND"
            fileMode = 8 ' ForAppending
        Case Else
            Err.Raise vbObjectError + 1001, MODULE_NAME & ".IFileIO_OpenFile", "無効なファイルモード: " & mode
    End Select
    
    Set IFileIO_OpenFile = mFSO.OpenTextFile(filePath, fileMode, True) ' Create = True
    Exit Function
    
ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = Err.Number
        .Description = "ファイルを開けませんでした: " & Err.Description
        .Source = MODULE_NAME & ".IFileIO_OpenFile"
    End With
    Call modError.HandleError(errInfo)
    Set IFileIO_OpenFile = Nothing
End Function

Private Function IFileIO_CloseFile(ByVal file As Object) As Boolean
    On Error GoTo ErrorHandler
    
    If file Is Nothing Then
        IFileIO_CloseFile = True
        Exit Function
    End If
    
    file.Close
    IFileIO_CloseFile = True
    Exit Function
    
ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = Err.Number
        .Description = "ファイルを閉じる際にエラーが発生しました: " & Err.Description
        .Source = MODULE_NAME & ".IFileIO_CloseFile"
    End With
    Call modError.HandleError(errInfo)
    IFileIO_CloseFile = False
End Function

' ======================
' パブリックメソッド
' ======================
Public Function CreateInstance() As IFileIO
    Set CreateInstance = New FileIOImpl
End Function

' ======================
' テストサポート機能（開発環境専用）
' ======================
#If DEBUG Then
    ''' <summary>
    ''' モジュールの状態を初期化（テスト用）
    ''' </summary>
    Private Sub ResetModule()
        Class_Terminate
        Class_Initialize
    End Sub
    
    ''' <summary>
    ''' 初期化状態を取得（テスト用）
    ''' </summary>
    Private Property Get IsInitialized() As Boolean
        IsInitialized = mIsInitialized
    End Property
#End If

================
File: FileNotFoundErrorHandler.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "FileNotFoundErrorHandler"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "FileNotFoundErrorHandler"

' ======================
' プライベート変数
' ======================
Private mLock As ILock
Private mLogger As ILogger
Private mEmergencyLogger As IEmergencyLogger
Private mUserNotifier As IUserNotifier
Private mFileOperations As IFileOperations

Implements IErrorHandler

' =====================
' コンストラクタ
' =====================
Public Function Create( _
    ByVal lock As ILock, _
    ByVal logger As ILogger, _
    ByVal emergencyLogger As IEmergencyLogger, _
    ByVal userNotifier As IUserNotifier, _
    ByVal fileOperations As IFileOperations _
) As FileNotFoundErrorHandler
    
    Dim instance As New FileNotFoundErrorHandler
    
    ' 依存性の注入
    With instance
        If lock Is Nothing Then
            Err.Raise 5, "FileNotFoundErrorHandler.Create", "ILock is required"
        End If
        Set .Lock = lock
        
        If logger Is Nothing Then
            Err.Raise 5, "FileNotFoundErrorHandler.Create", "ILogger is required"
        End If
        Set .Logger = logger
        
        If emergencyLogger Is Nothing Then
            Err.Raise 5, "FileNotFoundErrorHandler.Create", "IEmergencyLogger is required"
        End If
        Set .EmergencyLogger = emergencyLogger
        
        If userNotifier Is Nothing Then
            Err.Raise 5, "FileNotFoundErrorHandler.Create", "IUserNotifier is required"
        End If
        Set .UserNotifier = userNotifier
        
        If fileOperations Is Nothing Then
            Err.Raise 5, "FileNotFoundErrorHandler.Create", "IFileOperations is required"
        End If
        Set .FileOperations = fileOperations
    End With
    
    Set Create = instance
End Function

' プロパティ
Public Property Set Lock(ByVal value As ILock)
    Set mLock = value
End Property

Public Property Set Logger(ByVal value As ILogger)
    Set mLogger = value
End Property

Public Property Set EmergencyLogger(ByVal value As IEmergencyLogger)
    Set mEmergencyLogger = value
End Property

Public Property Set UserNotifier(ByVal value As IUserNotifier)
    Set mUserNotifier = value
End Property

Public Property Set FileOperations(ByVal value As IFileOperations)
    Set mFileOperations = value
End Property

' ======================
' IErrorHandler実装
' ======================
Private Function IErrorHandler_HandleError(ByRef errorDetail As ErrorInfo) As Boolean
    Dim proceed As Boolean
    proceed = False  ' デフォルトでは処理を中断
    
    mLock.AcquireLock
    
    ' エラー情報をログに記録
    LogError errorDetail
    
    ' エラー情報の補完
    If errorDetail.HasAdditionalInfo("FilePath") Then
        Dim filePath As String
        filePath = errorDetail.GetAdditionalInfo("FilePath")
        
        ' 代替ファイルパスの確認
        Dim alternativePath As String
        alternativePath = FindAlternativeFile(filePath)
        
        If alternativePath <> "" Then
            errorDetail.AddAdditionalInfo "AlternativeFilePath", alternativePath
            errorDetail.RecoveryAttempted = True
            errorDetail.RecoverySuccessful = True
            proceed = True
        Else
            ' バックアップファイルの確認
            Dim backupPath As String
            backupPath = CheckBackupFile(filePath)
            
            If backupPath <> "" Then
                errorDetail.AddAdditionalInfo "BackupFilePath", backupPath
                errorDetail.RecoveryAttempted = True
                errorDetail.RecoverySuccessful = True
                proceed = True
            End If
        End If
    End If
    
    mLock.ReleaseLock
    
    ' ユーザーに通知
    NotifyUser errorDetail, IIf(proceed, vbInformation, vbExclamation)
    
    IErrorHandler_HandleError = proceed
End Function

' ======================
' プライベートメソッド
' ======================
Private Function FindAlternativeFile(ByVal originalPath As String) As String
    On Error GoTo ErrorHandler
    
    ' 1. 異なる拡張子のファイルを確認
    Dim extensions() As String
    extensions = Array(".bak", ".tmp", ".old")
    
    Dim basePath As String
    basePath = Left(originalPath, InStrRev(originalPath, ".") - 1)
    
    Dim i As Long
    For i = LBound(extensions) To UBound(extensions)
        Dim altPath As String
        altPath = basePath & extensions(i)
        
        If mFileOperations.FileExists(altPath) Then
            FindAlternativeFile = altPath
            Exit Function
        End If
    Next i
    
    ' 2. 同じ名前の異なるディレクトリを確認
    Dim parentPath As String
    parentPath = Left(originalPath, InStrRev(originalPath, "\") - 1)
    
    Dim fileName As String
    fileName = Mid(originalPath, InStrRev(originalPath, "\") + 1)
    
    Dim altDirs() As String
    altDirs = Array("\backup", "\archive", "\old")
    
    For i = LBound(altDirs) To UBound(altDirs)
        altPath = parentPath & altDirs(i) & "\" & fileName
        
        If mFileOperations.FileExists(altPath) Then
            FindAlternativeFile = altPath
            Exit Function
        End If
    Next i
    
    FindAlternativeFile = ""
    Exit Function

ErrorHandler:
    FindAlternativeFile = ""
End Function

Private Function CheckBackupFile(ByVal originalPath As String) As String
    On Error GoTo ErrorHandler
    
    Dim backupPath As String
    backupPath = originalPath & ".bak"
    
    If mFileOperations.FileExists(backupPath) Then
        CheckBackupFile = backupPath
    Else
        CheckBackupFile = ""
    End If
    Exit Function

ErrorHandler:
    CheckBackupFile = ""
End Function

Private Sub LogError(ByRef errorDetail As ErrorInfo)
    On Error GoTo ErrorHandler
    
    ' 通常のログ出力
    mLogger.Log MODULE_NAME, "ファイルが見つかりません: " & errorDetail.Description, errorDetail.Code
    
    ' 重要なエラーは緊急ログにも記録
    If errorDetail.Severity >= ESError Then
        mEmergencyLogger.LogEmergency MODULE_NAME, errorDetail.ToString
    End If
    
    Exit Sub

ErrorHandler:
    Dim errDetail As ErrorInfo
    Set errDetail = New ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "ファイルエラーのログ出力中にエラーが発生しました: " & Err.Description
        .Category = ECFileIO
        .Source = MODULE_NAME
        .ProcedureName = "LogError"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
        .Severity = ESError
        Set .InnerError = errorDetail.Clone
    End With
    modError.HandleError errDetail
End Sub

Private Sub NotifyUser(ByRef errorDetail As ErrorInfo, ByVal style As VbMsgBoxStyle)
    On Error GoTo ErrorHandler
    
    Dim message As String
    message = "ファイルが見つかりません: " & errorDetail.Description
    
    If errorDetail.HasAdditionalInfo("AlternativeFilePath") Then
        message = message & vbCrLf & vbCrLf & _
                 "代替ファイルが見つかりました: " & _
                 errorDetail.GetAdditionalInfo("AlternativeFilePath")
    ElseIf errorDetail.HasAdditionalInfo("BackupFilePath") Then
        message = message & vbCrLf & vbCrLf & _
                 "バックアップファイルが見つかりました: " & _
                 errorDetail.GetAdditionalInfo("BackupFilePath")
    End If
    
    mUserNotifier.Notify errorDetail, style, "ファイルエラー"
    Exit Sub

ErrorHandler:
    Dim errDetail As ErrorInfo
    Set errDetail = New ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "ファイルエラーの通知中にエラーが発生しました: " & Err.Description
        .Category = ECFileIO
        .Source = MODULE_NAME
        .ProcedureName = "NotifyUser"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
        .Severity = ESError
        Set .InnerError = errorDetail.Clone
    End With
    modError.HandleError errDetail
End Sub

================
File: FileSystemOperations.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "FileSystemOperations"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "FileSystemOperations"

' ======================
' インターフェース実装
' ======================
Implements IFileOperations

' ======================
' プライベート変数
' ======================
Private mLock As ILock
Private mPerformanceMonitor As IPerformanceMonitor
Private mFileIO As IFileIO
Private mIsInitialized As Boolean

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    ' 依存性は外部から注入されるため、ここでは初期化しない
    mIsInitialized = False
End Sub

''' <summary>
''' 依存性を注入して初期化します
''' </summary>
''' <param name="lock">ロック機構</param>
''' <param name="performanceMonitor">パフォーマンスモニター</param>
''' <param name="fileIO">ファイルI/O操作</param>
''' <remarks>
''' このメソッドは必ずインスタンス作成後に呼び出す必要があります
''' </remarks>
Public Sub Initialize(ByVal lock As ILock, _
                     ByVal performanceMonitor As IPerformanceMonitor, _
                     ByVal fileIO As IFileIO)
    Set mLock = lock
    Set mPerformanceMonitor = performanceMonitor
    Set mFileIO = fileIO
    mIsInitialized = True
End Sub

Private Sub Class_Terminate()
    Set mLock = Nothing
    Set mPerformanceMonitor = Nothing
    Set mFileIO = Nothing
    mIsInitialized = False
End Sub

Private Sub InitializeIfNeeded()
    If Not mIsInitialized Then
        Err.Raise vbObjectError + 1000, MODULE_NAME, "オブジェクトが初期化されていません。Initialize メソッドを呼び出してください。"
    End If
End Sub

' ======================
' IFileOperations実装
' ======================
Private Function IFileOperations_ReadTextFile(ByVal filePath As String, _
                                           Optional ByVal encoding As String) As String
    InitializeIfNeeded
    mPerformanceMonitor.StartMeasurement "Read Text File"
    Dim content As String
    On Error GoTo ErrorHandler
    content = ReadTextFileUsingFileIO(filePath, encoding)
    IFileOperations_ReadTextFile = content
    mPerformanceMonitor.EndMeasurement "Read Text File"
    Exit Function
ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = ErrFileNotFound
        .Description = "ファイルの読み込みに失敗しました: " & filePath
        .Source = MODULE_NAME & ".IFileOperations_ReadTextFile"
    End With
    Call modError.HandleError(errInfo)
    mPerformanceMonitor.EndMeasurement "Read Text File"
    IFileOperations_ReadTextFile = vbNullString
End Function

Private Function IFileOperations_WriteTextFile(ByVal filePath As String, _
                                            ByVal content As String, _
                                            Optional ByVal append As Boolean = False, _
                                            Optional ByVal encoding As String) As Boolean
    InitializeIfNeeded
    mPerformanceMonitor.StartMeasurement "Write Text File"
    Dim result As Boolean
    On Error GoTo ErrorHandler
    result = WriteTextFileUsingFileIO(filePath, content, append, encoding)
    IFileOperations_WriteTextFile = result
    mPerformanceMonitor.EndMeasurement "Write Text File"
    Exit Function
ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = ErrFileAccessDenied
        .Description = "ファイルの書き込みに失敗しました: " & filePath
        .Source = MODULE_NAME & ".IFileOperations_WriteTextFile"
    End With
    Call modError.HandleError(errInfo)
    mPerformanceMonitor.EndMeasurement "Write Text File"
    IFileOperations_WriteTextFile = False
End Function

Private Function IFileOperations_ReadBinaryFile(ByVal filePath As String) As Byte()
    InitializeIfNeeded
    mPerformanceMonitor.StartMeasurement "Read Binary File"
    On Error GoTo ErrorHandler
    IFileOperations_ReadBinaryFile = ReadBinaryFileUsingFileIO(filePath)
    mPerformanceMonitor.EndMeasurement "Read Binary File"
    Exit Function
ErrorHandler:
    mPerformanceMonitor.EndMeasurement "Read Binary File"
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = ErrFileNotFound
        .Description = "バイナリファイルの読み込みに失敗しました: " & filePath
        .Source = MODULE_NAME & ".IFileOperations_ReadBinaryFile"
    End With
    Call modError.HandleError(errInfo)
    IFileOperations_ReadBinaryFile = Array()
End Function

Private Function IFileOperations_WriteBinaryFile(ByVal filePath As String, _
                                              ByRef data() As Byte) As Boolean
    InitializeIfNeeded
    mPerformanceMonitor.StartMeasurement "Write Binary File"
    On Error GoTo ErrorHandler
    IFileOperations_WriteBinaryFile = WriteBinaryFileUsingFileIO(filePath, data)
    mPerformanceMonitor.EndMeasurement "Write Binary File"
    Exit Function
ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = ErrFileAccessDenied
        .Description = "バイナリファイルの書き込みに失敗しました: " & filePath
        .Source = MODULE_NAME & ".IFileOperations_WriteBinaryFile"
    End With
    Call modError.HandleError(errInfo)
    mPerformanceMonitor.EndMeasurement "Write Binary File"
    IFileOperations_WriteBinaryFile = False
End Function

Private Function IFileOperations_FileExists(ByVal filePath As String) As Boolean
    InitializeIfNeeded
    IFileOperations_FileExists = mFileIO.FileExists(filePath)
End Function

Private Function IFileOperations_FolderExists(ByVal folderPath As String) As Boolean
    InitializeIfNeeded
    IFileOperations_FolderExists = mFileIO.FolderExists(folderPath)
End Function

Private Function IFileOperations_CreateFolder(ByVal folderPath As String) As Boolean
    InitializeIfNeeded
    mPerformanceMonitor.StartMeasurement "Create Folder"
    On Error GoTo ErrorHandler
    IFileOperations_CreateFolder = mFileIO.CreateFolder(folderPath)
    mPerformanceMonitor.EndMeasurement "Create Folder"
    Exit Function
ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = ErrFileAccessDenied
        .Description = "フォルダの作成に失敗しました: " & folderPath
        .Source = MODULE_NAME & ".IFileOperations_CreateFolder"
    End With
    Call modError.HandleError(errInfo)
    mPerformanceMonitor.EndMeasurement "Create Folder"
    IFileOperations_CreateFolder = False
End Function

Private Function IFileOperations_DeleteFile(ByVal filePath As String) As Boolean
    InitializeIfNeeded
    mPerformanceMonitor.StartMeasurement "Delete File"
    On Error GoTo ErrorHandler
    IFileOperations_DeleteFile = mFileIO.DeleteFile(filePath)
    mPerformanceMonitor.EndMeasurement "Delete File"
    Exit Function
ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = ErrFileAccessDenied
        .Description = "ファイルの削除に失敗しました: " & filePath
        .Source = MODULE_NAME & ".IFileOperations_DeleteFile"
    End With
    Call modError.HandleError(errInfo)
    mPerformanceMonitor.EndMeasurement "Delete File"
    IFileOperations_DeleteFile = False
End Function

Private Function IFileOperations_DeleteFolder(ByVal folderPath As String) As Boolean
    InitializeIfNeeded
    mPerformanceMonitor.StartMeasurement "Delete Folder"
    On Error GoTo ErrorHandler
    IFileOperations_DeleteFolder = mFileIO.DeleteFolder(folderPath)
    mPerformanceMonitor.EndMeasurement "Delete Folder"
    Exit Function
ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = ErrFileAccessDenied
        .Description = "フォルダの削除に失敗しました: " & folderPath
        .Source = MODULE_NAME & ".IFileOperations_DeleteFolder"
    End With
    Call modError.HandleError(errInfo)
    mPerformanceMonitor.EndMeasurement "Delete Folder"
    IFileOperations_DeleteFolder = False
End Function

Private Function IFileOperations_GetAbsolutePath(ByVal relativePath As String, _
                                              Optional ByVal basePath As String) As String
    InitializeIfNeeded
    ' FileIOImplでは絶対パスの解決は実装していないため、
    ' FSO（FileSystemObject）の機能を直接使用
    On Error Resume Next
    Dim fso As Object
    Set fso = CreateObject("Scripting.FileSystemObject")
    If basePath = "" Then basePath = CurDir()
    IFileOperations_GetAbsolutePath = fso.GetAbsolutePathName(fso.BuildPath(basePath, relativePath))
    Set fso = Nothing
    On Error GoTo 0
End Function

' ======================
' パブリックメソッド
' ======================
Public Function CreateInstance(ByVal lock As ILock, _
                             ByVal performanceMonitor As IPerformanceMonitor, _
                             ByVal fileIO As IFileIO) As IFileOperations
    Dim instance As New FileSystemOperations
    instance.Initialize lock, performanceMonitor, fileIO
    Set CreateInstance = instance
End Function

' ======================
' プライベートヘルパーメソッド
' ======================
Private Function ReadTextFileUsingFileIO(ByVal filePath As String, _
                                       Optional ByVal encoding As String) As String
    Dim file As Object
    Set file = mFileIO.OpenFile(filePath, "READ")
    
    If file Is Nothing Then Exit Function
    
    On Error GoTo ErrorHandler
    ReadTextFileUsingFileIO = file.ReadAll
    mFileIO.CloseFile file
    Exit Function
    
ErrorHandler:
    If Not file Is Nothing Then mFileIO.CloseFile file
    ReadTextFileUsingFileIO = vbNullString
End Function

Private Function WriteTextFileUsingFileIO(ByVal filePath As String, _
                                        ByVal content As String, _
                                        ByVal append As Boolean, _
                                        Optional ByVal encoding As String) As Boolean
    Dim file As Object
    Set file = mFileIO.OpenFile(filePath, IIf(append, "APPEND", "WRITE"))
    
    If file Is Nothing Then Exit Function
    
    On Error GoTo ErrorHandler
    file.Write content
    mFileIO.CloseFile file
    WriteTextFileUsingFileIO = True
    Exit Function
    
ErrorHandler:
    If Not file Is Nothing Then mFileIO.CloseFile file
    WriteTextFileUsingFileIO = False
End Function

Private Function ReadBinaryFileUsingFileIO(ByVal filePath As String) As Byte()
    Dim file As Object
    Set file = mFileIO.OpenFile(filePath, "READ")
    
    If file Is Nothing Then
        ReadBinaryFileUsingFileIO = Array()
        Exit Function
    End If
    
    On Error GoTo ErrorHandler
    Dim fileContent As String
    fileContent = file.ReadAll
    mFileIO.CloseFile file
    
    ' 文字列をバイト配列に変換
    Dim bytes() As Byte
    bytes = StrConv(fileContent, vbFromUnicode)
    ReadBinaryFileUsingFileIO = bytes
    Exit Function
    
ErrorHandler:
    If Not file Is Nothing Then mFileIO.CloseFile file
    ReadBinaryFileUsingFileIO = Array()
End Function

Private Function WriteBinaryFileUsingFileIO(ByVal filePath As String, _
                                          ByRef data() As Byte) As Boolean
    Dim file As Object
    Set file = mFileIO.OpenFile(filePath, "WRITE")
    
    If file Is Nothing Then Exit Function
    
    On Error GoTo ErrorHandler
    ' バイト配列を文字列に変換
    Dim content As String
    content = StrConv(data, vbUnicode)
    file.Write content
    mFileIO.CloseFile file
    WriteBinaryFileUsingFileIO = True
    Exit Function
    
ErrorHandler:
    If Not file Is Nothing Then mFileIO.CloseFile file
    WriteBinaryFileUsingFileIO = False
End Function

' ======================
' テストサポート機能（開発環境専用）
' ======================
#If DEBUG Then
    ''' <summary>
    ''' モジュールの状態を初期化（テスト用）
    ''' </summary>
    Private Sub ResetModule()
        Class_Terminate
        Class_Initialize
    End Sub
    
    ''' <summary>
    ''' 初期化状態を取得（テスト用）
    ''' </summary>
    Private Property Get IsInitialized() As Boolean
        IsInitialized = mIsInitialized
    End Property
#End If

================
File: IniFileImpl.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IniFileImpl"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements IIniFile

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "IniFileImpl"

' ======================
' 定数定義
' ======================
Private Const MAX_BUFFER_SIZE As Long = 32767 ' Win32 APIの制限
Private Const DEFAULT_BUFFER_SIZE As Long = 1024

' ======================
' メンバ変数
' ======================
Private mIsInitialized As Boolean
Private mPerformanceMonitor As clsPerformanceMonitor
Private mLock As clsLock

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    Set mPerformanceMonitor = New clsPerformanceMonitor
    Set mLock = New clsLock
    mIsInitialized = True
End Sub

Private Sub Class_Terminate()
    Set mPerformanceMonitor = Nothing
    Set mLock = Nothing
    mIsInitialized = False
End Sub

' ======================
' IIniFile実装
' ======================
Private Function IIniFile_GetPrivateProfileString(ByVal section As String, _
                                                ByVal key As String, _
                                                ByVal defaultValue As String, _
                                                ByVal filePath As String) As String
    If Not mIsInitialized Then Exit Function
    
    mPerformanceMonitor.StartMeasurement "GetPrivateProfileString"
    mLock.AcquireLock
    
    On Error GoTo ErrorHandler
    
    Dim buffer As String
    Dim result As Long
    Dim retryCount As Long
    Const MAX_RETRIES As Long = 3
    
    ' 徐々にバッファサイズを大きくしながら値の取得を試みる
    Dim bufferSize As Long
    bufferSize = DEFAULT_BUFFER_SIZE
    
    Do
        buffer = String$(bufferSize, 0)
        result = modWindowsAPI.GetPrivateProfileString(section, key, defaultValue, _
                                                     buffer, bufferSize, filePath)
        
        ' バッファが不足している場合は拡張して再試行
        If result = bufferSize - 1 Then
            bufferSize = bufferSize * 2
            If bufferSize > MAX_BUFFER_SIZE Then
                LogError "バッファサイズが最大値を超えました。"
                IIniFile_GetPrivateProfileString = defaultValue
                GoTo CleanUp
            End If
        Else
            Exit Do
        End If
        
        retryCount = retryCount + 1
    Loop While retryCount < MAX_RETRIES
    
    If result > 0 Then
        IIniFile_GetPrivateProfileString = Left$(buffer, result)
    Else
        IIniFile_GetPrivateProfileString = defaultValue
    End If
    
CleanUp:
    mLock.ReleaseLock
    mPerformanceMonitor.EndMeasurement "GetPrivateProfileString"
    Exit Function

ErrorHandler:
    LogError "INIファイルからの読み取り中にエラーが発生しました: " & Err.Description
    IIniFile_GetPrivateProfileString = defaultValue
    Resume CleanUp
End Function

Private Function IIniFile_WritePrivateProfileString(ByVal section As String, _
                                                  ByVal key As String, _
                                                  ByVal value As String, _
                                                  ByVal filePath As String) As Boolean
    If Not mIsInitialized Then Exit Function
    
    mPerformanceMonitor.StartMeasurement "WritePrivateProfileString"
    mLock.AcquireLock
    
    On Error GoTo ErrorHandler
    
    Dim result As Long
    result = modWindowsAPI.WritePrivateProfileString(section, key, value, filePath)
    
    IIniFile_WritePrivateProfileString = (result <> 0)
    
CleanUp:
    mLock.ReleaseLock
    mPerformanceMonitor.EndMeasurement "WritePrivateProfileString"
    Exit Function

ErrorHandler:
    LogError "INIファイルへの書き込み中にエラーが発生しました: " & Err.Description
    IIniFile_WritePrivateProfileString = False
    Resume CleanUp
End Function

' ======================
' プライベートメソッド
' ======================
Private Sub LogError(ByVal message As String)
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = ErrUnexpected
        .Description = message
        .Category = ECFileIO
        .Source = MODULE_NAME
        .ProcedureName = "Unknown"  ' スタックトレースから取得可能
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errInfo
End Sub

' ======================
' テストサポート機能
' ======================
#If DEBUG Then
    Public Function ValidateState() As Boolean
        ValidateState = mIsInitialized And _
                       Not (mPerformanceMonitor Is Nothing) And _
                       Not (mLock Is Nothing)
    End Function
    
    Public Function GetPerformanceMonitor() As clsPerformanceMonitor
        Set GetPerformanceMonitor = mPerformanceMonitor
    End Function
    
    Public Function TestBufferHandling(ByVal testValue As String) As String
        ' 大きな値の読み書きをテスト
        Const TEST_SECTION As String = "TestSection"
        Const TEST_KEY As String = "TestKey"
        Const TEST_FILE As String = "test.ini"
        
        ' 書き込み
        IIniFile_WritePrivateProfileString TEST_SECTION, TEST_KEY, testValue, TEST_FILE
        
        ' 読み込み
        TestBufferHandling = IIniFile_GetPrivateProfileString(TEST_SECTION, TEST_KEY, "", TEST_FILE)
    End Function
#End If

================
File: modDatabaseUtils.bas
================
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "modDatabaseUtils"

' ======================
' 定数定義
' ======================
Private Const ERR_MODULE_NOT_INITIALIZED As String = "モジュールが初期化されていません。"
Private Const DEFAULT_CONNECTION_STRING As String = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=default.accdb;"

' ======================
' プライベート変数
' ======================
Private mPerformanceMonitor As clsPerformanceMonitor
Private mIsInitialized As Boolean
Private mLock As clsLock
Private mDefaultConnection As Object ' ADODB.Connection
Private mConfig As IDatabaseConfig ' データベース設定
Private mConnectionPool As ConnectionPool ' コネクションプール

' ======================
' 初期化・終了処理
' ======================
''' <summary>モジュールを初期化します</summary>
''' <param name="config">データベース設定を提供するインターフェース（必須）</param>
Public Sub InitializeModule(ByVal config As IDatabaseConfig)
    If mIsInitialized Then Exit Sub
    
    Set mPerformanceMonitor = New clsPerformanceMonitor
    If config Is Nothing Then
        Err.Raise vbObjectError + 1001, MODULE_NAME, _
            "データベース設定が指定されていません。"
    End If
    Set mConfig = config
    Set mLock = New clsLock
    Set mConnectionPool = New ConnectionPool
    
    ' コネクションプールの初期化
    With mConnectionPool
        .MinPoolSize = CLng(mConfig.GetDatabaseSetting("MinPoolSize"))
        .MaxPoolSize = CLng(mConfig.GetDatabaseSetting("MaxPoolSize"))
        .ConnectionTimeout = mConfig.ConnectionTimeout
    End With
    
    mIsInitialized = True
End Sub

Public Sub TerminateModule()
    If Not mIsInitialized Then Exit Sub
    
    CloseConnection
    Set mPerformanceMonitor = Nothing
    Set mLock = Nothing
    Set mConfig = Nothing
    Set mConnectionPool = Nothing
    mIsInitialized = False
End Sub

' ======================
' 公開関数
' ======================

''' <summary>
''' データベース接続文字列を取得します
''' </summary>
''' <returns>接続文字列</returns>
Public Function GetConnectionString() As String
    If Not mIsInitialized Then Err.Raise vbObjectError + 1002, MODULE_NAME, ERR_MODULE_NOT_INITIALIZED
    
    On Error GoTo ErrorHandler

    If Not mPerformanceMonitor Is Nothing Then
        mPerformanceMonitor.StartMeasurement "GetConnectionString"
    End If
    
    mLock.AcquireLock
    
    ' IDatabaseConfigから接続文字列を取得
    GetConnectionString = mConfig.GetConnectionString
    
    mLock.ReleaseLock
    
    ' 接続文字列が空の場合、デフォルト値を使用
    If GetConnectionString = "" Then
        ' デフォルト接続文字列を使用する前に警告をログ
        LogWarning "接続文字列が設定されていません。デフォルト値を使用します。", _
                  "GetConnectionString"
        
        GetConnectionString = DEFAULT_CONNECTION_STRING
    End If
    
    If Not mPerformanceMonitor Is Nothing Then
        mPerformanceMonitor.EndMeasurement "GetConnectionString"
    End If
    Exit Function

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrDatabaseConnectionFailed
        .Description = "接続文字列の取得中にエラーが発生しました: " & Err.Description
        .Category = ECDatabase
        .Source = MODULE_NAME
        .ProcedureName = "GetConnectionString"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    If Not mPerformanceMonitor Is Nothing Then
        mPerformanceMonitor.EndMeasurement "GetConnectionString"
    End If
    GetConnectionString = DEFAULT_CONNECTION_STRING
End Function

''' <summary>
''' データベース接続を取得します
''' </summary>
''' <returns>データベース接続オブジェクト</returns>
Public Function GetConnection() As Object ' ADODB.Connection
    If Not mIsInitialized Then Err.Raise vbObjectError + 1002, MODULE_NAME, ERR_MODULE_NOT_INITIALIZED
    
    If Not mPerformanceMonitor Is Nothing Then
        mPerformanceMonitor.StartMeasurement "GetConnection"
    End If
    
    On Error GoTo ErrorHandler
    
    mLock.AcquireLock
    
    ' コネクションプールから接続を取得
    Set GetConnection = mConnectionPool.GetConnection(GetConnectionString())
    
    GoTo CleanupAndExit

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrDatabaseConnectionFailed
        .Description = "データベース接続の取得中にエラーが発生しました: " & Err.Description
        .Category = ECDatabase
        .Source = MODULE_NAME
        .ProcedureName = "GetConnection"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    Set GetConnection = Nothing

CleanupAndExit:
    mLock.ReleaseLock
    If Not mPerformanceMonitor Is Nothing Then
        mPerformanceMonitor.EndMeasurement "GetConnection"
    End If
End Function

''' <summary>
''' データベース接続を閉じます
''' </summary>
Public Sub CloseConnection()
    If Not mConnectionPool Is Nothing Then
        mLock.AcquireLock
        
        On Error Resume Next
        mConnectionPool.ReleaseAllConnections
        
        mLock.ReleaseLock
        On Error GoTo 0
    End If
End Sub

''' <summary>
''' データベース接続をテストします
''' </summary>
''' <returns>接続成功の場合True</returns>
Public Function TestConnection() As Boolean
    If Not mIsInitialized Then Err.Raise vbObjectError + 1002, MODULE_NAME, ERR_MODULE_NOT_INITIALIZED
    
    Dim conn As Object
    Set conn = GetConnection()
    
    TestConnection = Not (conn Is Nothing)
    
    If Not conn Is Nothing Then
        If conn.State = 1 Then ' adStateOpen
            TestConnection = True
            mConnectionPool.ReleaseConnection conn
        End If
    End If
End Function

''' <summary>
''' SQLクエリを実行し、結果を取得します
''' </summary>
''' <param name="sql">SQLクエリ</param>
''' <param name="params">パラメータ配列（オプション）</param>
''' <returns>レコードセット</returns>
Public Function ExecuteQuery(ByVal sql As String, _
                           Optional ByRef params As Variant) As Object ' ADODB.Recordset
    If Not mIsInitialized Then Err.Raise vbObjectError + 1002, MODULE_NAME, ERR_MODULE_NOT_INITIALIZED
    
    If Not mPerformanceMonitor Is Nothing Then
        mPerformanceMonitor.StartMeasurement "ExecuteQuery"
    End If
    
    On Error GoTo ErrorHandler
    
    Dim conn As Object
    Set conn = GetConnection()
    If conn Is Nothing Then Exit Function
    
    Dim cmd As Object
    Set cmd = CreateObject("ADODB.Command")
    With cmd
        Set .ActiveConnection = conn
        .CommandText = sql
        .CommandType = 1 ' adCmdText
        .CommandTimeout = mConfig.CommandTimeout
        
        ' パラメータの設定
        If Not IsMissing(params) Then
            ' 単一値のパラメータを配列に変換
            Dim paramArray As Variant
            If IsArray(params) Then
                paramArray = params
            Else
                ReDim paramArray(0)
                paramArray(0) = params
            End If
            
            ' パラメータのバリデーション
            ValidateParameters paramArray
            
            ' パラメータの追加
            Dim i As Long
            For i = LBound(paramArray) To UBound(paramArray)
                Dim paramValue As Variant
                paramValue = paramArray(i)
                If Not IsNull(paramValue) Then
                    .Parameters.Append .CreateParameter("p" & i, GetParameterType(paramValue), 1, , paramValue)
                End If
            Next i
        End If
        
        Set ExecuteQuery = .Execute
    End With
    
    ' 接続をプールに返却
    mConnectionPool.ReleaseConnection conn
    
    If Not mPerformanceMonitor Is Nothing Then
        mPerformanceMonitor.EndMeasurement "ExecuteQuery"
    End If
    Exit Function

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrDatabaseQueryFailed
        .Description = "クエリの実行中にエラーが発生しました: " & Err.Description
        .Category = ECDatabase
        .Source = MODULE_NAME
        .ProcedureName = "ExecuteQuery"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    If Not mPerformanceMonitor Is Nothing Then
        mPerformanceMonitor.EndMeasurement "ExecuteQuery"
    End If
    Set ExecuteQuery = Nothing
End Function

' ======================
' プライベート関数
' ======================
Private Function GetParameterType(ByVal Value As Variant) As Integer
    Select Case VarType(Value)
        Case vbInteger, vbLong
            GetParameterType = 3 ' adInteger
        Case vbSingle, vbDouble
            GetParameterType = 5 ' adDouble
        Case vbString
            GetParameterType = 200 ' adVarChar
        Case vbDate
            GetParameterType = 7 ' adDate
        Case vbBoolean
            GetParameterType = 11 ' adBoolean
        Case Else
            GetParameterType = 12 ' adVariant
    End Select
End Function

Private Sub ValidateParameters(ByRef params As Variant)
    If Not IsArray(params) Then Exit Sub
    
    Dim i As Long
    For i = LBound(params) To UBound(params)
        If Not IsNull(params(i)) Then
            Select Case VarType(params(i))
                Case vbInteger, vbLong, vbSingle, vbDouble, vbString, vbDate, vbBoolean
                    ' サポートされている型
                Case Else
                    Err.Raise vbObjectError + 1003, MODULE_NAME, _
                        "サポートされていないパラメータ型です: " & TypeName(params(i))
            End Select
        End If
    Next i
End Sub

Private Sub LogWarning(ByVal message As String, ByVal procedureName As String)
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrDatabaseWarning
        .Description = message
        .Category = ECDatabase
        .Source = MODULE_NAME
        .ProcedureName = procedureName
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
End Sub

' ======================
' テストサポート機能
' 警告: これらのメソッドは開発時のテスト目的でのみ使用し、
' 本番環境では使用しないでください。
' ======================
#If DEBUG Then
    ''' <summary>
    ''' モジュールの状態を初期化（テスト用）
    ''' </summary>
    Private Sub ResetModule()
        TerminateModule
        InitializeModule mConfig
    End Sub
    
    ''' <summary>
    ''' パフォーマンスモニターの参照を取得（テスト用）
    ''' </summary>
    Private Function GetPerformanceMonitor() As clsPerformanceMonitor
        Set GetPerformanceMonitor = mPerformanceMonitor
    End Function
    
    ''' <summary>
    ''' コネクションプールの参照を取得（テスト用）
    ''' </summary>
    Private Function GetConnectionPool() As ConnectionPool
        Set GetConnectionPool = mConnectionPool
    End Function
#End If

================
File: modFileIO.bas
================
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "modFileIO"

' ======================
' 定数定義
' ======================
Private Const MAX_BUFFER_SIZE As Long = 1024
Private Const DEFAULT_ENCODING As String = "UTF-8"

' ======================
' プライベート変数
' ======================
Private performanceMonitor As clsPerformanceMonitor
Private isInitialized As Boolean

' ======================
' 初期化・終了処理
' ======================
Public Property Get IsInitialized() As Boolean
    IsInitialized = isInitialized
End Property

Private Sub InitializeIfNeeded()
    If Not isInitialized Then InitializeModule
End Sub

Public Sub InitializeModule()
    If isInitialized Then Exit Sub
    Set performanceMonitor = New clsPerformanceMonitor
    isInitialized = True
End Sub

Public Sub TerminateModule()
    If Not isInitialized Then Exit Sub
    Set performanceMonitor = Nothing
    isInitialized = False
End Sub

' ======================
' 公開メソッド
' ======================

''' <summary>
''' テキストファイルを読み込みます
''' </summary>
''' <param name="filePath">ファイルパス</param>
''' <param name="encoding">文字エンコーディング（オプション）</param>
''' <returns>ファイルの内容、エラー時は空文字列</returns>
''' <remarks>
''' エラー処理要件：
''' - ファイルの存在確認
''' - エンコーディングの検証
''' - ファイルロックの確認
''' - メモリ不足への対応
''' </remarks>
Public Function ReadTextFile(ByVal filePath As String, _
                           Optional ByVal encoding As String = DEFAULT_ENCODING) As String
    InitializeIfNeeded
    
    performanceMonitor.StartMeasurement "Read Text File"
    On Error GoTo ErrorHandler
    
    If Not FileExists(filePath) Then
        RaiseFileError modErrorCodes.ErrFileNotFound, "ファイルが見つかりません: " & filePath
    End If
    
    Dim fileNum As Integer
    fileNum = FreeFile
    
    Open filePath For Input As #fileNum Encoding encoding
        ReadTextFile = Input$(LOF(fileNum), fileNum)
    Close #fileNum
    
CleanUp:
    performanceMonitor.EndMeasurement "Read Text File"
    Exit Function
    
ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = GetFileErrorCode(Err.Number)
        .Category = modErrorCodes.ECFileIO
        .Description = Err.Description
        .Source = MODULE_NAME
        .ProcedureName = "ReadTextFile"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    
    modError.HandleError errInfo
    ReadTextFile = ""  ' エラー時は空文字列を返す（IFileOperationsの規定に従う）
    Resume CleanUp
End Function

''' <summary>
''' テキストファイルに書き込みます
''' </summary>
''' <param name="filePath">ファイルパス</param>
''' <param name="content">書き込む内容</param>
''' <param name="append">追記モード（オプション）</param>
''' <param name="encoding">文字エンコーディング（オプション）</param>
''' <returns>成功時True、失敗時False</returns>
''' <remarks>
''' エラー処理要件：
''' - 書き込み権限の確認
''' - ディスク容量の確認
''' - 既存ファイルのバックアップ
''' - 書き込み失敗時の復旧処理
''' </remarks>
Public Function WriteTextFile(ByVal filePath As String, _
                            ByVal content As String, _
                            Optional ByVal append As Boolean = False, _
                            Optional ByVal encoding As String = DEFAULT_ENCODING) As Boolean
    InitializeIfNeeded
    
    performanceMonitor.StartMeasurement "Write Text File"
    On Error GoTo ErrorHandler
    
    Dim fileNum As Integer
    fileNum = FreeFile
    
    If append Then
        Open filePath For Append As #fileNum Encoding encoding
    Else
        Open filePath For Output As #fileNum Encoding encoding
    End If
    
    Print #fileNum, content
    Close #fileNum
    
    WriteTextFile = True
    
CleanUp:
    performanceMonitor.EndMeasurement "Write Text File"
    Exit Function
    
ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = GetFileErrorCode(Err.Number)
        .Category = modErrorCodes.ECFileIO
        .Description = Err.Description
        .Source = MODULE_NAME
        .ProcedureName = "WriteTextFile"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    
    modError.HandleError errInfo
    WriteTextFile = False
    Resume CleanUp
End Function

''' <summary>
''' バイナリファイルを読み込みます
''' </summary>
''' <param name="filePath">ファイルパス</param>
''' <returns>ファイルのバイトデータ、エラー時は空配列</returns>
''' <remarks>
''' エラー処理要件：
''' - ファイルサイズの検証
''' - メモリ使用量の監視
''' - 破損ファイルの検出
''' - エラー発生時は空配列を返す
''' </remarks>
Public Function ReadBinaryFile(ByVal filePath As String) As Byte()
    InitializeIfNeeded
    
    performanceMonitor.StartMeasurement "Read Binary File"
    On Error GoTo ErrorHandler
    
    If Not FileExists(filePath) Then
        RaiseFileError modErrorCodes.ErrFileNotFound, "ファイルが見つかりません: " & filePath
    End If
    
    Dim fileNum As Integer
    fileNum = FreeFile
    
    Open filePath For Binary Access Read As #fileNum
        Dim fileData() As Byte
        ReDim fileData(LOF(fileNum) - 1)
        Get #fileNum, , fileData
    Close #fileNum
    
    ReadBinaryFile = fileData
    
CleanUp:
    performanceMonitor.EndMeasurement "Read Binary File"
    Exit Function
    
ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = GetFileErrorCode(Err.Number)
        .Category = modErrorCodes.ECFileIO
        .Description = Err.Description
        .Source = MODULE_NAME
        .ProcedureName = "ReadBinaryFile"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    
    modError.HandleError errInfo
    ReadBinaryFile = Array()  ' エラー時は空配列を返す
    Resume CleanUp
End Function

''' <summary>
''' バイナリファイルに書き込みます
''' </summary>
''' <param name="filePath">ファイルパス</param>
''' <param name="data">書き込むバイトデータ</param>
''' <returns>成功時True、失敗時False</returns>
''' <remarks>
''' エラー処理要件：
''' - データの整合性チェック
''' - 部分書き込みの防止
''' - 書き込み失敗時のロールバック
''' - エラー発生時はFalseを返す
''' </remarks>
Public Function WriteBinaryFile(ByVal filePath As String, _
                              ByRef data() As Byte) As Boolean
    InitializeIfNeeded
    
    performanceMonitor.StartMeasurement "Write Binary File"
    On Error GoTo ErrorHandler
    
    Dim fileNum As Integer
    fileNum = FreeFile
    
    Open filePath For Binary Access Write As #fileNum
        Put #fileNum, , data
    Close #fileNum
    
    WriteBinaryFile = True
    
CleanUp:
    performanceMonitor.EndMeasurement "Write Binary File"
    Exit Function
    
ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = GetFileErrorCode(Err.Number)
        .Category = modErrorCodes.ECFileIO
        .Description = Err.Description
        .Source = MODULE_NAME
        .ProcedureName = "WriteBinaryFile"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    
    modError.HandleError errInfo
    WriteBinaryFile = False
    Resume CleanUp
End Function

Public Function FileExists(ByVal filePath As String) As Boolean
    InitializeIfNeeded
    
    performanceMonitor.StartMeasurement "FileExists"
    On Error GoTo ErrorHandler
    
    FileExists = (Dir(filePath) <> "")
    
CleanUp:
    performanceMonitor.EndMeasurement "FileExists"
    Exit Function
    
ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = GetFileErrorCode(Err.Number)
        .Category = modErrorCodes.ECFileIO
        .Description = "ファイルの存在確認中にエラーが発生しました: " & filePath & vbCrLf & Err.Description
        .Source = MODULE_NAME
        .ProcedureName = "FileExists"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    
    modError.HandleError errInfo
    FileExists = False
    Resume CleanUp
End Function
 
Public Function FolderExists(ByVal folderPath As String) As Boolean
    InitializeIfNeeded
    
    performanceMonitor.StartMeasurement "FolderExists"
    On Error GoTo ErrorHandler
    
    FolderExists = (Dir(folderPath, vbDirectory) <> "")
    
CleanUp:
    performanceMonitor.EndMeasurement "FolderExists"
    Exit Function
    
ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = GetFileErrorCode(Err.Number)
        .Category = modErrorCodes.ECFileIO
        .Description = "フォルダの存在確認中にエラーが発生しました: " & folderPath & vbCrLf & Err.Description
        .Source = MODULE_NAME
        .ProcedureName = "FolderExists"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    
    modError.HandleError errInfo
    FolderExists = False
    Resume CleanUp
End Function
 
Public Function CreateFolder(ByVal folderPath As String) As Boolean
    InitializeIfNeeded
    
    performanceMonitor.StartMeasurement "Create Folder"
    On Error GoTo ErrorHandler
    
    MkDir folderPath
    CreateFolder = True
    
CleanUp:
    performanceMonitor.EndMeasurement "Create Folder"
    Exit Function
    
ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = GetFileErrorCode(Err.Number)
        .Category = modErrorCodes.ECFileIO
        .Description = "フォルダの作成中にエラーが発生しました: " & folderPath & vbCrLf & Err.Description
        .Source = MODULE_NAME
        .ProcedureName = "CreateFolder"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    
    modError.HandleError errInfo
    CreateFolder = False
    Resume CleanUp
End Function
 
Public Function DeleteFile(ByVal filePath As String) As Boolean
    InitializeIfNeeded
    
    performanceMonitor.StartMeasurement "Delete File"
    On Error GoTo ErrorHandler
    
    Kill filePath
    DeleteFile = True
    
CleanUp:
    performanceMonitor.EndMeasurement "Delete File"
    Exit Function
    
ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = GetFileErrorCode(Err.Number)
        .Category = modErrorCodes.ECFileIO
        .Description = "ファイルの削除中にエラーが発生しました: " & filePath & vbCrLf & Err.Description
        .Source = MODULE_NAME
        .ProcedureName = "DeleteFile"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    
    modError.HandleError errInfo
    DeleteFile = False
    Resume CleanUp
End Function
 
Public Function DeleteFolder(ByVal folderPath As String) As Boolean
    InitializeIfNeeded
    
    performanceMonitor.StartMeasurement "Delete Folder"
    On Error GoTo ErrorHandler
    
    RmDir folderPath
    DeleteFolder = True
    
CleanUp:
    performanceMonitor.EndMeasurement "Delete Folder"
    Exit Function
    
ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = GetFileErrorCode(Err.Number)
        .Category = modErrorCodes.ECFileIO
        .Description = "フォルダの削除中にエラーが発生しました: " & folderPath & vbCrLf & Err.Description
        .Source = MODULE_NAME
        .ProcedureName = "DeleteFolder"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    
    modError.HandleError errInfo
    DeleteFolder = False
    Resume CleanUp
End Function

Public Function GetAbsolutePath(ByVal relativePath As String, _
                              Optional ByVal basePath As String) As String
    InitializeIfNeeded
    
    performanceMonitor.StartMeasurement "GetAbsolutePath"
    On Error GoTo ErrorHandler
    
    If Len(basePath) = 0 Then basePath = CurDir
    GetAbsolutePath = CreateObject("Scripting.FileSystemObject").GetAbsolutePathName(basePath & "\" & relativePath)
    
CleanUp:
    performanceMonitor.EndMeasurement "GetAbsolutePath"
    Exit Function
    
ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = GetFileErrorCode(Err.Number)
        .Category = modErrorCodes.ECFileIO
        .Description = "絶対パスの取得中にエラーが発生しました: " & relativePath & vbCrLf & Err.Description
        .Source = MODULE_NAME
        .ProcedureName = "GetAbsolutePath"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    
    modError.HandleError errInfo
    GetAbsolutePath = ""
    Resume CleanUp
End Function

' ======================
' プライベートメソッド
' ======================
Private Function GetFileErrorCode(ByVal errNumber As Long) As ErrorCode
    Select Case errNumber
        Case 53 ' File not found
            GetFileErrorCode = modErrorCodes.ErrFileNotFound
        Case 70 ' Permission denied
            GetFileErrorCode = modErrorCodes.ErrFileAccessDenied
        Case 75, 76 ' Path/File access error
            GetFileErrorCode = modErrorCodes.ErrFileAccessDenied
        Case Else
            GetFileErrorCode = modErrorCodes.ErrUnexpected
    End Select
End Function

Private Sub RaiseFileError(ByVal errorCode As ErrorCode, ByVal description As String)
    Err.Raise errorCode, MODULE_NAME, description
End Sub

' ======================
' テストサポート機能（開発環境専用）
' 警告: これらのメソッドは開発時のテスト目的でのみ使用し、
' 本番環境では使用しないでください。
' ======================
#If DEBUG Then
    ''' <summary>
    ''' モジュールの状態を初期化（テスト用）
    ''' </summary>
    Private Sub ResetModule()
        TerminateModule
        InitializeModule
    End Sub
#End If

================
File: ODBCConnectionStringBuilder.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "ODBCConnectionStringBuilder"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements IConnectionStringBuilder

' ======================
' メンバ変数
' ======================
Private mServer As String
Private mDatabase As String
Private mUserName As String
Private mPassword As String
Private mAdditionalParameters As String

' ======================
' IConnectionStringBuilder実装
' ======================
Private Function IConnectionStringBuilder_BuildConnectionString() As String
    Dim connectionString As String
    
    connectionString = "Driver={SQL Server};"
    
    ' サーバー名
    If Len(mServer) > 0 Then
        connectionString = connectionString & "Server=" & mServer & ";"
    End If
    
    ' データベース名
    If Len(mDatabase) > 0 Then
        connectionString = connectionString & "Database=" & mDatabase & ";"
    End If
    
    ' ユーザー名
    If Len(mUserName) > 0 Then
        connectionString = connectionString & "Uid=" & mUserName & ";"
    End If
    
    ' パスワード
    If Len(mPassword) > 0 Then
        connectionString = connectionString & "Pwd=" & mPassword & ";"
    End If
    
    ' 追加のパラメータ
    If Len(mAdditionalParameters) > 0 Then
        connectionString = connectionString & mAdditionalParameters
    End If
    
    IConnectionStringBuilder_BuildConnectionString = connectionString
End Function

Private Property Get IConnectionStringBuilder_Server() As String
    IConnectionStringBuilder_Server = mServer
End Property

Private Property Let IConnectionStringBuilder_Server(ByVal value As String)
    mServer = value
End Property

Private Property Get IConnectionStringBuilder_Database() As String
    IConnectionStringBuilder_Database = mDatabase
End Property

Private Property Let IConnectionStringBuilder_Database(ByVal value As String)
    mDatabase = value
End Property

Private Property Get IConnectionStringBuilder_UserName() As String
    IConnectionStringBuilder_UserName = mUserName
End Property

Private Property Let IConnectionStringBuilder_UserName(ByVal value As String)
    mUserName = value
End Property

Private Property Get IConnectionStringBuilder_Password() As String
    IConnectionStringBuilder_Password = mPassword
End Property

Private Property Let IConnectionStringBuilder_Password(ByVal value As String)
    mPassword = value
End Property

Private Property Get IConnectionStringBuilder_AdditionalParameters() As String
    IConnectionStringBuilder_AdditionalParameters = mAdditionalParameters
End Property

Private Property Let IConnectionStringBuilder_AdditionalParameters(ByVal value As String)
    mAdditionalParameters = value
End Property

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    mServer = ""
    mDatabase = ""
    mUserName = ""
    mPassword = ""
    mAdditionalParameters = ""
End Sub

================
File: OLEDBConnectionStringBuilder.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "OLEDBConnectionStringBuilder"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements IConnectionStringBuilder

' ======================
' メンバ変数
' ======================
Private mServer As String
Private mDatabase As String
Private mUserName As String
Private mPassword As String
Private mAdditionalParameters As String

' ======================
' IConnectionStringBuilder実装
' ======================
Private Function IConnectionStringBuilder_BuildConnectionString() As String
    Dim connectionString As String
    
    connectionString = "Provider=SQLOLEDB;"
    
    ' サーバー名
    If Len(mServer) > 0 Then
        connectionString = connectionString & "Data Source=" & mServer & ";"
    End If
    
    ' データベース名
    If Len(mDatabase) > 0 Then
        connectionString = connectionString & "Initial Catalog=" & mDatabase & ";"
    End If
    
    ' ユーザー名とパスワード
    If Len(mUserName) > 0 Then
        connectionString = connectionString & "User ID=" & mUserName & ";"
        If Len(mPassword) > 0 Then
            connectionString = connectionString & "Password=" & mPassword & ";"
        End If
    Else
        ' 統合認証を使用
        connectionString = connectionString & "Integrated Security=SSPI;"
    End If
    
    ' 追加のパラメータ
    If Len(mAdditionalParameters) > 0 Then
        connectionString = connectionString & mAdditionalParameters
    End If
    
    IConnectionStringBuilder_BuildConnectionString = connectionString
End Function

Private Property Get IConnectionStringBuilder_Server() As String
    IConnectionStringBuilder_Server = mServer
End Property

Private Property Let IConnectionStringBuilder_Server(ByVal value As String)
    mServer = value
End Property

Private Property Get IConnectionStringBuilder_Database() As String
    IConnectionStringBuilder_Database = mDatabase
End Property

Private Property Let IConnectionStringBuilder_Database(ByVal value As String)
    mDatabase = value
End Property

Private Property Get IConnectionStringBuilder_UserName() As String
    IConnectionStringBuilder_UserName = mUserName
End Property

Private Property Let IConnectionStringBuilder_UserName(ByVal value As String)
    mUserName = value
End Property

Private Property Get IConnectionStringBuilder_Password() As String
    IConnectionStringBuilder_Password = mPassword
End Property

Private Property Let IConnectionStringBuilder_Password(ByVal value As String)
    mPassword = value
End Property

Private Property Get IConnectionStringBuilder_AdditionalParameters() As String
    IConnectionStringBuilder_AdditionalParameters = mAdditionalParameters
End Property

Private Property Let IConnectionStringBuilder_AdditionalParameters(ByVal value As String)
    mAdditionalParameters = value
End Property

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    mServer = ""
    mDatabase = ""
    mUserName = ""
    mPassword = ""
    mAdditionalParameters = ""
End Sub

================
File: Directory_Structure.txt
================
# templatesディレクトリ構造

core/clsLogger.cls
core/clsPerformanceMonitor.cls
core/ConfigImpl.cls
core/ConsoleLogger.cls
core/DatabaseLogger.cls
core/DefaultLoggerSettings.cls
core/DefaultMessageFormatter.cls
core/EmergencyLogger.cls
core/ErrorHandlerManager.cls
core/ErrorImpl.cls
core/ErrorInfo.cls
core/EventLogImpl.cls
core/EventLogLogger.cls
core/FileLogger.cls
core/InvalidInputErrorHandler.cls
core/modAppInitializer.bas
core/modConfig.bas
core/modError.bas
core/modErrorCodes.bas
core/PerformanceCounterImpl.cls
core/PerformanceMonitorImpl.cls
core/README.md
core/repomix-output.txt
data/ConnectionPool.cls
data/DatabaseConnectionErrorHandler.cls
data/FileIOImpl.cls
data/FileNotFoundErrorHandler.cls
data/FileSystemOperations.cls
data/IniFileImpl.cls
data/modDatabaseUtils.bas
data/modFileIO.bas
data/ODBCConnectionStringBuilder.cls
data/OLEDBConnectionStringBuilder.cls
data/repomix-output.txt
Directory_Structure.txt
interfaces/CommonEnums.cls
interfaces/IAppConfig.cls
interfaces/IAsyncValidation.cls
interfaces/ICompositeValidationRule.cls
interfaces/IConnectionPool.cls
interfaces/IConnectionStringBuilder.cls
interfaces/ICryptography.cls
interfaces/IDatabaseConfig.cls
interfaces/IEmergencyLogger.cls
interfaces/IError.cls
interfaces/IErrorHandler.cls
interfaces/IErrorNotification.cls
interfaces/IErrorStrategy.cls
interfaces/IEventLog.cls
interfaces/IFileIO.cls
interfaces/IFileOperations.cls
interfaces/IIniFile.cls
interfaces/IKeyDerivationStrategy.cls
interfaces/ILock.cls
interfaces/ILogger.cls
interfaces/ILoggerSettings.cls
interfaces/IMessageFormatter.cls
interfaces/IMutex.cls
interfaces/IPerformanceCounter.cls
interfaces/IPerformanceMonitor.cls
interfaces/IQueue.cls
interfaces/IRegexEngine.cls
interfaces/ISleep.cls
interfaces/IStack.cls
interfaces/IStackTrace.cls
interfaces/IUserNotifier.cls
interfaces/IValidationContext.cls
interfaces/IValidationGroup.cls
interfaces/IValidationRule.cls
interfaces/IValidator.cls
interfaces/repomix-output.txt
security/clsCriticalSectionLock.cls
security/clsCrypto.cls
security/clsLock.cls
security/clsMutexLock.cls
security/clsSemaphoreLock.cls
security/CryptographyImpl.cls
security/MutexImpl.cls
security/MutexLock.cls
security/PBKDF2KeyDerivationStrategy.cls
security/repomix-output.txt
tests/MockDatabaseConfig.cls
tests/MockError.cls
tests/MockFileIO.cls
tests/MockLock.cls
tests/MockLogger.cls
tests/MockMessageFormatter.cls
tests/MockPerformanceMonitor.cls
tests/modTestRunner.bas
tests/modTestUtility.bas
tests/repomix-output.txt
tests/TestClsCrypto.cls
tests/TestConnectionPool.cls
tests/TestConsoleLogger.cls
tests/TestCriticalSectionLock.cls
tests/TestDatabaseLogger.cls
tests/TestDateValidator.cls
tests/TestDefaultMessageFormatter.cls
tests/TestEventLogLogger.cls
tests/TestFileLogger.cls
tests/TestFileSystemOperations.cls
tests/TestLogger.cls
tests/TestMsgBoxNotifier.cls
tests/TestMutexLock.cls
tests/TestSemaphoreLock.cls
tests/TestStringValidator.cls
utils/clsCallStack.cls
utils/modCommon.bas
utils/modDateUtils.bas
utils/modMathUtils.bas
utils/modStackTrace.bas
utils/modStringUtils.bas
utils/modWindowsAPI.bas
utils/ModWindowsAPIConverter.cls
utils/MsgBoxNotifier.cls
utils/QueueImpl.cls
utils/repomix-output.txt
utils/SleepImpl.cls
utils/StackImpl.cls
utils/StackTraceImpl.cls
utils/VBScriptRegexEngine.cls
validation/AllowFutureDateRule.cls
validation/AllowPastDateRule.cls
validation/DateValidator.cls
validation/MaxDateRule.cls
validation/MaxLengthRule.cls
validation/MinDateRule.cls
validation/MinLengthRule.cls
validation/PatternRule.cls
validation/repomix-output.txt
validation/StringValidator.cls

================
File: interfaces/CommonEnums.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "CommonEnums"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredefinedId = False
Attribute VB_Exposed = True
Option Explicit

'@Description("システム全体で使用される共通の列挙型を定義するクラス")

'@Description("ログレベルを定義する列挙型")
'@Remarks("ログの重要度を表し、フィルタリングやハンドリングの基準として使用")
Public Enum LogLevel
    llTrace = 0    ' 最も詳細なデバッグ情報（開発時のみ使用）
    llDebug = 1    ' デバッグ情報（開発・テスト環境で使用）
    llInfo = 2     ' 一般的な情報（通常の操作ログ）
    llWarning = 3  ' 警告（潜在的な問題）
    llError = 4    ' エラー（回復可能な問題）
    llFatal = 5    ' 致命的なエラー（システム停止レベルの問題）
End Enum

'@Description("エラー通知レベルを定義する列挙型")
'@Remarks("エラーの重大度に応じた通知方法の選択に使用")
Public Enum ErrorNotificationLevel
    enlNone = 0      ' 通知なし（ログも記録しない）
    enlSilent = 1    ' サイレント（ログのみ記録）
    enlInfo = 2      ' 情報（ユーザーに情報として通知）
    enlWarning = 3   ' 警告（ユーザーに警告として通知）
    enlError = 4     ' エラー（ユーザーにエラーとして通知）
    enlCritical = 5  ' 重大（即時通知が必要な重大な問題）
End Enum

'@Description("バリデーション優先度を定義する列挙型")
'@Remarks("バリデーションルールの実行順序の制御に使用")
Public Enum ValidationPriority
    vpLowest = 0    ' 最低優先度（他のすべての検証の後に実行）
    vpLow = 1       ' 低優先度（基本的な検証の後に実行）
    vpNormal = 2    ' 通常優先度（標準的な実行順序）
    vpHigh = 3      ' 高優先度（基本的な検証の前に実行）
    vpHighest = 4   ' 最高優先度（最初に実行される検証）
End Enum

'@Description("設定オプションを定義する列挙型")
'@Remarks("設定値の取得・設定時のオプションを指定")
Public Enum SettingOptions
    soNone = 0              ' オプションなし
    soEncrypt = 1           ' 設定値を暗号化する
    soValidate = 2          ' 設定値を検証する
    soLogHistory = 4        ' 設定変更履歴を記録する
    soCache = 8             ' 設定値をキャッシュする
    soEnvironmentSpecific = 16 ' 環境固有の設定として扱う
End Enum

'@Description("読み込みオプションを定義する列挙型")
'@Remarks("設定ファイルからの読み込み時のオプションを指定")
Public Enum LoadOptions
    loNone = 0              ' オプションなし
    loDecrypt = 1           ' 設定値を復号化する
    loValidate = 2          ' 設定値を検証する
    loApplyEnvironment = 4  ' 環境固有の設定を適用する
    loMerge = 8             ' 既存の設定とマージする
End Enum

'@Description("保存オプションを定義する列挙型")
'@Remarks("設定ファイルへの保存時のオプションを指定")
Public Enum SaveOptions
    soNone = 0              ' オプションなし
    soEncrypt = 1           ' 設定値を暗号化する
    soBackup = 2            ' 保存前にバックアップを作成する
    soFormat = 4            ' 設定ファイルを整形して保存する
    soAtomic = 8            ' アトミックな書き込みを行う
End Enum

'@Description("暗号化オプションを定義する列挙型")
'@Remarks("暗号化操作時のオプションを指定")
Public Enum EncryptionOptions
    eoNone = 0              ' オプションなし
    eoRotateKey = 1         ' 新しいキーで暗号化する
    eoReEncrypt = 2         ' 既存の設定を新しいキーで再暗号化する
    eoSetKeyVersion = 4     ' キーバージョンを設定する
End Enum

'@Description("環境オプションを定義する列挙型")
'@Remarks("環境設定時のオプションを指定")
Public Enum EnvironmentOptions
    enoNone = 0             ' オプションなし
    enoReload = 1           ' 環境変更時に設定を再読み込みする
    enoValidate = 2         ' 環境変更時に設定を検証する
    enoNotify = 4           ' 環境変更を通知する
End Enum

'@Description("検証オプションを定義する列挙型")
'@Remarks("設定値の検証時のオプションを指定")
Public Enum ValidationOptions
    voNone = 0              ' オプションなし
    voFull = 1              ' すべての設定を検証する
    voChangedOnly = 2       ' 変更された設定のみ検証する
    voEnvironment = 4       ' 環境固有の設定を検証する
    voDataType = 8          ' データ型の検証を行う
    voRange = 16            ' 値の範囲を検証する
    voDependency = 32       ' 依存関係を検証する
End Enum

'@Description("履歴オプションを定義する列挙型")
'@Remarks("設定履歴の取得時のオプションを指定")
Public Enum HistoryOptions
    hoNone = 0              ' オプションなし
    hoLimit = 1             ' 取得する履歴の数を制限する
    hoSort = 2              ' 履歴をソートする
    hoFilter = 4            ' 履歴をフィルタリングする
End Enum

'@Description("復元オプションを定義する列挙型")
'@Remarks("バックアップからの復元時のオプションを指定")
Public Enum RestoreOptions
    roNone = 0              ' オプションなし
    roValidate = 1          ' 復元前に設定を検証する
    roMerge = 2             ' 既存の設定とマージする
    roNotify = 4            ' 復元を通知する
End Enum

'@Description("バリデーション状態を定義する列挙型")
'@Remarks("バリデーションの現在の実行状態を表す")
Public Enum ValidationState
    vsNotStarted = 0   ' 未開始
    vsPending = 1      ' 保留中
    vsRunning = 2      ' 実行中
    vsPaused = 3       ' 一時停止
    vsCompleted = 4    ' 完了
    vsFailed = 5       ' 失敗
    vsCancelled = 6    ' キャンセル
End Enum

'@Description("パフォーマンスメトリクスの種類を定義する列挙型")
'@Remarks("システムの各種パフォーマンス指標を表す")
Public Enum MetricType
    mtResponseTime = 0   ' 応答時間
    mtThroughput = 1    ' スループット
    mtErrorRate = 2     ' エラー率
    mtResourceUsage = 3  ' リソース使用率
    mtQueueLength = 4   ' キュー長
    mtLatency = 5       ' レイテンシ
End Enum

================
File: interfaces/IAppConfig.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IAppConfig"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredefinedId = False
Attribute VB_Exposed = True
Option Explicit

'@Description("アプリケーション設定を管理するインターフェース")
'@Remarks("設定の読み書き、暗号化、バリデーション、バックアップ/復元などの機能を提供")

'@Description("設定値を取得する")
'@Param("settingName: 設定名")
'@Param("options: 取得時のオプション（SettingOptions）")
'@Return("設定値（Variant型）")
Public Function GetSetting(ByVal settingName As String, Optional ByVal options As SettingOptions = soNone) As Variant
End Function

'@Description("設定値を設定する")
'@Param("settingName: 設定名")
'@Param("settingValue: 設定値")
'@Param("options: 設定時のオプション（SettingOptions）")
Public Sub SetSetting(ByVal settingName As String, ByVal settingValue As Variant, Optional ByVal options As SettingOptions = soNone)
End Sub

'@Description("設定ファイルから設定を読み込む")
'@Param("filePath: 設定ファイルのパス")
'@Param("options: 読み込み時のオプション（LoadOptions）")
Public Sub LoadSettings(ByVal filePath As String, Optional ByVal options As LoadOptions = loNone)
End Sub

'@Description("設定をファイルに保存する")
'@Param("filePath: 保存先ファイルパス")
'@Param("options: 保存時のオプション（SaveOptions）")
Public Sub SaveSettings(ByVal filePath As String, Optional ByVal options As SaveOptions = soNone)
End Sub

'@Description("設定の暗号化キーを設定する")
'@Param("encryptionKey: 暗号化キー")
'@Param("options: 暗号化オプション（EncryptionOptions）")
Public Sub SetEncryptionKey(ByVal encryptionKey As String, Optional ByVal options As EncryptionOptions = eoNone)
End Sub

'@Description("現在の環境を設定する")
'@Param("environment: 環境名（dev/test/prod等）")
'@Param("options: 環境設定オプション（EnvironmentOptions）")
Public Sub SetEnvironment(ByVal environment As String, Optional ByVal options As EnvironmentOptions = enoNone)
End Sub

'@Description("設定値を検証する")
'@Param("options: 検証オプション（ValidationOptions）")
'@Return("検証結果（ValidationResult型）")
Public Function ValidateSettings(Optional ByVal options As ValidationOptions = voNone) As ValidationResult
End Function

'@Description("設定の変更履歴を取得する")
'@Param("settingName: 設定名（省略可）")
'@Param("options: 履歴取得オプション（HistoryOptions）")
'@Return("設定変更履歴のコレクション")
Public Function GetSettingHistory(Optional ByVal settingName As String, Optional ByVal options As HistoryOptions = hoNone) As Collection
End Function

'@Description("設定のバックアップを作成する")
'@Param("backupPath: バックアップファイルのパス")
'@Return("バックアップの成功可否")
Public Function CreateBackup(ByVal backupPath As String) As Boolean
End Function

'@Description("バックアップから設定を復元する")
'@Param("backupPath: バックアップファイルのパス")
'@Param("options: 復元オプション（RestoreOptions）")
'@Return("復元の成功可否")
Public Function RestoreFromBackup(ByVal backupPath As String, Optional ByVal options As RestoreOptions = roNone) As Boolean
End Function

'@Description("パフォーマンスメトリクスを取得する")
'@Return("パフォーマンスメトリクスのコレクション")
Public Function GetPerformanceMetrics() As Collection
End Function

' プロパティ定義
'@Description("ログファイルパス")
Public Property Get LogFilePath() As String
End Property
Public Property Let LogFilePath(ByVal value As String)
End Property

'@Description("ログレベル")
Public Property Get LogLevel() As LogLevel
End Property
Public Property Let LogLevel(ByVal value As LogLevel)
End Property

'@Description("最大リトライ回数")
Public Property Get MaxRetryCount() As Long
End Property
Public Property Let MaxRetryCount(ByVal value As Long)
End Property

'@Description("最大スタック深度")
Public Property Get MaxStackDepth() As Long
End Property
Public Property Let MaxStackDepth(ByVal value As Long)
End Property

'@Description("タイマー間隔（ミリ秒）")
Public Property Get TimerInterval() As Long
End Property
Public Property Let TimerInterval(ByVal value As Long)
End Property

'@Description("ログイベントソース")
Public Property Get LogEventSource() As String
End Property
Public Property Let LogEventSource(ByVal value As String)
End Property

'@Description("パフォーマンス監視の有効/無効")
Public Property Get PerformanceMonitoringEnabled() As Boolean
End Property
Public Property Let PerformanceMonitoringEnabled(ByVal value As Boolean)
End Property

'@Description("診断機能の有効/無効")
Public Property Get DiagnosticsEnabled() As Boolean
End Property
Public Property Let DiagnosticsEnabled(ByVal value As Boolean)
End Property

'@Description("自動保存の有効/無効")
Public Property Get AutoSave() As Boolean
End Property
Public Property Let AutoSave(ByVal value As Boolean)
End Property

'@Description("現在の環境名")
Public Property Get CurrentEnvironment() As String
End Property

'@Description("暗号化キーのバージョン")
Public Property Get EncryptionKeyVersion() As String
End Property

================
File: interfaces/IAsyncValidation.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IAsyncValidation"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredefinedId = False
Attribute VB_Exposed = True
Option Explicit

'@Description("非同期バリデーションの実行と管理を担当するインターフェース")

' 定数定義
Private Const DEFAULT_TIMEOUT_MS As Long = 30000        ' デフォルトタイムアウト時間（30秒）
Private Const MAX_CONCURRENT_TASKS As Long = 10         ' 最大同時実行タスク数
Private Const MIN_BATCH_SIZE As Long = 100              ' 最小バッチサイズ
Private Const MAX_QUEUE_SIZE As Long = 1000             ' 最大キューサイズ
Private Const CACHE_DURATION_MS As Long = 300000        ' キャッシュ有効期間（5分）
Private Const RETRY_INTERVAL_MS As Long = 1000          ' リトライ間隔（1秒）
Private Const MAX_RETRY_COUNT As Long = 3               ' 最大リトライ回数

' イベント定義
Public Event ValidationStarted(ByVal validationId As String, ByVal context As IValidationContext, ByVal executionPlan As ValidationExecutionPlan)
Public Event ValidationProgress(ByVal validationId As String, ByVal progressPercentage As Long, ByVal currentOperation As String, ByVal estimatedTimeRemaining As Long)
Public Event ValidationCompleted(ByVal validationId As String, ByVal success As Boolean, ByVal results As Collection, ByVal metrics As ValidationMetrics)
Public Event ValidationError(ByVal validationId As String, ByVal errorInfo As ErrorInfo, ByVal retryCount As Long)
Public Event ValidationCancelled(ByVal validationId As String, ByVal reason As String)
Public Event ResourceExhausted(ByVal validationId As String, ByVal resourceType As String, ByVal currentUsage As Long)
Public Event ValidationQueued(ByVal validationId As String, ByVal queuePosition As Long, ByVal estimatedWaitTime As Long)
Public Event BatchProcessingStarted(ByVal batchId As String, ByVal itemCount As Long)
Public Event BatchProcessingCompleted(ByVal batchId As String, ByVal successCount As Long, ByVal failureCount As Long)
Public Event PerformanceAlert(ByVal validationId As String, ByVal metricType As String, ByVal currentValue As Double, ByVal threshold As Double)
Public Event CacheUpdated(ByVal validationId As String, ByVal isCached As Boolean, ByVal cacheSize As Long)
Public Event StateChanged(ByVal validationId As String, ByVal oldState As ValidationState, ByVal newState As ValidationState)

''' <summary>
''' 非同期バリデーションを開始します
''' </summary>
''' <param name="value">検証する値</param>
''' <param name="context">バリデーションコンテキスト</param>
''' <param name="priority">実行優先度（オプション）</param>
''' <param name="options">実行オプション（オプション）</param>
''' <returns>バリデーションID（キャンセル時に使用）</returns>
''' <remarks>
''' エラー処理要件：
''' - パラメータの検証
''' - リソースの可用性確認
''' - 同時実行数の制限
''' - タイムアウト設定
''' - キューの管理
''' - メモリ使用量の監視
''' - キャッシュの活用
''' </remarks>
Public Function StartAsyncValidation(ByVal value As Variant, ByVal context As IValidationContext, Optional ByVal priority As ValidationPriority = vpNormal, Optional ByVal options As AsyncValidationOptions) As String
End Function

''' <summary>
''' バッチバリデーションを開始します
''' </summary>
''' <param name="items">検証するアイテムのコレクション</param>
''' <param name="context">バリデーションコンテキスト</param>
''' <param name="options">バッチオプション（オプション）</param>
''' <returns>バッチID</returns>
Public Function StartBatchValidation(ByVal items As Collection, ByVal context As IValidationContext, Optional ByVal options As BatchValidationOptions) As String
End Function

''' <summary>
''' 非同期バリデーションをキャンセルします
''' </summary>
''' <param name="validationId">バリデーションID</param>
''' <param name="gracefulShutdown">グレースフルシャットダウンを試みるかどうか</param>
''' <param name="options">キャンセルオプション（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - IDの有効性確認
''' - リソースの適切な解放
''' - 実行中の処理の安全な停止
''' - 依存タスクの処理
''' - キャッシュの更新
''' - メトリクスの記録
''' </remarks>
Public Sub CancelValidation(ByVal validationId As String, Optional ByVal gracefulShutdown As Boolean = True, Optional ByVal options As CancellationOptions)
End Sub

''' <summary>
''' バリデーションの状態を取得します
''' </summary>
''' <param name="validationId">バリデーションID</param>
''' <param name="includeDetails">詳細情報を含めるかどうか</param>
''' <returns>現在の状態情報</returns>
Public Function GetValidationStatus(ByVal validationId As String, Optional ByVal includeDetails As Boolean = False) As ValidationStatus
End Function

''' <summary>
''' タイムアウト時間を設定します
''' </summary>
''' <param name="milliseconds">タイムアウト時間（ミリ秒）</param>
''' <remarks>
''' エラー処理要件：
''' - 値の範囲チェック
''' - 実行中の処理への影響考慮
''' - タイムアウト処理の整合性確認
''' - デフォルト値の適用
''' </remarks>
Public Property Let TimeoutMilliseconds(ByVal milliseconds As Long)
End Property

''' <summary>
''' タイムアウト時間を取得します
''' </summary>
Public Property Get TimeoutMilliseconds() As Long
End Property

''' <summary>
''' 最大同時実行数を設定します
''' </summary>
''' <param name="count">最大同時実行数</param>
''' <remarks>
''' エラー処理要件：
''' - 値の範囲チェック
''' - システムリソースの考慮
''' - 実行中タスクへの影響評価
''' - スケーリングの適用
''' </remarks>
Public Property Let MaxConcurrentValidations(ByVal count As Long)
End Property

''' <summary>
''' 最大同時実行数を取得します
''' </summary>
Public Property Get MaxConcurrentValidations() As Long
End Property

''' <summary>
''' 進捗通知の間隔を設定します
''' </summary>
''' <param name="milliseconds">通知間隔（ミリ秒）</param>
''' <remarks>
''' エラー処理要件：
''' - 値の範囲チェック
''' - パフォーマンスへの影響考慮
''' - イベント発行の最適化
''' - バッチ処理の考慮
''' </remarks>
Public Property Let ProgressNotificationInterval(ByVal milliseconds As Long)
End Property

''' <summary>
''' 進捗通知の間隔を取得します
''' </summary>
Public Property Get ProgressNotificationInterval() As Long
End Property

''' <summary>
''' すべての非同期バリデーションを待機します
''' </summary>
''' <param name="timeoutMilliseconds">タイムアウト時間（ミリ秒）</param>
''' <param name="options">待機オプション（オプション）</param>
''' <returns>すべての処理が完了した場合True</returns>
''' <remarks>
''' エラー処理要件：
''' - タイムアウト処理
''' - リソースの監視
''' - デッドロック防止
''' - 部分的な完了の処理
''' - キャンセル処理
''' </remarks>
Public Function WaitForAll(Optional ByVal timeoutMilliseconds As Long = -1, Optional ByVal options As WaitOptions) As Boolean
End Function

''' <summary>
''' 実行中のバリデーションの一覧を取得します
''' </summary>
''' <param name="filter">フィルタ条件（オプション）</param>
''' <returns>実行中のバリデーションIDのコレクション</returns>
Public Function GetRunningValidations(Optional ByVal filter As ValidationFilter) As Collection
End Function

''' <summary>
''' バリデーション結果を非同期で取得します
''' </summary>
''' <param name="validationId">バリデーションID</param>
''' <param name="options">取得オプション（オプション）</param>
''' <returns>バリデーション結果（完了していない場合はNothing）</returns>
Public Function TryGetResults(ByVal validationId As String, Optional ByVal options As ResultOptions) As Variant
End Function

''' <summary>
''' バリデーションキューの状態を取得します
''' </summary>
''' <param name="includeMetrics">メトリクスを含めるかどうか</param>
''' <returns>キューの状態情報</returns>
Public Function GetQueueStatus(Optional ByVal includeMetrics As Boolean = False) As ValidationQueueStatus
End Function

''' <summary>
''' バリデーションの優先度を変更します
''' </summary>
''' <param name="validationId">バリデーションID</param>
''' <param name="newPriority">新しい優先度</param>
''' <param name="options">優先度変更オプション（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - IDの有効性確認
''' - 優先度の範囲チェック
''' - キューの再構築
''' - 実行中タスクへの影響考慮
''' </remarks>
Public Sub ChangePriority(ByVal validationId As String, ByVal newPriority As ValidationPriority, Optional ByVal options As PriorityOptions)
End Sub

''' <summary>
''' エラー発生時のリトライ戦略を設定します
''' </summary>
''' <param name="strategy">リトライ戦略</param>
Public Property Let RetryStrategy(ByVal strategy As IErrorStrategy)
End Property

''' <summary>
''' エラー発生時のリトライ戦略を取得します
''' </summary>
Public Property Get RetryStrategy() As IErrorStrategy
End Property

''' <summary>
''' バリデーション結果の永続化を設定します
''' </summary>
''' <param name="enabled">永続化を有効にするかどうか</param>
''' <param name="options">永続化オプション（オプション）</param>
Public Property Let PersistResults(ByVal enabled As Boolean, Optional ByVal options As PersistenceOptions)
End Property

''' <summary>
''' バリデーション結果の永続化状態を取得します
''' </summary>
Public Property Get PersistResults() As Boolean
End Property

''' <summary>
''' リソース使用量の制限を設定します
''' </summary>
''' <param name="resourceType">リソースの種類</param>
''' <param name="limit">制限値</param>
''' <param name="options">リソース制限オプション（オプション）</param>
Public Sub SetResourceLimit(ByVal resourceType As String, ByVal limit As Long, Optional ByVal options As ResourceLimitOptions)
End Sub

''' <summary>
''' リソース使用量の制限を取得します
''' </summary>
''' <param name="resourceType">リソースの種類</param>
Public Function GetResourceLimit(ByVal resourceType As String) As Long
End Function

''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
''' <returns>パフォーマンス情報のコレクション</returns>
Public Function GetPerformanceMetrics() As Collection
End Function

''' <summary>
''' キャッシュ戦略を設定します
''' </summary>
''' <param name="strategy">キャッシュ戦略</param>
Public Property Let CacheStrategy(ByVal strategy As IValidationCacheStrategy)
End Property

''' <summary>
''' スケジューリング戦略を設定します
''' </summary>
''' <param name="strategy">スケジューリング戦略</param>
Public Property Let SchedulingStrategy(ByVal strategy As IValidationSchedulingStrategy)
End Property

================
File: interfaces/ICompositeValidationRule.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "ICompositeValidationRule"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredefinedId = False
Attribute VB_Exposed = True
Option Explicit

'@Description("複数のバリデーションルールを組み合わせて高度な検証ロジックを実現するインターフェース")

' 定数定義
Private Const MAX_RULES As Long = 100            ' 1つの複合ルールに含められる最大ルール数
Private Const MAX_DEPTH As Long = 10             ' 複合ルールのネスト最大深度
Private Const PARALLEL_THRESHOLD As Long = 5      ' 並列実行を検討する最小ルール数
Private Const CACHE_DURATION_MS As Long = 300000  ' キャッシュの有効期間（5分）

' イベント定義
Public Event RuleAdded(ByVal rule As IValidationRule, ByVal priority As ValidationPriority)
Public Event RuleRemoved(ByVal rule As IValidationRule)
Public Event ValidationStarted(ByVal context As IValidationContext, ByVal executionPlan As ValidationExecutionPlan)
Public Event ValidationCompleted(ByVal context As IValidationContext, ByVal success As Boolean, ByVal results As Collection)
Public Event ValidationProgress(ByVal completedRules As Long, ByVal totalRules As Long)
Public Event RuleDependencyChanged(ByVal dependentRule As IValidationRule, ByVal dependencyRule As IValidationRule)
Public Event ExecutionOrderChanged(ByVal newOrder As Collection)
Public Event RuleGroupCreated(ByVal groupName As String, ByVal group As IValidationGroup)
Public Event ValidationError(ByVal errorInfo As ErrorInfo)
Public Event ResourceExhausted(ByVal resourceType As String, ByVal currentUsage As Long)
Public Event CacheUpdated(ByVal ruleId As String, ByVal isCached As Boolean)
Public Event PerformanceAlert(ByVal metricType As String, ByVal currentValue As Double, ByVal threshold As Double)

''' <summary>
''' バリデーションルールを追加します
''' </summary>
''' <param name="rule">追加するルール</param>
''' <param name="priority">優先順位（オプション）</param>
''' <param name="options">追加オプション（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - ルールの有効性確認
''' - 循環参照の検出
''' - メモリ使用量の監視
''' - 重複ルールの検出
''' - 最大ルール数の制限
''' - ネスト深度の制限
''' 
''' 実装時の注意点：
''' 1. ルールの優先順位を考慮すること
''' 2. ルール間の依存関係を管理すること
''' 3. パフォーマンスへの影響を考慮すること
''' 4. イベントを適切に発行すること
''' 5. キャッシュ戦略を適用すること
''' </remarks>
Public Sub AddRule(ByVal rule As IValidationRule, Optional ByVal priority As ValidationPriority = vpNormal, Optional ByVal options As ValidationRuleOptions)
End Sub

''' <summary>
''' バリデーションルールを削除します
''' </summary>
''' <param name="rule">削除するルール</param>
''' <param name="cleanupOptions">クリーンアップオプション（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - 存在しないルールの処理
''' - 依存関係の更新
''' - リソースの適切な解放
''' - イベントの適切な発行
''' - キャッシュの更新
''' - 実行中の検証への影響考慮
''' </remarks>
Public Sub RemoveRule(ByVal rule As IValidationRule, Optional ByVal cleanupOptions As ValidationCleanupOptions)
End Sub

''' <summary>
''' ルールの優先順位を設定します
''' </summary>
''' <param name="rule">対象ルール</param>
''' <param name="priority">優先順位</param>
''' <param name="options">優先順位オプション（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - ルールの存在確認
''' - 優先順位の範囲チェック
''' - 優先順位の一意性確保
''' - 依存関係との整合性確認
''' - 実行順序の再計算
''' - イベントの発行
''' </remarks>
Public Sub SetRulePriority(ByVal rule As IValidationRule, ByVal priority As ValidationPriority, Optional ByVal options As ValidationPriorityOptions)
End Sub

''' <summary>
''' バリデーション結果の詳細を取得します
''' </summary>
''' <param name="filter">フィルタ条件（オプション）</param>
''' <returns>バリデーション結果のコレクション</returns>
''' <remarks>
''' エラー処理要件：
''' - 結果の整合性確認
''' - メモリ使用量の最適化
''' - エラー情報の集約
''' - 結果の優先順位付け
''' - キャッシュの活用
''' - パフォーマンスの最適化
''' </remarks>
Public Function GetValidationDetails(Optional ByVal filter As ValidationResultFilter) As Collection
End Function

''' <summary>
''' すべてのルールをクリアします
''' </summary>
''' <param name="options">クリアオプション（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - リソースの適切な解放
''' - 状態の整合性維持
''' - 進行中の検証への影響考慮
''' - イベントの適切な発行
''' - キャッシュのクリア
''' - メモリの最適化
''' </remarks>
Public Sub ClearRules(Optional ByVal options As ValidationClearOptions)
End Sub

''' <summary>
''' ルール間の依存関係を設定します
''' </summary>
''' <param name="dependentRule">依存するルール</param>
''' <param name="dependencyRule">依存されるルール</param>
''' <param name="dependencyType">依存関係の種類</param>
''' <param name="options">依存関係オプション（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - 循環依存の検出
''' - ルールの存在確認
''' - 依存関係の整合性確認
''' - 依存関係の種類の検証
''' - 実行順序への影響確認
''' - パフォーマンスへの影響考慮
''' </remarks>
Public Sub SetRuleDependency(ByVal dependentRule As IValidationRule, ByVal dependencyRule As IValidationRule, Optional ByVal dependencyType As DependencyType = dtRequired, Optional ByVal options As ValidationDependencyOptions)
End Sub

''' <summary>
''' 指定したルールの依存関係を取得します
''' </summary>
''' <param name="rule">対象ルール</param>
''' <param name="options">取得オプション（オプション）</param>
''' <returns>依存関係のコレクション</returns>
Public Function GetRuleDependencies(ByVal rule As IValidationRule, Optional ByVal options As ValidationDependencyOptions) As Collection
End Function

''' <summary>
''' ルールの実行順序を取得します
''' </summary>
''' <param name="optimizationStrategy">最適化戦略（オプション）</param>
''' <returns>実行順序に並べられたルールのコレクション</returns>
''' <remarks>
''' - 優先順位と依存関係を考慮した実行順序
''' - 循環依存がある場合はエラー
''' - パフォーマンスの最適化
''' - 並列実行の可能性を考慮
''' - キャッシュの活用
''' - リソース使用量の監視
''' </remarks>
Public Function GetExecutionOrder(Optional ByVal optimizationStrategy As ValidationOptimizationStrategy = vosDefault) As Collection
End Function

''' <summary>
''' 複合ルールの検証を実行します
''' </summary>
''' <param name="value">検証する値</param>
''' <param name="context">バリデーションコンテキスト</param>
''' <param name="options">実行オプション（オプション）</param>
''' <returns>すべてのルールが成功した場合True</returns>
''' <remarks>
''' エラー処理要件：
''' - 部分的な失敗の処理
''' - タイムアウト処理
''' - リソースの監視
''' - イベントの適切な発行
''' - 非同期実行の管理
''' - パフォーマンスの最適化
''' </remarks>
Public Function ValidateComposite(ByVal value As Variant, ByVal context As IValidationContext, Optional ByVal options As ValidationExecutionOptions) As Boolean
End Function

''' <summary>
''' 非同期検証をサポートしているかどうかを取得します
''' </summary>
Public Property Get SupportsAsyncValidation() As Boolean
End Property

''' <summary>
''' 並列検証をサポートしているかどうかを取得します
''' </summary>
Public Property Get SupportsParallelValidation() As Boolean
End Property

''' <summary>
''' ルールグループを作成します
''' </summary>
''' <param name="groupName">グループ名</param>
''' <param name="options">グループオプション（オプション）</param>
''' <returns>作成されたルールグループ</returns>
''' <remarks>
''' エラー処理要件：
''' - グループ名の一意性確認
''' - リソースの確保
''' - メモリ使用量の監視
''' - グループ数の制限
''' - イベントの発行
''' </remarks>
Public Function CreateRuleGroup(ByVal groupName As String, Optional ByVal options As ValidationGroupOptions) As IValidationGroup
End Function

''' <summary>
''' ルールをグループに追加します
''' </summary>
''' <param name="rule">追加するルール</param>
''' <param name="groupName">グループ名</param>
''' <param name="options">追加オプション（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - グループの存在確認
''' - ルールの有効性確認
''' - 重複の防止
''' - グループサイズの制限
''' - イベントの発行
''' </remarks>
Public Sub AddRuleToGroup(ByVal rule As IValidationRule, ByVal groupName As String, Optional ByVal options As ValidationGroupOptions)
End Sub

''' <summary>
''' 検証の進行状況を取得します
''' </summary>
Public Property Get Progress() As Long
End Property

''' <summary>
''' キャンセル状態を設定/取得します
''' </summary>
Public Property Get IsCancellationRequested() As Boolean
End Property

Public Property Let IsCancellationRequested(ByVal value As Boolean)
End Property

''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
''' <returns>パフォーマンス情報のコレクション</returns>
Public Function GetPerformanceMetrics() As Collection
End Function

''' <summary>
''' リソース使用状況を取得します
''' </summary>
''' <returns>リソース使用情報のコレクション</returns>
Public Function GetResourceUsage() As Collection
End Function

''' <summary>
''' キャッシュ戦略を設定します
''' </summary>
''' <param name="strategy">キャッシュ戦略</param>
Public Property Let CacheStrategy(ByVal strategy As IValidationCacheStrategy)
End Property

''' <summary>
''' 最適化戦略を設定します
''' </summary>
''' <param name="strategy">最適化戦略</param>
Public Property Let OptimizationStrategy(ByVal strategy As IValidationOptimizationStrategy)
End Property

================
File: interfaces/IConnectionPool.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IConnectionPool"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

'@Description("データベース接続プールを管理し、接続の効率的な再利用と監視を提供するインターフェース")

' 定数定義
Private Const DEFAULT_MAX_CONNECTIONS As Long = 100    ' デフォルトの最大接続数
Private Const MIN_CONNECTIONS As Long = 5              ' 最小接続数
Private Const DEFAULT_TIMEOUT_MS As Long = 30000       ' デフォルトのタイムアウト時間（30秒）
Private Const MAX_RETRY_COUNT As Long = 3              ' 最大リトライ回数
Private Const CLEANUP_INTERVAL_MS As Long = 300000     ' クリーンアップ間隔（5分）
Private Const IDLE_TIMEOUT_MS As Long = 600000         ' アイドルタイムアウト（10分）
Private Const VALIDATION_INTERVAL_MS As Long = 60000   ' 検証間隔（1分）

' イベント定義
Public Event ConnectionAcquired(ByVal connectionId As String, ByVal waitTime As Long)
Public Event ConnectionReleased(ByVal connectionId As String, ByVal usageTime As Long)
Public Event ConnectionCreated(ByVal connectionId As String)
Public Event ConnectionClosed(ByVal connectionId As String)
Public Event PoolExhausted(ByVal waitingRequests As Long)
Public Event ConnectionValidated(ByVal connectionId As String, ByVal isValid As Boolean)
Public Event PerformanceAlert(ByVal metricType As String, ByVal currentValue As Double, ByVal threshold As Double)
Public Event ConnectionError(ByVal errorInfo As ErrorInfo)

''' <summary>
''' データベース接続を取得します
''' </summary>
''' <param name="options">取得オプション（オプション）</param>
''' <returns>データベース接続オブジェクト</returns>
''' <remarks>
''' エラー処理要件：
''' - 接続の有効性確認
''' - プール上限チェック
''' - タイムアウト処理
''' - 再接続ロジック
''' - 接続の検証
''' - デッドロック防止
''' - リソースの監視
''' </remarks>
Public Function AcquireConnection(Optional ByVal options As ConnectionOptions) As Object
End Function

''' <summary>
''' データベース接続をプールに返却します
''' </summary>
''' <param name="connection">返却する接続オブジェクト</param>
''' <param name="options">返却オプション（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - 接続の状態確認
''' - トランザクション状態の確認
''' - リソースの適切な解放
''' - プールの状態管理
''' - 接続の再利用可否判定
''' </remarks>
Public Sub ReleaseConnection(ByVal connection As Object, Optional ByVal options As ReleaseOptions)
End Sub

''' <summary>
''' 接続プールを初期化します
''' </summary>
''' <param name="initialSize">初期接続数</param>
''' <param name="options">初期化オプション（オプション）</param>
Public Sub Initialize(ByVal initialSize As Long, Optional ByVal options As InitializationOptions)
End Sub

''' <summary>
''' 接続プールをクリーンアップします
''' </summary>
''' <param name="options">クリーンアップオプション（オプション）</param>
Public Sub Cleanup(Optional ByVal options As CleanupOptions)
End Sub

''' <summary>
''' 接続の有効性を検証します
''' </summary>
''' <param name="connection">検証する接続</param>
''' <returns>有効な場合True</returns>
Public Function ValidateConnection(ByVal connection As Object) As Boolean
End Function

''' <summary>
''' プールの状態を取得します
''' </summary>
''' <returns>プールの状態情報</returns>
Public Function GetPoolStatus() As ConnectionPoolStatus
End Function

''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
''' <returns>パフォーマンス情報のコレクション</returns>
Public Function GetPerformanceMetrics() As Collection
End Function

''' <summary>
''' 接続プールの設定を更新します
''' </summary>
''' <param name="settings">プール設定</param>
Public Sub UpdatePoolSettings(ByVal settings As ConnectionPoolSettings)
End Sub

''' <summary>
''' アイドル接続をクリーンアップします
''' </summary>
''' <param name="idleTimeout">アイドルタイムアウト時間（ミリ秒）</param>
Public Sub CleanupIdleConnections(Optional ByVal idleTimeout As Long = IDLE_TIMEOUT_MS)
End Sub

' プロパティ定義

''' <summary>
''' 現在のアクティブな接続数を取得します
''' </summary>
Public Property Get ActiveConnections() As Long
End Property

''' <summary>
''' プールの最大接続数を取得または設定します
''' </summary>
Public Property Get MaxConnections() As Long
End Property

Public Property Let MaxConnections(ByVal value As Long)
End Property

''' <summary>
''' 接続タイムアウト時間を取得または設定します（ミリ秒）
''' </summary>
Public Property Get ConnectionTimeout() As Long
End Property

Public Property Let ConnectionTimeout(ByVal value As Long)
End Property

''' <summary>
''' アイドル接続数を取得します
''' </summary>
Public Property Get IdleConnections() As Long
End Property

''' <summary>
''' 待機中のリクエスト数を取得します
''' </summary>
Public Property Get WaitingRequests() As Long
End Property

''' <summary>
''' プールの状態を検証します
''' </summary>
''' <returns>有効な場合True</returns>
Public Function Validate() As Boolean
End Function

''' <summary>
''' リソースを解放します
''' </summary>
Public Sub Dispose()
End Sub

================
File: interfaces/IConnectionStringBuilder.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IConnectionStringBuilder"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

'@Description("データベース接続文字列の安全な生成と管理を提供するインターフェース")

' 定数定義
Private Const MAX_SERVER_LENGTH As Long = 255      ' サーバー名の最大長
Private Const MAX_DATABASE_LENGTH As Long = 255    ' データベース名の最大長
Private Const MAX_USERNAME_LENGTH As Long = 128    ' ユーザー名の最大長
Private Const MAX_PASSWORD_LENGTH As Long = 128    ' パスワードの最大長
Private Const DEFAULT_TIMEOUT As Long = 30         ' デフォルトのタイムアウト（秒）
Private Const MAX_RETRY_COUNT As Long = 3          ' 最大リトライ回数
Private Const CACHE_DURATION_MS As Long = 300000   ' キャッシュの有効期間（5分）

' イベント定義
Public Event ConnectionStringBuilt(ByVal connectionString As String, ByVal isEncrypted As Boolean)
Public Event ParameterChanged(ByVal parameterName As String, ByVal oldValue As String, ByVal newValue As String)
Public Event ValidationError(ByVal parameterName As String, ByVal errorMessage As String)
Public Event SecurityAlert(ByVal alertType As String, ByVal details As String)
Public Event ConnectionTested(ByVal success As Boolean, ByVal errorMessage As String)
Public Event EncryptionKeyRotated(ByVal keyVersion As String)
Public Event ConfigurationLoaded(ByVal source As String, ByVal success As Boolean)

''' <summary>
''' データベース接続文字列を生成します
''' </summary>
''' <param name="options">生成オプション（オプション）</param>
''' <returns>生成された接続文字列</returns>
''' <remarks>
''' エラー処理要件：
''' - パラメータの検証
''' - セキュリティチェック
''' - 文字列の整形
''' - 暗号化処理
''' </remarks>
Public Function BuildConnectionString(Optional ByVal options As ConnectionStringOptions) As String
End Function

''' <summary>
''' 接続文字列をパースします
''' </summary>
''' <param name="connectionString">接続文字列</param>
''' <param name="options">パースオプション（オプション）</param>
Public Sub ParseConnectionString(ByVal connectionString As String, Optional ByVal options As ParseOptions)
End Sub

''' <summary>
''' 接続文字列を暗号化します
''' </summary>
''' <param name="connectionString">接続文字列</param>
''' <param name="options">暗号化オプション（オプション）</param>
''' <returns>暗号化された接続文字列</returns>
Public Function EncryptConnectionString(ByVal connectionString As String, Optional ByVal options As EncryptionOptions) As String
End Function

''' <summary>
''' 接続文字列を復号化します
''' </summary>
''' <param name="encryptedString">暗号化された接続文字列</param>
''' <param name="options">復号化オプション（オプション）</param>
''' <returns>復号化された接続文字列</returns>
Public Function DecryptConnectionString(ByVal encryptedString As String, Optional ByVal options As DecryptionOptions) As String
End Function

''' <summary>
''' 接続をテストします
''' </summary>
''' <param name="options">テストオプション（オプション）</param>
''' <returns>テスト結果</returns>
Public Function TestConnection(Optional ByVal options As TestOptions) As TestResult
End Function

''' <summary>
''' 設定を検証します
''' </summary>
''' <param name="options">検証オプション（オプション）</param>
''' <returns>検証結果</returns>
Public Function ValidateConfiguration(Optional ByVal options As ValidationOptions) As ValidationResult
End Function

' プロパティ定義

''' <summary>
''' サーバー名
''' </summary>
Public Property Get Server() As String
End Property

Public Property Let Server(ByVal value As String)
End Property

''' <summary>
''' データベース名
''' </summary>
Public Property Get Database() As String
End Property

Public Property Let Database(ByVal value As String)
End Property

''' <summary>
''' ユーザー名
''' </summary>
Public Property Get UserName() As String
End Property

Public Property Let UserName(ByVal value As String)
End Property

''' <summary>
''' パスワード
''' </summary>
Public Property Get Password() As String
End Property

Public Property Let Password(ByVal value As String)
End Property

''' <summary>
''' 追加のパラメータ
''' </summary>
Public Property Get AdditionalParameters() As String
End Property

Public Property Let AdditionalParameters(ByVal value As String)
End Property

''' <summary>
''' タイムアウト値（秒）
''' </summary>
Public Property Get Timeout() As Long
End Property

Public Property Let Timeout(ByVal value As Long)
End Property

''' <summary>
''' 暗号化が有効かどうか
''' </summary>
Public Property Get IsEncryptionEnabled() As Boolean
End Property

Public Property Let IsEncryptionEnabled(ByVal value As Boolean)
End Property

''' <summary>
''' 設定を保存します
''' </summary>
''' <param name="filePath">保存先のファイルパス</param>
''' <param name="options">保存オプション（オプション）</param>
Public Sub SaveConfiguration(ByVal filePath As String, Optional ByVal options As SaveOptions)
End Sub

''' <summary>
''' 設定を読み込みます
''' </summary>
''' <param name="filePath">読み込むファイルのパス</param>
''' <param name="options">読み込みオプション（オプション）</param>
Public Sub LoadConfiguration(ByVal filePath As String, Optional ByVal options As LoadOptions)
End Sub

''' <summary>
''' 接続文字列ビルダーの状態を検証します
''' </summary>
''' <returns>有効な場合True</returns>
Public Function Validate() As Boolean
End Function

''' <summary>
''' リソースを解放します
''' </summary>
Public Sub Cleanup()
End Sub

================
File: interfaces/ICryptography.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "ICryptography"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

'@Description("暗号化操作と鍵管理を提供し、セキュアな暗号化機能を実装するインターフェース")

' 定数定義
Private Const MAX_KEY_SIZE As Long = 4096          ' 最大鍵サイズ（ビット）
Private Const MIN_KEY_SIZE As Long = 128           ' 最小鍵サイズ（ビット）
Private Const DEFAULT_ITERATION_COUNT As Long = 10000 ' デフォルトの反復回数
Private Const MAX_SALT_SIZE As Long = 32           ' 最大ソルトサイズ（バイト）
Private Const KEY_ROTATION_INTERVAL As Long = 7776000000 ' 鍵のローテーション間隔（90日）
Private Const CACHE_DURATION_MS As Long = 300000   ' キャッシュの有効期間（5分）

' イベント定義
Public Event KeyGenerated(ByVal keyId As String, ByVal keySize As Long)
Public Event KeyRotated(ByVal oldKeyId As String, ByVal newKeyId As String)
Public Event EncryptionCompleted(ByVal dataSize As Long, ByVal executionTime As Double)
Public Event DecryptionCompleted(ByVal dataSize As Long, ByVal executionTime As Double)
Public Event SecurityAlert(ByVal alertType As String, ByVal severity As Long)
Public Event AlgorithmChanged(ByVal oldAlgorithm As String, ByVal newAlgorithm As String)
Public Event PerformanceAlert(ByVal metricType As String, ByVal currentValue As Double, ByVal threshold As Double)
Public Event AuditLog(ByVal operation As String, ByVal details As String)

''' <summary>
''' 暗号化コンテキストを初期化します
''' </summary>
''' <param name="options">初期化オプション（オプション）</param>
''' <returns>成功時True、失敗時False</returns>
''' <remarks>
''' エラー処理要件：
''' - プロバイダーの検証
''' - アルゴリズムの互換性確認
''' - リソースの確保
''' - セキュリティ要件の検証
''' </remarks>
Public Function Initialize(Optional ByVal options As CryptoOptions) As Boolean
End Function

''' <summary>
''' データを暗号化します
''' </summary>
''' <param name="data">暗号化するデータ</param>
''' <param name="options">暗号化オプション（オプション）</param>
''' <returns>暗号化されたデータ</returns>
''' <remarks>
''' エラー処理要件：
''' - データの検証
''' - 鍵の有効性確認
''' - メモリ使用量の監視
''' - パフォーマンスの最適化
''' </remarks>
Public Function Encrypt(ByRef data As Variant, Optional ByVal options As EncryptionOptions) As Variant
End Function

''' <summary>
''' データを復号化します
''' </summary>
''' <param name="data">復号化するデータ</param>
''' <param name="options">復号化オプション（オプション）</param>
''' <returns>復号化されたデータ</returns>
Public Function Decrypt(ByRef data As Variant, Optional ByVal options As DecryptionOptions) As Variant
End Function

''' <summary>
''' ハッシュ値を計算します
''' </summary>
''' <param name="data">ハッシュ化するデータ</param>
''' <param name="algorithm">ハッシュアルゴリズム（オプション）</param>
''' <returns>ハッシュ値</returns>
Public Function ComputeHash(ByRef data As Variant, Optional ByVal algorithm As String) As String
End Function

''' <summary>
''' 鍵を生成します
''' </summary>
''' <param name="keySize">鍵サイズ（ビット）</param>
''' <param name="options">生成オプション（オプション）</param>
''' <returns>鍵ID</returns>
Public Function GenerateKey(ByVal keySize As Long, Optional ByVal options As KeyGenerationOptions) As String
End Function

''' <summary>
''' 鍵を導出します
''' </summary>
''' <param name="password">パスワード</param>
''' <param name="salt">ソルト</param>
''' <param name="options">導出オプション（オプション）</param>
''' <returns>導出された鍵</returns>
Public Function DeriveKey(ByVal password As String, ByVal salt As Variant, Optional ByVal options As KeyDerivationOptions) As Variant
End Function

''' <summary>
''' 鍵をローテーションします
''' </summary>
''' <param name="keyId">現在の鍵ID</param>
''' <param name="options">ローテーションオプション（オプション）</param>
''' <returns>新しい鍵ID</returns>
Public Function RotateKey(ByVal keyId As String, Optional ByVal options As KeyRotationOptions) As String
End Function

''' <summary>
''' 鍵を検証します
''' </summary>
''' <param name="keyId">鍵ID</param>
''' <returns>有効な場合True</returns>
Public Function ValidateKey(ByVal keyId As String) As Boolean
End Function

''' <summary>
''' セキュリティ監査を実行します
''' </summary>
''' <param name="options">監査オプション（オプション）</param>
''' <returns>監査結果</returns>
Public Function PerformSecurityAudit(Optional ByVal options As AuditOptions) As SecurityAuditResult
End Function

''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
''' <returns>パフォーマンス情報のコレクション</returns>
Public Function GetPerformanceMetrics() As Collection
End Function

''' <summary>
''' 暗号化アルゴリズムを設定します
''' </summary>
''' <param name="algorithm">アルゴリズム名</param>
''' <param name="options">アルゴリズムオプション（オプション）</param>
Public Sub SetAlgorithm(ByVal algorithm As String, Optional ByVal options As AlgorithmOptions)
End Sub

''' <summary>
''' 現在の暗号化アルゴリズムを取得します
''' </summary>
''' <returns>アルゴリズム名</returns>
Public Function GetCurrentAlgorithm() As String
End Function

''' <summary>
''' リソースを解放します
''' </summary>
Public Sub Cleanup()
End Sub

''' <summary>
''' 暗号化操作の状態を検証します
''' </summary>
''' <returns>有効な場合True</returns>
Public Function Validate() As Boolean
End Function

================
File: interfaces/IDatabaseConfig.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IDatabaseConfig"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

'@Description("データベース設定の管理と監視を提供するインターフェース")

' 定数定義
Private Const DEFAULT_CONNECTION_TIMEOUT As Long = 30    ' デフォルト接続タイムアウト（秒）
Private Const DEFAULT_COMMAND_TIMEOUT As Long = 30      ' デフォルトコマンドタイムアウト（秒）
Private Const MAX_POOL_SIZE As Long = 100               ' 最大プールサイズ
Private Const MIN_POOL_SIZE As Long = 5                 ' 最小プールサイズ
Private Const BACKUP_INTERVAL_HOURS As Long = 24        ' バックアップ間隔（時間）
Private Const MAX_RETRY_COUNT As Long = 3               ' 最大リトライ回数
Private Const CACHE_DURATION_MS As Long = 300000        ' キャッシュの有効期間（5分）

' イベント定義
Public Event ConfigurationChanged(ByVal settingName As String, ByVal oldValue As Variant, ByVal newValue As Variant)
Public Event ConnectionStringUpdated(ByVal newConnectionString As String, ByVal isEncrypted As Boolean)
Public Event EnvironmentChanged(ByVal oldEnvironment As String, ByVal newEnvironment As String)
Public Event BackupCompleted(ByVal backupPath As String, ByVal success As Boolean)
Public Event SecurityAlert(ByVal alertType As String, ByVal details As String)
Public Event PerformanceAlert(ByVal metricType As String, ByVal currentValue As Double, ByVal threshold As Double)
Public Event ConfigurationValidated(ByVal isValid As Boolean, ByVal validationErrors As Collection)

''' <summary>
''' データベース接続文字列を取得します
''' </summary>
''' <param name="options">取得オプション（オプション）</param>
''' <returns>データベース接続文字列</returns>
''' <remarks>
''' エラー処理要件：
''' - 設定の検証
''' - 暗号化の処理
''' - 環境の確認
''' - セキュリティチェック
''' </remarks>
Public Function GetConnectionString(Optional ByVal options As ConnectionStringOptions) As String
End Function

''' <summary>
''' データベース固有の設定値を取得します
''' </summary>
''' <param name="settingName">設定名</param>
''' <param name="defaultValue">デフォルト値（オプション）</param>
''' <param name="options">取得オプション（オプション）</param>
''' <returns>設定値</returns>
Public Function GetDatabaseSetting(ByVal settingName As String, Optional ByVal defaultValue As Variant, Optional ByVal options As SettingOptions) As Variant
End Function

''' <summary>
''' データベース設定を保存します
''' </summary>
''' <param name="filePath">保存先のファイルパス</param>
''' <param name="options">保存オプション（オプション）</param>
Public Sub SaveConfiguration(ByVal filePath As String, Optional ByVal options As SaveOptions)
End Sub

''' <summary>
''' データベース設定を読み込みます
''' </summary>
''' <param name="filePath">読み込むファイルのパス</param>
''' <param name="options">読み込みオプション（オプション）</param>
Public Sub LoadConfiguration(ByVal filePath As String, Optional ByVal options As LoadOptions)
End Sub

''' <summary>
''' 環境を設定します
''' </summary>
''' <param name="environment">環境名</param>
''' <param name="options">環境オプション（オプション）</param>
Public Sub SetEnvironment(ByVal environment As String, Optional ByVal options As EnvironmentOptions)
End Sub

''' <summary>
''' バックアップ設定を構成します
''' </summary>
''' <param name="settings">バックアップ設定</param>
Public Sub ConfigureBackup(ByVal settings As DatabaseBackupSettings)
End Sub

''' <summary>
''' パフォーマンス設定を構成します
''' </summary>
''' <param name="settings">パフォーマンス設定</param>
Public Sub ConfigurePerformance(ByVal settings As DatabasePerformanceSettings)
End Sub

''' <summary>
''' 監視設定を構成します
''' </summary>
''' <param name="settings">監視設定</param>
Public Sub ConfigureMonitoring(ByVal settings As DatabaseMonitoringSettings)
End Sub

' プロパティ定義

''' <summary>
''' データベース接続文字列
''' </summary>
Public Property Get ConnectionString() As String
End Property

Public Property Let ConnectionString(ByVal value As String)
End Property

''' <summary>
''' 接続タイムアウト時間
''' </summary>
Public Property Get ConnectionTimeout() As Long
End Property

Public Property Let ConnectionTimeout(ByVal value As Long)
End Property

''' <summary>
''' コマンドタイムアウト時間
''' </summary>
Public Property Get CommandTimeout() As Long
End Property

Public Property Let CommandTimeout(ByVal value As Long)
End Property

''' <summary>
''' データベースの種類
''' </summary>
Public Property Get DatabaseType() As String
End Property

Public Property Let DatabaseType(ByVal value As String)
End Property

''' <summary>
''' ログテーブル名
''' </summary>
Public Property Get LogTableName() As String
End Property

Public Property Let LogTableName(ByVal value As String)
End Property

''' <summary>
''' 最小プールサイズ
''' </summary>
Public Property Get MinPoolSize() As Long
End Property

Public Property Let MinPoolSize(ByVal value As Long)
End Property

''' <summary>
''' 最大プールサイズ
''' </summary>
Public Property Get MaxPoolSize() As Long
End Property

Public Property Let MaxPoolSize(ByVal value As Long)
End Property

''' <summary>
''' 暗号化が有効かどうか
''' </summary>
Public Property Get IsEncryptionEnabled() As Boolean
End Property

Public Property Let IsEncryptionEnabled(ByVal value As Boolean)
End Property

''' <summary>
''' 現在の環境名
''' </summary>
Public Property Get CurrentEnvironment() As String
End Property

''' <summary>
''' 設定を検証します
''' </summary>
''' <param name="options">検証オプション（オプション）</param>
''' <returns>検証結果</returns>
Public Function ValidateConfiguration(Optional ByVal options As ValidationOptions) As ValidationResult
End Function

''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
''' <returns>パフォーマンス情報のコレクション</returns>
Public Function GetPerformanceMetrics() As Collection
End Function

''' <summary>
''' データベース設定の状態を検証します
''' </summary>
''' <returns>有効な場合True</returns>
Public Function Validate() As Boolean
End Function

''' <summary>
''' リソースを解放します
''' </summary>
Public Sub Cleanup()
End Sub

================
File: interfaces/IEmergencyLogger.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IEmergencyLogger"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredefinedId = False
Attribute VB_Exposed = True
Option Explicit

'@Description("緊急時のエラーログ出力とフォールバック機能を提供するインターフェース")

' 定数定義
Private Const MAX_BUFFER_SIZE As Long = 1000        ' バッファの最大サイズ
Private Const FLUSH_INTERVAL_MS As Long = 1000      ' フラッシュ間隔（1秒）
Private Const MAX_RETRY_COUNT As Long = 3           ' 最大リトライ回数
Private Const MAX_MESSAGE_LENGTH As Long = 8192     ' メッセージの最大長
Private Const FALLBACK_PATH As String = "emergency.log" ' フォールバックログパス
Private Const ALERT_THRESHOLD As Long = 100         ' アラート閾値
Private Const CLEANUP_INTERVAL_MS As Long = 3600000 ' クリーンアップ間隔（1時間）

' イベント定義
Public Event EmergencyLogWritten(ByVal message As String, ByVal severity As EmergencyLevel)
Public Event FallbackActivated(ByVal reason As String, ByVal fallbackPath As String)
Public Event BufferThresholdReached(ByVal currentSize As Long, ByVal maxSize As Long)
Public Event LogFlushed(ByVal entryCount As Long, ByVal success As Boolean)
Public Event NotificationSent(ByVal recipient As String, ByVal messageType As String)
Public Event ResourceExhausted(ByVal resourceType As String, ByVal details As String)
Public Event PerformanceAlert(ByVal metricType As String, ByVal currentValue As Double, ByVal threshold As Double)

''' <summary>
''' 緊急時のエラーをログに記録します
''' </summary>
''' <param name="message">エラーメッセージ</param>
''' <param name="errorInfo">エラー情報（オプション）</param>
''' <param name="options">ログオプション（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - メッセージの検証
''' - バッファの管理
''' - フォールバックの適用
''' - リソースの監視
''' - 優先度の確認
''' </remarks>
Public Sub LogEmergencyError(ByVal message As String, Optional ByRef errorInfo As ErrorInfo, Optional ByVal options As EmergencyLogOptions)
End Sub

''' <summary>
''' バッファをフラッシュします
''' </summary>
''' <param name="options">フラッシュオプション（オプション）</param>
Public Sub FlushBuffer(Optional ByVal options As FlushOptions)
End Sub

''' <summary>
''' フォールバックパスを設定します
''' </summary>
''' <param name="path">フォールバックパス</param>
''' <param name="options">パスオプション（オプション）</param>
Public Sub SetFallbackPath(ByVal path As String, Optional ByVal options As FallbackOptions)
End Sub

''' <summary>
''' 緊急通知を送信します
''' </summary>
''' <param name="message">通知メッセージ</param>
''' <param name="recipients">受信者リスト</param>
''' <param name="options">通知オプション（オプション）</param>
Public Sub SendEmergencyNotification(ByVal message As String, ByVal recipients As Collection, Optional ByVal options As NotificationOptions)
End Sub

''' <summary>
''' ログの優先度を設定します
''' </summary>
''' <param name="level">優先度レベル</param>
''' <param name="options">優先度オプション（オプション）</param>
Public Sub SetPriorityLevel(ByVal level As EmergencyLevel, Optional ByVal options As PriorityOptions)
End Sub

''' <summary>
''' バッファサイズを設定します
''' </summary>
''' <param name="size">バッファサイズ</param>
Public Property Let BufferSize(ByVal size As Long)
End Property

''' <summary>
''' 現在のバッファサイズを取得します
''' </summary>
Public Property Get BufferSize() As Long
End Property

''' <summary>
''' フラッシュ間隔を設定します
''' </summary>
''' <param name="intervalMs">フラッシュ間隔（ミリ秒）</param>
Public Property Let FlushInterval(ByVal intervalMs As Long)
End Property

''' <summary>
''' 現在のフラッシュ間隔を取得します
''' </summary>
Public Property Get FlushInterval() As Long
End Property

''' <summary>
''' ログ履歴を取得します
''' </summary>
''' <param name="options">履歴オプション（オプション）</param>
''' <returns>ログ履歴のコレクション</returns>
Public Function GetLogHistory(Optional ByVal options As HistoryOptions) As Collection
End Function

''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
''' <returns>パフォーマンス情報のコレクション</returns>
Public Function GetPerformanceMetrics() As Collection
End Function

''' <summary>
''' ログの状態を検証します
''' </summary>
''' <returns>有効な場合True</returns>
Public Function Validate() As Boolean
End Function

''' <summary>
''' リソースを解放します
''' </summary>
Public Sub Cleanup()
End Sub

================
File: interfaces/IError.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IError"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredefinedId = False
Attribute VB_Exposed = True
Option Explicit

'@Description("エラー処理と分析の基本機能を提供するインターフェース")

' 定数定義
Private Const MAX_ERROR_HISTORY As Long = 1000     ' エラー履歴の最大数
Private Const MAX_HANDLERS As Long = 100           ' ハンドラーの最大数
Private Const DEFAULT_THRESHOLD As Long = 10       ' デフォルトの閾値
Private Const CACHE_DURATION_MS As Long = 300000   ' キャッシュの有効期間（5分）
Private Const MAX_RETRY_COUNT As Long = 3          ' 最大リトライ回数
Private Const CLEANUP_INTERVAL_MS As Long = 3600000 ' クリーンアップ間隔（1時間）
Private Const MAX_ERROR_MESSAGE_LENGTH As Long = 8192 ' エラーメッセージの最大長

' イベント定義
Public Event ErrorOccurred(ByVal errorInfo As ErrorInfo, ByVal severity As ErrorSeverity)
Public Event ErrorHandled(ByVal errorInfo As ErrorInfo, ByVal handler As IErrorHandler, ByVal success As Boolean)
Public Event ThresholdExceeded(ByVal errorCode As ErrorCode, ByVal count As Long, ByVal threshold As Long)
Public Event HandlerRegistered(ByVal errorCode As ErrorCode, ByVal handler As IErrorHandler)
Public Event HandlerUnregistered(ByVal errorCode As ErrorCode)
Public Event ErrorAnalysisCompleted(ByVal analysisResult As ErrorAnalysisResult)
Public Event PerformanceAlert(ByVal metricType As String, ByVal currentValue As Double, ByVal threshold As Double)

''' <summary>
''' エラーを処理します
''' </summary>
''' <param name="errorInfo">エラー詳細情報</param>
''' <param name="options">処理オプション（オプション）</param>
''' <returns>処理を継続する場合はTrue、中断する場合はFalse</returns>
''' <remarks>
''' エラー処理要件：
''' - エラー情報の検証
''' - ハンドラーの選択
''' - リトライ処理
''' - ログ記録
''' - メトリクス収集
''' </remarks>
Public Function HandleError(ByRef errorInfo As ErrorInfo, _
                          Optional ByVal options As ErrorHandlingOptions) As Boolean
End Function

''' <summary>
''' エラーコードに対応するエラーハンドラーを登録します
''' </summary>
''' <param name="errorCode">エラーコード</param>
''' <param name="handler">エラーハンドラー</param>
''' <param name="options">登録オプション（オプション）</param>
Public Sub RegisterHandler(ByVal errorCode As ErrorCode, _
                         ByVal handler As IErrorHandler, _
                         Optional ByVal options As HandlerOptions)
End Sub

''' <summary>
''' エラーコードに対応するエラーハンドラーの登録を解除します
''' </summary>
''' <param name="errorCode">エラーコード</param>
''' <param name="options">解除オプション（オプション）</param>
Public Sub UnregisterHandler(ByVal errorCode As ErrorCode, _
                           Optional ByVal options As UnregisterOptions)
End Sub

''' <summary>
''' エラーコードごとの発生回数をカウントアップします
''' </summary>
''' <param name="errorCode">エラーコード</param>
''' <param name="options">カウントオプション（オプション）</param>
Public Sub IncrementErrorCount(ByVal errorCode As ErrorCode, _
                             Optional ByVal options As CountOptions)
End Sub

''' <summary>
''' エラーコードの発生回数が閾値を超えているかチェックします
''' </summary>
''' <param name="errorCode">エラーコード</param>
''' <param name="threshold">閾値</param>
''' <param name="options">チェックオプション（オプション）</param>
''' <returns>閾値を超えている場合はTrue</returns>
Public Function CheckErrorThreshold(ByVal errorCode As ErrorCode, _
                                  ByVal threshold As Long, _
                                  Optional ByVal options As ThresholdOptions) As Boolean
End Function

''' <summary>
''' エラー履歴を取得します
''' </summary>
''' <param name="options">履歴オプション（オプション）</param>
''' <returns>エラー履歴のコレクション</returns>
Public Function GetErrorHistory(Optional ByVal options As HistoryOptions) As Collection
End Function

''' <summary>
''' エラーを分析します
''' </summary>
''' <param name="options">分析オプション（オプション）</param>
''' <returns>分析結果</returns>
Public Function AnalyzeErrors(Optional ByVal options As AnalysisOptions) As ErrorAnalysisResult
End Function

''' <summary>
''' エラーを分類します
''' </summary>
''' <param name="errorInfo">エラー情報</param>
''' <param name="options">分類オプション（オプション）</param>
''' <returns>エラー分類結果</returns>
Public Function CategorizeError(ByRef errorInfo As ErrorInfo, _
                              Optional ByVal options As CategoryOptions) As ErrorCategory
End Function

''' <summary>
''' エラー処理の統計情報を取得します
''' </summary>
''' <param name="options">統計オプション（オプション）</param>
''' <returns>統計情報</returns>
Public Function GetErrorStatistics(Optional ByVal options As StatisticsOptions) As ErrorStatistics
End Function

''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
''' <returns>パフォーマンス情報のコレクション</returns>
Public Function GetPerformanceMetrics() As Collection
End Function

''' <summary>
''' エラー処理の状態を検証します
''' </summary>
''' <returns>有効な場合True</returns>
Public Function Validate() As Boolean
End Function

''' <summary>
''' リソースを解放します
''' </summary>
Public Sub Cleanup()
End Sub

================
File: interfaces/IErrorHandler.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IErrorHandler"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

'@Description("エラー処理とリカバリを提供するインターフェース")

' 定数定義
Private Const MAX_RETRY_COUNT As Long = 3           ' 最大リトライ回数
Private Const RETRY_DELAY_MS As Long = 1000         ' リトライ間隔（1秒）
Private Const MAX_ERROR_QUEUE As Long = 1000        ' エラーキューの最大サイズ
Private Const DEFAULT_TIMEOUT_MS As Long = 30000    ' デフォルトタイムアウト（30秒）
Private Const MAX_RECOVERY_ATTEMPTS As Long = 5     ' 最大回復試行回数
Private Const CLEANUP_INTERVAL_MS As Long = 300000  ' クリーンアップ間隔（5分）

' イベント定義
Public Event ErrorHandlingStarted(ByVal errorInfo As ErrorInfo, ByVal priority As ErrorPriority)
Public Event ErrorHandlingCompleted(ByVal errorInfo As ErrorInfo, ByVal success As Boolean)
Public Event RecoveryAttempted(ByVal errorInfo As ErrorInfo, ByVal attempt As Long, ByVal success As Boolean)
Public Event RetryAttempted(ByVal errorInfo As ErrorInfo, ByVal attempt As Long)
Public Event ResourceReleased(ByVal resourceType As String, ByVal success As Boolean)
Public Event ErrorQueued(ByVal errorInfo As ErrorInfo, ByVal queuePosition As Long)
Public Event PerformanceAlert(ByVal metricType As String, ByVal currentValue As Double, ByVal threshold As Double)

''' <summary>
''' エラーを処理します
''' </summary>
''' <param name="errorInfo">エラー詳細情報</param>
''' <param name="options">処理オプション（オプション）</param>
''' <returns>処理を継続する場合はTrue、中断する場合はFalse</returns>
''' <remarks>
''' エラー処理要件：
''' - エラー情報の検証
''' - 優先度の判定
''' - リカバリ処理
''' - リソース解放
''' - ログ記録
''' - メトリクス収集
''' </remarks>
Public Function HandleError(ByRef errorInfo As ErrorInfo, _
                          Optional ByVal options As HandlingOptions) As Boolean
End Function

''' <summary>
''' エラーからの回復を試みます
''' </summary>
''' <param name="errorInfo">エラー情報</param>
''' <param name="options">回復オプション（オプション）</param>
''' <returns>回復成功時True</returns>
Public Function AttemptRecovery(ByRef errorInfo As ErrorInfo, _
                              Optional ByVal options As RecoveryOptions) As Boolean
End Function

''' <summary>
''' リトライ処理を実行します
''' </summary>
''' <param name="operation">実行する操作</param>
''' <param name="options">リトライオプション（オプション）</param>
''' <returns>実行結果</returns>
Public Function RetryOperation(ByVal operation As IRetryableOperation, _
                             Optional ByVal options As RetryOptions) As OperationResult
End Function

''' <summary>
''' エラーの優先度を設定します
''' </summary>
''' <param name="errorType">エラータイプ</param>
''' <param name="priority">優先度</param>
Public Sub SetErrorPriority(ByVal errorType As String, ByVal priority As ErrorPriority)
End Sub

''' <summary>
''' エラー処理戦略を設定します
''' </summary>
''' <param name="errorType">エラータイプ</param>
''' <param name="strategy">処理戦略</param>
Public Sub SetHandlingStrategy(ByVal errorType As String, ByVal strategy As IErrorStrategy)
End Sub

''' <summary>
''' リソースを解放します
''' </summary>
''' <param name="resource">解放するリソース</param>
''' <param name="options">解放オプション（オプション）</param>
''' <returns>解放成功時True</returns>
Public Function ReleaseResource(ByVal resource As Object, _
                              Optional ByVal options As ReleaseOptions) As Boolean
End Function

''' <summary>
''' エラーをキューに追加します
''' </summary>
''' <param name="errorInfo">エラー情報</param>
''' <param name="options">キューオプション（オプション）</param>
Public Sub QueueError(ByRef errorInfo As ErrorInfo, Optional ByVal options As QueueOptions)
End Sub

''' <summary>
''' キューのエラーを処理します
''' </summary>
''' <param name="options">処理オプション（オプション）</param>
Public Sub ProcessErrorQueue(Optional ByVal options As ProcessOptions)
End Sub

''' <summary>
''' エラー処理の統計を取得します
''' </summary>
''' <returns>統計情報</returns>
Public Function GetHandlingStatistics() As HandlingStatistics
End Function

''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
''' <returns>パフォーマンス情報のコレクション</returns>
Public Function GetPerformanceMetrics() As Collection
End Function

''' <summary>
''' エラーハンドラーの状態を検証します
''' </summary>
''' <returns>有効な場合True</returns>
Public Function Validate() As Boolean
End Function

''' <summary>
''' リソースを解放します
''' </summary>
Public Sub Cleanup()
End Sub

================
File: interfaces/IErrorNotification.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IErrorNotification"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredefinedId = False
Attribute VB_Exposed = True
Option Explicit

'@Description("エラー通知の配信と管理を担当し、複数の通知チャネルとポリシーをサポートするインターフェース")

' 定数定義
Private Const MAX_NOTIFICATION_TARGETS As Long = 10     ' 最大通知先数
Private Const MAX_BATCH_SIZE As Long = 100              ' 最大バッチサイズ
Private Const CACHE_DURATION_MS As Long = 300000        ' キャッシュ有効期間（5分）
Private Const MIN_NOTIFICATION_INTERVAL_MS As Long = 100 ' 最小通知間隔（100ミリ秒）
Private Const MAX_RETRY_COUNT As Long = 3               ' 最大リトライ回数
Private Const MAX_TEMPLATE_SIZE As Long = 10240         ' 最大テンプレートサイズ（10KB）
Private Const DEFAULT_TIMEOUT_MS As Long = 5000         ' デフォルトタイムアウト時間（5秒）

' イベント定義
Public Event NotificationSent(ByVal errorInfo As ErrorInfo, ByVal level As ErrorNotificationLevel, ByVal metrics As NotificationMetrics)
Public Event NotificationDelivered(ByVal errorInfo As ErrorInfo, ByVal target As INotificationTarget, ByVal deliveryMetrics As DeliveryMetrics)
Public Event NotificationFailed(ByVal errorInfo As ErrorInfo, ByVal target As INotificationTarget, ByVal reason As String, ByVal retryCount As Long)
Public Event NotificationAcknowledged(ByVal errorInfo As ErrorInfo, ByVal target As INotificationTarget, ByVal acknowledgeTime As Date)
Public Event NotificationBatchProcessed(ByVal batchId As String, ByVal successCount As Long, ByVal failureCount As Long)
Public Event NotificationThrottled(ByVal errorInfo As ErrorInfo, ByVal target As INotificationTarget, ByVal nextAttemptTime As Date)
Public Event TemplateUpdated(ByVal templateName As String, ByVal version As Long)
Public Event DeliveryPolicyViolation(ByVal policyName As String, ByVal violationType As String)
Public Event PerformanceAlert(ByVal metricType As String, ByVal currentValue As Double, ByVal threshold As Double)
Public Event ResourceExhausted(ByVal resourceType As String, ByVal currentUsage As Long)

''' <summary>
''' エラー通知レベルを設定します
''' </summary>
''' <param name="level">通知レベル</param>
''' <param name="options">レベルオプション（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - 無効な通知レベルの検証
''' - 現在の通知処理への影響考慮
''' - 設定変更のログ記録
''' - イベントの適切な発行
''' - 依存システムへの通知
''' </remarks>
Public Property Let NotificationLevel(ByVal level As ErrorNotificationLevel, Optional ByVal options As NotificationLevelOptions)
End Property

''' <summary>
''' 現在のエラー通知レベルを取得します
''' </summary>
Public Property Get NotificationLevel() As ErrorNotificationLevel
End Property

''' <summary>
''' エラーを通知します
''' </summary>
''' <param name="errorInfo">エラー情報</param>
''' <param name="options">通知オプション（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - 通知レベルに応じた処理
''' - 通知失敗時の代替処理
''' - リソースの適切な解放
''' - 通知の重複防止
''' - イベントの適切な発行
''' - メトリクスの収集
''' - パフォーマンスの監視
''' 
''' 実装時の注意点：
''' 1. 通知処理自体のエラーを適切に処理すること
''' 2. パフォーマンスに影響を与えないよう注意すること
''' 3. UI スレッドをブロックしないこと
''' 4. 機密情報の適切な処理を行うこと
''' 5. 通知の優先順位を考慮すること
''' 6. スロットリングを適用すること
''' </remarks>
Public Sub NotifyError(ByRef errorInfo As ErrorInfo, Optional ByVal options As NotificationOptions)
End Sub

''' <summary>
''' バッチ通知を実行します
''' </summary>
''' <param name="errors">エラー情報のコレクション</param>
''' <param name="options">バッチオプション（オプション）</param>
''' <returns>バッチ処理ID</returns>
Public Function NotifyBatch(ByVal errors As Collection, Optional ByVal options As BatchNotificationOptions) As String
End Function

''' <summary>
''' 通知先を追加します
''' </summary>
''' <param name="target">通知先オブジェクト</param>
''' <param name="priority">優先度（オプション）</param>
''' <param name="options">追加オプション（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - 通知先の有効性確認
''' - 重複登録の防止
''' - リソース制限の考慮
''' - 優先度の検証
''' - 依存関係の確認
''' </remarks>
Public Sub AddNotificationTarget(ByVal target As INotificationTarget, Optional ByVal priority As ValidationPriority = vpNormal, Optional ByVal options As TargetOptions)
End Sub

''' <summary>
''' 通知先を削除します
''' </summary>
''' <param name="target">通知先オブジェクト</param>
''' <param name="options">削除オプション（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - 存在しない通知先の処理
''' - 削除中の通知への影響考慮
''' - リソースの適切な解放
''' - イベントの適切な発行
''' - 依存システムの更新
''' </remarks>
Public Sub RemoveNotificationTarget(ByVal target As INotificationTarget, Optional ByVal options As TargetRemovalOptions)
End Sub

''' <summary>
''' すべての通知先をクリアします
''' </summary>
''' <param name="options">クリアオプション（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - 進行中の通知への影響考慮
''' - リソースの適切な解放
''' - 状態の整合性維持
''' - イベントの適切な発行
''' - キャッシュの更新
''' </remarks>
Public Sub ClearNotificationTargets(Optional ByVal options As ClearOptions)
End Sub

''' <summary>
''' 通知のフィルタリング条件を設定します
''' </summary>
''' <param name="filterExpression">フィルタリング条件の式</param>
''' <param name="options">フィルタオプション（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - 式の構文検証
''' - 無効な条件の検出
''' - パフォーマンスへの影響考慮
''' - 既存フィルタの更新
''' - 条件の最適化
''' </remarks>
Public Sub SetNotificationFilter(ByVal filterExpression As String, Optional ByVal options As FilterOptions)
End Sub

''' <summary>
''' 通知履歴を取得します
''' </summary>
''' <param name="options">取得オプション（オプション）</param>
''' <returns>通知履歴のコレクション</returns>
''' <remarks>
''' エラー処理要件：
''' - メモリ使用量の考慮
''' - 大量データの効率的な処理
''' - 履歴の整合性確認
''' - フィルタリングの適用
''' - キャッシュの活用
''' </remarks>
Public Function GetNotificationHistory(Optional ByVal options As NotificationHistoryOptions) As Collection
End Function

''' <summary>
''' 通知テンプレートを設定します
''' </summary>
''' <param name="templateName">テンプレート名</param>
''' <param name="template">テンプレート内容</param>
''' <param name="options">テンプレートオプション（オプション）</param>
Public Sub SetNotificationTemplate(ByVal templateName As String, ByVal template As String, Optional ByVal options As TemplateOptions)
End Sub

''' <summary>
''' 通知テンプレートを取得します
''' </summary>
''' <param name="templateName">テンプレート名</param>
''' <param name="version">バージョン（オプション）</param>
Public Function GetNotificationTemplate(ByVal templateName As String, Optional ByVal version As Long = -1) As String
End Function

''' <summary>
''' 通知のグループ化ルールを設定します
''' </summary>
''' <param name="groupingRule">グループ化ルール</param>
''' <param name="options">グループ化オプション（オプション）</param>
Public Sub SetGroupingRule(ByVal groupingRule As INotificationGroupingRule, Optional ByVal options As GroupingOptions)
End Sub

''' <summary>
''' 通知の重複排除ルールを設定します
''' </summary>
''' <param name="deduplicationRule">重複排除ルール</param>
''' <param name="options">重複排除オプション（オプション）</param>
Public Sub SetDeduplicationRule(ByVal deduplicationRule As INotificationDeduplicationRule, Optional ByVal options As DeduplicationOptions)
End Sub

''' <summary>
''' 通知の配信ポリシーを設定します
''' </summary>
''' <param name="policy">配信ポリシー</param>
''' <param name="options">ポリシーオプション（オプション）</param>
Public Sub SetDeliveryPolicy(ByVal policy As INotificationDeliveryPolicy, Optional ByVal options As PolicyOptions)
End Sub

''' <summary>
''' 通知のバッチ処理を有効/無効にします
''' </summary>
Public Property Let BatchProcessingEnabled(ByVal value As Boolean)
End Property

''' <summary>
''' 通知のバッチ処理が有効かどうかを取得します
''' </summary>
Public Property Get BatchProcessingEnabled() As Boolean
End Property

''' <summary>
''' 通知の進捗状況を取得します
''' </summary>
''' <param name="includeMetrics">メトリクスを含めるかどうか</param>
Public Function GetProgress(Optional ByVal includeMetrics As Boolean = False) As NotificationProgress
End Function

''' <summary>
''' キャンセル状態を設定/取得します
''' </summary>
Public Property Get IsCancellationRequested() As Boolean
End Property

Public Property Let IsCancellationRequested(ByVal value As Boolean)
End Property

''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
''' <returns>パフォーマンス情報のコレクション</returns>
Public Function GetPerformanceMetrics() As Collection
End Function

''' <summary>
''' 通知の配信状態を分析します
''' </summary>
''' <param name="timeWindow">分析期間（ミリ秒）</param>
''' <returns>配信分析結果のコレクション</returns>
Public Function AnalyzeDeliveryPatterns(ByVal timeWindow As Long) As Collection
End Function

''' <summary>
''' スロットリング戦略を設定します
''' </summary>
''' <param name="strategy">スロットリング戦略</param>
Public Property Let ThrottlingStrategy(ByVal strategy As INotificationThrottlingStrategy)
End Property

''' <summary>
''' スケジューリング戦略を設定します
''' </summary>
''' <param name="strategy">スケジューリング戦略</param>
Public Property Let SchedulingStrategy(ByVal strategy As INotificationSchedulingStrategy)
End Property

================
File: interfaces/IErrorStrategy.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IErrorStrategy"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredefinedId = False
Attribute VB_Exposed = True
Option Explicit

'@Description("エラーからの回復戦略を定義し、段階的な回復処理とフォールバックメカニズムを提供するインターフェース")

' 定数定義
Private Const DEFAULT_RETRY_COUNT As Long = 3           ' デフォルトのリトライ回数
Private Const DEFAULT_RETRY_INTERVAL_MS As Long = 1000  ' デフォルトのリトライ間隔（1秒）
Private Const MAX_RETRY_COUNT As Long = 10              ' 最大リトライ回数
Private Const MAX_RECOVERY_CHAIN As Long = 5            ' 最大回復チェーン数
Private Const RECOVERY_TIMEOUT_MS As Long = 30000       ' 回復処理のタイムアウト時間（30秒）
Private Const MIN_BACKOFF_MS As Long = 100              ' 最小バックオフ時間（100ミリ秒）
Private Const MAX_BACKOFF_MS As Long = 30000           ' 最大バックオフ時間（30秒）

' イベント定義
Public Event RecoveryAttemptStarted(ByVal errorInfo As ErrorInfo, ByVal context As RecoveryContext)
Public Event RecoveryAttemptCompleted(ByVal errorInfo As ErrorInfo, ByVal success As Boolean, ByVal metrics As RecoveryMetrics)
Public Event RecoveryProgressChanged(ByVal errorInfo As ErrorInfo, ByVal progressPercentage As Long, ByVal currentPhase As String)
Public Event FallbackStrategyActivated(ByVal errorInfo As ErrorInfo, ByVal fallbackStrategy As IErrorStrategy, ByVal reason As String)
Public Event RecoveryChainExecuted(ByVal chainId As String, ByVal successCount As Long, ByVal failureCount As Long)
Public Event ResourceExhausted(ByVal resourceType As String, ByVal currentUsage As Long, ByVal limit As Long)
Public Event PerformanceAlert(ByVal metricType As String, ByVal currentValue As Double, ByVal threshold As Double)
Public Event ErrorPatternDetected(ByVal patternType As String, ByVal frequency As Long, ByVal timeWindow As Long)

''' <summary>
''' エラーからの回復を試みます
''' </summary>
''' <param name="errorInfo">エラー情報</param>
''' <param name="context">回復コンテキスト（オプション）</param>
''' <param name="options">回復オプション（オプション）</param>
''' <returns>回復成功時True、失敗時False</returns>
''' <remarks>
''' エラー処理要件：
''' - リトライ回数の管理
''' - タイムアウト処理
''' - リソースの適切な解放
''' - 回復不可能な状態の検出
''' - イベントの適切な発行
''' - メトリクスの収集
''' - パターンの分析
''' 
''' 実装時の注意点：
''' 1. 再帰的な回復処理を避けること
''' 2. 回復処理自体のエラーを適切に処理すること
''' 3. リソースリークを防ぐこと
''' 4. デッドロックを防ぐこと
''' 5. 回復の進捗を通知すること
''' 6. パフォーマンスを監視すること
''' </remarks>
Public Function RecoverFromError(ByRef errorInfo As ErrorInfo, Optional ByVal context As RecoveryContext, Optional ByVal options As RecoveryOptions) As Boolean
End Function

''' <summary>
''' 回復チェーンを作成します
''' </summary>
''' <param name="strategies">チェーンに含める戦略のコレクション</param>
''' <returns>チェーンID</returns>
Public Function CreateRecoveryChain(ByVal strategies As Collection) As String
End Function

''' <summary>
''' 最大リトライ回数を設定します
''' </summary>
''' <param name="value">リトライ回数</param>
''' <param name="options">リトライオプション（オプション）</param>
''' <remarks>
''' - 0以上の値を設定すること
''' - デフォルト値は3
''' - 実行中の回復処理への影響を考慮
''' - バックオフ戦略の適用
''' </remarks>
Public Property Let MaxRetryCount(ByVal value As Long, Optional ByVal options As RetryOptions)
End Property

''' <summary>
''' 最大リトライ回数を取得します
''' </summary>
Public Property Get MaxRetryCount() As Long
End Property

''' <summary>
''' 回復戦略の優先度を取得します
''' </summary>
''' <remarks>
''' - 値が大きいほど優先度が高い
''' - 複数の回復戦略がある場合、優先度の高い順に実行される
''' - 同じ優先度の場合、登録順で実行
''' - チェーン内での順序も考慮
''' </remarks>
Public Property Get Priority() As Long
End Property

''' <summary>
''' 回復戦略の優先度を設定します
''' </summary>
''' <param name="value">優先度</param>
''' <param name="options">優先度オプション（オプション）</param>
Public Property Let Priority(ByVal value As Long, Optional ByVal options As PriorityOptions)
End Property

''' <summary>
''' リトライ間隔（ミリ秒）を設定します
''' </summary>
''' <param name="value">間隔（ミリ秒）</param>
''' <param name="options">間隔オプション（オプション）</param>
''' <remarks>
''' - 0以上の値を設定すること
''' - デフォルト値は1000（1秒）
''' - 指数バックオフを考慮
''' - システム負荷を考慮
''' </remarks>
Public Property Let RetryInterval(ByVal value As Long, Optional ByVal options As IntervalOptions)
End Property

''' <summary>
''' リトライ間隔（ミリ秒）を取得します
''' </summary>
Public Property Get RetryInterval() As Long
End Property

''' <summary>
''' 回復戦略の説明を取得します
''' </summary>
''' <param name="locale">ロケール（オプション）</param>
''' <returns>戦略の説明</returns>
''' <remarks>
''' - ログ出力やデバッグ用
''' - 具体的な回復方法を説明する文字列を返すこと
''' - 多言語対応を考慮
''' - メトリクス情報を含める
''' </remarks>
Public Function GetDescription(Optional ByVal locale As String) As String
End Function

''' <summary>
''' フォールバック戦略を設定します
''' </summary>
''' <param name="strategy">フォールバック戦略</param>
''' <param name="options">フォールバックオプション（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - 循環参照の検出
''' - 戦略の有効性確認
''' - リソースの確保
''' - チェーンの整合性確認
''' </remarks>
Public Sub SetFallbackStrategy(ByVal strategy As IErrorStrategy, Optional ByVal options As FallbackOptions)
End Sub

''' <summary>
''' フォールバック戦略を取得します
''' </summary>
Public Property Get FallbackStrategy() As IErrorStrategy
End Property

''' <summary>
''' 回復処理の進捗状況を取得します
''' </summary>
''' <param name="includeMetrics">メトリクスを含めるかどうか</param>
Public Function GetProgress(Optional ByVal includeMetrics As Boolean = False) As RecoveryProgress
End Function

''' <summary>
''' エラー種別ごとの回復方法を設定します
''' </summary>
''' <param name="errorCode">エラーコード</param>
''' <param name="recoveryAction">回復アクション</param>
''' <param name="options">アクションオプション（オプション）</param>
Public Sub SetRecoveryAction(ByVal errorCode As ErrorCode, ByVal recoveryAction As IRecoveryAction, Optional ByVal options As ActionOptions)
End Sub

''' <summary>
''' エラー種別ごとの回復方法を取得します
''' </summary>
''' <param name="errorCode">エラーコード</param>
''' <param name="includeMetrics">メトリクスを含めるかどうか</param>
Public Function GetRecoveryAction(ByVal errorCode As ErrorCode, Optional ByVal includeMetrics As Boolean = False) As IRecoveryAction
End Function

''' <summary>
''' 回復履歴を取得します
''' </summary>
''' <param name="filter">フィルタ条件（オプション）</param>
''' <returns>回復試行の履歴コレクション</returns>
Public Function GetRecoveryHistory(Optional ByVal filter As RecoveryHistoryFilter) As Collection
End Function

''' <summary>
''' 回復戦略の状態を検証します
''' </summary>
''' <param name="validationLevel">検証レベル（オプション）</param>
''' <returns>有効な場合True</returns>
Public Function Validate(Optional ByVal validationLevel As ValidationLevel = vlNormal) As Boolean
End Function

''' <summary>
''' リソースを解放します
''' </summary>
''' <param name="options">クリーンアップオプション（オプション）</param>
Public Sub Cleanup(Optional ByVal options As CleanupOptions)
End Sub

''' <summary>
''' 回復処理をキャンセルします
''' </summary>
''' <param name="options">キャンセルオプション（オプション）</param>
Public Sub CancelRecovery(Optional ByVal options As CancellationOptions)
End Sub

''' <summary>
''' キャンセル状態を取得します
''' </summary>
Public Property Get IsCancellationRequested() As Boolean
End Property

''' <summary>
''' 非同期回復をサポートしているかどうかを取得します
''' </summary>
Public Property Get SupportsAsyncRecovery() As Boolean
End Property

''' <summary>
''' トランザクションをサポートしているかどうかを取得します
''' </summary>
Public Property Get SupportsTransactions() As Boolean
End Property

''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
''' <returns>パフォーマンス情報のコレクション</returns>
Public Function GetPerformanceMetrics() As Collection
End Function

''' <summary>
''' エラーパターンを分析します
''' </summary>
''' <param name="timeWindow">分析期間（ミリ秒）</param>
''' <returns>パターン分析結果のコレクション</returns>
Public Function AnalyzeErrorPatterns(ByVal timeWindow As Long) As Collection
End Function

''' <summary>
''' バックオフ戦略を設定します
''' </summary>
''' <param name="strategy">バックオフ戦略</param>
Public Property Let BackoffStrategy(ByVal strategy As IBackoffStrategy)
End Property

================
File: interfaces/IEventLog.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IEventLog"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

'@Description("Windowsイベントログの操作と管理を提供するインターフェース")

' 定数定義
Private Const MAX_MESSAGE_LENGTH As Long = 32766   ' メッセージの最大長
Private Const MAX_SOURCE_LENGTH As Long = 255      ' ソース名の最大長
Private Const MAX_BATCH_SIZE As Long = 1000        ' 最大バッチサイズ
Private Const CACHE_DURATION_MS As Long = 300000   ' キャッシュの有効期間（5分）
Private Const MAX_RETRY_COUNT As Long = 3          ' 最大リトライ回数
Private Const CLEANUP_INTERVAL_MS As Long = 3600000 ' クリーンアップ間隔（1時間）

' イベントログの種類定義
Public Enum EventLogType
    EVENTLOG_SUCCESS = 0
    EVENTLOG_ERROR_TYPE = 1
    EVENTLOG_WARNING_TYPE = 2
    EVENTLOG_INFORMATION_TYPE = 4
    EVENTLOG_AUDIT_SUCCESS = 8
    EVENTLOG_AUDIT_FAILURE = 16
End Enum

' イベント定義
Public Event EventLogged(ByVal source As String, ByVal eventType As EventLogType)
Public Event SourceRegistered(ByVal source As String, ByVal success As Boolean)
Public Event LogCleared(ByVal source As String, ByVal entryCount As Long)
Public Event BatchProcessed(ByVal source As String, ByVal successCount As Long, ByVal failureCount As Long)
Public Event LogFull(ByVal source As String, ByVal usedSpace As Long)
Public Event BackupCreated(ByVal backupPath As String)
Public Event PerformanceAlert(ByVal metricType As String, ByVal currentValue As Double, ByVal threshold As Double)

''' <summary>
''' イベントログにメッセージを書き込みます
''' </summary>
''' <param name="source">イベントソース名</param>
''' <param name="message">メッセージ</param>
''' <param name="eventType">イベントの種類</param>
''' <param name="options">書き込みオプション（オプション）</param>
''' <returns>成功時True、失敗時False</returns>
Public Function WriteToEventLog(ByVal source As String, _
                              ByVal message As String, _
                              ByVal eventType As EventLogType, _
                              Optional ByVal options As WriteOptions) As Boolean
End Function

''' <summary>
''' バッチでイベントログに書き込みます
''' </summary>
''' <param name="entries">イベントログエントリのコレクション</param>
''' <param name="options">バッチオプション（オプション）</param>
''' <returns>バッチ処理結果</returns>
Public Function WriteBatch(ByVal entries As Collection, _
                         Optional ByVal options As BatchOptions) As BatchResult
End Function

''' <summary>
''' イベントソースの存在を確認します
''' </summary>
''' <param name="source">イベントソース名</param>
''' <param name="options">確認オプション（オプション）</param>
''' <returns>存在する場合True、存在しない場合False</returns>
Public Function EventSourceExists(ByVal source As String, _
                                Optional ByVal options As SourceOptions) As Boolean
End Function

''' <summary>
''' イベントソースを登録します
''' </summary>
''' <param name="source">イベントソース名</param>
''' <param name="options">登録オプション（オプション）</param>
''' <returns>成功時True、失敗時False</returns>
Public Function RegisterEventSource(ByVal source As String, _
                                  Optional ByVal options As RegisterOptions) As Boolean
End Function

''' <summary>
''' イベントログをクリアします
''' </summary>
''' <param name="source">イベントソース名</param>
''' <param name="options">クリアオプション（オプション）</param>
''' <returns>成功時True、失敗時False</returns>
Public Function ClearEventLog(ByVal source As String, _
                            Optional ByVal options As ClearOptions) As Boolean
End Function

''' <summary>
''' イベントログをバックアップします
''' </summary>
''' <param name="backupPath">バックアップパス</param>
''' <param name="options">バックアップオプション（オプション）</param>
''' <returns>成功時True、失敗時False</returns>
Public Function BackupEventLog(ByVal backupPath As String, _
                             Optional ByVal options As BackupOptions) As Boolean
End Function

''' <summary>
''' イベントログをフィルタリングします
''' </summary>
''' <param name="criteria">フィルタ条件</param>
''' <param name="options">フィルタオプション（オプション）</param>
''' <returns>フィルタリングされたエントリのコレクション</returns>
Public Function FilterEvents(ByVal criteria As String, _
                           Optional ByVal options As FilterOptions) As Collection
End Function

''' <summary>
''' イベントログの統計を取得します
''' </summary>
''' <param name="source">イベントソース名</param>
''' <param name="options">統計オプション（オプション）</param>
''' <returns>統計情報</returns>
Public Function GetEventStatistics(ByVal source As String, _
                                 Optional ByVal options As StatisticsOptions) As EventStatistics
End Function

''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
''' <returns>パフォーマンス情報のコレクション</returns>
Public Function GetPerformanceMetrics() As Collection
End Function

''' <summary>
''' イベントログの状態を検証します
''' </summary>
''' <returns>有効な場合True</returns>
Public Function Validate() As Boolean
End Function

''' <summary>
''' リソースを解放します
''' </summary>
Public Sub Cleanup()
End Sub

================
File: interfaces/IFileIO.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IFileIO"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

'@Description("ファイル入出力操作とストリーム処理を提供するインターフェース")

' 定数定義
Private Const MAX_BUFFER_SIZE As Long = 8192       ' 最大バッファサイズ（8KB）
Private Const MAX_PATH_LENGTH As Long = 260        ' 最大パス長
Private Const MAX_RETRY_COUNT As Long = 3          ' 最大リトライ回数
Private Const LOCK_TIMEOUT_MS As Long = 5000       ' ロックタイムアウト（5秒）
Private Const DEFAULT_ENCODING As String = "UTF-8"  ' デフォルトエンコーディング
Private Const CLEANUP_INTERVAL_MS As Long = 300000 ' クリーンアップ間隔（5分）

' イベント定義
Public Event FileOpened(ByVal filePath As String, ByVal mode As FileMode)
Public Event FileClosed(ByVal filePath As String)
Public Event FileCreated(ByVal filePath As String)
Public Event FileDeleted(ByVal filePath As String)
Public Event FileMoved(ByVal sourcePath As String, ByVal destinationPath As String)
Public Event FileCopied(ByVal sourcePath As String, ByVal destinationPath As String)
Public Event SecurityAlert(ByVal alertType As String, ByVal details As String)
Public Event PerformanceAlert(ByVal metricType As String, ByVal currentValue As Double, ByVal threshold As Double)

''' <summary>
''' ファイルの存在を確認します
''' </summary>
''' <param name="filePath">ファイルパス</param>
''' <param name="options">確認オプション（オプション）</param>
''' <returns>存在する場合True、それ以外はFalse</returns>
''' <remarks>
''' エラー処理要件：
''' - パスの検証
''' - アクセス権の確認
''' - セキュリティチェック
''' - タイムアウト処理
''' </remarks>
Public Function FileExists(ByVal filePath As String, Optional ByVal options As FileCheckOptions) As Boolean
End Function

''' <summary>
''' フォルダの存在を確認します
''' </summary>
''' <param name="folderPath">フォルダパス</param>
''' <param name="options">確認オプション（オプション）</param>
''' <returns>存在する場合True、それ以外はFalse</returns>
Public Function FolderExists(ByVal folderPath As String, Optional ByVal options As FolderCheckOptions) As Boolean
End Function

''' <summary>
''' フォルダを作成します
''' </summary>
''' <param name="folderPath">フォルダパス</param>
''' <param name="options">作成オプション（オプション）</param>
''' <returns>成功時True、失敗時False</returns>
Public Function CreateFolder(ByVal folderPath As String, Optional ByVal options As FolderCreateOptions) As Boolean
End Function

''' <summary>
''' ファイルを削除します
''' </summary>
''' <param name="filePath">ファイルパス</param>
''' <param name="options">削除オプション（オプション）</param>
''' <returns>成功時True、失敗時False</returns>
Public Function DeleteFile(ByVal filePath As String, Optional ByVal options As FileDeleteOptions) As Boolean
End Function

''' <summary>
''' ファイルをコピーします
''' </summary>
''' <param name="sourceFilePath">コピー元ファイルパス</param>
''' <param name="destinationFilePath">コピー先ファイルパス</param>
''' <param name="options">コピーオプション（オプション）</param>
''' <returns>成功時True、失敗時False</returns>
Public Function CopyFile(ByVal sourceFilePath As String, ByVal destinationFilePath As String, Optional ByVal options As FileCopyOptions) As Boolean
End Function

''' <summary>
''' ファイルを移動します
''' </summary>
''' <param name="sourceFilePath">移動元ファイルパス</param>
''' <param name="destinationFilePath">移動先ファイルパス</param>
''' <param name="options">移動オプション（オプション）</param>
''' <returns>成功時True、失敗時False</returns>
Public Function MoveFile(ByVal sourceFilePath As String, ByVal destinationFilePath As String, Optional ByVal options As FileMoveOptions) As Boolean
End Function

''' <summary>
''' ファイルを開きます
''' </summary>
''' <param name="filePath">ファイルパス</param>
''' <param name="mode">オープンモード</param>
''' <param name="options">オープンオプション（オプション）</param>
''' <returns>ファイルストリーム</returns>
Public Function OpenFile(ByVal filePath As String, ByVal mode As FileMode, Optional ByVal options As FileOpenOptions) As IFileStream
End Function

''' <summary>
''' ファイルを閉じます
''' </summary>
''' <param name="fileStream">ファイルストリーム</param>
''' <param name="options">クローズオプション（オプション）</param>
''' <returns>成功時True、失敗時False</returns>
Public Function CloseFile(ByVal fileStream As IFileStream, Optional ByVal options As FileCloseOptions) As Boolean
End Function

''' <summary>
''' ファイルを読み込みます
''' </summary>
''' <param name="filePath">ファイルパス</param>
''' <param name="options">読み込みオプション（オプション）</param>
''' <returns>ファイルの内容</returns>
Public Function ReadFile(ByVal filePath As String, Optional ByVal options As FileReadOptions) As String
End Function

''' <summary>
''' ファイルに書き込みます
''' </summary>
''' <param name="filePath">ファイルパス</param>
''' <param name="content">書き込む内容</param>
''' <param name="options">書き込みオプション（オプション）</param>
''' <returns>成功時True、失敗時False</returns>
Public Function WriteFile(ByVal filePath As String, ByVal content As String, Optional ByVal options As FileWriteOptions) As Boolean
End Function

''' <summary>
''' ファイル情報を取得します
''' </summary>
''' <param name="filePath">ファイルパス</param>
''' <returns>ファイル情報</returns>
Public Function GetFileInfo(ByVal filePath As String) As FileInfo
End Function

''' <summary>
''' ファイルをロックします
''' </summary>
''' <param name="filePath">ファイルパス</param>
''' <param name="options">ロックオプション（オプション）</param>
''' <returns>ロックトークン</returns>
Public Function LockFile(ByVal filePath As String, Optional ByVal options As FileLockOptions) As String
End Function

''' <summary>
''' ファイルのロックを解除します
''' </summary>
''' <param name="lockToken">ロックトークン</param>
''' <returns>成功時True、失敗時False</returns>
Public Function UnlockFile(ByVal lockToken As String) As Boolean
End Function

''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
''' <returns>パフォーマンス情報のコレクション</returns>
Public Function GetPerformanceMetrics() As Collection
End Function

''' <summary>
''' ファイルI/Oの状態を検証します
''' </summary>
''' <returns>有効な場合True</returns>
Public Function Validate() As Boolean
End Function

''' <summary>
''' リソースを解放します
''' </summary>
Public Sub Cleanup()
End Sub

================
File: interfaces/IFileOperations.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IFileOperations"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

'@Description("高レベルなファイル操作とメタデータ管理を提供するインターフェース")

' 定数定義
Private Const MAX_FILE_SIZE As Long = 2147483648   ' 最大ファイルサイズ（2GB）
Private Const MAX_PATH_LENGTH As Long = 260        ' 最大パス長
Private Const BUFFER_SIZE As Long = 8192           ' バッファサイズ（8KB）
Private Const MAX_RETRY_COUNT As Long = 3          ' 最大リトライ回数
Private Const LOCK_TIMEOUT_MS As Long = 5000       ' ロックタイムアウト（5秒）
Private Const CLEANUP_INTERVAL_MS As Long = 300000 ' クリーンアップ間隔（5分）

' イベント定義
Public Event FileOperationStarted(ByVal operationType As String, ByVal filePath As String)
Public Event FileOperationCompleted(ByVal operationType As String, ByVal filePath As String, ByVal success As Boolean)
Public Event SecurityViolation(ByVal operationType As String, ByVal details As String)
Public Event ProgressUpdated(ByVal operationType As String, ByVal progress As Double)
Public Event MetadataChanged(ByVal filePath As String, ByVal metadataType As String)
Public Event PerformanceAlert(ByVal metricType As String, ByVal currentValue As Double, ByVal threshold As Double)
Public Event ResourceExhausted(ByVal resourceType As String, ByVal details As String)

' テキストファイル操作
''' <summary>
''' テキストファイルを読み込みます
''' </summary>
''' <param name="filePath">ファイルパス</param>
''' <param name="encoding">文字エンコーディング（オプション）</param>
''' <param name="options">読み込みオプション（オプション）</param>
''' <returns>ファイルの内容</returns>
Public Function ReadTextFile(ByVal filePath As String, _
                           Optional ByVal encoding As String, _
                           Optional ByVal options As TextReadOptions) As String
End Function

''' <summary>
''' テキストファイルに書き込みます
''' </summary>
''' <param name="filePath">ファイルパス</param>
''' <param name="content">書き込む内容</param>
''' <param name="options">書き込みオプション（オプション）</param>
''' <returns>成功時True、失敗時False</returns>
Public Function WriteTextFile(ByVal filePath As String, _
                            ByVal content As String, _
                            Optional ByVal options As TextWriteOptions) As Boolean
End Function

' バイナリファイル操作
''' <summary>
''' バイナリファイルを読み込みます
''' </summary>
''' <param name="filePath">ファイルパス</param>
''' <param name="options">読み込みオプション（オプション）</param>
''' <returns>ファイルのバイトデータ</returns>
Public Function ReadBinaryFile(ByVal filePath As String, _
                             Optional ByVal options As BinaryReadOptions) As Byte()
End Function

''' <summary>
''' バイナリファイルに書き込みます
''' </summary>
''' <param name="filePath">ファイルパス</param>
''' <param name="data">書き込むバイトデータ</param>
''' <param name="options">書き込みオプション（オプション）</param>
''' <returns>成功時True、失敗時False</returns>
Public Function WriteBinaryFile(ByVal filePath As String, _
                              ByRef data() As Byte, _
                              Optional ByVal options As BinaryWriteOptions) As Boolean
End Function

' ファイルシステム操作
''' <summary>
''' ファイルの存在を確認します
''' </summary>
''' <param name="filePath">ファイルパス</param>
''' <param name="options">確認オプション（オプション）</param>
''' <returns>存在する場合True、それ以外はFalse</returns>
Public Function FileExists(ByVal filePath As String, _
                         Optional ByVal options As FileCheckOptions) As Boolean
End Function

''' <summary>
''' フォルダの存在を確認します
''' </summary>
''' <param name="folderPath">フォルダパス</param>
''' <param name="options">確認オプション（オプション）</param>
''' <returns>存在する場合True、それ以外はFalse</returns>
Public Function FolderExists(ByVal folderPath As String, _
                           Optional ByVal options As FolderCheckOptions) As Boolean
End Function

''' <summary>
''' フォルダを作成します
''' </summary>
''' <param name="folderPath">フォルダパス</param>
''' <param name="options">作成オプション（オプション）</param>
''' <returns>成功時True、失敗時False</returns>
Public Function CreateFolder(ByVal folderPath As String, _
                           Optional ByVal options As FolderCreateOptions) As Boolean
End Function

''' <summary>
''' ファイルを削除します
''' </summary>
''' <param name="filePath">ファイルパス</param>
''' <param name="options">削除オプション（オプション）</param>
''' <returns>成功時True、失敗時False</returns>
Public Function DeleteFile(ByVal filePath As String, _
                         Optional ByVal options As FileDeleteOptions) As Boolean
End Function

''' <summary>
''' フォルダを削除します
''' </summary>
''' <param name="folderPath">フォルダパス</param>
''' <param name="options">削除オプション（オプション）</param>
''' <returns>成功時True、失敗時False</returns>
Public Function DeleteFolder(ByVal folderPath As String, _
                           Optional ByVal options As FolderDeleteOptions) As Boolean
End Function

' メタデータ操作
''' <summary>
''' ファイルのメタデータを取得します
''' </summary>
''' <param name="filePath">ファイルパス</param>
''' <returns>メタデータ情報</returns>
Public Function GetMetadata(ByVal filePath As String) As FileMetadata
End Function

''' <summary>
''' ファイルのメタデータを設定します
''' </summary>
''' <param name="filePath">ファイルパス</param>
''' <param name="metadata">メタデータ情報</param>
''' <returns>成功時True、失敗時False</returns>
Public Function SetMetadata(ByVal filePath As String, _
                          ByVal metadata As FileMetadata) As Boolean
End Function

' セキュリティ操作
''' <summary>
''' ファイルのアクセス権を設定します
''' </summary>
''' <param name="filePath">ファイルパス</param>
''' <param name="permissions">アクセス権設定</param>
''' <returns>成功時True、失敗時False</returns>
Public Function SetPermissions(ByVal filePath As String, _
                             ByVal permissions As FilePermissions) As Boolean
End Function

''' <summary>
''' ファイルを暗号化します
''' </summary>
''' <param name="filePath">ファイルパス</param>
''' <param name="options">暗号化オプション（オプション）</param>
''' <returns>成功時True、失敗時False</returns>
Public Function EncryptFile(ByVal filePath As String, _
                          Optional ByVal options As EncryptionOptions) As Boolean
End Function

' パフォーマンス監視
''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
''' <returns>パフォーマンス情報のコレクション</returns>
Public Function GetPerformanceMetrics() As Collection
End Function

''' <summary>
''' ファイル操作の状態を検証します
''' </summary>
''' <returns>有効な場合True</returns>
Public Function Validate() As Boolean
End Function

''' <summary>
''' リソースを解放します
''' </summary>
Public Sub Cleanup()
End Sub

================
File: interfaces/IIniFile.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IIniFile"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

'@Description("INIファイルの読み書きと高度な設定管理を提供するインターフェース")

' 定数定義
Private Const MAX_SECTION_LENGTH As Long = 255     ' セクション名の最大長
Private Const MAX_KEY_LENGTH As Long = 255        ' キー名の最大長
Private Const MAX_VALUE_LENGTH As Long = 32768    ' 値の最大長
Private Const MAX_LINE_LENGTH As Long = 32768     ' 行の最大長
Private Const CACHE_DURATION_MS As Long = 300000  ' キャッシュの有効期間（5分）
Private Const MAX_BACKUP_COUNT As Long = 5        ' 最大バックアップ数
Private Const BUFFER_SIZE As Long = 8192          ' バッファサイズ（8KB）

' イベント定義
Public Event ValueChanged(ByVal section As String, ByVal key As String, ByVal oldValue As String, ByVal newValue As String)
Public Event SectionAdded(ByVal section As String)
Public Event SectionRemoved(ByVal section As String)
Public Event FileLoaded(ByVal filePath As String, ByVal success As Boolean)
Public Event FileSaved(ByVal filePath As String, ByVal success As Boolean)
Public Event CacheUpdated(ByVal section As String, ByVal key As String)
Public Event BackupCreated(ByVal backupPath As String)
Public Event PerformanceAlert(ByVal metricType As String, ByVal currentValue As Double, ByVal threshold As Double)

''' <summary>
''' INIファイルから値を読み取ります
''' </summary>
''' <param name="section">セクション名</param>
''' <param name="key">キー名</param>
''' <param name="defaultValue">デフォルト値（オプション）</param>
''' <param name="options">読み取りオプション（オプション）</param>
''' <returns>読み取った値</returns>
Public Function GetValue(ByVal section As String, _
                        ByVal key As String, _
                        Optional ByVal defaultValue As Variant, _
                        Optional ByVal options As ReadOptions) As Variant
End Function

''' <summary>
''' INIファイルに値を書き込みます
''' </summary>
''' <param name="section">セクション名</param>
''' <param name="key">キー名</param>
''' <param name="value">書き込む値</param>
''' <param name="options">書き込みオプション（オプション）</param>
''' <returns>成功時True、失敗時False</returns>
Public Function SetValue(ByVal section As String, _
                        ByVal key As String, _
                        ByVal value As Variant, _
                        Optional ByVal options As WriteOptions) As Boolean
End Function

''' <summary>
''' セクションを取得します
''' </summary>
''' <param name="section">セクション名</param>
''' <param name="options">取得オプション（オプション）</param>
''' <returns>セクション内のキーと値のコレクション</returns>
Public Function GetSection(ByVal section As String, _
                         Optional ByVal options As SectionOptions) As Collection
End Function

''' <summary>
''' すべてのセクションを取得します
''' </summary>
''' <param name="options">取得オプション（オプション）</param>
''' <returns>セクション名のコレクション</returns>
Public Function GetSections(Optional ByVal options As SectionOptions) As Collection
End Function

''' <summary>
''' セクションを削除します
''' </summary>
''' <param name="section">セクション名</param>
''' <param name="options">削除オプション（オプション）</param>
''' <returns>成功時True、失敗時False</returns>
Public Function RemoveSection(ByVal section As String, _
                            Optional ByVal options As RemoveOptions) As Boolean
End Function

''' <summary>
''' キーを削除します
''' </summary>
''' <param name="section">セクション名</param>
''' <param name="key">キー名</param>
''' <param name="options">削除オプション（オプション）</param>
''' <returns>成功時True、失敗時False</returns>
Public Function RemoveKey(ByVal section As String, _
                         ByVal key As String, _
                         Optional ByVal options As RemoveOptions) As Boolean
End Function

''' <summary>
''' INIファイルを読み込みます
''' </summary>
''' <param name="filePath">ファイルパス</param>
''' <param name="options">読み込みオプション（オプション）</param>
''' <returns>成功時True、失敗時False</returns>
Public Function LoadFile(ByVal filePath As String, _
                        Optional ByVal options As LoadOptions) As Boolean
End Function

''' <summary>
''' INIファイルを保存します
''' </summary>
''' <param name="filePath">ファイルパス</param>
''' <param name="options">保存オプション（オプション）</param>
''' <returns>成功時True、失敗時False</returns>
Public Function SaveFile(ByVal filePath As String, _
                        Optional ByVal options As SaveOptions) As Boolean
End Function

''' <summary>
''' バックアップを作成します
''' </summary>
''' <param name="options">バックアップオプション（オプション）</param>
''' <returns>バックアップファイルのパス</returns>
Public Function CreateBackup(Optional ByVal options As BackupOptions) As String
End Function

''' <summary>
''' バックアップから復元します
''' </summary>
''' <param name="backupPath">バックアップファイルのパス</param>
''' <param name="options">復元オプション（オプション）</param>
''' <returns>成功時True、失敗時False</returns>
Public Function RestoreFromBackup(ByVal backupPath As String, _
                                Optional ByVal options As RestoreOptions) As Boolean
End Function

''' <summary>
''' キャッシュをクリアします
''' </summary>
Public Sub ClearCache()
End Sub

''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
''' <returns>パフォーマンス情報のコレクション</returns>
Public Function GetPerformanceMetrics() As Collection
End Function

''' <summary>
''' INIファイルの状態を検証します
''' </summary>
''' <returns>有効な場合True</returns>
Public Function Validate() As Boolean
End Function

''' <summary>
''' リソースを解放します
''' </summary>
Public Sub Cleanup()
End Sub

================
File: interfaces/IKeyDerivationStrategy.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IKeyDerivationStrategy"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

'@Description("パスワードからキーを安全に導出するための戦略を提供するインターフェース")

' 定数定義
Private Const MIN_PASSWORD_LENGTH As Long = 8      ' 最小パスワード長
Private Const MIN_SALT_LENGTH As Long = 16         ' 最小ソルト長（バイト）
Private Const MIN_ITERATIONS As Long = 10000       ' 最小反復回数
Private Const DEFAULT_KEY_LENGTH As Long = 32      ' デフォルトキー長（バイト）
Private Const MAX_CACHE_SIZE As Long = 1000        ' 最大キャッシュサイズ
Private Const CACHE_DURATION_MS As Long = 300000   ' キャッシュの有効期間（5分）
Private Const MAX_MEMORY_MB As Long = 128          ' 最大メモリ使用量（MB）

' イベント定義
Public Event KeyDerivationStarted(ByVal iterations As Long, ByVal keyLength As Long)
Public Event KeyDerivationCompleted(ByVal executionTime As Double)
Public Event SecurityAlert(ByVal alertType As String, ByVal details As String)
Public Event ParameterValidationFailed(ByVal parameterName As String, ByVal reason As String)
Public Event CacheUpdated(ByVal cacheSize As Long)
Public Event PerformanceAlert(ByVal metricType As String, ByVal currentValue As Double, ByVal threshold As Double)
Public Event ResourceExhausted(ByVal resourceType As String, ByVal details As String)

''' <summary>
''' パスワードからキーを導出します
''' </summary>
''' <param name="password">パスワード文字列</param>
''' <param name="salt">ソルト値（バイト配列）</param>
''' <param name="iterations">反復回数</param>
''' <param name="options">導出オプション（オプション）</param>
''' <returns>導出されたキー（バイト配列）</returns>
''' <remarks>
''' エラー処理要件：
''' - パスワードの検証
''' - ソルトの検証
''' - 反復回数の検証
''' - メモリ使用量の監視
''' - パフォーマンスの監視
''' - セキュリティ要件の確認
''' </remarks>
Public Function DeriveKey(ByVal password As String, _
                         ByRef salt As Variant, _
                         ByVal iterations As Long, _
                         Optional ByVal options As DerivationOptions) As Byte()
End Function

''' <summary>
''' パラメータを検証します
''' </summary>
''' <param name="password">パスワード文字列</param>
''' <param name="salt">ソルト値</param>
''' <param name="iterations">反復回数</param>
''' <param name="options">検証オプション（オプション）</param>
''' <returns>検証結果</returns>
Public Function ValidateParameters(ByVal password As String, _
                                 ByRef salt As Variant, _
                                 ByVal iterations As Long, _
                                 Optional ByVal options As ValidationOptions) As ValidationResult
End Function

''' <summary>
''' ソルトを生成します
''' </summary>
''' <param name="length">ソルト長（オプション）</param>
''' <param name="options">生成オプション（オプション）</param>
''' <returns>生成されたソルト</returns>
Public Function GenerateSalt(Optional ByVal length As Long = 16, _
                           Optional ByVal options As SaltOptions) As Byte()
End Function

''' <summary>
''' 推奨パラメータを取得します
''' </summary>
''' <param name="options">推奨オプション（オプション）</param>
''' <returns>推奨パラメータ</returns>
Public Function GetRecommendedParameters(Optional ByVal options As ParameterOptions) As DerivationParameters
End Function

''' <summary>
''' キャッシュ設定を構成します
''' </summary>
''' <param name="settings">キャッシュ設定</param>
Public Sub ConfigureCache(ByVal settings As CacheSettings)
End Sub

''' <summary>
''' メモリ使用量を最適化します
''' </summary>
''' <param name="options">最適化オプション（オプション）</param>
Public Sub OptimizeMemoryUsage(Optional ByVal options As OptimizationOptions)
End Sub

''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
''' <returns>パフォーマンス情報のコレクション</returns>
Public Function GetPerformanceMetrics() As Collection
End Function

''' <summary>
''' セキュリティ監査を実行します
''' </summary>
''' <param name="options">監査オプション（オプション）</param>
''' <returns>監査結果</returns>
Public Function PerformSecurityAudit(Optional ByVal options As AuditOptions) As SecurityAuditResult
End Function

''' <summary>
''' キー導出の状態を検証します
''' </summary>
''' <returns>有効な場合True</returns>
Public Function Validate() As Boolean
End Function

''' <summary>
''' リソースを解放します
''' </summary>
Public Sub Cleanup()
End Sub

================
File: interfaces/ILock.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "ILock"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

'@Description("リソースの排他制御とデッドロック検出を提供するインターフェース")

' 定数定義
Private Const DEFAULT_TIMEOUT_MS As Long = 30000    ' デフォルトタイムアウト（30秒）
Private Const MAX_RETRY_COUNT As Long = 3           ' 最大リトライ回数
Private Const MIN_SPIN_COUNT As Long = 1000         ' 最小スピンカウント
Private Const MAX_RECURSION_DEPTH As Long = 100     ' 最大再帰深度
Private Const DEADLOCK_CHECK_INTERVAL_MS As Long = 1000 ' デッドロック検出間隔（1秒）
Private Const MAX_WAITING_THREADS As Long = 100     ' 最大待機スレッド数
Private Const CLEANUP_INTERVAL_MS As Long = 60000   ' クリーンアップ間隔（1分）

' イベント定義
Public Event LockAcquired(ByVal lockId As String, ByVal waitTime As Double)
Public Event LockReleased(ByVal lockId As String, ByVal holdTime As Double)
Public Event DeadlockDetected(ByVal lockId As String, ByVal waitingThreads As Collection)
Public Event TimeoutOccurred(ByVal lockId As String, ByVal timeout As Long)
Public Event PriorityInversion(ByVal lockId As String, ByVal currentPriority As Long, ByVal requiredPriority As Long)
Public Event ResourceContentionDetected(ByVal lockId As String, ByVal contentionLevel As Double)
Public Event PerformanceAlert(ByVal metricType As String, ByVal currentValue As Double, ByVal threshold As Double)

''' <summary>
''' ロックを取得します
''' </summary>
''' <param name="timeout">タイムアウト時間（ミリ秒）。-1は無限待機</param>
''' <param name="options">取得オプション（オプション）</param>
''' <returns>ロックの取得に成功した場合はTrue、タイムアウトした場合はFalse</returns>
''' <remarks>
''' エラー処理要件：
''' - タイムアウトの検証
''' - デッドロックの検出
''' - 優先度逆転の防止
''' - リソース競合の監視
''' - 再入可能性の確認
''' </remarks>
Public Function Acquire(Optional ByVal timeout As Long = -1, _
                       Optional ByVal options As LockOptions) As Boolean
End Function

''' <summary>
''' ロックを解放します
''' </summary>
''' <param name="options">解放オプション（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - 所有権の確認
''' - 待機スレッドの管理
''' - リソースの解放確認
''' - イベントの発行
''' </remarks>
Public Sub Release(Optional ByVal options As ReleaseOptions)
End Sub

''' <summary>
''' ロックの状態を確認します
''' </summary>
''' <returns>ロックの状態情報</returns>
Public Function GetLockStatus() As LockStatus
End Function

''' <summary>
''' 待機中のスレッドを取得します
''' </summary>
''' <returns>待機スレッドのコレクション</returns>
Public Function GetWaitingThreads() As Collection
End Function

''' <summary>
''' ロックの優先度を設定します
''' </summary>
''' <param name="priority">優先度</param>
Public Property Let Priority(ByVal priority As LockPriority)
End Property

''' <summary>
''' ロックの優先度を取得します
''' </summary>
Public Property Get Priority() As LockPriority
End Property

''' <summary>
''' 再入可能性を設定します
''' </summary>
''' <param name="value">再入可能な場合True</param>
Public Property Let IsReentrant(ByVal value As Boolean)
End Property

''' <summary>
''' 再入可能かどうかを取得します
''' </summary>
Public Property Get IsReentrant() As Boolean
End Property

''' <summary>
''' デッドロック検出を有効/無効にします
''' </summary>
''' <param name="value">有効な場合True</param>
Public Property Let DeadlockDetectionEnabled(ByVal value As Boolean)
End Property

''' <summary>
''' デッドロック検出が有効かどうかを取得します
''' </summary>
Public Property Get DeadlockDetectionEnabled() As Boolean
End Property

''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
''' <returns>パフォーマンス情報のコレクション</returns>
Public Function GetPerformanceMetrics() As Collection
End Function

''' <summary>
''' デッドロックを検出します
''' </summary>
''' <param name="options">検出オプション（オプション）</param>
''' <returns>デッドロック情報のコレクション</returns>
Public Function DetectDeadlocks(Optional ByVal options As DeadlockOptions) As Collection
End Function

''' <summary>
''' ロックの状態を検証します
''' </summary>
''' <returns>有効な場合True</returns>
Public Function Validate() As Boolean
End Function

''' <summary>
''' リソースを解放します
''' </summary>
Public Sub Cleanup()
End Sub

================
File: interfaces/ILogger.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "ILogger"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

'@Description("ログの記録、管理、分析を提供し、複数の出力先とフォーマットをサポートするインターフェース")

' 定数定義
Private Const MAX_MESSAGE_LENGTH As Long = 8192     ' メッセージの最大長
Private Const MAX_QUEUE_SIZE As Long = 10000        ' キューの最大サイズ
Private Const FLUSH_INTERVAL_MS As Long = 1000      ' フラッシュ間隔（1秒）
Private Const MAX_BATCH_SIZE As Long = 1000         ' バッチサイズの最大値
Private Const MAX_FILE_SIZE_MB As Long = 100        ' ログファイルの最大サイズ（MB）
Private Const MAX_RETENTION_DAYS As Long = 90       ' ログの最大保持期間（日）
Private Const COMPRESSION_THRESHOLD_MB As Long = 50  ' 圧縮開始サイズ（MB）

' イベント定義
Public Event LogEntryWritten(ByVal entry As LogEntry, ByVal destination As LogDestination)
Public Event LogLevelChanged(ByVal oldLevel As LogLevel, ByVal newLevel As LogLevel)
Public Event DestinationChanged(ByVal oldDestination As LogDestination, ByVal newDestination As LogDestination)
Public Event LogRotated(ByVal oldFile As String, ByVal newFile As String)
Public Event LogCompressed(ByVal originalSize As Long, ByVal compressedSize As Long)
Public Event QueueThresholdReached(ByVal queueSize As Long, ByVal threshold As Long)
Public Event PerformanceAlert(ByVal metricType As String, ByVal currentValue As Double, ByVal threshold As Double)
Public Event StorageAlert(ByVal availableSpace As Long, ByVal threshold As Long)

''' <summary>
''' ログを記録します
''' </summary>
''' <param name="moduleName">モジュール名</param>
''' <param name="message">ログメッセージ</param>
''' <param name="level">ログレベル（オプション）</param>
''' <param name="errorCode">エラーコード（オプション）</param>
''' <param name="options">ログオプション（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - パラメータの検証（NULL、空文字、最大長など）
''' - 出力先の状態確認
''' - エラー発生時の代替処理
''' - リトライメカニズムの実装
''' - キューの管理
''' - パフォーマンスの監視
''' </remarks>
Public Sub Log(ByVal moduleName As String, _
               ByVal message As String, _
               Optional ByVal level As LogLevel = llInfo, _
               Optional ByVal errorCode As ErrorCode, _
               Optional ByVal options As LogOptions)
End Sub

''' <summary>
''' バッチログを記録します
''' </summary>
''' <param name="entries">ログエントリのコレクション</param>
''' <param name="options">バッチオプション（オプション）</param>
Public Sub LogBatch(ByVal entries As Collection, Optional ByVal options As BatchLogOptions)
End Sub

''' <summary>
''' ログレベルを設定します
''' </summary>
''' <param name="level">ログレベル</param>
''' <param name="options">レベルオプション（オプション）</param>
Public Property Let LogLevel(ByVal level As LogLevel, Optional ByVal options As LevelOptions)
End Property

''' <summary>
''' 現在のログレベルを取得します
''' </summary>
Public Property Get LogLevel() As LogLevel
End Property

''' <summary>
''' ログの出力先を設定します
''' </summary>
''' <param name="destination">ログの出力先</param>
''' <param name="options">出力先オプション（オプション）</param>
Public Property Let LogDestination(ByVal destination As LogDestination, Optional ByVal options As DestinationOptions)
End Property

''' <summary>
''' 現在のログ出力先を取得します
''' </summary>
Public Property Get LogDestination() As LogDestination
End Property

''' <summary>
''' ログフィルターを設定します
''' </summary>
''' <param name="filter">フィルター条件</param>
''' <param name="options">フィルターオプション（オプション）</param>
Public Sub SetLogFilter(ByVal filter As String, Optional ByVal options As FilterOptions)
End Sub

''' <summary>
''' ログをフラッシュします
''' </summary>
''' <param name="options">フラッシュオプション（オプション）</param>
Public Sub Flush(Optional ByVal options As FlushOptions)
End Sub

''' <summary>
''' ログをローテーションします
''' </summary>
''' <param name="options">ローテーションオプション（オプション）</param>
Public Sub RotateLog(Optional ByVal options As RotationOptions)
End Sub

''' <summary>
''' ログを圧縮します
''' </summary>
''' <param name="filePath">ファイルパス</param>
''' <param name="options">圧縮オプション（オプション）</param>
Public Sub CompressLog(ByVal filePath As String, Optional ByVal options As CompressionOptions)
End Sub

''' <summary>
''' ログを検索します
''' </summary>
''' <param name="searchCriteria">検索条件</param>
''' <param name="options">検索オプション（オプション）</param>
''' <returns>検索結果のコレクション</returns>
Public Function SearchLogs(ByVal searchCriteria As String, Optional ByVal options As SearchOptions) As Collection
End Function

''' <summary>
''' ログの統計情報を取得します
''' </summary>
''' <param name="options">統計オプション（オプション）</param>
''' <returns>統計情報</returns>
Public Function GetLogStatistics(Optional ByVal options As StatisticsOptions) As LogStatistics
End Function

''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
''' <returns>パフォーマンス情報のコレクション</returns>
Public Function GetPerformanceMetrics() As Collection
End Function

''' <summary>
''' ログの状態を検証します
''' </summary>
''' <returns>有効な場合True</returns>
Public Function Validate() As Boolean
End Function

''' <summary>
''' リソースを解放します
''' </summary>
Public Sub Cleanup()
End Sub

================
File: interfaces/ILoggerSettings.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "ILoggerSettings"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

'@Description("ロガーの設定管理と検証を提供するインターフェース")

' 定数定義
Private Const MAX_FILE_SIZE_MB As Long = 100       ' 最大ファイルサイズ（MB）
Private Const MIN_TIMER_INTERVAL As Long = 100     ' 最小タイマー間隔（ミリ秒）
Private Const MAX_TIMER_INTERVAL As Long = 3600000 ' 最大タイマー間隔（1時間）
Private Const MAX_BATCH_SIZE As Long = 1000        ' 最大バッチサイズ
Private Const CACHE_DURATION_MS As Long = 300000   ' キャッシュの有効期間（5分）
Private Const MAX_RETRY_COUNT As Long = 3          ' 最大リトライ回数
Private Const CLEANUP_INTERVAL_MS As Long = 3600000 ' クリーンアップ間隔（1時間）

' イベント定義
Public Event SettingChanged(ByVal settingName As String, ByVal oldValue As Variant, ByVal newValue As Variant)
Public Event ValidationFailed(ByVal settingName As String, ByVal value As Variant, ByVal reason As String)
Public Event ConfigurationLoaded(ByVal source As String, ByVal success As Boolean)
Public Event ConfigurationSaved(ByVal destination As String, ByVal success As Boolean)
Public Event EnvironmentChanged(ByVal oldEnvironment As String, ByVal newEnvironment As String)
Public Event SecurityAlert(ByVal alertType As String, ByVal details As String)
Public Event PerformanceAlert(ByVal metricType As String, ByVal currentValue As Double, ByVal threshold As Double)

' プロパティ定義
''' <summary>
''' ログレベルを取得または設定します
''' </summary>
Public Property Get LogLevel() As LogLevel
End Property

Public Property Let LogLevel(ByVal value As LogLevel)
End Property

''' <summary>
''' ログ出力先を取得または設定します
''' </summary>
Public Property Get LogDestination() As ILogDestination
End Property

Public Property Let LogDestination(ByVal value As ILogDestination)
End Property

''' <summary>
''' ログファイルパスを取得または設定します
''' </summary>
Public Property Get LogFilePath() As String
End Property

Public Property Let LogFilePath(ByVal value As String)
End Property

''' <summary>
''' ログテーブル名を取得または設定します
''' </summary>
Public Property Get LogTableName() As String
End Property

Public Property Let LogTableName(ByVal value As String)
End Property

''' <summary>
''' ログイベントソースを取得または設定します
''' </summary>
Public Property Get LogEventSource() As String
End Property

Public Property Let LogEventSource(ByVal value As String)
End Property

''' <summary>
''' タイマー間隔を取得または設定します
''' </summary>
Public Property Get TimerInterval() As Long
End Property

Public Property Let TimerInterval(ByVal value As Long)
End Property

''' <summary>
''' データベース接続文字列を取得または設定します
''' </summary>
Public Property Get ConnectionString() As String
End Property

Public Property Let ConnectionString(ByVal value As String)
End Property

' メソッド定義
''' <summary>
''' 設定を検証します
''' </summary>
''' <param name="options">検証オプション（オプション）</param>
''' <returns>検証結果</returns>
Public Function ValidateSettings(Optional ByVal options As ValidationOptions) As ValidationResult
End Function

''' <summary>
''' 設定をファイルから読み込みます
''' </summary>
''' <param name="filePath">ファイルパス</param>
''' <param name="options">読み込みオプション（オプション）</param>
Public Sub LoadFromFile(ByVal filePath As String, Optional ByVal options As LoadOptions)
End Sub

''' <summary>
''' 設定をファイルに保存します
''' </summary>
''' <param name="filePath">ファイルパス</param>
''' <param name="options">保存オプション（オプション）</param>
Public Sub SaveToFile(ByVal filePath As String, Optional ByVal options As SaveOptions)
End Sub

''' <summary>
''' 環境を設定します
''' </summary>
''' <param name="environment">環境名</param>
''' <param name="options">環境オプション（オプション）</param>
Public Sub SetEnvironment(ByVal environment As String, Optional ByVal options As EnvironmentOptions)
End Sub

''' <summary>
''' 設定をリセットします
''' </summary>
''' <param name="options">リセットオプション（オプション）</param>
Public Sub ResetToDefaults(Optional ByVal options As ResetOptions)
End Sub

''' <summary>
''' 設定のバックアップを作成します
''' </summary>
''' <param name="backupPath">バックアップパス（オプション）</param>
''' <returns>バックアップファイルのパス</returns>
Public Function CreateBackup(Optional ByVal backupPath As String) As String
End Function

''' <summary>
''' バックアップから復元します
''' </summary>
''' <param name="backupPath">バックアップファイルのパス</param>
''' <param name="options">復元オプション（オプション）</param>
Public Sub RestoreFromBackup(ByVal backupPath As String, Optional ByVal options As RestoreOptions)
End Sub

''' <summary>
''' 設定を暗号化します
''' </summary>
''' <param name="options">暗号化オプション（オプション）</param>
Public Sub EncryptSettings(Optional ByVal options As EncryptionOptions)
End Sub

''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
''' <returns>パフォーマンス情報のコレクション</returns>
Public Function GetPerformanceMetrics() As Collection
End Function

''' <summary>
''' 設定の状態を検証します
''' </summary>
''' <returns>有効な場合True</returns>
Public Function Validate() As Boolean
End Function

''' <summary>
''' リソースを解放します
''' </summary>
Public Sub Cleanup()
End Sub

================
File: interfaces/IMessageFormatter.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IMessageFormatter"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredefinedId = False
Attribute VB_Exposed = True
Option Explicit

'@Description("メッセージのフォーマットとテンプレート管理を提供するインターフェース")

' 定数定義
Private Const MAX_MESSAGE_LENGTH As Long = 8192     ' メッセージの最大長
Private Const MAX_TEMPLATE_SIZE As Long = 32768     ' テンプレートの最大サイズ
Private Const MAX_PLACEHOLDERS As Long = 100        ' プレースホルダーの最大数
Private Const CACHE_DURATION_MS As Long = 300000    ' キャッシュの有効期間（5分）
Private Const MAX_RETRY_COUNT As Long = 3           ' 最大リトライ回数
Private Const DEFAULT_LOCALE As String = "ja-JP"    ' デフォルトロケール
Private Const CLEANUP_INTERVAL_MS As Long = 3600000 ' クリーンアップ間隔（1時間）

' イベント定義
Public Event MessageFormatted(ByVal originalMessage As String, ByVal formattedMessage As String)
Public Event TemplateLoaded(ByVal templateName As String, ByVal success As Boolean)
Public Event LocaleChanged(ByVal oldLocale As String, ByVal newLocale As String)
Public Event PlaceholderResolved(ByVal placeholder As String, ByVal value As String)
Public Event FormatError(ByVal errorType As String, ByVal details As String)
Public Event CacheUpdated(ByVal templateName As String, ByVal isCached As Boolean)
Public Event PerformanceAlert(ByVal metricType As String, ByVal currentValue As Double, ByVal threshold As Double)

''' <summary>
''' メッセージをフォーマットします
''' </summary>
''' <param name="message">基本メッセージ</param>
''' <param name="errorInfo">エラー情報</param>
''' <param name="options">フォーマットオプション（オプション）</param>
''' <returns>フォーマットされたメッセージ</returns>
''' <remarks>
''' エラー処理要件：
''' - メッセージの検証
''' - プレースホルダーの解決
''' - テンプレートの適用
''' - 文字列長の制限
''' - エスケープ処理
''' </remarks>
Public Function FormatMessage(ByVal message As String, _
                            ByRef errorInfo As ErrorInfo, _
                            Optional ByVal options As FormatOptions) As String
End Function

''' <summary>
''' テンプレートを使用してメッセージをフォーマットします
''' </summary>
''' <param name="templateName">テンプレート名</param>
''' <param name="parameters">パラメータのコレクション</param>
''' <param name="options">フォーマットオプション（オプション）</param>
''' <returns>フォーマットされたメッセージ</returns>
Public Function FormatWithTemplate(ByVal templateName As String, _
                                 ByVal parameters As Collection, _
                                 Optional ByVal options As TemplateOptions) As String
End Function

''' <summary>
''' メッセージテンプレートを設定します
''' </summary>
''' <param name="templateName">テンプレート名</param>
''' <param name="template">テンプレート内容</param>
''' <param name="options">テンプレートオプション（オプション）</param>
Public Sub SetTemplate(ByVal templateName As String, _
                      ByVal template As String, _
                      Optional ByVal options As TemplateOptions)
End Sub

''' <summary>
''' メッセージテンプレートを取得します
''' </summary>
''' <param name="templateName">テンプレート名</param>
''' <returns>テンプレート内容</returns>
Public Function GetTemplate(ByVal templateName As String) As String
End Function

''' <summary>
''' ロケールを設定します
''' </summary>
''' <param name="locale">ロケール</param>
''' <param name="options">ロケールオプション（オプション）</param>
Public Sub SetLocale(ByVal locale As String, Optional ByVal options As LocaleOptions)
End Sub

''' <summary>
''' 現在のロケールを取得します
''' </summary>
Public Property Get CurrentLocale() As String
End Property

''' <summary>
''' カスタムプレースホルダーを追加します
''' </summary>
''' <param name="placeholder">プレースホルダー</param>
''' <param name="resolver">解決関数</param>
Public Sub AddPlaceholder(ByVal placeholder As String, ByVal resolver As IPlaceholderResolver)
End Sub

''' <summary>
''' フォーマット設定をエクスポートします
''' </summary>
''' <param name="filePath">出力ファイルパス</param>
''' <param name="options">エクスポートオプション（オプション）</param>
Public Sub ExportSettings(ByVal filePath As String, Optional ByVal options As ExportOptions)
End Sub

''' <summary>
''' フォーマット設定をインポートします
''' </summary>
''' <param name="filePath">入力ファイルパス</param>
''' <param name="options">インポートオプション（オプション）</param>
Public Sub ImportSettings(ByVal filePath As String, Optional ByVal options As ImportOptions)
End Sub

''' <summary>
''' テンプレートをバリデーションします
''' </summary>
''' <param name="template">テンプレート内容</param>
''' <param name="options">検証オプション（オプション）</param>
''' <returns>検証結果</returns>
Public Function ValidateTemplate(ByVal template As String, Optional ByVal options As ValidationOptions) As ValidationResult
End Function

''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
''' <returns>パフォーマンス情報のコレクション</returns>
Public Function GetPerformanceMetrics() As Collection
End Function

''' <summary>
''' フォーマッターの状態を検証します
''' </summary>
''' <returns>有効な場合True</returns>
Public Function Validate() As Boolean
End Function

''' <summary>
''' リソースを解放します
''' </summary>
Public Sub Cleanup()
End Sub

================
File: interfaces/IMutex.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IMutex"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

'@Description("スレッド間の同期と排他制御を提供するインターフェース")

' 定数定義
Private Const DEFAULT_TIMEOUT_MS As Long = 30000    ' デフォルトタイムアウト（30秒）
Private Const MAX_RETRY_COUNT As Long = 3           ' 最大リトライ回数
Private Const MIN_SPIN_COUNT As Long = 1000         ' 最小スピンカウント
Private Const MAX_RECURSION_DEPTH As Long = 100     ' 最大再帰深度
Private Const DEADLOCK_CHECK_INTERVAL_MS As Long = 1000 ' デッドロック検出間隔（1秒）
Private Const MAX_WAITING_THREADS As Long = 100     ' 最大待機スレッド数
Private Const CLEANUP_INTERVAL_MS As Long = 60000   ' クリーンアップ間隔（1分）

' イベント定義
Public Event MutexCreated(ByVal mutexName As String, ByVal initialOwner As Boolean)
Public Event MutexAcquired(ByVal mutexName As String, ByVal waitTime As Double)
Public Event MutexReleased(ByVal mutexName As String, ByVal holdTime As Double)
Public Event DeadlockDetected(ByVal mutexName As String, ByVal waitingThreads As Collection)
Public Event TimeoutOccurred(ByVal mutexName As String, ByVal timeout As Long)
Public Event PriorityInversion(ByVal mutexName As String, ByVal currentPriority As Long, ByVal requiredPriority As Long)
Public Event ResourceContentionDetected(ByVal mutexName As String, ByVal contentionLevel As Double)
Public Event PerformanceAlert(ByVal metricType As String, ByVal currentValue As Double, ByVal threshold As Double)

''' <summary>
''' ミューテックスを作成します
''' </summary>
''' <param name="initialOwner">初期所有者フラグ</param>
''' <param name="name">ミューテックスの名前</param>
''' <param name="options">作成オプション（オプション）</param>
''' <returns>成功時True、失敗時False</returns>
''' <remarks>
''' エラー処理要件：
''' - 名前の検証
''' - 重複チェック
''' - セキュリティ確認
''' - リソース確保
''' </remarks>
Public Function CreateMutex(ByVal initialOwner As Boolean, _
                          ByVal name As String, _
                          Optional ByVal options As MutexOptions) As Boolean
End Function

''' <summary>
''' ミューテックスを解放します
''' </summary>
''' <param name="options">解放オプション（オプション）</param>
''' <returns>成功時True、失敗時False</returns>
''' <remarks>
''' エラー処理要件：
''' - 所有権の確認
''' - 待機スレッドの管理
''' - リソースの解放確認
''' - イベントの発行
''' </remarks>
Public Function ReleaseMutex(Optional ByVal options As ReleaseOptions) As Boolean
End Function

''' <summary>
''' ミューテックスの所有権を取得します
''' </summary>
''' <param name="timeoutMilliseconds">タイムアウト時間（ミリ秒）</param>
''' <param name="options">取得オプション（オプション）</param>
''' <returns>成功時True、失敗時False</returns>
Public Function WaitForSingleObject(ByVal timeoutMilliseconds As Long, _
                                  Optional ByVal options As WaitOptions) As Boolean
End Function

''' <summary>
''' ミューテックスの状態を確認します
''' </summary>
''' <returns>ミューテックスの状態情報</returns>
Public Function GetMutexStatus() As MutexStatus
End Function

''' <summary>
''' 待機中のスレッドを取得します
''' </summary>
''' <returns>待機スレッドのコレクション</returns>
Public Function GetWaitingThreads() As Collection
End Function

''' <summary>
''' ミューテックスの優先度を設定します
''' </summary>
''' <param name="priority">優先度</param>
Public Property Let Priority(ByVal priority As MutexPriority)
End Property

''' <summary>
''' ミューテックスの優先度を取得します
''' </summary>
Public Property Get Priority() As MutexPriority
End Property

''' <summary>
''' 再入可能性を設定します
''' </summary>
''' <param name="value">再入可能な場合True</param>
Public Property Let IsReentrant(ByVal value As Boolean)
End Property

''' <summary>
''' 再入可能かどうかを取得します
''' </summary>
Public Property Get IsReentrant() As Boolean
End Property

''' <summary>
''' デッドロック検出を有効/無効にします
''' </summary>
''' <param name="value">有効な場合True</param>
Public Property Let DeadlockDetectionEnabled(ByVal value As Boolean)
End Property

''' <summary>
''' デッドロック検出が有効かどうかを取得します
''' </summary>
Public Property Get DeadlockDetectionEnabled() As Boolean
End Property

''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
''' <returns>パフォーマンス情報のコレクション</returns>
Public Function GetPerformanceMetrics() As Collection
End Function

''' <summary>
''' デッドロックを検出します
''' </summary>
''' <param name="options">検出オプション（オプション）</param>
''' <returns>デッドロック情報のコレクション</returns>
Public Function DetectDeadlocks(Optional ByVal options As DeadlockOptions) As Collection
End Function

''' <summary>
''' ミューテックスの状態を検証します
''' </summary>
''' <returns>有効な場合True</returns>
Public Function Validate() As Boolean
End Function

''' <summary>
''' リソースを解放します
''' </summary>
Public Sub Cleanup()
End Sub

================
File: interfaces/IPerformanceCounter.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IPerformanceCounter"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

'@Description("高精度なパフォーマンス測定と監視機能を提供するインターフェース")

' 定数定義
Private Const MAX_SAMPLES As Long = 1000            ' 最大サンプル数
Private Const MIN_INTERVAL_MS As Long = 100         ' 最小測定間隔（ミリ秒）
Private Const CACHE_DURATION_MS As Long = 1000      ' キャッシュの有効期間（1秒）
Private Const DEFAULT_THRESHOLD As Double = 0.8      ' デフォルトの閾値（80%）
Private Const MAX_HISTORY_ENTRIES As Long = 1000    ' 履歴の最大エントリ数
Private Const CLEANUP_INTERVAL_MS As Long = 60000   ' クリーンアップ間隔（1分）

' イベント定義
Public Event CounterStarted(ByVal counterName As String, ByVal startTime As Date)
Public Event CounterStopped(ByVal counterName As String, ByVal elapsedTime As Double)
Public Event ThresholdExceeded(ByVal counterName As String, ByVal currentValue As Double, ByVal threshold As Double)
Public Event SampleCollected(ByVal counterName As String, ByVal value As Double)
Public Event StatisticsUpdated(ByVal counterName As String, ByVal statistics As PerformanceStatistics)
Public Event AnomalyDetected(ByVal counterName As String, ByVal anomalyType As String, ByVal value As Double)
Public Event CacheUpdated(ByVal counterName As String, ByVal isCached As Boolean)

''' <summary>
''' パフォーマンスカウンターの現在値を取得します
''' </summary>
''' <param name="performanceCount">カウンター値を格納する変数</param>
''' <param name="options">取得オプション（オプション）</param>
''' <returns>成功時True、失敗時False</returns>
''' <remarks>
''' エラー処理要件：
''' - カウンターの有効性確認
''' - オーバーフロー検出
''' - プロセッサ間の一貫性確認
''' - キャッシュの活用
''' </remarks>
Public Function QueryPerformanceCounter(ByRef performanceCount As Currency, Optional ByVal options As CounterOptions) As Boolean
End Function

''' <summary>
''' パフォーマンスカウンターの周波数を取得します
''' </summary>
''' <param name="frequency">周波数を格納する変数</param>
''' <param name="options">取得オプション（オプション）</param>
''' <returns>成功時True、失敗時False</returns>
''' <remarks>
''' エラー処理要件：
''' - システムサポートの確認
''' - 値の安定性確認
''' - キャッシュの活用
''' </remarks>
Public Function QueryPerformanceFrequency(ByRef frequency As Currency, Optional ByVal options As FrequencyOptions) As Boolean
End Function

''' <summary>
''' パフォーマンス測定を開始します
''' </summary>
''' <param name="counterName">カウンター名</param>
''' <param name="options">測定オプション（オプション）</param>
''' <returns>測定ID</returns>
Public Function StartMeasurement(ByVal counterName As String, Optional ByVal options As MeasurementOptions) As String
End Function

''' <summary>
''' パフォーマンス測定を停止します
''' </summary>
''' <param name="measurementId">測定ID</param>
''' <returns>測定結果</returns>
Public Function StopMeasurement(ByVal measurementId As String) As MeasurementResult
End Function

''' <summary>
''' パフォーマンス閾値を設定します
''' </summary>
''' <param name="counterName">カウンター名</param>
''' <param name="threshold">閾値</param>
''' <param name="options">閾値オプション（オプション）</param>
Public Sub SetThreshold(ByVal counterName As String, ByVal threshold As Double, Optional ByVal options As ThresholdOptions)
End Sub

''' <summary>
''' パフォーマンス統計を取得します
''' </summary>
''' <param name="counterName">カウンター名</param>
''' <param name="options">統計オプション（オプション）</param>
''' <returns>統計情報</returns>
Public Function GetStatistics(ByVal counterName As String, Optional ByVal options As StatisticsOptions) As PerformanceStatistics
End Function

''' <summary>
''' パフォーマンス履歴を取得します
''' </summary>
''' <param name="counterName">カウンター名</param>
''' <param name="options">履歴オプション（オプション）</param>
''' <returns>履歴データのコレクション</returns>
Public Function GetHistory(ByVal counterName As String, Optional ByVal options As HistoryOptions) As Collection
End Function

''' <summary>
''' 異常値を検出します
''' </summary>
''' <param name="counterName">カウンター名</param>
''' <param name="options">検出オプション（オプション）</param>
''' <returns>異常値のコレクション</returns>
Public Function DetectAnomalies(ByVal counterName As String, Optional ByVal options As AnomalyOptions) As Collection
End Function

''' <summary>
''' パフォーマンスレポートを生成します
''' </summary>
''' <param name="options">レポートオプション（オプション）</param>
''' <returns>レポートデータ</returns>
Public Function GenerateReport(Optional ByVal options As ReportOptions) As PerformanceReport
End Function

''' <summary>
''' カウンターをリセットします
''' </summary>
''' <param name="counterName">カウンター名（オプション）</param>
Public Sub Reset(Optional ByVal counterName As String)
End Sub

''' <summary>
''' カウンターの状態を検証します
''' </summary>
''' <returns>有効な場合True</returns>
Public Function Validate() As Boolean
End Function

''' <summary>
''' リソースを解放します
''' </summary>
Public Sub Cleanup()
End Sub

================
File: interfaces/IPerformanceMonitor.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IPerformanceMonitor"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredefinedId = False
Attribute VB_Exposed = True
Option Explicit

'@Description("システム全体のパフォーマンスを監視し、分析、レポート生成を提供するインターフェース")

' 定数定義
Private Const MAX_MEASUREMENTS As Long = 1000       ' 最大測定数
Private Const SAMPLING_INTERVAL_MS As Long = 1000   ' サンプリング間隔（1秒）
Private Const ALERT_THRESHOLD As Double = 0.8       ' アラート閾値（80%）
Private Const MAX_HISTORY_DAYS As Long = 30         ' 履歴保持期間（日）
Private Const CLEANUP_INTERVAL_MS As Long = 3600000 ' クリーンアップ間隔（1時間）
Private Const DEFAULT_TIMEOUT_MS As Long = 30000    ' デフォルトタイムアウト（30秒）

' イベント定義
Public Event MeasurementStarted(ByVal measurementName As String, ByVal startTime As Date)
Public Event MeasurementCompleted(ByVal measurementName As String, ByVal duration As Double)
Public Event ThresholdExceeded(ByVal metricName As String, ByVal currentValue As Double, ByVal threshold As Double)
Public Event ResourceAlert(ByVal resourceType As String, ByVal usage As Double, ByVal capacity As Double)
Public Event PerformanceAnomaly(ByVal metricName As String, ByVal value As Double, ByVal expectedRange As String)
Public Event MonitoringStatusChanged(ByVal isEnabled As Boolean, ByVal reason As String)
Public Event ReportGenerated(ByVal reportType As String, ByVal timestamp As Date)

''' <summary>
''' 計測を開始します
''' </summary>
''' <param name="measurementName">計測名</param>
''' <param name="category">カテゴリ（オプション）</param>
''' <param name="options">計測オプション（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - 計測名の検証
''' - 重複計測の検出
''' - リソース使用量の確認
''' - タイムアウトの設定
''' </remarks>
Public Sub Start(ByVal measurementName As String, Optional ByVal category As String, Optional ByVal options As MeasurementOptions)
End Sub

''' <summary>
''' 計測を終了します
''' </summary>
''' <param name="measurementName">計測名</param>
''' <param name="options">終了オプション（オプション）</param>
''' <returns>計測結果</returns>
Public Function Stop(ByVal measurementName As String, Optional ByVal options As StopOptions) As MeasurementResult
End Function

''' <summary>
''' 指定した計測の結果を取得します
''' </summary>
''' <param name="measurementName">計測名</param>
''' <param name="options">取得オプション（オプション）</param>
''' <returns>計測結果</returns>
Public Function GetMeasurement(ByVal measurementName As String, Optional ByVal options As GetOptions) As MeasurementResult
End Function

''' <summary>
''' すべての計測結果を取得します
''' </summary>
''' <param name="filter">フィルター条件（オプション）</param>
''' <param name="options">取得オプション（オプション）</param>
''' <returns>計測結果のコレクション</returns>
Public Function GetAllMeasurements(Optional ByVal filter As String, Optional ByVal options As GetAllOptions) As Collection
End Function

''' <summary>
''' パフォーマンス統計を取得します
''' </summary>
''' <param name="metricName">メトリクス名</param>
''' <param name="options">統計オプション（オプション）</param>
''' <returns>統計情報</returns>
Public Function GetStatistics(ByVal metricName As String, Optional ByVal options As StatisticsOptions) As PerformanceStatistics
End Function

''' <summary>
''' リソース使用状況を監視します
''' </summary>
''' <param name="resourceType">リソースタイプ</param>
''' <param name="options">監視オプション（オプション）</param>
Public Sub MonitorResource(ByVal resourceType As String, Optional ByVal options As MonitorOptions)
End Sub

''' <summary>
''' パフォーマンスレポートを生成します
''' </summary>
''' <param name="reportType">レポートタイプ</param>
''' <param name="options">レポートオプション（オプション）</param>
''' <returns>レポートデータ</returns>
Public Function GenerateReport(ByVal reportType As String, Optional ByVal options As ReportOptions) As PerformanceReport
End Function

''' <summary>
''' アラート条件を設定します
''' </summary>
''' <param name="metricName">メトリクス名</param>
''' <param name="condition">アラート条件</param>
''' <param name="options">アラートオプション（オプション）</param>
Public Sub SetAlertCondition(ByVal metricName As String, ByVal condition As String, Optional ByVal options As AlertOptions)
End Sub

''' <summary>
''' すべての計測結果をクリアします
''' </summary>
''' <param name="options">クリアオプション（オプション）</param>
Public Sub Clear(Optional ByVal options As ClearOptions)
End Sub

''' <summary>
''' パフォーマンス監視が有効かどうかを取得します
''' </summary>
Public Property Get IsEnabled() As Boolean
End Property

''' <summary>
''' パフォーマンス監視を有効にします
''' </summary>
''' <param name="options">有効化オプション（オプション）</param>
Public Sub Enable(Optional ByVal options As EnableOptions)
End Sub

''' <summary>
''' パフォーマンス監視を無効にします
''' </summary>
''' <param name="options">無効化オプション（オプション）</param>
Public Sub Disable(Optional ByVal options As DisableOptions)
End Sub

''' <summary>
''' 監視設定をエクスポートします
''' </summary>
''' <param name="filePath">出力ファイルパス</param>
''' <param name="options">エクスポートオプション（オプション）</param>
Public Sub ExportSettings(ByVal filePath As String, Optional ByVal options As ExportOptions)
End Sub

''' <summary>
''' 監視設定をインポートします
''' </summary>
''' <param name="filePath">入力ファイルパス</param>
''' <param name="options">インポートオプション（オプション）</param>
Public Sub ImportSettings(ByVal filePath As String, Optional ByVal options As ImportOptions)
End Sub

''' <summary>
''' 監視の状態を検証します
''' </summary>
''' <returns>有効な場合True</returns>
Public Function Validate() As Boolean
End Function

''' <summary>
''' リソースを解放します
''' </summary>
Public Sub Cleanup()
End Sub

================
File: interfaces/IQueue.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IQueue"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

'@Description("キューデータ構造を管理し、FIFOアクセスとイテレーション機能を提供するインターフェース")

' 定数定義
Private Const DEFAULT_CAPACITY As Long = 1000      ' デフォルトの容量
Private Const MAX_CAPACITY As Long = 1000000       ' 最大容量
Private Const GROWTH_FACTOR As Double = 1.5        ' 成長係数
Private Const SHRINK_THRESHOLD As Double = 0.25    ' 縮小閾値
Private Const MAX_BATCH_SIZE As Long = 1000        ' 最大バッチサイズ
Private Const CLEANUP_INTERVAL_MS As Long = 60000  ' クリーンアップ間隔（1分）

' イベント定義
Public Event ItemEnqueued(ByVal item As Variant, ByVal newCount As Long)
Public Event ItemDequeued(ByVal item As Variant, ByVal newCount As Long)
Public Event QueueCleared(ByVal oldCount As Long)
Public Event CapacityChanged(ByVal oldCapacity As Long, ByVal newCapacity As Long)
Public Event ThresholdReached(ByVal currentCount As Long, ByVal capacity As Long)
Public Event OperationFailed(ByVal operation As String, ByVal reason As String)
Public Event PerformanceAlert(ByVal metricType As String, ByVal currentValue As Double, ByVal threshold As Double)

''' <summary>
''' キューにアイテムを追加します
''' </summary>
''' <param name="item">追加するアイテム</param>
''' <param name="options">追加オプション（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - アイテムの検証
''' - 容量の確認
''' - メモリ使用量の監視
''' - 型の互換性確認
''' </remarks>
Public Sub Enqueue(ByVal item As Variant, Optional ByVal options As EnqueueOptions)
End Sub

''' <summary>
''' キューからアイテムを取り出します
''' </summary>
''' <param name="options">取り出しオプション（オプション）</param>
''' <returns>取り出したアイテム</returns>
''' <remarks>
''' エラー処理要件：
''' - 空キューの処理
''' - タイムアウト処理
''' - 型の一貫性確認
''' </remarks>
Public Function Dequeue(Optional ByVal options As DequeueOptions) As Variant
End Function

''' <summary>
''' 複数のアイテムをバッチでキューに追加します
''' </summary>
''' <param name="items">追加するアイテムのコレクション</param>
''' <param name="options">バッチオプション（オプション）</param>
Public Sub EnqueueBatch(ByVal items As Collection, Optional ByVal options As BatchOptions)
End Sub

''' <summary>
''' 指定した数のアイテムをバッチで取り出します
''' </summary>
''' <param name="count">取り出すアイテム数</param>
''' <param name="options">バッチオプション（オプション）</param>
''' <returns>取り出したアイテムのコレクション</returns>
Public Function DequeueBatch(ByVal count As Long, Optional ByVal options As BatchOptions) As Collection
End Function

''' <summary>
''' キューが空かどうかを確認します
''' </summary>
''' <returns>キューが空の場合True</returns>
Public Function IsEmpty() As Boolean
End Function

''' <summary>
''' キューが満杯かどうかを確認します
''' </summary>
''' <returns>キューが満杯の場合True</returns>
Public Function IsFull() As Boolean
End Function

''' <summary>
''' キュー内のアイテム数を取得します
''' </summary>
Public Property Get Count() As Long
End Property

''' <summary>
''' キューの容量を取得または設定します
''' </summary>
Public Property Get Capacity() As Long
End Property

Public Property Let Capacity(ByVal value As Long)
End Property

''' <summary>
''' キューの先頭アイテムを参照します（取り出さない）
''' </summary>
''' <param name="options">参照オプション（オプション）</param>
''' <returns>先頭アイテム</returns>
Public Function Peek(Optional ByVal options As PeekOptions) As Variant
End Function

''' <summary>
''' キュー内の指定位置のアイテムを参照します
''' </summary>
''' <param name="index">インデックス</param>
''' <returns>指定位置のアイテム</returns>
Public Function PeekAt(ByVal index As Long) As Variant
End Function

''' <summary>
''' キュー内のアイテムを検索します
''' </summary>
''' <param name="predicate">検索条件</param>
''' <returns>条件に一致するアイテムのコレクション</returns>
Public Function Search(ByVal predicate As String) As Collection
End Function

''' <summary>
''' キューをクリアします
''' </summary>
''' <param name="options">クリアオプション（オプション）</param>
Public Sub Clear(Optional ByVal options As ClearOptions)
End Sub

''' <summary>
''' キューの内容を配列にコピーします
''' </summary>
''' <returns>キューの内容を含む配列</returns>
Public Function ToArray() As Variant()
End Function

''' <summary>
''' キューの状態を検証します
''' </summary>
''' <returns>有効な場合True</returns>
Public Function Validate() As Boolean
End Function

''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
''' <returns>パフォーマンス情報のコレクション</returns>
Public Function GetPerformanceMetrics() As Collection
End Function

''' <summary>
''' リソースを解放します
''' </summary>
Public Sub Cleanup()
End Sub

================
File: interfaces/IRegexEngine.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IRegexEngine"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

'@Description("正規表現エンジンの機能を提供し、パターンのキャッシュと最適化をサポートするインターフェース")

' 定数定義
Private Const MAX_PATTERN_LENGTH As Long = 1000     ' パターンの最大長
Private Const MAX_INPUT_LENGTH As Long = 1000000    ' 入力文字列の最大長
Private Const DEFAULT_TIMEOUT_MS As Long = 5000     ' デフォルトのタイムアウト時間（5秒）
Private Const MAX_CACHE_SIZE As Long = 100          ' キャッシュの最大サイズ
Private Const MAX_RECURSION_DEPTH As Long = 250     ' 最大再帰深度
Private Const CACHE_DURATION_MS As Long = 300000    ' キャッシュの有効期間（5分）
Private Const MAX_BATCH_SIZE As Long = 1000         ' 最大バッチサイズ
Private Const MAX_PARALLEL_THREADS As Long = 4      ' 最大並列スレッド数
Private Const MAX_HISTORY_ENTRIES As Long = 1000    ' 履歴の最大エントリ数
Private Const BACKUP_INTERVAL_MS As Long = 3600000  ' バックアップ間隔（1時間）

' イベント定義
Public Event PatternCompiled(ByVal pattern As String, ByVal compilationTime As Double)
Public Event MatchFound(ByVal pattern As String, ByVal matchCount As Long, ByVal executionTime As Double)
Public Event TimeoutOccurred(ByVal pattern As String, ByVal inputLength As Long)
Public Event CacheUpdated(ByVal pattern As String, ByVal isCached As Boolean)
Public Event PerformanceAlert(ByVal metricType As String, ByVal currentValue As Double, ByVal threshold As Double)
Public Event SecurityAlert(ByVal alertType As String, ByVal pattern As String)
Public Event ResourceExhausted(ByVal resourceType As String, ByVal currentUsage As Long)
Public Event BatchProcessed(ByVal batchId As String, ByVal successCount As Long, ByVal failureCount As Long)
Public Event PatternValidated(ByVal pattern As String, ByVal isValid As Boolean, ByVal issues As Collection)
Public Event BackupCreated(ByVal backupPath As String)

''' <summary>
''' 正規表現パターンに基づいて文字列を検証します
''' </summary>
''' <param name="pattern">正規表現パターン</param>
''' <param name="text">検証する文字列</param>
''' <param name="options">検証オプション（オプション）</param>
''' <returns>パターンにマッチする場合True</returns>
Public Function Test(ByVal pattern As String, ByVal text As String, Optional ByVal options As RegexOptions) As Boolean
End Function

''' <summary>
''' バッチで複数の文字列を検証します
''' </summary>
''' <param name="pattern">正規表現パターン</param>
''' <param name="texts">検証する文字列のコレクション</param>
''' <param name="options">バッチオプション（オプション）</param>
''' <returns>バッチ処理結果</returns>
Public Function TestBatch(ByVal pattern As String, ByVal texts As Collection, Optional ByVal options As BatchOptions) As BatchResult
End Function

''' <summary>
''' 並列処理で文字列を検証します
''' </summary>
''' <param name="pattern">正規表現パターン</param>
''' <param name="texts">検証する文字列のコレクション</param>
''' <param name="options">並列処理オプション（オプション）</param>
''' <returns>並列処理結果</returns>
Public Function TestParallel(ByVal pattern As String, ByVal texts As Collection, Optional ByVal options As ParallelOptions) As ParallelResult
End Function

''' <summary>
''' 正規表現パターンに基づいて文字列を置換します
''' </summary>
''' <param name="pattern">正規表現パターン</param>
''' <param name="text">対象の文字列</param>
''' <param name="replacement">置換後の文字列</param>
''' <param name="options">置換オプション（オプション）</param>
''' <returns>置換後の文字列</returns>
Public Function Replace(ByVal pattern As String, ByVal text As String, ByVal replacement As String, Optional ByVal options As ReplaceOptions) As String
End Function

''' <summary>
''' 正規表現パターンに基づいて文字列からマッチする部分を抽出します
''' </summary>
''' <param name="pattern">正規表現パターン</param>
''' <param name="text">対象の文字列</param>
''' <param name="options">マッチングオプション（オプション）</param>
''' <returns>マッチング結果のコレクション</returns>
Public Function Match(ByVal pattern As String, ByVal text As String, Optional ByVal options As MatchOptions) As Collection
End Function

''' <summary>
''' 正規表現パターンをコンパイルします
''' </summary>
''' <param name="pattern">正規表現パターン</param>
''' <param name="options">コンパイルオプション（オプション）</param>
''' <returns>コンパイル済みパターンID</returns>
Public Function CompilePattern(ByVal pattern As String, Optional ByVal options As CompileOptions) As String
End Function

''' <summary>
''' コンパイル済みパターンを使用して検証します
''' </summary>
''' <param name="patternId">パターンID</param>
''' <param name="text">検証する文字列</param>
''' <param name="options">検証オプション（オプション）</param>
''' <returns>パターンにマッチする場合True</returns>
Public Function TestCompiled(ByVal patternId As String, ByVal text As String, Optional ByVal options As RegexOptions) As Boolean
End Function

''' <summary>
''' パターンを分割して解析します
''' </summary>
''' <param name="pattern">正規表現パターン</param>
''' <returns>パターン解析結果</returns>
Public Function AnalyzePattern(ByVal pattern As String) As PatternAnalysis
End Function

''' <summary>
''' パターンの最適化を提案します
''' </summary>
''' <param name="pattern">正規表現パターン</param>
''' <returns>最適化提案のコレクション</returns>
Public Function SuggestOptimizations(ByVal pattern As String) As Collection
End Function

''' <summary>
''' パターンを検証します
''' </summary>
''' <param name="pattern">正規表現パターン</param>
''' <param name="options">検証オプション（オプション）</param>
''' <returns>検証結果</returns>
Public Function ValidatePattern(ByVal pattern As String, Optional ByVal options As ValidationOptions) As ValidationResult
End Function

''' <summary>
''' パターンの使用履歴を取得します
''' </summary>
''' <param name="pattern">正規表現パターン</param>
''' <param name="options">履歴オプション（オプション）</param>
''' <returns>使用履歴のコレクション</returns>
Public Function GetPatternHistory(ByVal pattern As String, Optional ByVal options As HistoryOptions) As Collection
End Function

''' <summary>
''' バックアップを作成します
''' </summary>
''' <param name="options">バックアップオプション（オプション）</param>
''' <returns>バックアップファイルのパス</returns>
Public Function CreateBackup(Optional ByVal options As BackupOptions) As String
End Function

''' <summary>
''' バックアップから復元します
''' </summary>
''' <param name="backupPath">バックアップファイルのパス</param>
''' <param name="options">復元オプション（オプション）</param>
''' <returns>成功時True</returns>
Public Function RestoreFromBackup(ByVal backupPath As String, Optional ByVal options As RestoreOptions) As Boolean
End Function

''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
''' <returns>パフォーマンス情報のコレクション</returns>
Public Function GetPerformanceMetrics() As Collection
End Function

''' <summary>
''' キャッシュ統計を取得します
''' </summary>
''' <returns>キャッシュ統計情報</returns>
Public Function GetCacheStatistics() As CacheStatistics
End Function

''' <summary>
''' タイムアウト時間を設定します
''' </summary>
''' <param name="milliseconds">タイムアウト時間（ミリ秒）</param>
Public Property Let TimeoutMilliseconds(ByVal milliseconds As Long)
End Property

''' <summary>
''' タイムアウト時間を取得します
''' </summary>
Public Property Get TimeoutMilliseconds() As Long
End Property

''' <summary>
''' エンジンの状態を検証します
''' </summary>
''' <returns>有効な場合True</returns>
Public Function Validate() As Boolean
End Function

''' <summary>
''' リソースを解放します
''' </summary>
Public Sub Cleanup()
End Sub

================
File: interfaces/ISleep.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "ISleep"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

'@Description("高精度なスリープ機能とスケジューリングを提供するインターフェース")

' 定数定義
Private Const MIN_SLEEP_MS As Long = 1             ' 最小スリープ時間（ミリ秒）
Private Const MAX_SLEEP_MS As Long = 3600000       ' 最大スリープ時間（1時間）
Private Const TIMER_RESOLUTION_MS As Long = 1       ' タイマー分解能（ミリ秒）
Private Const MAX_RETRIES As Long = 3              ' 最大リトライ回数
Private Const SPIN_THRESHOLD_MS As Long = 15       ' スピンウェイト閾値（ミリ秒）
Private Const DEFAULT_TIMEOUT_MS As Long = 30000   ' デフォルトタイムアウト（30秒）
Private Const MAX_BATCH_SIZE As Long = 100         ' 最大バッチサイズ
Private Const MAX_GROUP_SIZE As Long = 10          ' 最大グループサイズ
Private Const ENERGY_CHECK_INTERVAL_MS As Long = 60000 ' エネルギーチェック間隔（1分）
Private Const CLEANUP_INTERVAL_MS As Long = 300000 ' クリーンアップ間隔（5分）

' イベント定義
Public Event SleepStarted(ByVal duration As Long, ByVal startTime As Date)
Public Event SleepCompleted(ByVal duration As Long, ByVal actualDuration As Double)
Public Event SleepInterrupted(ByVal duration As Long, ByVal elapsedTime As Double)
Public Event TimerResolutionChanged(ByVal oldResolution As Long, ByVal newResolution As Long)
Public Event PerformanceAlert(ByVal metricType As String, ByVal currentValue As Double, ByVal threshold As Double)
Public Event ScheduleRegistered(ByVal scheduleId As String, ByVal nextExecutionTime As Date)
Public Event ResourceStateChanged(ByVal resourceType As String, ByVal state As String)
Public Event BatchCompleted(ByVal batchId As String, ByVal successCount As Long)
Public Event GroupStateChanged(ByVal groupId As String, ByVal state As String)
Public Event EnergyStateChanged(ByVal oldState As String, ByVal newState As String)

''' <summary>
''' 指定された時間だけ実行を停止します
''' </summary>
''' <param name="milliseconds">スリープ時間（ミリ秒）</param>
''' <param name="options">スリープオプション（オプション）</param>
Public Sub Sleep(ByVal milliseconds As Long, Optional ByVal options As SleepOptions)
End Sub

''' <summary>
''' 高精度スリープを実行します
''' </summary>
''' <param name="milliseconds">スリープ時間（ミリ秒）</param>
''' <param name="options">高精度オプション（オプション）</param>
Public Sub HighPrecisionSleep(ByVal milliseconds As Long, Optional ByVal options As PrecisionOptions)
End Sub

''' <summary>
''' スピンウェイトを実行します
''' </summary>
''' <param name="milliseconds">待機時間（ミリ秒）</param>
''' <param name="options">スピンオプション（オプション）</param>
Public Sub SpinWait(ByVal milliseconds As Long, Optional ByVal options As SpinOptions)
End Sub

''' <summary>
''' スリープをスケジュールします
''' </summary>
''' <param name="milliseconds">スリープ時間（ミリ秒）</param>
''' <param name="scheduleTime">スケジュール時刻</param>
''' <param name="options">スケジュールオプション（オプション）</param>
''' <returns>スケジュールID</returns>
Public Function ScheduleSleep(ByVal milliseconds As Long, ByVal scheduleTime As Date, Optional ByVal options As ScheduleOptions) As String
End Function

''' <summary>
''' 定期的なスリープをスケジュールします
''' </summary>
''' <param name="milliseconds">スリープ時間（ミリ秒）</param>
''' <param name="interval">実行間隔（ミリ秒）</param>
''' <param name="options">定期実行オプション（オプション）</param>
''' <returns>スケジュールID</returns>
Public Function ScheduleRecurringSleep(ByVal milliseconds As Long, ByVal interval As Long, Optional ByVal options As RecurringOptions) As String
End Function

''' <summary>
''' スリープパターンを登録します
''' </summary>
''' <param name="pattern">スリープパターン</param>
''' <param name="options">パターンオプション（オプション）</param>
''' <returns>パターンID</returns>
Public Function RegisterPattern(ByVal pattern As SleepPattern, Optional ByVal options As PatternOptions) As String
End Function

''' <summary>
''' バッチスリープを実行します
''' </summary>
''' <param name="durations">スリープ時間のコレクション</param>
''' <param name="options">バッチオプション（オプション）</param>
''' <returns>バッチ実行結果</returns>
Public Function BatchSleep(ByVal durations As Collection, Optional ByVal options As BatchOptions) As BatchResult
End Function

''' <summary>
''' スリープグループを作成します
''' </summary>
''' <param name="name">グループ名</param>
''' <param name="options">グループオプション（オプション）</param>
''' <returns>グループID</returns>
Public Function CreateGroup(ByVal name As String, Optional ByVal options As GroupOptions) As String
End Function

''' <summary>
''' スリープをグループに追加します
''' </summary>
''' <param name="groupId">グループID</param>
''' <param name="milliseconds">スリープ時間（ミリ秒）</param>
''' <param name="options">追加オプション（オプション）</param>
Public Sub AddToGroup(ByVal groupId As String, ByVal milliseconds As Long, Optional ByVal options As AddOptions)
End Sub

''' <summary>
''' スケジュールされたスリープをキャンセルします
''' </summary>
''' <param name="scheduleId">スケジュールID</param>
Public Sub CancelScheduledSleep(ByVal scheduleId As String)
End Sub

''' <summary>
''' 現在のスリープを中断します
''' </summary>
Public Sub Interrupt()
End Sub

''' <summary>
''' エネルギー設定を構成します
''' </summary>
''' <param name="settings">エネルギー設定</param>
Public Sub ConfigureEnergy(ByVal settings As EnergySettings)
End Sub

''' <summary>
''' タイマーの分解能を設定します
''' </summary>
''' <param name="resolution">分解能（ミリ秒）</param>
Public Property Let TimerResolution(ByVal resolution As Long)
End Property

''' <summary>
''' タイマーの分解能を取得します
''' </summary>
Public Property Get TimerResolution() As Long
End Property

''' <summary>
''' スリープ状態を取得します
''' </summary>
Public Property Get State() As SleepState
End Property

''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
''' <returns>パフォーマンス情報のコレクション</returns>
Public Function GetPerformanceMetrics() As Collection
End Function

''' <summary>
''' スケジュール一覧を取得します
''' </summary>
''' <returns>スケジュール情報のコレクション</returns>
Public Function GetSchedules() As Collection
End Function

''' <summary>
''' グループ一覧を取得します
''' </summary>
''' <returns>グループ情報のコレクション</returns>
Public Function GetGroups() As Collection
End Function

''' <summary>
''' エネルギー使用状況を取得します
''' </summary>
''' <returns>エネルギー情報</returns>
Public Function GetEnergyUsage() As EnergyUsage
End Function

''' <summary>
''' スリープの状態を検証します
''' </summary>
''' <returns>有効な場合True</returns>
Public Function Validate() As Boolean
End Function

''' <summary>
''' リソースを解放します
''' </summary>
Public Sub Cleanup()
End Sub

================
File: interfaces/IStack.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IStack"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredefinedId = False
Attribute VB_Exposed = True
Option Explicit

'@Description("スタックデータ構造を管理し、LIFOアクセスとイテレーション機能を提供するインターフェース")

' 定数定義
Private Const DEFAULT_CAPACITY As Long = 1000      ' デフォルトの容量
Private Const MAX_CAPACITY As Long = 1000000       ' 最大容量
Private Const GROWTH_FACTOR As Double = 1.5        ' 成長係数
Private Const SHRINK_THRESHOLD As Double = 0.25    ' 縮小閾値
Private Const MAX_BATCH_SIZE As Long = 1000        ' 最大バッチサイズ
Private Const CLEANUP_INTERVAL_MS As Long = 60000  ' クリーンアップ間隔（1分）

' イベント定義
Public Event ItemPushed(ByVal item As Variant, ByVal newCount As Long)
Public Event ItemPopped(ByVal item As Variant, ByVal newCount As Long)
Public Event StackCleared(ByVal oldCount As Long)
Public Event CapacityChanged(ByVal oldCapacity As Long, ByVal newCapacity As Long)
Public Event ThresholdReached(ByVal currentCount As Long, ByVal capacity As Long)
Public Event OperationFailed(ByVal operation As String, ByVal reason As String)
Public Event PerformanceAlert(ByVal metricType As String, ByVal currentValue As Double, ByVal threshold As Double)

''' <summary>
''' スタックに要素を追加します
''' </summary>
''' <param name="item">追加する要素</param>
''' <param name="options">追加オプション（オプション）</param>
''' <returns>追加成功時True、スタックが最大数を超えた場合False</returns>
''' <remarks>
''' エラー処理要件：
''' - アイテムの検証
''' - 容量の確認
''' - メモリ使用量の監視
''' - 型の互換性確認
''' </remarks>
Public Function Push(ByVal item As Variant, Optional ByVal options As PushOptions) As Boolean
End Function

''' <summary>
''' スタックから最後の要素を削除して返します
''' </summary>
''' <param name="options">取り出しオプション（オプション）</param>
''' <returns>削除した要素</returns>
''' <remarks>
''' エラー処理要件：
''' - 空スタックの処理
''' - メモリ解放の確認
''' - 型の一貫性確認
''' </remarks>
Public Function Pop(Optional ByVal options As PopOptions) As Variant
End Function

''' <summary>
''' 複数の要素をバッチでスタックに追加します
''' </summary>
''' <param name="items">追加する要素のコレクション</param>
''' <param name="options">バッチオプション（オプション）</param>
''' <returns>追加された要素数</returns>
Public Function PushBatch(ByVal items As Collection, Optional ByVal options As BatchOptions) As Long
End Function

''' <summary>
''' 指定した数の要素をバッチで取り出します
''' </summary>
''' <param name="count">取り出す要素数</param>
''' <param name="options">バッチオプション（オプション）</param>
''' <returns>取り出した要素のコレクション</returns>
Public Function PopBatch(ByVal count As Long, Optional ByVal options As BatchOptions) As Collection
End Function

''' <summary>
''' スタックの最後の要素を削除せずに取得します
''' </summary>
''' <param name="options">参照オプション（オプション）</param>
''' <returns>最後の要素</returns>
Public Function Peek(Optional ByVal options As PeekOptions) As Variant
End Function

''' <summary>
''' スタック内の指定位置の要素を参照します
''' </summary>
''' <param name="index">インデックス</param>
''' <returns>指定位置の要素</returns>
Public Function PeekAt(ByVal index As Long) As Variant
End Function

''' <summary>
''' スタックが空かどうかを確認します
''' </summary>
''' <returns>スタックが空の場合True</returns>
Public Function IsEmpty() As Boolean
End Function

''' <summary>
''' スタックが満杯かどうかを確認します
''' </summary>
''' <returns>スタックが満杯の場合True</returns>
Public Function IsFull() As Boolean
End Function

''' <summary>
''' スタック内の要素数を取得します
''' </summary>
Public Property Get Count() As Long
End Property

''' <summary>
''' スタックの容量を取得または設定します
''' </summary>
Public Property Get Capacity() As Long
End Property

Public Property Let Capacity(ByVal value As Long)
End Property

''' <summary>
''' スタック内の要素を検索します
''' </summary>
''' <param name="predicate">検索条件</param>
''' <returns>条件に一致する要素のコレクション</returns>
Public Function Search(ByVal predicate As String) As Collection
End Function

''' <summary>
''' スタックをクリアします
''' </summary>
''' <param name="options">クリアオプション（オプション）</param>
Public Sub Clear(Optional ByVal options As ClearOptions)
End Sub

''' <summary>
''' スタックの内容を配列にコピーします
''' </summary>
''' <returns>スタックの内容を含む配列</returns>
Public Function ToArray() As Variant()
End Function

''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
''' <returns>パフォーマンス情報のコレクション</returns>
Public Function GetPerformanceMetrics() As Collection
End Function

''' <summary>
''' スタックの状態を検証します
''' </summary>
''' <returns>有効な場合True</returns>
Public Function Validate() As Boolean
End Function

''' <summary>
''' リソースを解放します
''' </summary>
Public Sub Cleanup()
End Sub

================
File: interfaces/IStackTrace.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IStackTrace"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredefinedId = False
Attribute VB_Exposed = True
Option Explicit

'@Description("スタックトレースの収集、管理、フォーマットを担当するインターフェース")

' 定数定義
Private Const MAX_STACK_DEPTH As Long = 100        ' 最大スタック深度
Private Const MAX_ENTRY_LENGTH As Long = 1024      ' エントリの最大長
Private Const CACHE_DURATION_MS As Long = 60000    ' キャッシュの有効期間（1分）
Private Const MAX_FORMAT_LENGTH As Long = 10240    ' フォーマット後の最大長（10KB）
Private Const DEFAULT_INDENT As Long = 2           ' デフォルトのインデントサイズ

' イベント定義
Public Event StackEntryPushed(ByVal entry As String, ByVal depth As Long)
Public Event StackEntryPopped(ByVal entry As String, ByVal remainingDepth As Long)
Public Event StackCleared()
Public Event MaxDepthReached()
Public Event StackOverflowPrevented(ByVal attemptedEntry As String)
Public Event PerformanceAlert(ByVal metricType As String, ByVal currentValue As Double, ByVal threshold As Double)

''' <summary>
''' スタックにエントリを追加します
''' </summary>
''' <param name="ClassName">クラス名</param>
''' <param name="MethodName">メソッド名</param>
''' <param name="Parameters">パラメータ（オプション）</param>
''' <param name="options">追加オプション（オプション）</param>
''' <returns>追加成功時True、スタックが最大数を超えた場合False</returns>
''' <remarks>
''' エラー処理要件：
''' - パラメータの検証
''' - スタックオーバーフローの防止
''' - メモリ使用量の監視
''' - 循環参照の検出
''' - イベントの適切な発行
''' </remarks>
Public Function PushStackEntry(ByVal ClassName As String, ByVal MethodName As String, Optional ByVal Parameters As Variant, Optional ByVal options As StackEntryOptions) As Boolean
End Function

''' <summary>
''' スタックから最後のエントリを削除して返します
''' </summary>
''' <param name="options">取得オプション（オプション）</param>
''' <returns>最後のエントリ、スタックが空の場合は空文字列</returns>
''' <remarks>
''' エラー処理要件：
''' - 空スタックの処理
''' - メモリ解放の確認
''' - イベントの発行
''' </remarks>
Public Function PopStackEntry(Optional ByVal options As StackEntryOptions) As String
End Function

''' <summary>
''' 現在のスタックトレースを文字列として取得します
''' </summary>
''' <param name="format">フォーマット指定（オプション）</param>
''' <param name="options">取得オプション（オプション）</param>
''' <returns>スタックトレースの文字列表現</returns>
''' <remarks>
''' エラー処理要件：
''' - フォーマットの検証
''' - メモリ使用量の最適化
''' - 長大なスタックの効率的な処理
''' - 特殊文字のエスケープ
''' </remarks>
Public Function GetStackTrace(Optional ByVal format As String, Optional ByVal options As StackTraceOptions) As String
End Function

''' <summary>
''' 現在のスタックの深さを取得します
''' </summary>
''' <returns>スタック内のエントリ数</returns>
Public Function GetStackDepth() As Long
End Function

''' <summary>
''' スタックを空にします
''' </summary>
''' <param name="options">クリアオプション（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - リソースの適切な解放
''' - イベントの発行
''' - 状態の整合性確認
''' </remarks>
Public Sub ClearStack(Optional ByVal options As ClearOptions)
End Sub

''' <summary>
''' スタックが空かどうかを確認します
''' </summary>
''' <returns>スタックが空の場合True</returns>
Public Function IsEmpty() As Boolean
End Function

''' <summary>
''' スタックの最後のエントリを削除せずに取得します
''' </summary>
''' <param name="options">取得オプション（オプション）</param>
''' <returns>最後のエントリ、スタックが空の場合は空文字列</returns>
Public Function Peek(Optional ByVal options As PeekOptions) As String
End Function

''' <summary>
''' スタックの特定位置のエントリを取得します
''' </summary>
''' <param name="index">取得するエントリのインデックス</param>
''' <returns>指定位置のエントリ、範囲外の場合は空文字列</returns>
Public Function GetEntryAt(ByVal index As Long) As String
End Function

''' <summary>
''' スタックの内容を検索します
''' </summary>
''' <param name="searchPattern">検索パターン</param>
''' <param name="options">検索オプション（オプション）</param>
''' <returns>マッチしたエントリのコレクション</returns>
Public Function SearchStack(ByVal searchPattern As String, Optional ByVal options As SearchOptions) As Collection
End Function

''' <summary>
''' スタックの内容をフィルタリングします
''' </summary>
''' <param name="filterExpression">フィルタ式</param>
''' <param name="options">フィルタオプション（オプション）</param>
''' <returns>フィルタリングされたスタックトレース</returns>
Public Function FilterStackTrace(ByVal filterExpression As String, Optional ByVal options As FilterOptions) As String
End Function

''' <summary>
''' スタックトレースをファイルに保存します
''' </summary>
''' <param name="filePath">保存先のファイルパス</param>
''' <param name="options">保存オプション（オプション）</param>
Public Sub SaveToFile(ByVal filePath As String, Optional ByVal options As SaveOptions)
End Sub

''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
''' <returns>パフォーマンス情報のコレクション</returns>
Public Function GetPerformanceMetrics() As Collection
End Function

''' <summary>
''' スタックトレースのフォーマッタを設定します
''' </summary>
''' <param name="formatter">フォーマッタ</param>
Public Property Let StackTraceFormatter(ByVal formatter As IStackTraceFormatter)
End Property

''' <summary>
''' メモリ使用量を最適化します
''' </summary>
Public Sub OptimizeMemoryUsage()
End Sub

''' <summary>
''' スタックトレースの状態を検証します
''' </summary>
''' <returns>有効な場合True</returns>
Public Function Validate() As Boolean
End Function

================
File: interfaces/IUserNotifier.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IUserNotifier"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

'@Description("ユーザーへの通知機能を提供し、複数の通知チャネルと表示方法をサポートするインターフェース")

' 定数定義
Private Const MAX_MESSAGE_LENGTH As Long = 2048     ' メッセージの最大長
Private Const MAX_TITLE_LENGTH As Long = 256        ' タイトルの最大長
Private Const DEFAULT_TIMEOUT_MS As Long = 30000    ' デフォルトのタイムアウト時間（30秒）
Private Const MAX_RETRY_COUNT As Long = 3           ' 最大リトライ回数
Private Const MIN_DISPLAY_TIME_MS As Long = 3000    ' 最小表示時間（3秒）
Private Const MAX_QUEUED_NOTIFICATIONS As Long = 100 ' 最大キュー通知数

' イベント定義
Public Event NotificationDisplayed(ByVal notificationId As String, ByVal level As ErrorNotificationLevel)
Public Event NotificationClosed(ByVal notificationId As String, ByVal userResponse As VbMsgBoxResult)
Public Event NotificationQueued(ByVal notificationId As String, ByVal queuePosition As Long)
Public Event NotificationTimeout(ByVal notificationId As String)
Public Event StyleChanged(ByVal oldStyle As VbMsgBoxStyle, ByVal newStyle As VbMsgBoxStyle)
Public Event UserInteractionStarted(ByVal notificationId As String)
Public Event UserInteractionCompleted(ByVal notificationId As String, ByVal interactionTime As Long)
Public Event NotificationError(ByVal errorInfo As ErrorInfo)
Public Event ResourceExhausted(ByVal resourceType As String, ByVal currentUsage As Long)

''' <summary>
''' エラー情報をユーザーに通知します
''' </summary>
''' <param name="errorDetail">エラー詳細情報</param>
''' <param name="buttons">表示するボタンの種類（オプション）</param>
''' <param name="title">ダイアログのタイトル（オプション）</param>
''' <param name="options">通知オプション（オプション）</param>
''' <returns>ユーザーの選択結果</returns>
''' <remarks>
''' エラー処理要件：
''' - エラー詳細のNULLチェック
''' - メッセージ長の制限
''' - UI表示失敗時の代替通知手段
''' - ユーザー応答のタイムアウト処理
''' - 多重表示の防止
''' - システムリソースの監視
''' </remarks>
Public Function Notify(ByRef errorDetail As ErrorInfo, _
                      Optional ByVal buttons As VbMsgBoxStyle = vbOKOnly, _
                      Optional ByVal title As String = "エラー", _
                      Optional ByVal options As NotificationOptions) As VbMsgBoxResult
End Function

''' <summary>
''' バッチ通知を実行します
''' </summary>
''' <param name="notifications">通知のコレクション</param>
''' <param name="options">バッチオプション（オプション）</param>
''' <returns>バッチ処理の結果</returns>
Public Function NotifyBatch(ByVal notifications As Collection, Optional ByVal options As BatchNotificationOptions) As NotificationBatchResult
End Function

''' <summary>
''' 通知の表示方法を設定します
''' </summary>
''' <param name="style">通知スタイル</param>
''' <param name="options">スタイルオプション（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - 無効なスタイル値の検出
''' - スタイル変更時の整合性確認
''' - 現在表示中の通知への影響考慮
''' - イベントの適切な発行
''' </remarks>
Public Property Let NotificationStyle(ByVal style As VbMsgBoxStyle, Optional ByVal options As StyleOptions)
End Property

''' <summary>
''' 現在の通知表示方法を取得します
''' </summary>
''' <returns>通知スタイル</returns>
Public Property Get NotificationStyle() As VbMsgBoxStyle
End Property

''' <summary>
''' デフォルトのダイアログタイトルを設定します
''' </summary>
''' <param name="title">タイトル</param>
''' <param name="locale">ロケール（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - タイトル文字列の検証
''' - 長さ制限の確認
''' - 不正な文字の検出
''' - 設定変更の永続化
''' - 多言語対応の確認
''' </remarks>
Public Property Let DefaultTitle(ByVal title As String, Optional ByVal locale As String)
End Property

''' <summary>
''' 現在のデフォルトダイアログタイトルを取得します
''' </summary>
''' <param name="locale">ロケール（オプション）</param>
''' <returns>タイトル</returns>
Public Function GetDefaultTitle(Optional ByVal locale As String) As String
End Function

''' <summary>
''' 通知テンプレートを設定します
''' </summary>
''' <param name="templateName">テンプレート名</param>
''' <param name="template">テンプレート内容</param>
''' <param name="locale">ロケール（オプション）</param>
Public Sub SetNotificationTemplate(ByVal templateName As String, ByVal template As String, Optional ByVal locale As String)
End Sub

''' <summary>
''' 通知テンプレートを取得します
''' </summary>
''' <param name="templateName">テンプレート名</param>
''' <param name="locale">ロケール（オプション）</param>
Public Function GetNotificationTemplate(ByVal templateName As String, Optional ByVal locale As String) As String
End Function

''' <summary>
''' 通知の優先順位を設定します
''' </summary>
''' <param name="notificationId">通知ID</param>
''' <param name="priority">優先順位</param>
Public Sub SetNotificationPriority(ByVal notificationId As String, ByVal priority As ValidationPriority)
End Sub

''' <summary>
''' 通知履歴を取得します
''' </summary>
''' <param name="options">履歴オプション（オプション）</param>
''' <returns>通知履歴のコレクション</returns>
Public Function GetNotificationHistory(Optional ByVal options As HistoryOptions) As Collection
End Function

''' <summary>
''' 通知キューの状態を取得します
''' </summary>
''' <returns>キューの状態情報</returns>
Public Function GetQueueStatus() As NotificationQueueStatus
End Function

''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
''' <returns>パフォーマンス情報のコレクション</returns>
Public Function GetPerformanceMetrics() As Collection
End Function

''' <summary>
''' 通知をキャンセルします
''' </summary>
''' <param name="notificationId">通知ID</param>
Public Sub CancelNotification(ByVal notificationId As String)
End Sub

''' <summary>
''' すべての通知をクリアします
''' </summary>
''' <param name="options">クリアオプション（オプション）</param>
Public Sub ClearAllNotifications(Optional ByVal options As ClearOptions)
End Sub

''' <summary>
''' 通知の状態を検証します
''' </summary>
''' <returns>有効な場合True</returns>
Public Function Validate() As Boolean
End Function

''' <summary>
''' リソースを解放します
''' </summary>
Public Sub Cleanup()
End Sub

================
File: interfaces/IValidationContext.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IValidationContext"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredefinedId = False
Attribute VB_Exposed = True
Option Explicit

'@Description("バリデーション実行時のコンテキスト情報を管理し、実行状態とリソースを制御するインターフェース")

' 定数定義
Private Const MAX_CONTEXT_ENTRIES As Long = 1000    ' コンテキストエントリの最大数
Private Const MAX_ERROR_LENGTH As Long = 1024       ' エラーメッセージの最大長
Private Const CACHE_TIMEOUT_MS As Long = 300000     ' キャッシュのタイムアウト時間（5分）
Private Const MAX_SNAPSHOT_COUNT As Long = 10       ' 保持する最大スナップショット数

' イベント定義
Public Event ContextChanged(ByVal key As String, ByVal oldValue As Variant, ByVal newValue As Variant)
Public Event ValidationStarted(ByVal validatorId As String, ByVal contextSnapshot As IValidationContext)
Public Event ValidationCompleted(ByVal validatorId As String, ByVal success As Boolean, ByVal results As Collection)
Public Event ValidationProgress(ByVal validatorId As String, ByVal progressPercentage As Long)
Public Event ContextStateChanged(ByVal oldState As ValidationContextState, ByVal newState As ValidationContextState)
Public Event ResourceExhausted(ByVal resourceType As String, ByVal currentUsage As Long)
Public Event CacheUpdated(ByVal key As String, ByVal isCached As Boolean)
Public Event SnapshotCreated(ByVal snapshotId As String)
Public Event ValidationError(ByVal errorInfo As ErrorInfo)

''' <summary>
''' コンテキストデータを設定します
''' </summary>
''' <param name="key">データのキー</param>
''' <param name="value">設定する値</param>
''' <param name="cacheOptions">キャッシュオプション（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - キーの一意性確認
''' - 値の型チェック
''' - メモリ使用量の監視
''' - 無効なキーの検出
''' - キャッシュ制限の確認
''' - 永続化要件の確認
''' 
''' 実装時の注意点：
''' 1. キーは大文字小文字を区別すること
''' 2. 値のディープコピーを保存すること
''' 3. 循環参照を検出すること
''' 4. 変更通知イベントを発行すること
''' 5. キャッシュ戦略を適用すること
''' </remarks>
Public Property Let ContextData(ByVal key As String, ByVal value As Variant, Optional ByVal cacheOptions As ValidationCacheOptions)
End Property

''' <summary>
''' コンテキストデータを取得します
''' </summary>
''' <param name="key">データのキー</param>
''' <returns>格納されている値</returns>
''' <remarks>
''' エラー処理要件：
''' - 存在しないキーの処理
''' - 型の互換性確認
''' - デフォルト値の提供
''' - キャッシュの有効性確認
''' - 読み取りタイムアウトの処理
''' </remarks>
Public Property Get ContextData(ByVal key As String) As Variant
End Property

''' <summary>
''' カスタムエラーメッセージを設定します
''' </summary>
''' <param name="rule">バリデーションルール</param>
''' <param name="message">カスタムメッセージ</param>
''' <param name="messageType">メッセージの種類（情報/警告/エラー）</param>
''' <param name="options">メッセージオプション（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - メッセージの妥当性確認
''' - ルールの存在確認
''' - メッセージの多言語対応
''' - メッセージタイプの検証
''' - メッセージ長の制限
''' - プレースホルダーの検証
''' </remarks>
Public Sub SetCustomErrorMessage(ByVal rule As IValidationRule, ByVal message As String, Optional ByVal messageType As ErrorNotificationLevel = enlError, Optional ByVal options As ValidationMessageOptions)
End Sub

''' <summary>
''' カスタムエラーメッセージを取得します
''' </summary>
''' <param name="rule">バリデーションルール</param>
''' <param name="locale">ロケール（オプション）</param>
''' <returns>カスタムメッセージ（未設定の場合は空文字列）</returns>
Public Function GetCustomErrorMessage(ByVal rule As IValidationRule, Optional ByVal locale As String) As String
End Function

''' <summary>
''' バリデーション優先度を設定します
''' </summary>
''' <param name="rule">バリデーションルール</param>
''' <param name="priority">優先度</param>
''' <remarks>
''' エラー処理要件：
''' - 優先度の範囲チェック
''' - ルールの存在確認
''' - 優先度の整合性確認
''' - 依存関係との整合性確認
''' - 実行中の検証への影響考慮
''' </remarks>
Public Sub SetValidationPriority(ByVal rule As IValidationRule, ByVal priority As ValidationPriority)
End Sub

''' <summary>
''' バリデーション優先度を取得します
''' </summary>
''' <param name="rule">バリデーションルール</param>
''' <returns>優先度（未設定の場合はvpNormal）</returns>
Public Function GetValidationPriority(ByVal rule As IValidationRule) As ValidationPriority
End Function

''' <summary>
''' コンテキストをクリアします
''' </summary>
''' <param name="options">クリアオプション（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - リソースの適切な解放
''' - 進行中のバリデーションへの影響考慮
''' - 状態の整合性維持
''' - イベントの適切な発行
''' - キャッシュの適切な処理
''' - スナップショットの管理
''' </remarks>
Public Sub Clear(Optional ByVal options As ValidationClearOptions)
End Sub

''' <summary>
''' コンテキストの状態を検証します
''' </summary>
''' <param name="validationLevel">検証レベル（オプション）</param>
''' <returns>有効な場合True</returns>
''' <remarks>
''' エラー処理要件：
''' - データの整合性確認
''' - リソースの状態確認
''' - 循環参照の検出
''' - メモリリークの検出
''' - キャッシュの有効性確認
''' - パフォーマンス指標の確認
''' </remarks>
Public Function Validate(Optional ByVal validationLevel As ValidationLevel = vlNormal) As Boolean
End Function

''' <summary>
''' コンテキストのスナップショットを作成します
''' </summary>
''' <param name="options">スナップショットオプション（オプション）</param>
''' <returns>現在の状態のコピー</returns>
''' <remarks>
''' エラー処理要件：
''' - メモリ使用量の考慮
''' - ディープコピーの実行
''' - 参照の適切な処理
''' - イベントハンドラの適切な複製
''' - スナップショット数の制限
''' - 古いスナップショットの管理
''' </remarks>
Public Function CreateSnapshot(Optional ByVal options As ValidationSnapshotOptions) As IValidationContext
End Function

''' <summary>
''' バリデーションの依存関係を設定します
''' </summary>
''' <param name="dependentRule">依存するルール</param>
''' <param name="requiredRule">必要とされるルール</param>
''' <param name="dependencyType">依存関係の種類（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - 循環依存の検出
''' - ルールの存在確認
''' - 依存関係の整合性確認
''' - 優先度との整合性確認
''' - 実行順序への影響確認
''' </remarks>
Public Sub SetRuleDependency(ByVal dependentRule As IValidationRule, ByVal requiredRule As IValidationRule, Optional ByVal dependencyType As ValidationDependencyType = vdtRequired)
End Sub

''' <summary>
''' バリデーションの実行順序を取得します
''' </summary>
''' <param name="optimizationStrategy">最適化戦略（オプション）</param>
''' <returns>実行順序に並べられたルールのコレクション</returns>
''' <remarks>
''' エラー処理要件：
''' - 循環依存のチェック
''' - 優先度の考慮
''' - 依存関係の解決
''' - 実行順序の最適化
''' - パフォーマンスの考慮
''' </remarks>
Public Function GetExecutionOrder(Optional ByVal optimizationStrategy As ValidationOptimizationStrategy = vosDefault) As Collection
End Function

''' <summary>
''' バリデーション結果をマージします
''' </summary>
''' <param name="results">マージする結果のコレクション</param>
''' <param name="options">マージオプション（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - 結果の整合性確認
''' - 重複の処理
''' - コンフリクトの解決
''' - メモリ使用量の最適化
''' - 優先順位の考慮
''' - イベントの発行
''' </remarks>
Public Sub MergeResults(ByVal results As Collection, Optional ByVal options As ValidationMergeOptions)
End Sub

''' <summary>
''' バリデーションの進行状況を取得します
''' </summary>
''' <returns>進行状況（0-100）</returns>
Public Property Get Progress() As Long
End Property

''' <summary>
''' バリデーションのキャンセル状態を設定/取得します
''' </summary>
Public Property Get IsCancellationRequested() As Boolean
End Property

Public Property Let IsCancellationRequested(ByVal value As Boolean)
End Property

''' <summary>
''' コンテキストの状態を取得します
''' </summary>
''' <returns>現在の状態</returns>
Public Property Get State() As ValidationContextState
End Property

''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
''' <returns>パフォーマンス情報のコレクション</returns>
Public Function GetPerformanceMetrics() As Collection
End Function

''' <summary>
''' リソース使用状況を取得します
''' </summary>
''' <returns>リソース使用情報のコレクション</returns>
Public Function GetResourceUsage() As Collection
End Function

''' <summary>
''' 非同期バリデーションをサポートしているかどうかを取得します
''' </summary>
Public Property Get SupportsAsyncValidation() As Boolean
End Property

''' <summary>
''' キャッシュ戦略を設定します
''' </summary>
''' <param name="strategy">キャッシュ戦略</param>
Public Property Let CacheStrategy(ByVal strategy As IValidationCacheStrategy)
End Property

================
File: interfaces/IValidationGroup.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IValidationGroup"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredefinedId = False
Attribute VB_Exposed = True
Option Explicit

'@Description("複数のバリデーターをグループ化し、実行順序と依存関係を管理するインターフェース")

' イベント定義
Public Event GroupValidationStarted(ByVal groupName As String, ByVal context As IValidationContext)
Public Event GroupValidationCompleted(ByVal groupName As String, ByVal success As Boolean, ByVal results As Collection)
Public Event ValidatorAdded(ByVal validator As IValidator)
Public Event ValidatorRemoved(ByVal validator As IValidator)
Public Event GroupDependencyChanged(ByVal dependentGroup As IValidationGroup)
Public Event ExecutionOrderChanged(ByVal newOrder As Long)
Public Event ValidationError(ByVal errorInfo As ErrorInfo)
Public Event GroupStateChanged(ByVal groupName As String, ByVal newState As ValidationGroupState)

' 定数定義
Private Const MAX_VALIDATORS As Long = 100  ' 1グループあたりの最大バリデーター数

''' <summary>
''' グループ名を設定します
''' </summary>
''' <remarks>
''' エラー処理要件：
''' - 名前の一意性確認
''' - 無効な文字の検出
''' - 長さ制限の確認
''' - 既存の処理への影響考慮
''' </remarks>
Public Property Let GroupName(ByVal value As String)
End Property

''' <summary>
''' グループ名を取得します
''' </summary>
Public Property Get GroupName() As String
End Property

''' <summary>
''' グループの優先順位を設定します
''' </summary>
''' <remarks>
''' エラー処理要件：
''' - 優先順位の範囲チェック
''' - グループ間の整合性確認
''' - 実行中の検証への影響考慮
''' </remarks>
Public Property Let Priority(ByVal value As Long)
End Property

''' <summary>
''' グループの優先順位を取得します
''' </summary>
Public Property Get Priority() As Long
End Property

''' <summary>
''' バリデーターを追加します
''' </summary>
''' <param name="validator">追加するバリデーター</param>
''' <remarks>
''' エラー処理要件：
''' - バリデーターの有効性確認
''' - 重複チェック
''' - メモリ使用量の監視
''' - グループ内の整合性確認
''' - 最大バリデーター数の制限
''' - バリデーター間の依存関係確認
''' - イベントの適切な発行
''' </remarks>
Public Sub AddValidator(ByVal validator As IValidator)
End Sub

''' <summary>
''' バリデーターを削除します
''' </summary>
''' <param name="validator">削除するバリデーター</param>
''' <remarks>
''' エラー処理要件：
''' - 存在確認
''' - リソースの解放
''' - 依存関係の更新
''' - 実行中の検証への影響考慮
''' - イベントの適切な発行
''' </remarks>
Public Sub RemoveValidator(ByVal validator As IValidator)
End Sub

''' <summary>
''' グループ全体の検証を実行します
''' </summary>
''' <param name="context">バリデーションコンテキスト</param>
''' <returns>すべてのバリデーターが成功した場合True</returns>
''' <remarks>
''' エラー処理要件：
''' - 部分的な失敗の処理
''' - エラー情報の集約
''' - パフォーマンスの最適化
''' - タイムアウト処理
''' - 非同期実行のサポート
''' - キャンセル処理
''' - イベントの適切な発行
''' </remarks>
Public Function ValidateGroup(ByVal context As IValidationContext) As Boolean
End Function

''' <summary>
''' グループの依存関係を設定します
''' </summary>
''' <param name="dependentGroup">依存するグループ</param>
''' <remarks>
''' エラー処理要件：
''' - 循環依存の検出
''' - グループの存在確認
''' - 依存関係の整合性確認
''' - 実行順序との整合性確認
''' - イベントの適切な発行
''' </remarks>
Public Sub SetGroupDependency(ByVal dependentGroup As IValidationGroup)
End Sub

''' <summary>
''' グループの検証順序を設定します
''' </summary>
''' <param name="order">実行順序（1から開始）</param>
''' <remarks>
''' エラー処理要件：
''' - 順序の一意性確認
''' - 範囲チェック
''' - 依存関係との整合性確認
''' - 実行中の検証への影響考慮
''' - イベントの適切な発行
''' </remarks>
Public Sub SetExecutionOrder(ByVal order As Long)
End Sub

''' <summary>
''' グループの検証結果を取得します
''' </summary>
''' <returns>検証結果のコレクション</returns>
''' <remarks>
''' エラー処理要件：
''' - 結果の整合性確認
''' - メモリ使用量の最適化
''' - エラー情報の集約
''' - 結果のフィルタリング
''' - 結果の優先順位付け
''' </remarks>
Public Function GetGroupValidationResults() As Collection
End Function

''' <summary>
''' グループのメタデータを設定します
''' </summary>
''' <param name="key">メタデータのキー</param>
''' <param name="value">メタデータの値</param>
''' <remarks>
''' エラー処理要件：
''' - キーの一意性確認
''' - 値の型チェック
''' - メモリ使用量の監視
''' - キーの命名規則確認
''' - 値の永続化要件確認
''' </remarks>
Public Sub SetMetadata(ByVal key As String, ByVal value As Variant)
End Sub

''' <summary>
''' グループのメタデータを取得します
''' </summary>
''' <param name="key">メタデータのキー</param>
''' <returns>メタデータの値</returns>
Public Function GetMetadata(ByVal key As String) As Variant
End Function

''' <summary>
''' グループの状態を取得します
''' </summary>
''' <returns>現在の状態</returns>
''' <remarks>
''' エラー処理要件：
''' - 状態の整合性確認
''' - 遷移履歴の管理
''' - イベントの適切な発行
''' </remarks>
Public Property Get State() As ValidationGroupState
End Property

''' <summary>
''' グループの検証をキャンセルします
''' </summary>
''' <remarks>
''' エラー処理要件：
''' - 実行状態の確認
''' - リソースの適切な解放
''' - 依存グループへの影響考慮
''' - イベントの適切な発行
''' </remarks>
Public Sub CancelValidation()
End Sub

''' <summary>
''' グループの検証を一時停止します
''' </summary>
''' <remarks>
''' エラー処理要件：
''' - 実行状態の確認
''' - 中間状態の保存
''' - リソースの維持
''' - イベントの適切な発行
''' </remarks>
Public Sub PauseValidation()
End Sub

''' <summary>
''' グループの検証を再開します
''' </summary>
''' <remarks>
''' エラー処理要件：
''' - 状態の復元確認
''' - リソースの再確保
''' - 依存関係の再検証
''' - イベントの適切な発行
''' </remarks>
Public Sub ResumeValidation()
End Sub

''' <summary>
''' グループの進捗状況を取得します
''' </summary>
''' <returns>進捗率（0-100）</returns>
Public Property Get Progress() As Long
End Property

''' <summary>
''' グループのバリデーターをフィルタリングします
''' </summary>
''' <param name="criteria">フィルタリング条件</param>
''' <returns>フィルタリングされたバリデーターのコレクション</returns>
''' <remarks>
''' エラー処理要件：
''' - 条件式の構文検証
''' - パフォーマンスの最適化
''' - メモリ使用量の監視
''' - 結果の整合性確認
''' </remarks>
Public Function FilterValidators(ByVal criteria As String) As Collection
End Function

================
File: interfaces/IValidationRule.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IValidationRule"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

'@Description("個別のバリデーションルールを定義し、値の検証とエラー情報の管理を行うインターフェース")

' 定数定義
Private Const MAX_ERROR_LENGTH As Long = 1024        ' エラーメッセージの最大長
Private Const MAX_METADATA_ENTRIES As Long = 100     ' メタデータエントリの最大数
Private Const CACHE_DURATION_MS As Long = 60000      ' キャッシュの有効期間（1分）
Private Const DEFAULT_TIMEOUT_MS As Long = 5000      ' デフォルトのタイムアウト時間（5秒）

' イベント定義
Public Event ValidationStarted(ByVal value As Variant, ByVal context As IValidationContext)
Public Event ValidationCompleted(ByVal value As Variant, ByVal success As Boolean, ByVal executionTime As Double)
Public Event ValidationError(ByVal errorInfo As ErrorInfo)
Public Event CacheUpdated(ByVal cacheKey As String, ByVal isCached As Boolean)
Public Event PerformanceAlert(ByVal metricType As String, ByVal currentValue As Double, ByVal threshold As Double)

''' <summary>
''' 値の妥当性を検証します
''' </summary>
''' <param name="value">検証する値</param>
''' <param name="context">検証コンテキスト（オプション）</param>
''' <param name="options">検証オプション（オプション）</param>
''' <returns>妥当な場合True</returns>
''' <remarks>
''' エラー処理要件：
''' - 入力値のNULLチェック
''' - データ型の互換性確認
''' - メモリ制限の考慮
''' - 検証ルールの整合性確認
''' - タイムアウト処理
''' - キャッシュの活用
''' 
''' 実装時の注意点：
''' 1. 検証失敗時は必ずErrorMessageを設定すること
''' 2. パフォーマンスに影響を与える検証は最後に実行すること
''' 3. 副作用を発生させないこと
''' 4. メトリクスを収集すること
''' 5. イベントを適切に発行すること
''' </remarks>
Public Function Validate(ByVal value As Variant, Optional ByVal context As IValidationContext, Optional ByVal options As ValidationOptions) As Boolean
End Function

''' <summary>
''' 検証エラーメッセージを取得します
''' </summary>
''' <param name="locale">ロケール（オプション）</param>
''' <returns>エラーメッセージ</returns>
''' <remarks>
''' エラー処理要件：
''' - メッセージの初期化状態確認
''' - 文字列長の制限
''' - 特殊文字のエスケープ
''' - 多言語対応
''' - テンプレートの適用
''' 
''' 実装時の注意点：
''' 1. エラーがない場合は空文字列を返すこと
''' 2. メッセージは具体的で理解しやすい内容にすること
''' 3. 機密情報を含めないこと
''' 4. フォーマット指定子を適切に使用すること
''' 5. メッセージの一貫性を保つこと
''' </remarks>
Public Function GetErrorMessage(Optional ByVal locale As String) As String
End Function

''' <summary>
''' 検証ルールのメタデータを設定します
''' </summary>
''' <param name="key">メタデータのキー</param>
''' <param name="value">メタデータの値</param>
Public Sub SetMetadata(ByVal key As String, ByVal value As Variant)
End Sub

''' <summary>
''' 検証ルールのメタデータを取得します
''' </summary>
''' <param name="key">メタデータのキー</param>
Public Function GetMetadata(ByVal key As String) As Variant
End Function

''' <summary>
''' 検証ルールの説明を取得します
''' </summary>
''' <param name="locale">ロケール（オプション）</param>
Public Function GetDescription(Optional ByVal locale As String) As String
End Function

''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
Public Function GetPerformanceMetrics() As Collection
End Function

''' <summary>
''' キャッシュ戦略を設定します
''' </summary>
''' <param name="strategy">キャッシュ戦略</param>
Public Property Let CacheStrategy(ByVal strategy As IValidationCacheStrategy)
End Property

''' <summary>
''' タイムアウト時間を設定します
''' </summary>
''' <param name="milliseconds">タイムアウト時間（ミリ秒）</param>
Public Property Let TimeoutMilliseconds(ByVal milliseconds As Long)
End Property

''' <summary>
''' タイムアウト時間を取得します
''' </summary>
Public Property Get TimeoutMilliseconds() As Long
End Property

''' <summary>
''' 検証ルールの状態を検証します
''' </summary>
''' <returns>有効な場合True</returns>
Public Function Validate() As Boolean
End Function

''' <summary>
''' リソースを解放します
''' </summary>
Public Sub Cleanup()
End Sub

================
File: interfaces/IValidator.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IValidator"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

'@Description("バリデーションの実行と結果管理を担当するインターフェース")

' 定数定義
Private Const MAX_RULES As Long = 100               ' 最大ルール数
Private Const MAX_ERROR_LENGTH As Long = 1024       ' エラーメッセージの最大長
Private Const CACHE_DURATION_MS As Long = 300000    ' キャッシュの有効期間（5分）
Private Const DEFAULT_TIMEOUT_MS As Long = 30000    ' デフォルトのタイムアウト時間（30秒）
Private Const MAX_BATCH_SIZE As Long = 1000         ' 最大バッチサイズ
Private Const MIN_MEMORY_THRESHOLD As Long = 102400 ' 最小メモリ閾値（100KB）

' イベント定義
Public Event ValidationStarted(ByVal value As Variant, ByVal context As IValidationContext)
Public Event ValidationCompleted(ByVal value As Variant, ByVal success As Boolean, ByVal metrics As ValidationMetrics)
Public Event RuleExecutionStarted(ByVal rule As IValidationRule, ByVal context As IValidationContext)
Public Event RuleExecutionCompleted(ByVal rule As IValidationRule, ByVal success As Boolean, ByVal executionTime As Double)
Public Event ValidationError(ByVal errorInfo As ErrorInfo, ByVal rule As IValidationRule)
Public Event ResourceExhausted(ByVal resourceType As String, ByVal currentUsage As Long)
Public Event CacheUpdated(ByVal cacheKey As String, ByVal isCached As Boolean)
Public Event PerformanceAlert(ByVal metricType As String, ByVal currentValue As Double, ByVal threshold As Double)

''' <summary>
''' 値の妥当性を検証します
''' </summary>
''' <param name="value">検証する値</param>
''' <param name="context">検証コンテキスト（オプション）</param>
''' <param name="options">検証オプション（オプション）</param>
''' <returns>妥当な場合True</returns>
''' <remarks>
''' エラー処理要件：
''' - 入力値のNULLチェック
''' - データ型の互換性確認
''' - メモリ制限の考慮
''' - 再帰的な検証の制御
''' - 検証ルールの整合性確認
''' - タイムアウト処理
''' - キャッシュの活用
''' 
''' 実装時の注意点：
''' 1. 検証失敗時は必ずErrorMessageを設定すること
''' 2. 複数のエラーが検出された場合は適切に集約すること
''' 3. パフォーマンスに影響を与える検証は最後に実行すること
''' 4. 副作用を発生させないこと
''' 5. メトリクスを収集すること
''' </remarks>
Public Function Validate(ByVal value As Variant, Optional ByVal context As IValidationContext, Optional ByVal options As ValidationOptions) As Boolean
End Function

''' <summary>
''' バッチ検証を実行します
''' </summary>
''' <param name="values">検証する値のコレクション</param>
''' <param name="options">バッチオプション（オプション）</param>
''' <returns>バッチ検証結果</returns>
Public Function ValidateBatch(ByVal values As Collection, Optional ByVal options As BatchValidationOptions) As ValidationBatchResult
End Function

''' <summary>
''' 検証エラーメッセージを取得します
''' </summary>
''' <param name="locale">ロケール（オプション）</param>
''' <returns>エラーメッセージ</returns>
''' <remarks>
''' エラー処理要件：
''' - メッセージの初期化状態確認
''' - 文字列長の制限
''' - 特殊文字のエスケープ
''' - 多言語対応
''' - テンプレートの適用
''' 
''' 実装時の注意点：
''' 1. エラーがない場合は空文字列を返すこと
''' 2. メッセージは具体的で理解しやすい内容にすること
''' 3. 機密情報を含めないこと
''' 4. フォーマット指定子を適切に使用すること
''' 5. メッセージの一貫性を保つこと
''' </remarks>
Public Function GetErrorMessage(Optional ByVal locale As String) As String
End Function

''' <summary>
''' 検証ルールを追加します
''' </summary>
''' <param name="rule">検証ルール</param>
''' <param name="priority">優先度（オプション）</param>
''' <param name="options">追加オプション（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - ルールの妥当性確認
''' - 重複ルールの検出
''' - ルール間の依存関係確認
''' - メモリ使用量の監視
''' - 最大ルール数の制限
''' - 優先度の検証
''' </remarks>
Public Sub AddRule(ByVal rule As IValidationRule, Optional ByVal priority As ValidationPriority = vpNormal, Optional ByVal options As RuleOptions)
End Sub

''' <summary>
''' 検証ルールを削除します
''' </summary>
''' <param name="rule">削除するルール</param>
''' <param name="options">削除オプション（オプション）</param>
Public Sub RemoveRule(ByVal rule As IValidationRule, Optional ByVal options As RuleRemovalOptions)
End Sub

''' <summary>
''' 検証ルールをクリアします
''' </summary>
''' <param name="options">クリアオプション（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - リソースの適切な解放
''' - 実行中の検証への影響考慮
''' - 状態の整合性維持
''' - キャッシュの更新
''' </remarks>
Public Sub ClearRules(Optional ByVal options As ClearOptions)
End Sub

''' <summary>
''' 検証の詳細結果を取得します
''' </summary>
''' <param name="options">取得オプション（オプション）</param>
''' <returns>検証結果の詳細情報</returns>
''' <remarks>
''' エラー処理要件：
''' - 結果の初期化状態確認
''' - メモリ使用量の考慮
''' - 大量データの効率的な処理
''' - キャッシュの活用
''' </remarks>
Public Function GetValidationDetails(Optional ByVal options As ValidationDetailsOptions) As ValidationDetails
End Function

''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
''' <returns>パフォーマンス情報のコレクション</returns>
Public Function GetPerformanceMetrics() As Collection
End Function

''' <summary>
''' キャッシュ戦略を設定します
''' </summary>
''' <param name="strategy">キャッシュ戦略</param>
Public Property Let CacheStrategy(ByVal strategy As IValidationCacheStrategy)
End Property

''' <summary>
''' タイムアウト時間を設定します
''' </summary>
''' <param name="milliseconds">タイムアウト時間（ミリ秒）</param>
Public Property Let TimeoutMilliseconds(ByVal milliseconds As Long)
End Property

''' <summary>
''' タイムアウト時間を取得します
''' </summary>
Public Property Get TimeoutMilliseconds() As Long
End Property

''' <summary>
''' バリデーターの状態を検証します
''' </summary>
''' <returns>有効な場合True</returns>
Public Function Validate() As Boolean
End Function

''' <summary>
''' リソースを解放します
''' </summary>
Public Sub Cleanup()
End Sub

''' <summary>
''' メタデータを設定します
''' </summary>
''' <param name="key">メタデータのキー</param>
''' <param name="value">メタデータの値</param>
Public Sub SetMetadata(ByVal key As String, ByVal value As Variant)
End Sub

''' <summary>
''' メタデータを取得します
''' </summary>
''' <param name="key">メタデータのキー</param>
Public Function GetMetadata(ByVal key As String) As Variant
End Function

================
File: interfaces/repomix-output.txt
================
This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-27T04:40:19.631Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
CommonEnums.cls
IAppConfig.cls
IAsyncValidation.cls
ICompositeValidationRule.cls
IConnectionPool.cls
IConnectionStringBuilder.cls
ICryptography.cls
IDatabaseConfig.cls
IEmergencyLogger.cls
IError.cls
IErrorHandler.cls
IErrorNotification.cls
IErrorStrategy.cls
IEventLog.cls
IFileIO.cls
IFileOperations.cls
IIniFile.cls
IKeyDerivationStrategy.cls
ILock.cls
ILogger.cls
ILoggerSettings.cls
IMessageFormatter.cls
IMutex.cls
IPerformanceCounter.cls
IPerformanceMonitor.cls
IQueue.cls
IRegexEngine.cls
ISleep.cls
IStack.cls
IStackTrace.cls
IUserNotifier.cls
IValidationContext.cls
IValidationGroup.cls
IValidationRule.cls
IValidator.cls

================================================================
Files
================================================================

================
File: CommonEnums.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "CommonEnums"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredefinedId = False
Attribute VB_Exposed = True
Option Explicit

'@Description("システム全体で使用される共通の列挙型を定義するクラス")

'@Description("ログレベルを定義する列挙型")
'@Remarks("ログの重要度を表し、フィルタリングやハンドリングの基準として使用")
Public Enum LogLevel
    llTrace = 0    ' 最も詳細なデバッグ情報（開発時のみ使用）
    llDebug = 1    ' デバッグ情報（開発・テスト環境で使用）
    llInfo = 2     ' 一般的な情報（通常の操作ログ）
    llWarning = 3  ' 警告（潜在的な問題）
    llError = 4    ' エラー（回復可能な問題）
    llFatal = 5    ' 致命的なエラー（システム停止レベルの問題）
End Enum

'@Description("エラー通知レベルを定義する列挙型")
'@Remarks("エラーの重大度に応じた通知方法の選択に使用")
Public Enum ErrorNotificationLevel
    enlNone = 0      ' 通知なし（ログも記録しない）
    enlSilent = 1    ' サイレント（ログのみ記録）
    enlInfo = 2      ' 情報（ユーザーに情報として通知）
    enlWarning = 3   ' 警告（ユーザーに警告として通知）
    enlError = 4     ' エラー（ユーザーにエラーとして通知）
    enlCritical = 5  ' 重大（即時通知が必要な重大な問題）
End Enum

'@Description("バリデーション優先度を定義する列挙型")
'@Remarks("バリデーションルールの実行順序の制御に使用")
Public Enum ValidationPriority
    vpLowest = 0    ' 最低優先度（他のすべての検証の後に実行）
    vpLow = 1       ' 低優先度（基本的な検証の後に実行）
    vpNormal = 2    ' 通常優先度（標準的な実行順序）
    vpHigh = 3      ' 高優先度（基本的な検証の前に実行）
    vpHighest = 4   ' 最高優先度（最初に実行される検証）
End Enum

'@Description("設定オプションを定義する列挙型")
'@Remarks("設定値の取得・設定時のオプションを指定")
Public Enum SettingOptions
    soNone = 0              ' オプションなし
    soEncrypt = 1           ' 設定値を暗号化する
    soValidate = 2          ' 設定値を検証する
    soLogHistory = 4        ' 設定変更履歴を記録する
    soCache = 8             ' 設定値をキャッシュする
    soEnvironmentSpecific = 16 ' 環境固有の設定として扱う
End Enum

'@Description("読み込みオプションを定義する列挙型")
'@Remarks("設定ファイルからの読み込み時のオプションを指定")
Public Enum LoadOptions
    loNone = 0              ' オプションなし
    loDecrypt = 1           ' 設定値を復号化する
    loValidate = 2          ' 設定値を検証する
    loApplyEnvironment = 4  ' 環境固有の設定を適用する
    loMerge = 8             ' 既存の設定とマージする
End Enum

'@Description("保存オプションを定義する列挙型")
'@Remarks("設定ファイルへの保存時のオプションを指定")
Public Enum SaveOptions
    soNone = 0              ' オプションなし
    soEncrypt = 1           ' 設定値を暗号化する
    soBackup = 2            ' 保存前にバックアップを作成する
    soFormat = 4            ' 設定ファイルを整形して保存する
    soAtomic = 8            ' アトミックな書き込みを行う
End Enum

'@Description("暗号化オプションを定義する列挙型")
'@Remarks("暗号化操作時のオプションを指定")
Public Enum EncryptionOptions
    eoNone = 0              ' オプションなし
    eoRotateKey = 1         ' 新しいキーで暗号化する
    eoReEncrypt = 2         ' 既存の設定を新しいキーで再暗号化する
    eoSetKeyVersion = 4     ' キーバージョンを設定する
End Enum

'@Description("環境オプションを定義する列挙型")
'@Remarks("環境設定時のオプションを指定")
Public Enum EnvironmentOptions
    enoNone = 0             ' オプションなし
    enoReload = 1           ' 環境変更時に設定を再読み込みする
    enoValidate = 2         ' 環境変更時に設定を検証する
    enoNotify = 4           ' 環境変更を通知する
End Enum

'@Description("検証オプションを定義する列挙型")
'@Remarks("設定値の検証時のオプションを指定")
Public Enum ValidationOptions
    voNone = 0              ' オプションなし
    voFull = 1              ' すべての設定を検証する
    voChangedOnly = 2       ' 変更された設定のみ検証する
    voEnvironment = 4       ' 環境固有の設定を検証する
    voDataType = 8          ' データ型の検証を行う
    voRange = 16            ' 値の範囲を検証する
    voDependency = 32       ' 依存関係を検証する
End Enum

'@Description("履歴オプションを定義する列挙型")
'@Remarks("設定履歴の取得時のオプションを指定")
Public Enum HistoryOptions
    hoNone = 0              ' オプションなし
    hoLimit = 1             ' 取得する履歴の数を制限する
    hoSort = 2              ' 履歴をソートする
    hoFilter = 4            ' 履歴をフィルタリングする
End Enum

'@Description("復元オプションを定義する列挙型")
'@Remarks("バックアップからの復元時のオプションを指定")
Public Enum RestoreOptions
    roNone = 0              ' オプションなし
    roValidate = 1          ' 復元前に設定を検証する
    roMerge = 2             ' 既存の設定とマージする
    roNotify = 4            ' 復元を通知する
End Enum

'@Description("バリデーション状態を定義する列挙型")
'@Remarks("バリデーションの現在の実行状態を表す")
Public Enum ValidationState
    vsNotStarted = 0   ' 未開始
    vsPending = 1      ' 保留中
    vsRunning = 2      ' 実行中
    vsPaused = 3       ' 一時停止
    vsCompleted = 4    ' 完了
    vsFailed = 5       ' 失敗
    vsCancelled = 6    ' キャンセル
End Enum

'@Description("パフォーマンスメトリクスの種類を定義する列挙型")
'@Remarks("システムの各種パフォーマンス指標を表す")
Public Enum MetricType
    mtResponseTime = 0   ' 応答時間
    mtThroughput = 1    ' スループット
    mtErrorRate = 2     ' エラー率
    mtResourceUsage = 3  ' リソース使用率
    mtQueueLength = 4   ' キュー長
    mtLatency = 5       ' レイテンシ
End Enum

================
File: IAppConfig.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IAppConfig"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredefinedId = False
Attribute VB_Exposed = True
Option Explicit

'@Description("アプリケーション設定を管理するインターフェース")
'@Remarks("設定の読み書き、暗号化、バリデーション、バックアップ/復元などの機能を提供")

'@Description("設定値を取得する")
'@Param("settingName: 設定名")
'@Param("options: 取得時のオプション（SettingOptions）")
'@Return("設定値（Variant型）")
Public Function GetSetting(ByVal settingName As String, Optional ByVal options As SettingOptions = soNone) As Variant
End Function

'@Description("設定値を設定する")
'@Param("settingName: 設定名")
'@Param("settingValue: 設定値")
'@Param("options: 設定時のオプション（SettingOptions）")
Public Sub SetSetting(ByVal settingName As String, ByVal settingValue As Variant, Optional ByVal options As SettingOptions = soNone)
End Sub

'@Description("設定ファイルから設定を読み込む")
'@Param("filePath: 設定ファイルのパス")
'@Param("options: 読み込み時のオプション（LoadOptions）")
Public Sub LoadSettings(ByVal filePath As String, Optional ByVal options As LoadOptions = loNone)
End Sub

'@Description("設定をファイルに保存する")
'@Param("filePath: 保存先ファイルパス")
'@Param("options: 保存時のオプション（SaveOptions）")
Public Sub SaveSettings(ByVal filePath As String, Optional ByVal options As SaveOptions = soNone)
End Sub

'@Description("設定の暗号化キーを設定する")
'@Param("encryptionKey: 暗号化キー")
'@Param("options: 暗号化オプション（EncryptionOptions）")
Public Sub SetEncryptionKey(ByVal encryptionKey As String, Optional ByVal options As EncryptionOptions = eoNone)
End Sub

'@Description("現在の環境を設定する")
'@Param("environment: 環境名（dev/test/prod等）")
'@Param("options: 環境設定オプション（EnvironmentOptions）")
Public Sub SetEnvironment(ByVal environment As String, Optional ByVal options As EnvironmentOptions = enoNone)
End Sub

'@Description("設定値を検証する")
'@Param("options: 検証オプション（ValidationOptions）")
'@Return("検証結果（ValidationResult型）")
Public Function ValidateSettings(Optional ByVal options As ValidationOptions = voNone) As ValidationResult
End Function

'@Description("設定の変更履歴を取得する")
'@Param("settingName: 設定名（省略可）")
'@Param("options: 履歴取得オプション（HistoryOptions）")
'@Return("設定変更履歴のコレクション")
Public Function GetSettingHistory(Optional ByVal settingName As String, Optional ByVal options As HistoryOptions = hoNone) As Collection
End Function

'@Description("設定のバックアップを作成する")
'@Param("backupPath: バックアップファイルのパス")
'@Return("バックアップの成功可否")
Public Function CreateBackup(ByVal backupPath As String) As Boolean
End Function

'@Description("バックアップから設定を復元する")
'@Param("backupPath: バックアップファイルのパス")
'@Param("options: 復元オプション（RestoreOptions）")
'@Return("復元の成功可否")
Public Function RestoreFromBackup(ByVal backupPath As String, Optional ByVal options As RestoreOptions = roNone) As Boolean
End Function

'@Description("パフォーマンスメトリクスを取得する")
'@Return("パフォーマンスメトリクスのコレクション")
Public Function GetPerformanceMetrics() As Collection
End Function

' プロパティ定義
'@Description("ログファイルパス")
Public Property Get LogFilePath() As String
End Property
Public Property Let LogFilePath(ByVal value As String)
End Property

'@Description("ログレベル")
Public Property Get LogLevel() As LogLevel
End Property
Public Property Let LogLevel(ByVal value As LogLevel)
End Property

'@Description("最大リトライ回数")
Public Property Get MaxRetryCount() As Long
End Property
Public Property Let MaxRetryCount(ByVal value As Long)
End Property

'@Description("最大スタック深度")
Public Property Get MaxStackDepth() As Long
End Property
Public Property Let MaxStackDepth(ByVal value As Long)
End Property

'@Description("タイマー間隔（ミリ秒）")
Public Property Get TimerInterval() As Long
End Property
Public Property Let TimerInterval(ByVal value As Long)
End Property

'@Description("ログイベントソース")
Public Property Get LogEventSource() As String
End Property
Public Property Let LogEventSource(ByVal value As String)
End Property

'@Description("パフォーマンス監視の有効/無効")
Public Property Get PerformanceMonitoringEnabled() As Boolean
End Property
Public Property Let PerformanceMonitoringEnabled(ByVal value As Boolean)
End Property

'@Description("診断機能の有効/無効")
Public Property Get DiagnosticsEnabled() As Boolean
End Property
Public Property Let DiagnosticsEnabled(ByVal value As Boolean)
End Property

'@Description("自動保存の有効/無効")
Public Property Get AutoSave() As Boolean
End Property
Public Property Let AutoSave(ByVal value As Boolean)
End Property

'@Description("現在の環境名")
Public Property Get CurrentEnvironment() As String
End Property

'@Description("暗号化キーのバージョン")
Public Property Get EncryptionKeyVersion() As String
End Property

================
File: IAsyncValidation.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IAsyncValidation"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredefinedId = False
Attribute VB_Exposed = True
Option Explicit

'@Description("非同期バリデーションの実行と管理を担当するインターフェース")

' 定数定義
Private Const DEFAULT_TIMEOUT_MS As Long = 30000        ' デフォルトタイムアウト時間（30秒）
Private Const MAX_CONCURRENT_TASKS As Long = 10         ' 最大同時実行タスク数
Private Const MIN_BATCH_SIZE As Long = 100              ' 最小バッチサイズ
Private Const MAX_QUEUE_SIZE As Long = 1000             ' 最大キューサイズ
Private Const CACHE_DURATION_MS As Long = 300000        ' キャッシュ有効期間（5分）
Private Const RETRY_INTERVAL_MS As Long = 1000          ' リトライ間隔（1秒）
Private Const MAX_RETRY_COUNT As Long = 3               ' 最大リトライ回数

' イベント定義
Public Event ValidationStarted(ByVal validationId As String, ByVal context As IValidationContext, ByVal executionPlan As ValidationExecutionPlan)
Public Event ValidationProgress(ByVal validationId As String, ByVal progressPercentage As Long, ByVal currentOperation As String, ByVal estimatedTimeRemaining As Long)
Public Event ValidationCompleted(ByVal validationId As String, ByVal success As Boolean, ByVal results As Collection, ByVal metrics As ValidationMetrics)
Public Event ValidationError(ByVal validationId As String, ByVal errorInfo As ErrorInfo, ByVal retryCount As Long)
Public Event ValidationCancelled(ByVal validationId As String, ByVal reason As String)
Public Event ResourceExhausted(ByVal validationId As String, ByVal resourceType As String, ByVal currentUsage As Long)
Public Event ValidationQueued(ByVal validationId As String, ByVal queuePosition As Long, ByVal estimatedWaitTime As Long)
Public Event BatchProcessingStarted(ByVal batchId As String, ByVal itemCount As Long)
Public Event BatchProcessingCompleted(ByVal batchId As String, ByVal successCount As Long, ByVal failureCount As Long)
Public Event PerformanceAlert(ByVal validationId As String, ByVal metricType As String, ByVal currentValue As Double, ByVal threshold As Double)
Public Event CacheUpdated(ByVal validationId As String, ByVal isCached As Boolean, ByVal cacheSize As Long)
Public Event StateChanged(ByVal validationId As String, ByVal oldState As ValidationState, ByVal newState As ValidationState)

''' <summary>
''' 非同期バリデーションを開始します
''' </summary>
''' <param name="value">検証する値</param>
''' <param name="context">バリデーションコンテキスト</param>
''' <param name="priority">実行優先度（オプション）</param>
''' <param name="options">実行オプション（オプション）</param>
''' <returns>バリデーションID（キャンセル時に使用）</returns>
''' <remarks>
''' エラー処理要件：
''' - パラメータの検証
''' - リソースの可用性確認
''' - 同時実行数の制限
''' - タイムアウト設定
''' - キューの管理
''' - メモリ使用量の監視
''' - キャッシュの活用
''' </remarks>
Public Function StartAsyncValidation(ByVal value As Variant, ByVal context As IValidationContext, Optional ByVal priority As ValidationPriority = vpNormal, Optional ByVal options As AsyncValidationOptions) As String
End Function

''' <summary>
''' バッチバリデーションを開始します
''' </summary>
''' <param name="items">検証するアイテムのコレクション</param>
''' <param name="context">バリデーションコンテキスト</param>
''' <param name="options">バッチオプション（オプション）</param>
''' <returns>バッチID</returns>
Public Function StartBatchValidation(ByVal items As Collection, ByVal context As IValidationContext, Optional ByVal options As BatchValidationOptions) As String
End Function

''' <summary>
''' 非同期バリデーションをキャンセルします
''' </summary>
''' <param name="validationId">バリデーションID</param>
''' <param name="gracefulShutdown">グレースフルシャットダウンを試みるかどうか</param>
''' <param name="options">キャンセルオプション（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - IDの有効性確認
''' - リソースの適切な解放
''' - 実行中の処理の安全な停止
''' - 依存タスクの処理
''' - キャッシュの更新
''' - メトリクスの記録
''' </remarks>
Public Sub CancelValidation(ByVal validationId As String, Optional ByVal gracefulShutdown As Boolean = True, Optional ByVal options As CancellationOptions)
End Sub

''' <summary>
''' バリデーションの状態を取得します
''' </summary>
''' <param name="validationId">バリデーションID</param>
''' <param name="includeDetails">詳細情報を含めるかどうか</param>
''' <returns>現在の状態情報</returns>
Public Function GetValidationStatus(ByVal validationId As String, Optional ByVal includeDetails As Boolean = False) As ValidationStatus
End Function

''' <summary>
''' タイムアウト時間を設定します
''' </summary>
''' <param name="milliseconds">タイムアウト時間（ミリ秒）</param>
''' <remarks>
''' エラー処理要件：
''' - 値の範囲チェック
''' - 実行中の処理への影響考慮
''' - タイムアウト処理の整合性確認
''' - デフォルト値の適用
''' </remarks>
Public Property Let TimeoutMilliseconds(ByVal milliseconds As Long)
End Property

''' <summary>
''' タイムアウト時間を取得します
''' </summary>
Public Property Get TimeoutMilliseconds() As Long
End Property

''' <summary>
''' 最大同時実行数を設定します
''' </summary>
''' <param name="count">最大同時実行数</param>
''' <remarks>
''' エラー処理要件：
''' - 値の範囲チェック
''' - システムリソースの考慮
''' - 実行中タスクへの影響評価
''' - スケーリングの適用
''' </remarks>
Public Property Let MaxConcurrentValidations(ByVal count As Long)
End Property

''' <summary>
''' 最大同時実行数を取得します
''' </summary>
Public Property Get MaxConcurrentValidations() As Long
End Property

''' <summary>
''' 進捗通知の間隔を設定します
''' </summary>
''' <param name="milliseconds">通知間隔（ミリ秒）</param>
''' <remarks>
''' エラー処理要件：
''' - 値の範囲チェック
''' - パフォーマンスへの影響考慮
''' - イベント発行の最適化
''' - バッチ処理の考慮
''' </remarks>
Public Property Let ProgressNotificationInterval(ByVal milliseconds As Long)
End Property

''' <summary>
''' 進捗通知の間隔を取得します
''' </summary>
Public Property Get ProgressNotificationInterval() As Long
End Property

''' <summary>
''' すべての非同期バリデーションを待機します
''' </summary>
''' <param name="timeoutMilliseconds">タイムアウト時間（ミリ秒）</param>
''' <param name="options">待機オプション（オプション）</param>
''' <returns>すべての処理が完了した場合True</returns>
''' <remarks>
''' エラー処理要件：
''' - タイムアウト処理
''' - リソースの監視
''' - デッドロック防止
''' - 部分的な完了の処理
''' - キャンセル処理
''' </remarks>
Public Function WaitForAll(Optional ByVal timeoutMilliseconds As Long = -1, Optional ByVal options As WaitOptions) As Boolean
End Function

''' <summary>
''' 実行中のバリデーションの一覧を取得します
''' </summary>
''' <param name="filter">フィルタ条件（オプション）</param>
''' <returns>実行中のバリデーションIDのコレクション</returns>
Public Function GetRunningValidations(Optional ByVal filter As ValidationFilter) As Collection
End Function

''' <summary>
''' バリデーション結果を非同期で取得します
''' </summary>
''' <param name="validationId">バリデーションID</param>
''' <param name="options">取得オプション（オプション）</param>
''' <returns>バリデーション結果（完了していない場合はNothing）</returns>
Public Function TryGetResults(ByVal validationId As String, Optional ByVal options As ResultOptions) As Variant
End Function

''' <summary>
''' バリデーションキューの状態を取得します
''' </summary>
''' <param name="includeMetrics">メトリクスを含めるかどうか</param>
''' <returns>キューの状態情報</returns>
Public Function GetQueueStatus(Optional ByVal includeMetrics As Boolean = False) As ValidationQueueStatus
End Function

''' <summary>
''' バリデーションの優先度を変更します
''' </summary>
''' <param name="validationId">バリデーションID</param>
''' <param name="newPriority">新しい優先度</param>
''' <param name="options">優先度変更オプション（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - IDの有効性確認
''' - 優先度の範囲チェック
''' - キューの再構築
''' - 実行中タスクへの影響考慮
''' </remarks>
Public Sub ChangePriority(ByVal validationId As String, ByVal newPriority As ValidationPriority, Optional ByVal options As PriorityOptions)
End Sub

''' <summary>
''' エラー発生時のリトライ戦略を設定します
''' </summary>
''' <param name="strategy">リトライ戦略</param>
Public Property Let RetryStrategy(ByVal strategy As IErrorStrategy)
End Property

''' <summary>
''' エラー発生時のリトライ戦略を取得します
''' </summary>
Public Property Get RetryStrategy() As IErrorStrategy
End Property

''' <summary>
''' バリデーション結果の永続化を設定します
''' </summary>
''' <param name="enabled">永続化を有効にするかどうか</param>
''' <param name="options">永続化オプション（オプション）</param>
Public Property Let PersistResults(ByVal enabled As Boolean, Optional ByVal options As PersistenceOptions)
End Property

''' <summary>
''' バリデーション結果の永続化状態を取得します
''' </summary>
Public Property Get PersistResults() As Boolean
End Property

''' <summary>
''' リソース使用量の制限を設定します
''' </summary>
''' <param name="resourceType">リソースの種類</param>
''' <param name="limit">制限値</param>
''' <param name="options">リソース制限オプション（オプション）</param>
Public Sub SetResourceLimit(ByVal resourceType As String, ByVal limit As Long, Optional ByVal options As ResourceLimitOptions)
End Sub

''' <summary>
''' リソース使用量の制限を取得します
''' </summary>
''' <param name="resourceType">リソースの種類</param>
Public Function GetResourceLimit(ByVal resourceType As String) As Long
End Function

''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
''' <returns>パフォーマンス情報のコレクション</returns>
Public Function GetPerformanceMetrics() As Collection
End Function

''' <summary>
''' キャッシュ戦略を設定します
''' </summary>
''' <param name="strategy">キャッシュ戦略</param>
Public Property Let CacheStrategy(ByVal strategy As IValidationCacheStrategy)
End Property

''' <summary>
''' スケジューリング戦略を設定します
''' </summary>
''' <param name="strategy">スケジューリング戦略</param>
Public Property Let SchedulingStrategy(ByVal strategy As IValidationSchedulingStrategy)
End Property

================
File: ICompositeValidationRule.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "ICompositeValidationRule"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredefinedId = False
Attribute VB_Exposed = True
Option Explicit

'@Description("複数のバリデーションルールを組み合わせて高度な検証ロジックを実現するインターフェース")

' 定数定義
Private Const MAX_RULES As Long = 100            ' 1つの複合ルールに含められる最大ルール数
Private Const MAX_DEPTH As Long = 10             ' 複合ルールのネスト最大深度
Private Const PARALLEL_THRESHOLD As Long = 5      ' 並列実行を検討する最小ルール数
Private Const CACHE_DURATION_MS As Long = 300000  ' キャッシュの有効期間（5分）

' イベント定義
Public Event RuleAdded(ByVal rule As IValidationRule, ByVal priority As ValidationPriority)
Public Event RuleRemoved(ByVal rule As IValidationRule)
Public Event ValidationStarted(ByVal context As IValidationContext, ByVal executionPlan As ValidationExecutionPlan)
Public Event ValidationCompleted(ByVal context As IValidationContext, ByVal success As Boolean, ByVal results As Collection)
Public Event ValidationProgress(ByVal completedRules As Long, ByVal totalRules As Long)
Public Event RuleDependencyChanged(ByVal dependentRule As IValidationRule, ByVal dependencyRule As IValidationRule)
Public Event ExecutionOrderChanged(ByVal newOrder As Collection)
Public Event RuleGroupCreated(ByVal groupName As String, ByVal group As IValidationGroup)
Public Event ValidationError(ByVal errorInfo As ErrorInfo)
Public Event ResourceExhausted(ByVal resourceType As String, ByVal currentUsage As Long)
Public Event CacheUpdated(ByVal ruleId As String, ByVal isCached As Boolean)
Public Event PerformanceAlert(ByVal metricType As String, ByVal currentValue As Double, ByVal threshold As Double)

''' <summary>
''' バリデーションルールを追加します
''' </summary>
''' <param name="rule">追加するルール</param>
''' <param name="priority">優先順位（オプション）</param>
''' <param name="options">追加オプション（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - ルールの有効性確認
''' - 循環参照の検出
''' - メモリ使用量の監視
''' - 重複ルールの検出
''' - 最大ルール数の制限
''' - ネスト深度の制限
''' 
''' 実装時の注意点：
''' 1. ルールの優先順位を考慮すること
''' 2. ルール間の依存関係を管理すること
''' 3. パフォーマンスへの影響を考慮すること
''' 4. イベントを適切に発行すること
''' 5. キャッシュ戦略を適用すること
''' </remarks>
Public Sub AddRule(ByVal rule As IValidationRule, Optional ByVal priority As ValidationPriority = vpNormal, Optional ByVal options As ValidationRuleOptions)
End Sub

''' <summary>
''' バリデーションルールを削除します
''' </summary>
''' <param name="rule">削除するルール</param>
''' <param name="cleanupOptions">クリーンアップオプション（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - 存在しないルールの処理
''' - 依存関係の更新
''' - リソースの適切な解放
''' - イベントの適切な発行
''' - キャッシュの更新
''' - 実行中の検証への影響考慮
''' </remarks>
Public Sub RemoveRule(ByVal rule As IValidationRule, Optional ByVal cleanupOptions As ValidationCleanupOptions)
End Sub

''' <summary>
''' ルールの優先順位を設定します
''' </summary>
''' <param name="rule">対象ルール</param>
''' <param name="priority">優先順位</param>
''' <param name="options">優先順位オプション（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - ルールの存在確認
''' - 優先順位の範囲チェック
''' - 優先順位の一意性確保
''' - 依存関係との整合性確認
''' - 実行順序の再計算
''' - イベントの発行
''' </remarks>
Public Sub SetRulePriority(ByVal rule As IValidationRule, ByVal priority As ValidationPriority, Optional ByVal options As ValidationPriorityOptions)
End Sub

''' <summary>
''' バリデーション結果の詳細を取得します
''' </summary>
''' <param name="filter">フィルタ条件（オプション）</param>
''' <returns>バリデーション結果のコレクション</returns>
''' <remarks>
''' エラー処理要件：
''' - 結果の整合性確認
''' - メモリ使用量の最適化
''' - エラー情報の集約
''' - 結果の優先順位付け
''' - キャッシュの活用
''' - パフォーマンスの最適化
''' </remarks>
Public Function GetValidationDetails(Optional ByVal filter As ValidationResultFilter) As Collection
End Function

''' <summary>
''' すべてのルールをクリアします
''' </summary>
''' <param name="options">クリアオプション（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - リソースの適切な解放
''' - 状態の整合性維持
''' - 進行中の検証への影響考慮
''' - イベントの適切な発行
''' - キャッシュのクリア
''' - メモリの最適化
''' </remarks>
Public Sub ClearRules(Optional ByVal options As ValidationClearOptions)
End Sub

''' <summary>
''' ルール間の依存関係を設定します
''' </summary>
''' <param name="dependentRule">依存するルール</param>
''' <param name="dependencyRule">依存されるルール</param>
''' <param name="dependencyType">依存関係の種類</param>
''' <param name="options">依存関係オプション（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - 循環依存の検出
''' - ルールの存在確認
''' - 依存関係の整合性確認
''' - 依存関係の種類の検証
''' - 実行順序への影響確認
''' - パフォーマンスへの影響考慮
''' </remarks>
Public Sub SetRuleDependency(ByVal dependentRule As IValidationRule, ByVal dependencyRule As IValidationRule, Optional ByVal dependencyType As DependencyType = dtRequired, Optional ByVal options As ValidationDependencyOptions)
End Sub

''' <summary>
''' 指定したルールの依存関係を取得します
''' </summary>
''' <param name="rule">対象ルール</param>
''' <param name="options">取得オプション（オプション）</param>
''' <returns>依存関係のコレクション</returns>
Public Function GetRuleDependencies(ByVal rule As IValidationRule, Optional ByVal options As ValidationDependencyOptions) As Collection
End Function

''' <summary>
''' ルールの実行順序を取得します
''' </summary>
''' <param name="optimizationStrategy">最適化戦略（オプション）</param>
''' <returns>実行順序に並べられたルールのコレクション</returns>
''' <remarks>
''' - 優先順位と依存関係を考慮した実行順序
''' - 循環依存がある場合はエラー
''' - パフォーマンスの最適化
''' - 並列実行の可能性を考慮
''' - キャッシュの活用
''' - リソース使用量の監視
''' </remarks>
Public Function GetExecutionOrder(Optional ByVal optimizationStrategy As ValidationOptimizationStrategy = vosDefault) As Collection
End Function

''' <summary>
''' 複合ルールの検証を実行します
''' </summary>
''' <param name="value">検証する値</param>
''' <param name="context">バリデーションコンテキスト</param>
''' <param name="options">実行オプション（オプション）</param>
''' <returns>すべてのルールが成功した場合True</returns>
''' <remarks>
''' エラー処理要件：
''' - 部分的な失敗の処理
''' - タイムアウト処理
''' - リソースの監視
''' - イベントの適切な発行
''' - 非同期実行の管理
''' - パフォーマンスの最適化
''' </remarks>
Public Function ValidateComposite(ByVal value As Variant, ByVal context As IValidationContext, Optional ByVal options As ValidationExecutionOptions) As Boolean
End Function

''' <summary>
''' 非同期検証をサポートしているかどうかを取得します
''' </summary>
Public Property Get SupportsAsyncValidation() As Boolean
End Property

''' <summary>
''' 並列検証をサポートしているかどうかを取得します
''' </summary>
Public Property Get SupportsParallelValidation() As Boolean
End Property

''' <summary>
''' ルールグループを作成します
''' </summary>
''' <param name="groupName">グループ名</param>
''' <param name="options">グループオプション（オプション）</param>
''' <returns>作成されたルールグループ</returns>
''' <remarks>
''' エラー処理要件：
''' - グループ名の一意性確認
''' - リソースの確保
''' - メモリ使用量の監視
''' - グループ数の制限
''' - イベントの発行
''' </remarks>
Public Function CreateRuleGroup(ByVal groupName As String, Optional ByVal options As ValidationGroupOptions) As IValidationGroup
End Function

''' <summary>
''' ルールをグループに追加します
''' </summary>
''' <param name="rule">追加するルール</param>
''' <param name="groupName">グループ名</param>
''' <param name="options">追加オプション（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - グループの存在確認
''' - ルールの有効性確認
''' - 重複の防止
''' - グループサイズの制限
''' - イベントの発行
''' </remarks>
Public Sub AddRuleToGroup(ByVal rule As IValidationRule, ByVal groupName As String, Optional ByVal options As ValidationGroupOptions)
End Sub

''' <summary>
''' 検証の進行状況を取得します
''' </summary>
Public Property Get Progress() As Long
End Property

''' <summary>
''' キャンセル状態を設定/取得します
''' </summary>
Public Property Get IsCancellationRequested() As Boolean
End Property

Public Property Let IsCancellationRequested(ByVal value As Boolean)
End Property

''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
''' <returns>パフォーマンス情報のコレクション</returns>
Public Function GetPerformanceMetrics() As Collection
End Function

''' <summary>
''' リソース使用状況を取得します
''' </summary>
''' <returns>リソース使用情報のコレクション</returns>
Public Function GetResourceUsage() As Collection
End Function

''' <summary>
''' キャッシュ戦略を設定します
''' </summary>
''' <param name="strategy">キャッシュ戦略</param>
Public Property Let CacheStrategy(ByVal strategy As IValidationCacheStrategy)
End Property

''' <summary>
''' 最適化戦略を設定します
''' </summary>
''' <param name="strategy">最適化戦略</param>
Public Property Let OptimizationStrategy(ByVal strategy As IValidationOptimizationStrategy)
End Property

================
File: IConnectionPool.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IConnectionPool"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

'@Description("データベース接続プールを管理し、接続の効率的な再利用と監視を提供するインターフェース")

' 定数定義
Private Const DEFAULT_MAX_CONNECTIONS As Long = 100    ' デフォルトの最大接続数
Private Const MIN_CONNECTIONS As Long = 5              ' 最小接続数
Private Const DEFAULT_TIMEOUT_MS As Long = 30000       ' デフォルトのタイムアウト時間（30秒）
Private Const MAX_RETRY_COUNT As Long = 3              ' 最大リトライ回数
Private Const CLEANUP_INTERVAL_MS As Long = 300000     ' クリーンアップ間隔（5分）
Private Const IDLE_TIMEOUT_MS As Long = 600000         ' アイドルタイムアウト（10分）
Private Const VALIDATION_INTERVAL_MS As Long = 60000   ' 検証間隔（1分）

' イベント定義
Public Event ConnectionAcquired(ByVal connectionId As String, ByVal waitTime As Long)
Public Event ConnectionReleased(ByVal connectionId As String, ByVal usageTime As Long)
Public Event ConnectionCreated(ByVal connectionId As String)
Public Event ConnectionClosed(ByVal connectionId As String)
Public Event PoolExhausted(ByVal waitingRequests As Long)
Public Event ConnectionValidated(ByVal connectionId As String, ByVal isValid As Boolean)
Public Event PerformanceAlert(ByVal metricType As String, ByVal currentValue As Double, ByVal threshold As Double)
Public Event ConnectionError(ByVal errorInfo As ErrorInfo)

''' <summary>
''' データベース接続を取得します
''' </summary>
''' <param name="options">取得オプション（オプション）</param>
''' <returns>データベース接続オブジェクト</returns>
''' <remarks>
''' エラー処理要件：
''' - 接続の有効性確認
''' - プール上限チェック
''' - タイムアウト処理
''' - 再接続ロジック
''' - 接続の検証
''' - デッドロック防止
''' - リソースの監視
''' </remarks>
Public Function AcquireConnection(Optional ByVal options As ConnectionOptions) As Object
End Function

''' <summary>
''' データベース接続をプールに返却します
''' </summary>
''' <param name="connection">返却する接続オブジェクト</param>
''' <param name="options">返却オプション（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - 接続の状態確認
''' - トランザクション状態の確認
''' - リソースの適切な解放
''' - プールの状態管理
''' - 接続の再利用可否判定
''' </remarks>
Public Sub ReleaseConnection(ByVal connection As Object, Optional ByVal options As ReleaseOptions)
End Sub

''' <summary>
''' 接続プールを初期化します
''' </summary>
''' <param name="initialSize">初期接続数</param>
''' <param name="options">初期化オプション（オプション）</param>
Public Sub Initialize(ByVal initialSize As Long, Optional ByVal options As InitializationOptions)
End Sub

''' <summary>
''' 接続プールをクリーンアップします
''' </summary>
''' <param name="options">クリーンアップオプション（オプション）</param>
Public Sub Cleanup(Optional ByVal options As CleanupOptions)
End Sub

''' <summary>
''' 接続の有効性を検証します
''' </summary>
''' <param name="connection">検証する接続</param>
''' <returns>有効な場合True</returns>
Public Function ValidateConnection(ByVal connection As Object) As Boolean
End Function

''' <summary>
''' プールの状態を取得します
''' </summary>
''' <returns>プールの状態情報</returns>
Public Function GetPoolStatus() As ConnectionPoolStatus
End Function

''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
''' <returns>パフォーマンス情報のコレクション</returns>
Public Function GetPerformanceMetrics() As Collection
End Function

''' <summary>
''' 接続プールの設定を更新します
''' </summary>
''' <param name="settings">プール設定</param>
Public Sub UpdatePoolSettings(ByVal settings As ConnectionPoolSettings)
End Sub

''' <summary>
''' アイドル接続をクリーンアップします
''' </summary>
''' <param name="idleTimeout">アイドルタイムアウト時間（ミリ秒）</param>
Public Sub CleanupIdleConnections(Optional ByVal idleTimeout As Long = IDLE_TIMEOUT_MS)
End Sub

' プロパティ定義

''' <summary>
''' 現在のアクティブな接続数を取得します
''' </summary>
Public Property Get ActiveConnections() As Long
End Property

''' <summary>
''' プールの最大接続数を取得または設定します
''' </summary>
Public Property Get MaxConnections() As Long
End Property

Public Property Let MaxConnections(ByVal value As Long)
End Property

''' <summary>
''' 接続タイムアウト時間を取得または設定します（ミリ秒）
''' </summary>
Public Property Get ConnectionTimeout() As Long
End Property

Public Property Let ConnectionTimeout(ByVal value As Long)
End Property

''' <summary>
''' アイドル接続数を取得します
''' </summary>
Public Property Get IdleConnections() As Long
End Property

''' <summary>
''' 待機中のリクエスト数を取得します
''' </summary>
Public Property Get WaitingRequests() As Long
End Property

''' <summary>
''' プールの状態を検証します
''' </summary>
''' <returns>有効な場合True</returns>
Public Function Validate() As Boolean
End Function

''' <summary>
''' リソースを解放します
''' </summary>
Public Sub Dispose()
End Sub

================
File: IConnectionStringBuilder.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IConnectionStringBuilder"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

'@Description("データベース接続文字列の安全な生成と管理を提供するインターフェース")

' 定数定義
Private Const MAX_SERVER_LENGTH As Long = 255      ' サーバー名の最大長
Private Const MAX_DATABASE_LENGTH As Long = 255    ' データベース名の最大長
Private Const MAX_USERNAME_LENGTH As Long = 128    ' ユーザー名の最大長
Private Const MAX_PASSWORD_LENGTH As Long = 128    ' パスワードの最大長
Private Const DEFAULT_TIMEOUT As Long = 30         ' デフォルトのタイムアウト（秒）
Private Const MAX_RETRY_COUNT As Long = 3          ' 最大リトライ回数
Private Const CACHE_DURATION_MS As Long = 300000   ' キャッシュの有効期間（5分）

' イベント定義
Public Event ConnectionStringBuilt(ByVal connectionString As String, ByVal isEncrypted As Boolean)
Public Event ParameterChanged(ByVal parameterName As String, ByVal oldValue As String, ByVal newValue As String)
Public Event ValidationError(ByVal parameterName As String, ByVal errorMessage As String)
Public Event SecurityAlert(ByVal alertType As String, ByVal details As String)
Public Event ConnectionTested(ByVal success As Boolean, ByVal errorMessage As String)
Public Event EncryptionKeyRotated(ByVal keyVersion As String)
Public Event ConfigurationLoaded(ByVal source As String, ByVal success As Boolean)

''' <summary>
''' データベース接続文字列を生成します
''' </summary>
''' <param name="options">生成オプション（オプション）</param>
''' <returns>生成された接続文字列</returns>
''' <remarks>
''' エラー処理要件：
''' - パラメータの検証
''' - セキュリティチェック
''' - 文字列の整形
''' - 暗号化処理
''' </remarks>
Public Function BuildConnectionString(Optional ByVal options As ConnectionStringOptions) As String
End Function

''' <summary>
''' 接続文字列をパースします
''' </summary>
''' <param name="connectionString">接続文字列</param>
''' <param name="options">パースオプション（オプション）</param>
Public Sub ParseConnectionString(ByVal connectionString As String, Optional ByVal options As ParseOptions)
End Sub

''' <summary>
''' 接続文字列を暗号化します
''' </summary>
''' <param name="connectionString">接続文字列</param>
''' <param name="options">暗号化オプション（オプション）</param>
''' <returns>暗号化された接続文字列</returns>
Public Function EncryptConnectionString(ByVal connectionString As String, Optional ByVal options As EncryptionOptions) As String
End Function

''' <summary>
''' 接続文字列を復号化します
''' </summary>
''' <param name="encryptedString">暗号化された接続文字列</param>
''' <param name="options">復号化オプション（オプション）</param>
''' <returns>復号化された接続文字列</returns>
Public Function DecryptConnectionString(ByVal encryptedString As String, Optional ByVal options As DecryptionOptions) As String
End Function

''' <summary>
''' 接続をテストします
''' </summary>
''' <param name="options">テストオプション（オプション）</param>
''' <returns>テスト結果</returns>
Public Function TestConnection(Optional ByVal options As TestOptions) As TestResult
End Function

''' <summary>
''' 設定を検証します
''' </summary>
''' <param name="options">検証オプション（オプション）</param>
''' <returns>検証結果</returns>
Public Function ValidateConfiguration(Optional ByVal options As ValidationOptions) As ValidationResult
End Function

' プロパティ定義

''' <summary>
''' サーバー名
''' </summary>
Public Property Get Server() As String
End Property

Public Property Let Server(ByVal value As String)
End Property

''' <summary>
''' データベース名
''' </summary>
Public Property Get Database() As String
End Property

Public Property Let Database(ByVal value As String)
End Property

''' <summary>
''' ユーザー名
''' </summary>
Public Property Get UserName() As String
End Property

Public Property Let UserName(ByVal value As String)
End Property

''' <summary>
''' パスワード
''' </summary>
Public Property Get Password() As String
End Property

Public Property Let Password(ByVal value As String)
End Property

''' <summary>
''' 追加のパラメータ
''' </summary>
Public Property Get AdditionalParameters() As String
End Property

Public Property Let AdditionalParameters(ByVal value As String)
End Property

''' <summary>
''' タイムアウト値（秒）
''' </summary>
Public Property Get Timeout() As Long
End Property

Public Property Let Timeout(ByVal value As Long)
End Property

''' <summary>
''' 暗号化が有効かどうか
''' </summary>
Public Property Get IsEncryptionEnabled() As Boolean
End Property

Public Property Let IsEncryptionEnabled(ByVal value As Boolean)
End Property

''' <summary>
''' 設定を保存します
''' </summary>
''' <param name="filePath">保存先のファイルパス</param>
''' <param name="options">保存オプション（オプション）</param>
Public Sub SaveConfiguration(ByVal filePath As String, Optional ByVal options As SaveOptions)
End Sub

''' <summary>
''' 設定を読み込みます
''' </summary>
''' <param name="filePath">読み込むファイルのパス</param>
''' <param name="options">読み込みオプション（オプション）</param>
Public Sub LoadConfiguration(ByVal filePath As String, Optional ByVal options As LoadOptions)
End Sub

''' <summary>
''' 接続文字列ビルダーの状態を検証します
''' </summary>
''' <returns>有効な場合True</returns>
Public Function Validate() As Boolean
End Function

''' <summary>
''' リソースを解放します
''' </summary>
Public Sub Cleanup()
End Sub

================
File: ICryptography.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "ICryptography"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

'@Description("暗号化操作と鍵管理を提供し、セキュアな暗号化機能を実装するインターフェース")

' 定数定義
Private Const MAX_KEY_SIZE As Long = 4096          ' 最大鍵サイズ（ビット）
Private Const MIN_KEY_SIZE As Long = 128           ' 最小鍵サイズ（ビット）
Private Const DEFAULT_ITERATION_COUNT As Long = 10000 ' デフォルトの反復回数
Private Const MAX_SALT_SIZE As Long = 32           ' 最大ソルトサイズ（バイト）
Private Const KEY_ROTATION_INTERVAL As Long = 7776000000 ' 鍵のローテーション間隔（90日）
Private Const CACHE_DURATION_MS As Long = 300000   ' キャッシュの有効期間（5分）

' イベント定義
Public Event KeyGenerated(ByVal keyId As String, ByVal keySize As Long)
Public Event KeyRotated(ByVal oldKeyId As String, ByVal newKeyId As String)
Public Event EncryptionCompleted(ByVal dataSize As Long, ByVal executionTime As Double)
Public Event DecryptionCompleted(ByVal dataSize As Long, ByVal executionTime As Double)
Public Event SecurityAlert(ByVal alertType As String, ByVal severity As Long)
Public Event AlgorithmChanged(ByVal oldAlgorithm As String, ByVal newAlgorithm As String)
Public Event PerformanceAlert(ByVal metricType As String, ByVal currentValue As Double, ByVal threshold As Double)
Public Event AuditLog(ByVal operation As String, ByVal details As String)

''' <summary>
''' 暗号化コンテキストを初期化します
''' </summary>
''' <param name="options">初期化オプション（オプション）</param>
''' <returns>成功時True、失敗時False</returns>
''' <remarks>
''' エラー処理要件：
''' - プロバイダーの検証
''' - アルゴリズムの互換性確認
''' - リソースの確保
''' - セキュリティ要件の検証
''' </remarks>
Public Function Initialize(Optional ByVal options As CryptoOptions) As Boolean
End Function

''' <summary>
''' データを暗号化します
''' </summary>
''' <param name="data">暗号化するデータ</param>
''' <param name="options">暗号化オプション（オプション）</param>
''' <returns>暗号化されたデータ</returns>
''' <remarks>
''' エラー処理要件：
''' - データの検証
''' - 鍵の有効性確認
''' - メモリ使用量の監視
''' - パフォーマンスの最適化
''' </remarks>
Public Function Encrypt(ByRef data As Variant, Optional ByVal options As EncryptionOptions) As Variant
End Function

''' <summary>
''' データを復号化します
''' </summary>
''' <param name="data">復号化するデータ</param>
''' <param name="options">復号化オプション（オプション）</param>
''' <returns>復号化されたデータ</returns>
Public Function Decrypt(ByRef data As Variant, Optional ByVal options As DecryptionOptions) As Variant
End Function

''' <summary>
''' ハッシュ値を計算します
''' </summary>
''' <param name="data">ハッシュ化するデータ</param>
''' <param name="algorithm">ハッシュアルゴリズム（オプション）</param>
''' <returns>ハッシュ値</returns>
Public Function ComputeHash(ByRef data As Variant, Optional ByVal algorithm As String) As String
End Function

''' <summary>
''' 鍵を生成します
''' </summary>
''' <param name="keySize">鍵サイズ（ビット）</param>
''' <param name="options">生成オプション（オプション）</param>
''' <returns>鍵ID</returns>
Public Function GenerateKey(ByVal keySize As Long, Optional ByVal options As KeyGenerationOptions) As String
End Function

''' <summary>
''' 鍵を導出します
''' </summary>
''' <param name="password">パスワード</param>
''' <param name="salt">ソルト</param>
''' <param name="options">導出オプション（オプション）</param>
''' <returns>導出された鍵</returns>
Public Function DeriveKey(ByVal password As String, ByVal salt As Variant, Optional ByVal options As KeyDerivationOptions) As Variant
End Function

''' <summary>
''' 鍵をローテーションします
''' </summary>
''' <param name="keyId">現在の鍵ID</param>
''' <param name="options">ローテーションオプション（オプション）</param>
''' <returns>新しい鍵ID</returns>
Public Function RotateKey(ByVal keyId As String, Optional ByVal options As KeyRotationOptions) As String
End Function

''' <summary>
''' 鍵を検証します
''' </summary>
''' <param name="keyId">鍵ID</param>
''' <returns>有効な場合True</returns>
Public Function ValidateKey(ByVal keyId As String) As Boolean
End Function

''' <summary>
''' セキュリティ監査を実行します
''' </summary>
''' <param name="options">監査オプション（オプション）</param>
''' <returns>監査結果</returns>
Public Function PerformSecurityAudit(Optional ByVal options As AuditOptions) As SecurityAuditResult
End Function

''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
''' <returns>パフォーマンス情報のコレクション</returns>
Public Function GetPerformanceMetrics() As Collection
End Function

''' <summary>
''' 暗号化アルゴリズムを設定します
''' </summary>
''' <param name="algorithm">アルゴリズム名</param>
''' <param name="options">アルゴリズムオプション（オプション）</param>
Public Sub SetAlgorithm(ByVal algorithm As String, Optional ByVal options As AlgorithmOptions)
End Sub

''' <summary>
''' 現在の暗号化アルゴリズムを取得します
''' </summary>
''' <returns>アルゴリズム名</returns>
Public Function GetCurrentAlgorithm() As String
End Function

''' <summary>
''' リソースを解放します
''' </summary>
Public Sub Cleanup()
End Sub

''' <summary>
''' 暗号化操作の状態を検証します
''' </summary>
''' <returns>有効な場合True</returns>
Public Function Validate() As Boolean
End Function

================
File: IDatabaseConfig.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IDatabaseConfig"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

'@Description("データベース設定の管理と監視を提供するインターフェース")

' 定数定義
Private Const DEFAULT_CONNECTION_TIMEOUT As Long = 30    ' デフォルト接続タイムアウト（秒）
Private Const DEFAULT_COMMAND_TIMEOUT As Long = 30      ' デフォルトコマンドタイムアウト（秒）
Private Const MAX_POOL_SIZE As Long = 100               ' 最大プールサイズ
Private Const MIN_POOL_SIZE As Long = 5                 ' 最小プールサイズ
Private Const BACKUP_INTERVAL_HOURS As Long = 24        ' バックアップ間隔（時間）
Private Const MAX_RETRY_COUNT As Long = 3               ' 最大リトライ回数
Private Const CACHE_DURATION_MS As Long = 300000        ' キャッシュの有効期間（5分）

' イベント定義
Public Event ConfigurationChanged(ByVal settingName As String, ByVal oldValue As Variant, ByVal newValue As Variant)
Public Event ConnectionStringUpdated(ByVal newConnectionString As String, ByVal isEncrypted As Boolean)
Public Event EnvironmentChanged(ByVal oldEnvironment As String, ByVal newEnvironment As String)
Public Event BackupCompleted(ByVal backupPath As String, ByVal success As Boolean)
Public Event SecurityAlert(ByVal alertType As String, ByVal details As String)
Public Event PerformanceAlert(ByVal metricType As String, ByVal currentValue As Double, ByVal threshold As Double)
Public Event ConfigurationValidated(ByVal isValid As Boolean, ByVal validationErrors As Collection)

''' <summary>
''' データベース接続文字列を取得します
''' </summary>
''' <param name="options">取得オプション（オプション）</param>
''' <returns>データベース接続文字列</returns>
''' <remarks>
''' エラー処理要件：
''' - 設定の検証
''' - 暗号化の処理
''' - 環境の確認
''' - セキュリティチェック
''' </remarks>
Public Function GetConnectionString(Optional ByVal options As ConnectionStringOptions) As String
End Function

''' <summary>
''' データベース固有の設定値を取得します
''' </summary>
''' <param name="settingName">設定名</param>
''' <param name="defaultValue">デフォルト値（オプション）</param>
''' <param name="options">取得オプション（オプション）</param>
''' <returns>設定値</returns>
Public Function GetDatabaseSetting(ByVal settingName As String, Optional ByVal defaultValue As Variant, Optional ByVal options As SettingOptions) As Variant
End Function

''' <summary>
''' データベース設定を保存します
''' </summary>
''' <param name="filePath">保存先のファイルパス</param>
''' <param name="options">保存オプション（オプション）</param>
Public Sub SaveConfiguration(ByVal filePath As String, Optional ByVal options As SaveOptions)
End Sub

''' <summary>
''' データベース設定を読み込みます
''' </summary>
''' <param name="filePath">読み込むファイルのパス</param>
''' <param name="options">読み込みオプション（オプション）</param>
Public Sub LoadConfiguration(ByVal filePath As String, Optional ByVal options As LoadOptions)
End Sub

''' <summary>
''' 環境を設定します
''' </summary>
''' <param name="environment">環境名</param>
''' <param name="options">環境オプション（オプション）</param>
Public Sub SetEnvironment(ByVal environment As String, Optional ByVal options As EnvironmentOptions)
End Sub

''' <summary>
''' バックアップ設定を構成します
''' </summary>
''' <param name="settings">バックアップ設定</param>
Public Sub ConfigureBackup(ByVal settings As DatabaseBackupSettings)
End Sub

''' <summary>
''' パフォーマンス設定を構成します
''' </summary>
''' <param name="settings">パフォーマンス設定</param>
Public Sub ConfigurePerformance(ByVal settings As DatabasePerformanceSettings)
End Sub

''' <summary>
''' 監視設定を構成します
''' </summary>
''' <param name="settings">監視設定</param>
Public Sub ConfigureMonitoring(ByVal settings As DatabaseMonitoringSettings)
End Sub

' プロパティ定義

''' <summary>
''' データベース接続文字列
''' </summary>
Public Property Get ConnectionString() As String
End Property

Public Property Let ConnectionString(ByVal value As String)
End Property

''' <summary>
''' 接続タイムアウト時間
''' </summary>
Public Property Get ConnectionTimeout() As Long
End Property

Public Property Let ConnectionTimeout(ByVal value As Long)
End Property

''' <summary>
''' コマンドタイムアウト時間
''' </summary>
Public Property Get CommandTimeout() As Long
End Property

Public Property Let CommandTimeout(ByVal value As Long)
End Property

''' <summary>
''' データベースの種類
''' </summary>
Public Property Get DatabaseType() As String
End Property

Public Property Let DatabaseType(ByVal value As String)
End Property

''' <summary>
''' ログテーブル名
''' </summary>
Public Property Get LogTableName() As String
End Property

Public Property Let LogTableName(ByVal value As String)
End Property

''' <summary>
''' 最小プールサイズ
''' </summary>
Public Property Get MinPoolSize() As Long
End Property

Public Property Let MinPoolSize(ByVal value As Long)
End Property

''' <summary>
''' 最大プールサイズ
''' </summary>
Public Property Get MaxPoolSize() As Long
End Property

Public Property Let MaxPoolSize(ByVal value As Long)
End Property

''' <summary>
''' 暗号化が有効かどうか
''' </summary>
Public Property Get IsEncryptionEnabled() As Boolean
End Property

Public Property Let IsEncryptionEnabled(ByVal value As Boolean)
End Property

''' <summary>
''' 現在の環境名
''' </summary>
Public Property Get CurrentEnvironment() As String
End Property

''' <summary>
''' 設定を検証します
''' </summary>
''' <param name="options">検証オプション（オプション）</param>
''' <returns>検証結果</returns>
Public Function ValidateConfiguration(Optional ByVal options As ValidationOptions) As ValidationResult
End Function

''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
''' <returns>パフォーマンス情報のコレクション</returns>
Public Function GetPerformanceMetrics() As Collection
End Function

''' <summary>
''' データベース設定の状態を検証します
''' </summary>
''' <returns>有効な場合True</returns>
Public Function Validate() As Boolean
End Function

''' <summary>
''' リソースを解放します
''' </summary>
Public Sub Cleanup()
End Sub

================
File: IEmergencyLogger.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IEmergencyLogger"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredefinedId = False
Attribute VB_Exposed = True
Option Explicit

'@Description("緊急時のエラーログ出力とフォールバック機能を提供するインターフェース")

' 定数定義
Private Const MAX_BUFFER_SIZE As Long = 1000        ' バッファの最大サイズ
Private Const FLUSH_INTERVAL_MS As Long = 1000      ' フラッシュ間隔（1秒）
Private Const MAX_RETRY_COUNT As Long = 3           ' 最大リトライ回数
Private Const MAX_MESSAGE_LENGTH As Long = 8192     ' メッセージの最大長
Private Const FALLBACK_PATH As String = "emergency.log" ' フォールバックログパス
Private Const ALERT_THRESHOLD As Long = 100         ' アラート閾値
Private Const CLEANUP_INTERVAL_MS As Long = 3600000 ' クリーンアップ間隔（1時間）

' イベント定義
Public Event EmergencyLogWritten(ByVal message As String, ByVal severity As EmergencyLevel)
Public Event FallbackActivated(ByVal reason As String, ByVal fallbackPath As String)
Public Event BufferThresholdReached(ByVal currentSize As Long, ByVal maxSize As Long)
Public Event LogFlushed(ByVal entryCount As Long, ByVal success As Boolean)
Public Event NotificationSent(ByVal recipient As String, ByVal messageType As String)
Public Event ResourceExhausted(ByVal resourceType As String, ByVal details As String)
Public Event PerformanceAlert(ByVal metricType As String, ByVal currentValue As Double, ByVal threshold As Double)

''' <summary>
''' 緊急時のエラーをログに記録します
''' </summary>
''' <param name="message">エラーメッセージ</param>
''' <param name="errorInfo">エラー情報（オプション）</param>
''' <param name="options">ログオプション（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - メッセージの検証
''' - バッファの管理
''' - フォールバックの適用
''' - リソースの監視
''' - 優先度の確認
''' </remarks>
Public Sub LogEmergencyError(ByVal message As String, Optional ByRef errorInfo As ErrorInfo, Optional ByVal options As EmergencyLogOptions)
End Sub

''' <summary>
''' バッファをフラッシュします
''' </summary>
''' <param name="options">フラッシュオプション（オプション）</param>
Public Sub FlushBuffer(Optional ByVal options As FlushOptions)
End Sub

''' <summary>
''' フォールバックパスを設定します
''' </summary>
''' <param name="path">フォールバックパス</param>
''' <param name="options">パスオプション（オプション）</param>
Public Sub SetFallbackPath(ByVal path As String, Optional ByVal options As FallbackOptions)
End Sub

''' <summary>
''' 緊急通知を送信します
''' </summary>
''' <param name="message">通知メッセージ</param>
''' <param name="recipients">受信者リスト</param>
''' <param name="options">通知オプション（オプション）</param>
Public Sub SendEmergencyNotification(ByVal message As String, ByVal recipients As Collection, Optional ByVal options As NotificationOptions)
End Sub

''' <summary>
''' ログの優先度を設定します
''' </summary>
''' <param name="level">優先度レベル</param>
''' <param name="options">優先度オプション（オプション）</param>
Public Sub SetPriorityLevel(ByVal level As EmergencyLevel, Optional ByVal options As PriorityOptions)
End Sub

''' <summary>
''' バッファサイズを設定します
''' </summary>
''' <param name="size">バッファサイズ</param>
Public Property Let BufferSize(ByVal size As Long)
End Property

''' <summary>
''' 現在のバッファサイズを取得します
''' </summary>
Public Property Get BufferSize() As Long
End Property

''' <summary>
''' フラッシュ間隔を設定します
''' </summary>
''' <param name="intervalMs">フラッシュ間隔（ミリ秒）</param>
Public Property Let FlushInterval(ByVal intervalMs As Long)
End Property

''' <summary>
''' 現在のフラッシュ間隔を取得します
''' </summary>
Public Property Get FlushInterval() As Long
End Property

''' <summary>
''' ログ履歴を取得します
''' </summary>
''' <param name="options">履歴オプション（オプション）</param>
''' <returns>ログ履歴のコレクション</returns>
Public Function GetLogHistory(Optional ByVal options As HistoryOptions) As Collection
End Function

''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
''' <returns>パフォーマンス情報のコレクション</returns>
Public Function GetPerformanceMetrics() As Collection
End Function

''' <summary>
''' ログの状態を検証します
''' </summary>
''' <returns>有効な場合True</returns>
Public Function Validate() As Boolean
End Function

''' <summary>
''' リソースを解放します
''' </summary>
Public Sub Cleanup()
End Sub

================
File: IError.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IError"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredefinedId = False
Attribute VB_Exposed = True
Option Explicit

'@Description("エラー処理と分析の基本機能を提供するインターフェース")

' 定数定義
Private Const MAX_ERROR_HISTORY As Long = 1000     ' エラー履歴の最大数
Private Const MAX_HANDLERS As Long = 100           ' ハンドラーの最大数
Private Const DEFAULT_THRESHOLD As Long = 10       ' デフォルトの閾値
Private Const CACHE_DURATION_MS As Long = 300000   ' キャッシュの有効期間（5分）
Private Const MAX_RETRY_COUNT As Long = 3          ' 最大リトライ回数
Private Const CLEANUP_INTERVAL_MS As Long = 3600000 ' クリーンアップ間隔（1時間）
Private Const MAX_ERROR_MESSAGE_LENGTH As Long = 8192 ' エラーメッセージの最大長

' イベント定義
Public Event ErrorOccurred(ByVal errorInfo As ErrorInfo, ByVal severity As ErrorSeverity)
Public Event ErrorHandled(ByVal errorInfo As ErrorInfo, ByVal handler As IErrorHandler, ByVal success As Boolean)
Public Event ThresholdExceeded(ByVal errorCode As ErrorCode, ByVal count As Long, ByVal threshold As Long)
Public Event HandlerRegistered(ByVal errorCode As ErrorCode, ByVal handler As IErrorHandler)
Public Event HandlerUnregistered(ByVal errorCode As ErrorCode)
Public Event ErrorAnalysisCompleted(ByVal analysisResult As ErrorAnalysisResult)
Public Event PerformanceAlert(ByVal metricType As String, ByVal currentValue As Double, ByVal threshold As Double)

''' <summary>
''' エラーを処理します
''' </summary>
''' <param name="errorInfo">エラー詳細情報</param>
''' <param name="options">処理オプション（オプション）</param>
''' <returns>処理を継続する場合はTrue、中断する場合はFalse</returns>
''' <remarks>
''' エラー処理要件：
''' - エラー情報の検証
''' - ハンドラーの選択
''' - リトライ処理
''' - ログ記録
''' - メトリクス収集
''' </remarks>
Public Function HandleError(ByRef errorInfo As ErrorInfo, _
                          Optional ByVal options As ErrorHandlingOptions) As Boolean
End Function

''' <summary>
''' エラーコードに対応するエラーハンドラーを登録します
''' </summary>
''' <param name="errorCode">エラーコード</param>
''' <param name="handler">エラーハンドラー</param>
''' <param name="options">登録オプション（オプション）</param>
Public Sub RegisterHandler(ByVal errorCode As ErrorCode, _
                         ByVal handler As IErrorHandler, _
                         Optional ByVal options As HandlerOptions)
End Sub

''' <summary>
''' エラーコードに対応するエラーハンドラーの登録を解除します
''' </summary>
''' <param name="errorCode">エラーコード</param>
''' <param name="options">解除オプション（オプション）</param>
Public Sub UnregisterHandler(ByVal errorCode As ErrorCode, _
                           Optional ByVal options As UnregisterOptions)
End Sub

''' <summary>
''' エラーコードごとの発生回数をカウントアップします
''' </summary>
''' <param name="errorCode">エラーコード</param>
''' <param name="options">カウントオプション（オプション）</param>
Public Sub IncrementErrorCount(ByVal errorCode As ErrorCode, _
                             Optional ByVal options As CountOptions)
End Sub

''' <summary>
''' エラーコードの発生回数が閾値を超えているかチェックします
''' </summary>
''' <param name="errorCode">エラーコード</param>
''' <param name="threshold">閾値</param>
''' <param name="options">チェックオプション（オプション）</param>
''' <returns>閾値を超えている場合はTrue</returns>
Public Function CheckErrorThreshold(ByVal errorCode As ErrorCode, _
                                  ByVal threshold As Long, _
                                  Optional ByVal options As ThresholdOptions) As Boolean
End Function

''' <summary>
''' エラー履歴を取得します
''' </summary>
''' <param name="options">履歴オプション（オプション）</param>
''' <returns>エラー履歴のコレクション</returns>
Public Function GetErrorHistory(Optional ByVal options As HistoryOptions) As Collection
End Function

''' <summary>
''' エラーを分析します
''' </summary>
''' <param name="options">分析オプション（オプション）</param>
''' <returns>分析結果</returns>
Public Function AnalyzeErrors(Optional ByVal options As AnalysisOptions) As ErrorAnalysisResult
End Function

''' <summary>
''' エラーを分類します
''' </summary>
''' <param name="errorInfo">エラー情報</param>
''' <param name="options">分類オプション（オプション）</param>
''' <returns>エラー分類結果</returns>
Public Function CategorizeError(ByRef errorInfo As ErrorInfo, _
                              Optional ByVal options As CategoryOptions) As ErrorCategory
End Function

''' <summary>
''' エラー処理の統計情報を取得します
''' </summary>
''' <param name="options">統計オプション（オプション）</param>
''' <returns>統計情報</returns>
Public Function GetErrorStatistics(Optional ByVal options As StatisticsOptions) As ErrorStatistics
End Function

''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
''' <returns>パフォーマンス情報のコレクション</returns>
Public Function GetPerformanceMetrics() As Collection
End Function

''' <summary>
''' エラー処理の状態を検証します
''' </summary>
''' <returns>有効な場合True</returns>
Public Function Validate() As Boolean
End Function

''' <summary>
''' リソースを解放します
''' </summary>
Public Sub Cleanup()
End Sub

================
File: IErrorHandler.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IErrorHandler"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

'@Description("エラー処理とリカバリを提供するインターフェース")

' 定数定義
Private Const MAX_RETRY_COUNT As Long = 3           ' 最大リトライ回数
Private Const RETRY_DELAY_MS As Long = 1000         ' リトライ間隔（1秒）
Private Const MAX_ERROR_QUEUE As Long = 1000        ' エラーキューの最大サイズ
Private Const DEFAULT_TIMEOUT_MS As Long = 30000    ' デフォルトタイムアウト（30秒）
Private Const MAX_RECOVERY_ATTEMPTS As Long = 5     ' 最大回復試行回数
Private Const CLEANUP_INTERVAL_MS As Long = 300000  ' クリーンアップ間隔（5分）

' イベント定義
Public Event ErrorHandlingStarted(ByVal errorInfo As ErrorInfo, ByVal priority As ErrorPriority)
Public Event ErrorHandlingCompleted(ByVal errorInfo As ErrorInfo, ByVal success As Boolean)
Public Event RecoveryAttempted(ByVal errorInfo As ErrorInfo, ByVal attempt As Long, ByVal success As Boolean)
Public Event RetryAttempted(ByVal errorInfo As ErrorInfo, ByVal attempt As Long)
Public Event ResourceReleased(ByVal resourceType As String, ByVal success As Boolean)
Public Event ErrorQueued(ByVal errorInfo As ErrorInfo, ByVal queuePosition As Long)
Public Event PerformanceAlert(ByVal metricType As String, ByVal currentValue As Double, ByVal threshold As Double)

''' <summary>
''' エラーを処理します
''' </summary>
''' <param name="errorInfo">エラー詳細情報</param>
''' <param name="options">処理オプション（オプション）</param>
''' <returns>処理を継続する場合はTrue、中断する場合はFalse</returns>
''' <remarks>
''' エラー処理要件：
''' - エラー情報の検証
''' - 優先度の判定
''' - リカバリ処理
''' - リソース解放
''' - ログ記録
''' - メトリクス収集
''' </remarks>
Public Function HandleError(ByRef errorInfo As ErrorInfo, _
                          Optional ByVal options As HandlingOptions) As Boolean
End Function

''' <summary>
''' エラーからの回復を試みます
''' </summary>
''' <param name="errorInfo">エラー情報</param>
''' <param name="options">回復オプション（オプション）</param>
''' <returns>回復成功時True</returns>
Public Function AttemptRecovery(ByRef errorInfo As ErrorInfo, _
                              Optional ByVal options As RecoveryOptions) As Boolean
End Function

''' <summary>
''' リトライ処理を実行します
''' </summary>
''' <param name="operation">実行する操作</param>
''' <param name="options">リトライオプション（オプション）</param>
''' <returns>実行結果</returns>
Public Function RetryOperation(ByVal operation As IRetryableOperation, _
                             Optional ByVal options As RetryOptions) As OperationResult
End Function

''' <summary>
''' エラーの優先度を設定します
''' </summary>
''' <param name="errorType">エラータイプ</param>
''' <param name="priority">優先度</param>
Public Sub SetErrorPriority(ByVal errorType As String, ByVal priority As ErrorPriority)
End Sub

''' <summary>
''' エラー処理戦略を設定します
''' </summary>
''' <param name="errorType">エラータイプ</param>
''' <param name="strategy">処理戦略</param>
Public Sub SetHandlingStrategy(ByVal errorType As String, ByVal strategy As IErrorStrategy)
End Sub

''' <summary>
''' リソースを解放します
''' </summary>
''' <param name="resource">解放するリソース</param>
''' <param name="options">解放オプション（オプション）</param>
''' <returns>解放成功時True</returns>
Public Function ReleaseResource(ByVal resource As Object, _
                              Optional ByVal options As ReleaseOptions) As Boolean
End Function

''' <summary>
''' エラーをキューに追加します
''' </summary>
''' <param name="errorInfo">エラー情報</param>
''' <param name="options">キューオプション（オプション）</param>
Public Sub QueueError(ByRef errorInfo As ErrorInfo, Optional ByVal options As QueueOptions)
End Sub

''' <summary>
''' キューのエラーを処理します
''' </summary>
''' <param name="options">処理オプション（オプション）</param>
Public Sub ProcessErrorQueue(Optional ByVal options As ProcessOptions)
End Sub

''' <summary>
''' エラー処理の統計を取得します
''' </summary>
''' <returns>統計情報</returns>
Public Function GetHandlingStatistics() As HandlingStatistics
End Function

''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
''' <returns>パフォーマンス情報のコレクション</returns>
Public Function GetPerformanceMetrics() As Collection
End Function

''' <summary>
''' エラーハンドラーの状態を検証します
''' </summary>
''' <returns>有効な場合True</returns>
Public Function Validate() As Boolean
End Function

''' <summary>
''' リソースを解放します
''' </summary>
Public Sub Cleanup()
End Sub

================
File: IErrorNotification.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IErrorNotification"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredefinedId = False
Attribute VB_Exposed = True
Option Explicit

'@Description("エラー通知の配信と管理を担当し、複数の通知チャネルとポリシーをサポートするインターフェース")

' 定数定義
Private Const MAX_NOTIFICATION_TARGETS As Long = 10     ' 最大通知先数
Private Const MAX_BATCH_SIZE As Long = 100              ' 最大バッチサイズ
Private Const CACHE_DURATION_MS As Long = 300000        ' キャッシュ有効期間（5分）
Private Const MIN_NOTIFICATION_INTERVAL_MS As Long = 100 ' 最小通知間隔（100ミリ秒）
Private Const MAX_RETRY_COUNT As Long = 3               ' 最大リトライ回数
Private Const MAX_TEMPLATE_SIZE As Long = 10240         ' 最大テンプレートサイズ（10KB）
Private Const DEFAULT_TIMEOUT_MS As Long = 5000         ' デフォルトタイムアウト時間（5秒）

' イベント定義
Public Event NotificationSent(ByVal errorInfo As ErrorInfo, ByVal level As ErrorNotificationLevel, ByVal metrics As NotificationMetrics)
Public Event NotificationDelivered(ByVal errorInfo As ErrorInfo, ByVal target As INotificationTarget, ByVal deliveryMetrics As DeliveryMetrics)
Public Event NotificationFailed(ByVal errorInfo As ErrorInfo, ByVal target As INotificationTarget, ByVal reason As String, ByVal retryCount As Long)
Public Event NotificationAcknowledged(ByVal errorInfo As ErrorInfo, ByVal target As INotificationTarget, ByVal acknowledgeTime As Date)
Public Event NotificationBatchProcessed(ByVal batchId As String, ByVal successCount As Long, ByVal failureCount As Long)
Public Event NotificationThrottled(ByVal errorInfo As ErrorInfo, ByVal target As INotificationTarget, ByVal nextAttemptTime As Date)
Public Event TemplateUpdated(ByVal templateName As String, ByVal version As Long)
Public Event DeliveryPolicyViolation(ByVal policyName As String, ByVal violationType As String)
Public Event PerformanceAlert(ByVal metricType As String, ByVal currentValue As Double, ByVal threshold As Double)
Public Event ResourceExhausted(ByVal resourceType As String, ByVal currentUsage As Long)

''' <summary>
''' エラー通知レベルを設定します
''' </summary>
''' <param name="level">通知レベル</param>
''' <param name="options">レベルオプション（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - 無効な通知レベルの検証
''' - 現在の通知処理への影響考慮
''' - 設定変更のログ記録
''' - イベントの適切な発行
''' - 依存システムへの通知
''' </remarks>
Public Property Let NotificationLevel(ByVal level As ErrorNotificationLevel, Optional ByVal options As NotificationLevelOptions)
End Property

''' <summary>
''' 現在のエラー通知レベルを取得します
''' </summary>
Public Property Get NotificationLevel() As ErrorNotificationLevel
End Property

''' <summary>
''' エラーを通知します
''' </summary>
''' <param name="errorInfo">エラー情報</param>
''' <param name="options">通知オプション（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - 通知レベルに応じた処理
''' - 通知失敗時の代替処理
''' - リソースの適切な解放
''' - 通知の重複防止
''' - イベントの適切な発行
''' - メトリクスの収集
''' - パフォーマンスの監視
''' 
''' 実装時の注意点：
''' 1. 通知処理自体のエラーを適切に処理すること
''' 2. パフォーマンスに影響を与えないよう注意すること
''' 3. UI スレッドをブロックしないこと
''' 4. 機密情報の適切な処理を行うこと
''' 5. 通知の優先順位を考慮すること
''' 6. スロットリングを適用すること
''' </remarks>
Public Sub NotifyError(ByRef errorInfo As ErrorInfo, Optional ByVal options As NotificationOptions)
End Sub

''' <summary>
''' バッチ通知を実行します
''' </summary>
''' <param name="errors">エラー情報のコレクション</param>
''' <param name="options">バッチオプション（オプション）</param>
''' <returns>バッチ処理ID</returns>
Public Function NotifyBatch(ByVal errors As Collection, Optional ByVal options As BatchNotificationOptions) As String
End Function

''' <summary>
''' 通知先を追加します
''' </summary>
''' <param name="target">通知先オブジェクト</param>
''' <param name="priority">優先度（オプション）</param>
''' <param name="options">追加オプション（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - 通知先の有効性確認
''' - 重複登録の防止
''' - リソース制限の考慮
''' - 優先度の検証
''' - 依存関係の確認
''' </remarks>
Public Sub AddNotificationTarget(ByVal target As INotificationTarget, Optional ByVal priority As ValidationPriority = vpNormal, Optional ByVal options As TargetOptions)
End Sub

''' <summary>
''' 通知先を削除します
''' </summary>
''' <param name="target">通知先オブジェクト</param>
''' <param name="options">削除オプション（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - 存在しない通知先の処理
''' - 削除中の通知への影響考慮
''' - リソースの適切な解放
''' - イベントの適切な発行
''' - 依存システムの更新
''' </remarks>
Public Sub RemoveNotificationTarget(ByVal target As INotificationTarget, Optional ByVal options As TargetRemovalOptions)
End Sub

''' <summary>
''' すべての通知先をクリアします
''' </summary>
''' <param name="options">クリアオプション（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - 進行中の通知への影響考慮
''' - リソースの適切な解放
''' - 状態の整合性維持
''' - イベントの適切な発行
''' - キャッシュの更新
''' </remarks>
Public Sub ClearNotificationTargets(Optional ByVal options As ClearOptions)
End Sub

''' <summary>
''' 通知のフィルタリング条件を設定します
''' </summary>
''' <param name="filterExpression">フィルタリング条件の式</param>
''' <param name="options">フィルタオプション（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - 式の構文検証
''' - 無効な条件の検出
''' - パフォーマンスへの影響考慮
''' - 既存フィルタの更新
''' - 条件の最適化
''' </remarks>
Public Sub SetNotificationFilter(ByVal filterExpression As String, Optional ByVal options As FilterOptions)
End Sub

''' <summary>
''' 通知履歴を取得します
''' </summary>
''' <param name="options">取得オプション（オプション）</param>
''' <returns>通知履歴のコレクション</returns>
''' <remarks>
''' エラー処理要件：
''' - メモリ使用量の考慮
''' - 大量データの効率的な処理
''' - 履歴の整合性確認
''' - フィルタリングの適用
''' - キャッシュの活用
''' </remarks>
Public Function GetNotificationHistory(Optional ByVal options As NotificationHistoryOptions) As Collection
End Function

''' <summary>
''' 通知テンプレートを設定します
''' </summary>
''' <param name="templateName">テンプレート名</param>
''' <param name="template">テンプレート内容</param>
''' <param name="options">テンプレートオプション（オプション）</param>
Public Sub SetNotificationTemplate(ByVal templateName As String, ByVal template As String, Optional ByVal options As TemplateOptions)
End Sub

''' <summary>
''' 通知テンプレートを取得します
''' </summary>
''' <param name="templateName">テンプレート名</param>
''' <param name="version">バージョン（オプション）</param>
Public Function GetNotificationTemplate(ByVal templateName As String, Optional ByVal version As Long = -1) As String
End Function

''' <summary>
''' 通知のグループ化ルールを設定します
''' </summary>
''' <param name="groupingRule">グループ化ルール</param>
''' <param name="options">グループ化オプション（オプション）</param>
Public Sub SetGroupingRule(ByVal groupingRule As INotificationGroupingRule, Optional ByVal options As GroupingOptions)
End Sub

''' <summary>
''' 通知の重複排除ルールを設定します
''' </summary>
''' <param name="deduplicationRule">重複排除ルール</param>
''' <param name="options">重複排除オプション（オプション）</param>
Public Sub SetDeduplicationRule(ByVal deduplicationRule As INotificationDeduplicationRule, Optional ByVal options As DeduplicationOptions)
End Sub

''' <summary>
''' 通知の配信ポリシーを設定します
''' </summary>
''' <param name="policy">配信ポリシー</param>
''' <param name="options">ポリシーオプション（オプション）</param>
Public Sub SetDeliveryPolicy(ByVal policy As INotificationDeliveryPolicy, Optional ByVal options As PolicyOptions)
End Sub

''' <summary>
''' 通知のバッチ処理を有効/無効にします
''' </summary>
Public Property Let BatchProcessingEnabled(ByVal value As Boolean)
End Property

''' <summary>
''' 通知のバッチ処理が有効かどうかを取得します
''' </summary>
Public Property Get BatchProcessingEnabled() As Boolean
End Property

''' <summary>
''' 通知の進捗状況を取得します
''' </summary>
''' <param name="includeMetrics">メトリクスを含めるかどうか</param>
Public Function GetProgress(Optional ByVal includeMetrics As Boolean = False) As NotificationProgress
End Function

''' <summary>
''' キャンセル状態を設定/取得します
''' </summary>
Public Property Get IsCancellationRequested() As Boolean
End Property

Public Property Let IsCancellationRequested(ByVal value As Boolean)
End Property

''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
''' <returns>パフォーマンス情報のコレクション</returns>
Public Function GetPerformanceMetrics() As Collection
End Function

''' <summary>
''' 通知の配信状態を分析します
''' </summary>
''' <param name="timeWindow">分析期間（ミリ秒）</param>
''' <returns>配信分析結果のコレクション</returns>
Public Function AnalyzeDeliveryPatterns(ByVal timeWindow As Long) As Collection
End Function

''' <summary>
''' スロットリング戦略を設定します
''' </summary>
''' <param name="strategy">スロットリング戦略</param>
Public Property Let ThrottlingStrategy(ByVal strategy As INotificationThrottlingStrategy)
End Property

''' <summary>
''' スケジューリング戦略を設定します
''' </summary>
''' <param name="strategy">スケジューリング戦略</param>
Public Property Let SchedulingStrategy(ByVal strategy As INotificationSchedulingStrategy)
End Property

================
File: IErrorStrategy.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IErrorStrategy"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredefinedId = False
Attribute VB_Exposed = True
Option Explicit

'@Description("エラーからの回復戦略を定義し、段階的な回復処理とフォールバックメカニズムを提供するインターフェース")

' 定数定義
Private Const DEFAULT_RETRY_COUNT As Long = 3           ' デフォルトのリトライ回数
Private Const DEFAULT_RETRY_INTERVAL_MS As Long = 1000  ' デフォルトのリトライ間隔（1秒）
Private Const MAX_RETRY_COUNT As Long = 10              ' 最大リトライ回数
Private Const MAX_RECOVERY_CHAIN As Long = 5            ' 最大回復チェーン数
Private Const RECOVERY_TIMEOUT_MS As Long = 30000       ' 回復処理のタイムアウト時間（30秒）
Private Const MIN_BACKOFF_MS As Long = 100              ' 最小バックオフ時間（100ミリ秒）
Private Const MAX_BACKOFF_MS As Long = 30000           ' 最大バックオフ時間（30秒）

' イベント定義
Public Event RecoveryAttemptStarted(ByVal errorInfo As ErrorInfo, ByVal context As RecoveryContext)
Public Event RecoveryAttemptCompleted(ByVal errorInfo As ErrorInfo, ByVal success As Boolean, ByVal metrics As RecoveryMetrics)
Public Event RecoveryProgressChanged(ByVal errorInfo As ErrorInfo, ByVal progressPercentage As Long, ByVal currentPhase As String)
Public Event FallbackStrategyActivated(ByVal errorInfo As ErrorInfo, ByVal fallbackStrategy As IErrorStrategy, ByVal reason As String)
Public Event RecoveryChainExecuted(ByVal chainId As String, ByVal successCount As Long, ByVal failureCount As Long)
Public Event ResourceExhausted(ByVal resourceType As String, ByVal currentUsage As Long, ByVal limit As Long)
Public Event PerformanceAlert(ByVal metricType As String, ByVal currentValue As Double, ByVal threshold As Double)
Public Event ErrorPatternDetected(ByVal patternType As String, ByVal frequency As Long, ByVal timeWindow As Long)

''' <summary>
''' エラーからの回復を試みます
''' </summary>
''' <param name="errorInfo">エラー情報</param>
''' <param name="context">回復コンテキスト（オプション）</param>
''' <param name="options">回復オプション（オプション）</param>
''' <returns>回復成功時True、失敗時False</returns>
''' <remarks>
''' エラー処理要件：
''' - リトライ回数の管理
''' - タイムアウト処理
''' - リソースの適切な解放
''' - 回復不可能な状態の検出
''' - イベントの適切な発行
''' - メトリクスの収集
''' - パターンの分析
''' 
''' 実装時の注意点：
''' 1. 再帰的な回復処理を避けること
''' 2. 回復処理自体のエラーを適切に処理すること
''' 3. リソースリークを防ぐこと
''' 4. デッドロックを防ぐこと
''' 5. 回復の進捗を通知すること
''' 6. パフォーマンスを監視すること
''' </remarks>
Public Function RecoverFromError(ByRef errorInfo As ErrorInfo, Optional ByVal context As RecoveryContext, Optional ByVal options As RecoveryOptions) As Boolean
End Function

''' <summary>
''' 回復チェーンを作成します
''' </summary>
''' <param name="strategies">チェーンに含める戦略のコレクション</param>
''' <returns>チェーンID</returns>
Public Function CreateRecoveryChain(ByVal strategies As Collection) As String
End Function

''' <summary>
''' 最大リトライ回数を設定します
''' </summary>
''' <param name="value">リトライ回数</param>
''' <param name="options">リトライオプション（オプション）</param>
''' <remarks>
''' - 0以上の値を設定すること
''' - デフォルト値は3
''' - 実行中の回復処理への影響を考慮
''' - バックオフ戦略の適用
''' </remarks>
Public Property Let MaxRetryCount(ByVal value As Long, Optional ByVal options As RetryOptions)
End Property

''' <summary>
''' 最大リトライ回数を取得します
''' </summary>
Public Property Get MaxRetryCount() As Long
End Property

''' <summary>
''' 回復戦略の優先度を取得します
''' </summary>
''' <remarks>
''' - 値が大きいほど優先度が高い
''' - 複数の回復戦略がある場合、優先度の高い順に実行される
''' - 同じ優先度の場合、登録順で実行
''' - チェーン内での順序も考慮
''' </remarks>
Public Property Get Priority() As Long
End Property

''' <summary>
''' 回復戦略の優先度を設定します
''' </summary>
''' <param name="value">優先度</param>
''' <param name="options">優先度オプション（オプション）</param>
Public Property Let Priority(ByVal value As Long, Optional ByVal options As PriorityOptions)
End Property

''' <summary>
''' リトライ間隔（ミリ秒）を設定します
''' </summary>
''' <param name="value">間隔（ミリ秒）</param>
''' <param name="options">間隔オプション（オプション）</param>
''' <remarks>
''' - 0以上の値を設定すること
''' - デフォルト値は1000（1秒）
''' - 指数バックオフを考慮
''' - システム負荷を考慮
''' </remarks>
Public Property Let RetryInterval(ByVal value As Long, Optional ByVal options As IntervalOptions)
End Property

''' <summary>
''' リトライ間隔（ミリ秒）を取得します
''' </summary>
Public Property Get RetryInterval() As Long
End Property

''' <summary>
''' 回復戦略の説明を取得します
''' </summary>
''' <param name="locale">ロケール（オプション）</param>
''' <returns>戦略の説明</returns>
''' <remarks>
''' - ログ出力やデバッグ用
''' - 具体的な回復方法を説明する文字列を返すこと
''' - 多言語対応を考慮
''' - メトリクス情報を含める
''' </remarks>
Public Function GetDescription(Optional ByVal locale As String) As String
End Function

''' <summary>
''' フォールバック戦略を設定します
''' </summary>
''' <param name="strategy">フォールバック戦略</param>
''' <param name="options">フォールバックオプション（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - 循環参照の検出
''' - 戦略の有効性確認
''' - リソースの確保
''' - チェーンの整合性確認
''' </remarks>
Public Sub SetFallbackStrategy(ByVal strategy As IErrorStrategy, Optional ByVal options As FallbackOptions)
End Sub

''' <summary>
''' フォールバック戦略を取得します
''' </summary>
Public Property Get FallbackStrategy() As IErrorStrategy
End Property

''' <summary>
''' 回復処理の進捗状況を取得します
''' </summary>
''' <param name="includeMetrics">メトリクスを含めるかどうか</param>
Public Function GetProgress(Optional ByVal includeMetrics As Boolean = False) As RecoveryProgress
End Function

''' <summary>
''' エラー種別ごとの回復方法を設定します
''' </summary>
''' <param name="errorCode">エラーコード</param>
''' <param name="recoveryAction">回復アクション</param>
''' <param name="options">アクションオプション（オプション）</param>
Public Sub SetRecoveryAction(ByVal errorCode As ErrorCode, ByVal recoveryAction As IRecoveryAction, Optional ByVal options As ActionOptions)
End Sub

''' <summary>
''' エラー種別ごとの回復方法を取得します
''' </summary>
''' <param name="errorCode">エラーコード</param>
''' <param name="includeMetrics">メトリクスを含めるかどうか</param>
Public Function GetRecoveryAction(ByVal errorCode As ErrorCode, Optional ByVal includeMetrics As Boolean = False) As IRecoveryAction
End Function

''' <summary>
''' 回復履歴を取得します
''' </summary>
''' <param name="filter">フィルタ条件（オプション）</param>
''' <returns>回復試行の履歴コレクション</returns>
Public Function GetRecoveryHistory(Optional ByVal filter As RecoveryHistoryFilter) As Collection
End Function

''' <summary>
''' 回復戦略の状態を検証します
''' </summary>
''' <param name="validationLevel">検証レベル（オプション）</param>
''' <returns>有効な場合True</returns>
Public Function Validate(Optional ByVal validationLevel As ValidationLevel = vlNormal) As Boolean
End Function

''' <summary>
''' リソースを解放します
''' </summary>
''' <param name="options">クリーンアップオプション（オプション）</param>
Public Sub Cleanup(Optional ByVal options As CleanupOptions)
End Sub

''' <summary>
''' 回復処理をキャンセルします
''' </summary>
''' <param name="options">キャンセルオプション（オプション）</param>
Public Sub CancelRecovery(Optional ByVal options As CancellationOptions)
End Sub

''' <summary>
''' キャンセル状態を取得します
''' </summary>
Public Property Get IsCancellationRequested() As Boolean
End Property

''' <summary>
''' 非同期回復をサポートしているかどうかを取得します
''' </summary>
Public Property Get SupportsAsyncRecovery() As Boolean
End Property

''' <summary>
''' トランザクションをサポートしているかどうかを取得します
''' </summary>
Public Property Get SupportsTransactions() As Boolean
End Property

''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
''' <returns>パフォーマンス情報のコレクション</returns>
Public Function GetPerformanceMetrics() As Collection
End Function

''' <summary>
''' エラーパターンを分析します
''' </summary>
''' <param name="timeWindow">分析期間（ミリ秒）</param>
''' <returns>パターン分析結果のコレクション</returns>
Public Function AnalyzeErrorPatterns(ByVal timeWindow As Long) As Collection
End Function

''' <summary>
''' バックオフ戦略を設定します
''' </summary>
''' <param name="strategy">バックオフ戦略</param>
Public Property Let BackoffStrategy(ByVal strategy As IBackoffStrategy)
End Property

================
File: IEventLog.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IEventLog"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

'@Description("Windowsイベントログの操作と管理を提供するインターフェース")

' 定数定義
Private Const MAX_MESSAGE_LENGTH As Long = 32766   ' メッセージの最大長
Private Const MAX_SOURCE_LENGTH As Long = 255      ' ソース名の最大長
Private Const MAX_BATCH_SIZE As Long = 1000        ' 最大バッチサイズ
Private Const CACHE_DURATION_MS As Long = 300000   ' キャッシュの有効期間（5分）
Private Const MAX_RETRY_COUNT As Long = 3          ' 最大リトライ回数
Private Const CLEANUP_INTERVAL_MS As Long = 3600000 ' クリーンアップ間隔（1時間）

' イベントログの種類定義
Public Enum EventLogType
    EVENTLOG_SUCCESS = 0
    EVENTLOG_ERROR_TYPE = 1
    EVENTLOG_WARNING_TYPE = 2
    EVENTLOG_INFORMATION_TYPE = 4
    EVENTLOG_AUDIT_SUCCESS = 8
    EVENTLOG_AUDIT_FAILURE = 16
End Enum

' イベント定義
Public Event EventLogged(ByVal source As String, ByVal eventType As EventLogType)
Public Event SourceRegistered(ByVal source As String, ByVal success As Boolean)
Public Event LogCleared(ByVal source As String, ByVal entryCount As Long)
Public Event BatchProcessed(ByVal source As String, ByVal successCount As Long, ByVal failureCount As Long)
Public Event LogFull(ByVal source As String, ByVal usedSpace As Long)
Public Event BackupCreated(ByVal backupPath As String)
Public Event PerformanceAlert(ByVal metricType As String, ByVal currentValue As Double, ByVal threshold As Double)

''' <summary>
''' イベントログにメッセージを書き込みます
''' </summary>
''' <param name="source">イベントソース名</param>
''' <param name="message">メッセージ</param>
''' <param name="eventType">イベントの種類</param>
''' <param name="options">書き込みオプション（オプション）</param>
''' <returns>成功時True、失敗時False</returns>
Public Function WriteToEventLog(ByVal source As String, _
                              ByVal message As String, _
                              ByVal eventType As EventLogType, _
                              Optional ByVal options As WriteOptions) As Boolean
End Function

''' <summary>
''' バッチでイベントログに書き込みます
''' </summary>
''' <param name="entries">イベントログエントリのコレクション</param>
''' <param name="options">バッチオプション（オプション）</param>
''' <returns>バッチ処理結果</returns>
Public Function WriteBatch(ByVal entries As Collection, _
                         Optional ByVal options As BatchOptions) As BatchResult
End Function

''' <summary>
''' イベントソースの存在を確認します
''' </summary>
''' <param name="source">イベントソース名</param>
''' <param name="options">確認オプション（オプション）</param>
''' <returns>存在する場合True、存在しない場合False</returns>
Public Function EventSourceExists(ByVal source As String, _
                                Optional ByVal options As SourceOptions) As Boolean
End Function

''' <summary>
''' イベントソースを登録します
''' </summary>
''' <param name="source">イベントソース名</param>
''' <param name="options">登録オプション（オプション）</param>
''' <returns>成功時True、失敗時False</returns>
Public Function RegisterEventSource(ByVal source As String, _
                                  Optional ByVal options As RegisterOptions) As Boolean
End Function

''' <summary>
''' イベントログをクリアします
''' </summary>
''' <param name="source">イベントソース名</param>
''' <param name="options">クリアオプション（オプション）</param>
''' <returns>成功時True、失敗時False</returns>
Public Function ClearEventLog(ByVal source As String, _
                            Optional ByVal options As ClearOptions) As Boolean
End Function

''' <summary>
''' イベントログをバックアップします
''' </summary>
''' <param name="backupPath">バックアップパス</param>
''' <param name="options">バックアップオプション（オプション）</param>
''' <returns>成功時True、失敗時False</returns>
Public Function BackupEventLog(ByVal backupPath As String, _
                             Optional ByVal options As BackupOptions) As Boolean
End Function

''' <summary>
''' イベントログをフィルタリングします
''' </summary>
''' <param name="criteria">フィルタ条件</param>
''' <param name="options">フィルタオプション（オプション）</param>
''' <returns>フィルタリングされたエントリのコレクション</returns>
Public Function FilterEvents(ByVal criteria As String, _
                           Optional ByVal options As FilterOptions) As Collection
End Function

''' <summary>
''' イベントログの統計を取得します
''' </summary>
''' <param name="source">イベントソース名</param>
''' <param name="options">統計オプション（オプション）</param>
''' <returns>統計情報</returns>
Public Function GetEventStatistics(ByVal source As String, _
                                 Optional ByVal options As StatisticsOptions) As EventStatistics
End Function

''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
''' <returns>パフォーマンス情報のコレクション</returns>
Public Function GetPerformanceMetrics() As Collection
End Function

''' <summary>
''' イベントログの状態を検証します
''' </summary>
''' <returns>有効な場合True</returns>
Public Function Validate() As Boolean
End Function

''' <summary>
''' リソースを解放します
''' </summary>
Public Sub Cleanup()
End Sub

================
File: IFileIO.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IFileIO"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

'@Description("ファイル入出力操作とストリーム処理を提供するインターフェース")

' 定数定義
Private Const MAX_BUFFER_SIZE As Long = 8192       ' 最大バッファサイズ（8KB）
Private Const MAX_PATH_LENGTH As Long = 260        ' 最大パス長
Private Const MAX_RETRY_COUNT As Long = 3          ' 最大リトライ回数
Private Const LOCK_TIMEOUT_MS As Long = 5000       ' ロックタイムアウト（5秒）
Private Const DEFAULT_ENCODING As String = "UTF-8"  ' デフォルトエンコーディング
Private Const CLEANUP_INTERVAL_MS As Long = 300000 ' クリーンアップ間隔（5分）

' イベント定義
Public Event FileOpened(ByVal filePath As String, ByVal mode As FileMode)
Public Event FileClosed(ByVal filePath As String)
Public Event FileCreated(ByVal filePath As String)
Public Event FileDeleted(ByVal filePath As String)
Public Event FileMoved(ByVal sourcePath As String, ByVal destinationPath As String)
Public Event FileCopied(ByVal sourcePath As String, ByVal destinationPath As String)
Public Event SecurityAlert(ByVal alertType As String, ByVal details As String)
Public Event PerformanceAlert(ByVal metricType As String, ByVal currentValue As Double, ByVal threshold As Double)

''' <summary>
''' ファイルの存在を確認します
''' </summary>
''' <param name="filePath">ファイルパス</param>
''' <param name="options">確認オプション（オプション）</param>
''' <returns>存在する場合True、それ以外はFalse</returns>
''' <remarks>
''' エラー処理要件：
''' - パスの検証
''' - アクセス権の確認
''' - セキュリティチェック
''' - タイムアウト処理
''' </remarks>
Public Function FileExists(ByVal filePath As String, Optional ByVal options As FileCheckOptions) As Boolean
End Function

''' <summary>
''' フォルダの存在を確認します
''' </summary>
''' <param name="folderPath">フォルダパス</param>
''' <param name="options">確認オプション（オプション）</param>
''' <returns>存在する場合True、それ以外はFalse</returns>
Public Function FolderExists(ByVal folderPath As String, Optional ByVal options As FolderCheckOptions) As Boolean
End Function

''' <summary>
''' フォルダを作成します
''' </summary>
''' <param name="folderPath">フォルダパス</param>
''' <param name="options">作成オプション（オプション）</param>
''' <returns>成功時True、失敗時False</returns>
Public Function CreateFolder(ByVal folderPath As String, Optional ByVal options As FolderCreateOptions) As Boolean
End Function

''' <summary>
''' ファイルを削除します
''' </summary>
''' <param name="filePath">ファイルパス</param>
''' <param name="options">削除オプション（オプション）</param>
''' <returns>成功時True、失敗時False</returns>
Public Function DeleteFile(ByVal filePath As String, Optional ByVal options As FileDeleteOptions) As Boolean
End Function

''' <summary>
''' ファイルをコピーします
''' </summary>
''' <param name="sourceFilePath">コピー元ファイルパス</param>
''' <param name="destinationFilePath">コピー先ファイルパス</param>
''' <param name="options">コピーオプション（オプション）</param>
''' <returns>成功時True、失敗時False</returns>
Public Function CopyFile(ByVal sourceFilePath As String, ByVal destinationFilePath As String, Optional ByVal options As FileCopyOptions) As Boolean
End Function

''' <summary>
''' ファイルを移動します
''' </summary>
''' <param name="sourceFilePath">移動元ファイルパス</param>
''' <param name="destinationFilePath">移動先ファイルパス</param>
''' <param name="options">移動オプション（オプション）</param>
''' <returns>成功時True、失敗時False</returns>
Public Function MoveFile(ByVal sourceFilePath As String, ByVal destinationFilePath As String, Optional ByVal options As FileMoveOptions) As Boolean
End Function

''' <summary>
''' ファイルを開きます
''' </summary>
''' <param name="filePath">ファイルパス</param>
''' <param name="mode">オープンモード</param>
''' <param name="options">オープンオプション（オプション）</param>
''' <returns>ファイルストリーム</returns>
Public Function OpenFile(ByVal filePath As String, ByVal mode As FileMode, Optional ByVal options As FileOpenOptions) As IFileStream
End Function

''' <summary>
''' ファイルを閉じます
''' </summary>
''' <param name="fileStream">ファイルストリーム</param>
''' <param name="options">クローズオプション（オプション）</param>
''' <returns>成功時True、失敗時False</returns>
Public Function CloseFile(ByVal fileStream As IFileStream, Optional ByVal options As FileCloseOptions) As Boolean
End Function

''' <summary>
''' ファイルを読み込みます
''' </summary>
''' <param name="filePath">ファイルパス</param>
''' <param name="options">読み込みオプション（オプション）</param>
''' <returns>ファイルの内容</returns>
Public Function ReadFile(ByVal filePath As String, Optional ByVal options As FileReadOptions) As String
End Function

''' <summary>
''' ファイルに書き込みます
''' </summary>
''' <param name="filePath">ファイルパス</param>
''' <param name="content">書き込む内容</param>
''' <param name="options">書き込みオプション（オプション）</param>
''' <returns>成功時True、失敗時False</returns>
Public Function WriteFile(ByVal filePath As String, ByVal content As String, Optional ByVal options As FileWriteOptions) As Boolean
End Function

''' <summary>
''' ファイル情報を取得します
''' </summary>
''' <param name="filePath">ファイルパス</param>
''' <returns>ファイル情報</returns>
Public Function GetFileInfo(ByVal filePath As String) As FileInfo
End Function

''' <summary>
''' ファイルをロックします
''' </summary>
''' <param name="filePath">ファイルパス</param>
''' <param name="options">ロックオプション（オプション）</param>
''' <returns>ロックトークン</returns>
Public Function LockFile(ByVal filePath As String, Optional ByVal options As FileLockOptions) As String
End Function

''' <summary>
''' ファイルのロックを解除します
''' </summary>
''' <param name="lockToken">ロックトークン</param>
''' <returns>成功時True、失敗時False</returns>
Public Function UnlockFile(ByVal lockToken As String) As Boolean
End Function

''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
''' <returns>パフォーマンス情報のコレクション</returns>
Public Function GetPerformanceMetrics() As Collection
End Function

''' <summary>
''' ファイルI/Oの状態を検証します
''' </summary>
''' <returns>有効な場合True</returns>
Public Function Validate() As Boolean
End Function

''' <summary>
''' リソースを解放します
''' </summary>
Public Sub Cleanup()
End Sub

================
File: IFileOperations.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IFileOperations"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

'@Description("高レベルなファイル操作とメタデータ管理を提供するインターフェース")

' 定数定義
Private Const MAX_FILE_SIZE As Long = 2147483648   ' 最大ファイルサイズ（2GB）
Private Const MAX_PATH_LENGTH As Long = 260        ' 最大パス長
Private Const BUFFER_SIZE As Long = 8192           ' バッファサイズ（8KB）
Private Const MAX_RETRY_COUNT As Long = 3          ' 最大リトライ回数
Private Const LOCK_TIMEOUT_MS As Long = 5000       ' ロックタイムアウト（5秒）
Private Const CLEANUP_INTERVAL_MS As Long = 300000 ' クリーンアップ間隔（5分）

' イベント定義
Public Event FileOperationStarted(ByVal operationType As String, ByVal filePath As String)
Public Event FileOperationCompleted(ByVal operationType As String, ByVal filePath As String, ByVal success As Boolean)
Public Event SecurityViolation(ByVal operationType As String, ByVal details As String)
Public Event ProgressUpdated(ByVal operationType As String, ByVal progress As Double)
Public Event MetadataChanged(ByVal filePath As String, ByVal metadataType As String)
Public Event PerformanceAlert(ByVal metricType As String, ByVal currentValue As Double, ByVal threshold As Double)
Public Event ResourceExhausted(ByVal resourceType As String, ByVal details As String)

' テキストファイル操作
''' <summary>
''' テキストファイルを読み込みます
''' </summary>
''' <param name="filePath">ファイルパス</param>
''' <param name="encoding">文字エンコーディング（オプション）</param>
''' <param name="options">読み込みオプション（オプション）</param>
''' <returns>ファイルの内容</returns>
Public Function ReadTextFile(ByVal filePath As String, _
                           Optional ByVal encoding As String, _
                           Optional ByVal options As TextReadOptions) As String
End Function

''' <summary>
''' テキストファイルに書き込みます
''' </summary>
''' <param name="filePath">ファイルパス</param>
''' <param name="content">書き込む内容</param>
''' <param name="options">書き込みオプション（オプション）</param>
''' <returns>成功時True、失敗時False</returns>
Public Function WriteTextFile(ByVal filePath As String, _
                            ByVal content As String, _
                            Optional ByVal options As TextWriteOptions) As Boolean
End Function

' バイナリファイル操作
''' <summary>
''' バイナリファイルを読み込みます
''' </summary>
''' <param name="filePath">ファイルパス</param>
''' <param name="options">読み込みオプション（オプション）</param>
''' <returns>ファイルのバイトデータ</returns>
Public Function ReadBinaryFile(ByVal filePath As String, _
                             Optional ByVal options As BinaryReadOptions) As Byte()
End Function

''' <summary>
''' バイナリファイルに書き込みます
''' </summary>
''' <param name="filePath">ファイルパス</param>
''' <param name="data">書き込むバイトデータ</param>
''' <param name="options">書き込みオプション（オプション）</param>
''' <returns>成功時True、失敗時False</returns>
Public Function WriteBinaryFile(ByVal filePath As String, _
                              ByRef data() As Byte, _
                              Optional ByVal options As BinaryWriteOptions) As Boolean
End Function

' ファイルシステム操作
''' <summary>
''' ファイルの存在を確認します
''' </summary>
''' <param name="filePath">ファイルパス</param>
''' <param name="options">確認オプション（オプション）</param>
''' <returns>存在する場合True、それ以外はFalse</returns>
Public Function FileExists(ByVal filePath As String, _
                         Optional ByVal options As FileCheckOptions) As Boolean
End Function

''' <summary>
''' フォルダの存在を確認します
''' </summary>
''' <param name="folderPath">フォルダパス</param>
''' <param name="options">確認オプション（オプション）</param>
''' <returns>存在する場合True、それ以外はFalse</returns>
Public Function FolderExists(ByVal folderPath As String, _
                           Optional ByVal options As FolderCheckOptions) As Boolean
End Function

''' <summary>
''' フォルダを作成します
''' </summary>
''' <param name="folderPath">フォルダパス</param>
''' <param name="options">作成オプション（オプション）</param>
''' <returns>成功時True、失敗時False</returns>
Public Function CreateFolder(ByVal folderPath As String, _
                           Optional ByVal options As FolderCreateOptions) As Boolean
End Function

''' <summary>
''' ファイルを削除します
''' </summary>
''' <param name="filePath">ファイルパス</param>
''' <param name="options">削除オプション（オプション）</param>
''' <returns>成功時True、失敗時False</returns>
Public Function DeleteFile(ByVal filePath As String, _
                         Optional ByVal options As FileDeleteOptions) As Boolean
End Function

''' <summary>
''' フォルダを削除します
''' </summary>
''' <param name="folderPath">フォルダパス</param>
''' <param name="options">削除オプション（オプション）</param>
''' <returns>成功時True、失敗時False</returns>
Public Function DeleteFolder(ByVal folderPath As String, _
                           Optional ByVal options As FolderDeleteOptions) As Boolean
End Function

' メタデータ操作
''' <summary>
''' ファイルのメタデータを取得します
''' </summary>
''' <param name="filePath">ファイルパス</param>
''' <returns>メタデータ情報</returns>
Public Function GetMetadata(ByVal filePath As String) As FileMetadata
End Function

''' <summary>
''' ファイルのメタデータを設定します
''' </summary>
''' <param name="filePath">ファイルパス</param>
''' <param name="metadata">メタデータ情報</param>
''' <returns>成功時True、失敗時False</returns>
Public Function SetMetadata(ByVal filePath As String, _
                          ByVal metadata As FileMetadata) As Boolean
End Function

' セキュリティ操作
''' <summary>
''' ファイルのアクセス権を設定します
''' </summary>
''' <param name="filePath">ファイルパス</param>
''' <param name="permissions">アクセス権設定</param>
''' <returns>成功時True、失敗時False</returns>
Public Function SetPermissions(ByVal filePath As String, _
                             ByVal permissions As FilePermissions) As Boolean
End Function

''' <summary>
''' ファイルを暗号化します
''' </summary>
''' <param name="filePath">ファイルパス</param>
''' <param name="options">暗号化オプション（オプション）</param>
''' <returns>成功時True、失敗時False</returns>
Public Function EncryptFile(ByVal filePath As String, _
                          Optional ByVal options As EncryptionOptions) As Boolean
End Function

' パフォーマンス監視
''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
''' <returns>パフォーマンス情報のコレクション</returns>
Public Function GetPerformanceMetrics() As Collection
End Function

''' <summary>
''' ファイル操作の状態を検証します
''' </summary>
''' <returns>有効な場合True</returns>
Public Function Validate() As Boolean
End Function

''' <summary>
''' リソースを解放します
''' </summary>
Public Sub Cleanup()
End Sub

================
File: IIniFile.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IIniFile"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

'@Description("INIファイルの読み書きと高度な設定管理を提供するインターフェース")

' 定数定義
Private Const MAX_SECTION_LENGTH As Long = 255     ' セクション名の最大長
Private Const MAX_KEY_LENGTH As Long = 255        ' キー名の最大長
Private Const MAX_VALUE_LENGTH As Long = 32768    ' 値の最大長
Private Const MAX_LINE_LENGTH As Long = 32768     ' 行の最大長
Private Const CACHE_DURATION_MS As Long = 300000  ' キャッシュの有効期間（5分）
Private Const MAX_BACKUP_COUNT As Long = 5        ' 最大バックアップ数
Private Const BUFFER_SIZE As Long = 8192          ' バッファサイズ（8KB）

' イベント定義
Public Event ValueChanged(ByVal section As String, ByVal key As String, ByVal oldValue As String, ByVal newValue As String)
Public Event SectionAdded(ByVal section As String)
Public Event SectionRemoved(ByVal section As String)
Public Event FileLoaded(ByVal filePath As String, ByVal success As Boolean)
Public Event FileSaved(ByVal filePath As String, ByVal success As Boolean)
Public Event CacheUpdated(ByVal section As String, ByVal key As String)
Public Event BackupCreated(ByVal backupPath As String)
Public Event PerformanceAlert(ByVal metricType As String, ByVal currentValue As Double, ByVal threshold As Double)

''' <summary>
''' INIファイルから値を読み取ります
''' </summary>
''' <param name="section">セクション名</param>
''' <param name="key">キー名</param>
''' <param name="defaultValue">デフォルト値（オプション）</param>
''' <param name="options">読み取りオプション（オプション）</param>
''' <returns>読み取った値</returns>
Public Function GetValue(ByVal section As String, _
                        ByVal key As String, _
                        Optional ByVal defaultValue As Variant, _
                        Optional ByVal options As ReadOptions) As Variant
End Function

''' <summary>
''' INIファイルに値を書き込みます
''' </summary>
''' <param name="section">セクション名</param>
''' <param name="key">キー名</param>
''' <param name="value">書き込む値</param>
''' <param name="options">書き込みオプション（オプション）</param>
''' <returns>成功時True、失敗時False</returns>
Public Function SetValue(ByVal section As String, _
                        ByVal key As String, _
                        ByVal value As Variant, _
                        Optional ByVal options As WriteOptions) As Boolean
End Function

''' <summary>
''' セクションを取得します
''' </summary>
''' <param name="section">セクション名</param>
''' <param name="options">取得オプション（オプション）</param>
''' <returns>セクション内のキーと値のコレクション</returns>
Public Function GetSection(ByVal section As String, _
                         Optional ByVal options As SectionOptions) As Collection
End Function

''' <summary>
''' すべてのセクションを取得します
''' </summary>
''' <param name="options">取得オプション（オプション）</param>
''' <returns>セクション名のコレクション</returns>
Public Function GetSections(Optional ByVal options As SectionOptions) As Collection
End Function

''' <summary>
''' セクションを削除します
''' </summary>
''' <param name="section">セクション名</param>
''' <param name="options">削除オプション（オプション）</param>
''' <returns>成功時True、失敗時False</returns>
Public Function RemoveSection(ByVal section As String, _
                            Optional ByVal options As RemoveOptions) As Boolean
End Function

''' <summary>
''' キーを削除します
''' </summary>
''' <param name="section">セクション名</param>
''' <param name="key">キー名</param>
''' <param name="options">削除オプション（オプション）</param>
''' <returns>成功時True、失敗時False</returns>
Public Function RemoveKey(ByVal section As String, _
                         ByVal key As String, _
                         Optional ByVal options As RemoveOptions) As Boolean
End Function

''' <summary>
''' INIファイルを読み込みます
''' </summary>
''' <param name="filePath">ファイルパス</param>
''' <param name="options">読み込みオプション（オプション）</param>
''' <returns>成功時True、失敗時False</returns>
Public Function LoadFile(ByVal filePath As String, _
                        Optional ByVal options As LoadOptions) As Boolean
End Function

''' <summary>
''' INIファイルを保存します
''' </summary>
''' <param name="filePath">ファイルパス</param>
''' <param name="options">保存オプション（オプション）</param>
''' <returns>成功時True、失敗時False</returns>
Public Function SaveFile(ByVal filePath As String, _
                        Optional ByVal options As SaveOptions) As Boolean
End Function

''' <summary>
''' バックアップを作成します
''' </summary>
''' <param name="options">バックアップオプション（オプション）</param>
''' <returns>バックアップファイルのパス</returns>
Public Function CreateBackup(Optional ByVal options As BackupOptions) As String
End Function

''' <summary>
''' バックアップから復元します
''' </summary>
''' <param name="backupPath">バックアップファイルのパス</param>
''' <param name="options">復元オプション（オプション）</param>
''' <returns>成功時True、失敗時False</returns>
Public Function RestoreFromBackup(ByVal backupPath As String, _
                                Optional ByVal options As RestoreOptions) As Boolean
End Function

''' <summary>
''' キャッシュをクリアします
''' </summary>
Public Sub ClearCache()
End Sub

''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
''' <returns>パフォーマンス情報のコレクション</returns>
Public Function GetPerformanceMetrics() As Collection
End Function

''' <summary>
''' INIファイルの状態を検証します
''' </summary>
''' <returns>有効な場合True</returns>
Public Function Validate() As Boolean
End Function

''' <summary>
''' リソースを解放します
''' </summary>
Public Sub Cleanup()
End Sub

================
File: IKeyDerivationStrategy.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IKeyDerivationStrategy"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

'@Description("パスワードからキーを安全に導出するための戦略を提供するインターフェース")

' 定数定義
Private Const MIN_PASSWORD_LENGTH As Long = 8      ' 最小パスワード長
Private Const MIN_SALT_LENGTH As Long = 16         ' 最小ソルト長（バイト）
Private Const MIN_ITERATIONS As Long = 10000       ' 最小反復回数
Private Const DEFAULT_KEY_LENGTH As Long = 32      ' デフォルトキー長（バイト）
Private Const MAX_CACHE_SIZE As Long = 1000        ' 最大キャッシュサイズ
Private Const CACHE_DURATION_MS As Long = 300000   ' キャッシュの有効期間（5分）
Private Const MAX_MEMORY_MB As Long = 128          ' 最大メモリ使用量（MB）

' イベント定義
Public Event KeyDerivationStarted(ByVal iterations As Long, ByVal keyLength As Long)
Public Event KeyDerivationCompleted(ByVal executionTime As Double)
Public Event SecurityAlert(ByVal alertType As String, ByVal details As String)
Public Event ParameterValidationFailed(ByVal parameterName As String, ByVal reason As String)
Public Event CacheUpdated(ByVal cacheSize As Long)
Public Event PerformanceAlert(ByVal metricType As String, ByVal currentValue As Double, ByVal threshold As Double)
Public Event ResourceExhausted(ByVal resourceType As String, ByVal details As String)

''' <summary>
''' パスワードからキーを導出します
''' </summary>
''' <param name="password">パスワード文字列</param>
''' <param name="salt">ソルト値（バイト配列）</param>
''' <param name="iterations">反復回数</param>
''' <param name="options">導出オプション（オプション）</param>
''' <returns>導出されたキー（バイト配列）</returns>
''' <remarks>
''' エラー処理要件：
''' - パスワードの検証
''' - ソルトの検証
''' - 反復回数の検証
''' - メモリ使用量の監視
''' - パフォーマンスの監視
''' - セキュリティ要件の確認
''' </remarks>
Public Function DeriveKey(ByVal password As String, _
                         ByRef salt As Variant, _
                         ByVal iterations As Long, _
                         Optional ByVal options As DerivationOptions) As Byte()
End Function

''' <summary>
''' パラメータを検証します
''' </summary>
''' <param name="password">パスワード文字列</param>
''' <param name="salt">ソルト値</param>
''' <param name="iterations">反復回数</param>
''' <param name="options">検証オプション（オプション）</param>
''' <returns>検証結果</returns>
Public Function ValidateParameters(ByVal password As String, _
                                 ByRef salt As Variant, _
                                 ByVal iterations As Long, _
                                 Optional ByVal options As ValidationOptions) As ValidationResult
End Function

''' <summary>
''' ソルトを生成します
''' </summary>
''' <param name="length">ソルト長（オプション）</param>
''' <param name="options">生成オプション（オプション）</param>
''' <returns>生成されたソルト</returns>
Public Function GenerateSalt(Optional ByVal length As Long = 16, _
                           Optional ByVal options As SaltOptions) As Byte()
End Function

''' <summary>
''' 推奨パラメータを取得します
''' </summary>
''' <param name="options">推奨オプション（オプション）</param>
''' <returns>推奨パラメータ</returns>
Public Function GetRecommendedParameters(Optional ByVal options As ParameterOptions) As DerivationParameters
End Function

''' <summary>
''' キャッシュ設定を構成します
''' </summary>
''' <param name="settings">キャッシュ設定</param>
Public Sub ConfigureCache(ByVal settings As CacheSettings)
End Sub

''' <summary>
''' メモリ使用量を最適化します
''' </summary>
''' <param name="options">最適化オプション（オプション）</param>
Public Sub OptimizeMemoryUsage(Optional ByVal options As OptimizationOptions)
End Sub

''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
''' <returns>パフォーマンス情報のコレクション</returns>
Public Function GetPerformanceMetrics() As Collection
End Function

''' <summary>
''' セキュリティ監査を実行します
''' </summary>
''' <param name="options">監査オプション（オプション）</param>
''' <returns>監査結果</returns>
Public Function PerformSecurityAudit(Optional ByVal options As AuditOptions) As SecurityAuditResult
End Function

''' <summary>
''' キー導出の状態を検証します
''' </summary>
''' <returns>有効な場合True</returns>
Public Function Validate() As Boolean
End Function

''' <summary>
''' リソースを解放します
''' </summary>
Public Sub Cleanup()
End Sub

================
File: ILock.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "ILock"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

'@Description("リソースの排他制御とデッドロック検出を提供するインターフェース")

' 定数定義
Private Const DEFAULT_TIMEOUT_MS As Long = 30000    ' デフォルトタイムアウト（30秒）
Private Const MAX_RETRY_COUNT As Long = 3           ' 最大リトライ回数
Private Const MIN_SPIN_COUNT As Long = 1000         ' 最小スピンカウント
Private Const MAX_RECURSION_DEPTH As Long = 100     ' 最大再帰深度
Private Const DEADLOCK_CHECK_INTERVAL_MS As Long = 1000 ' デッドロック検出間隔（1秒）
Private Const MAX_WAITING_THREADS As Long = 100     ' 最大待機スレッド数
Private Const CLEANUP_INTERVAL_MS As Long = 60000   ' クリーンアップ間隔（1分）

' イベント定義
Public Event LockAcquired(ByVal lockId As String, ByVal waitTime As Double)
Public Event LockReleased(ByVal lockId As String, ByVal holdTime As Double)
Public Event DeadlockDetected(ByVal lockId As String, ByVal waitingThreads As Collection)
Public Event TimeoutOccurred(ByVal lockId As String, ByVal timeout As Long)
Public Event PriorityInversion(ByVal lockId As String, ByVal currentPriority As Long, ByVal requiredPriority As Long)
Public Event ResourceContentionDetected(ByVal lockId As String, ByVal contentionLevel As Double)
Public Event PerformanceAlert(ByVal metricType As String, ByVal currentValue As Double, ByVal threshold As Double)

''' <summary>
''' ロックを取得します
''' </summary>
''' <param name="timeout">タイムアウト時間（ミリ秒）。-1は無限待機</param>
''' <param name="options">取得オプション（オプション）</param>
''' <returns>ロックの取得に成功した場合はTrue、タイムアウトした場合はFalse</returns>
''' <remarks>
''' エラー処理要件：
''' - タイムアウトの検証
''' - デッドロックの検出
''' - 優先度逆転の防止
''' - リソース競合の監視
''' - 再入可能性の確認
''' </remarks>
Public Function Acquire(Optional ByVal timeout As Long = -1, _
                       Optional ByVal options As LockOptions) As Boolean
End Function

''' <summary>
''' ロックを解放します
''' </summary>
''' <param name="options">解放オプション（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - 所有権の確認
''' - 待機スレッドの管理
''' - リソースの解放確認
''' - イベントの発行
''' </remarks>
Public Sub Release(Optional ByVal options As ReleaseOptions)
End Sub

''' <summary>
''' ロックの状態を確認します
''' </summary>
''' <returns>ロックの状態情報</returns>
Public Function GetLockStatus() As LockStatus
End Function

''' <summary>
''' 待機中のスレッドを取得します
''' </summary>
''' <returns>待機スレッドのコレクション</returns>
Public Function GetWaitingThreads() As Collection
End Function

''' <summary>
''' ロックの優先度を設定します
''' </summary>
''' <param name="priority">優先度</param>
Public Property Let Priority(ByVal priority As LockPriority)
End Property

''' <summary>
''' ロックの優先度を取得します
''' </summary>
Public Property Get Priority() As LockPriority
End Property

''' <summary>
''' 再入可能性を設定します
''' </summary>
''' <param name="value">再入可能な場合True</param>
Public Property Let IsReentrant(ByVal value As Boolean)
End Property

''' <summary>
''' 再入可能かどうかを取得します
''' </summary>
Public Property Get IsReentrant() As Boolean
End Property

''' <summary>
''' デッドロック検出を有効/無効にします
''' </summary>
''' <param name="value">有効な場合True</param>
Public Property Let DeadlockDetectionEnabled(ByVal value As Boolean)
End Property

''' <summary>
''' デッドロック検出が有効かどうかを取得します
''' </summary>
Public Property Get DeadlockDetectionEnabled() As Boolean
End Property

''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
''' <returns>パフォーマンス情報のコレクション</returns>
Public Function GetPerformanceMetrics() As Collection
End Function

''' <summary>
''' デッドロックを検出します
''' </summary>
''' <param name="options">検出オプション（オプション）</param>
''' <returns>デッドロック情報のコレクション</returns>
Public Function DetectDeadlocks(Optional ByVal options As DeadlockOptions) As Collection
End Function

''' <summary>
''' ロックの状態を検証します
''' </summary>
''' <returns>有効な場合True</returns>
Public Function Validate() As Boolean
End Function

''' <summary>
''' リソースを解放します
''' </summary>
Public Sub Cleanup()
End Sub

================
File: ILogger.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "ILogger"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

'@Description("ログの記録、管理、分析を提供し、複数の出力先とフォーマットをサポートするインターフェース")

' 定数定義
Private Const MAX_MESSAGE_LENGTH As Long = 8192     ' メッセージの最大長
Private Const MAX_QUEUE_SIZE As Long = 10000        ' キューの最大サイズ
Private Const FLUSH_INTERVAL_MS As Long = 1000      ' フラッシュ間隔（1秒）
Private Const MAX_BATCH_SIZE As Long = 1000         ' バッチサイズの最大値
Private Const MAX_FILE_SIZE_MB As Long = 100        ' ログファイルの最大サイズ（MB）
Private Const MAX_RETENTION_DAYS As Long = 90       ' ログの最大保持期間（日）
Private Const COMPRESSION_THRESHOLD_MB As Long = 50  ' 圧縮開始サイズ（MB）

' イベント定義
Public Event LogEntryWritten(ByVal entry As LogEntry, ByVal destination As LogDestination)
Public Event LogLevelChanged(ByVal oldLevel As LogLevel, ByVal newLevel As LogLevel)
Public Event DestinationChanged(ByVal oldDestination As LogDestination, ByVal newDestination As LogDestination)
Public Event LogRotated(ByVal oldFile As String, ByVal newFile As String)
Public Event LogCompressed(ByVal originalSize As Long, ByVal compressedSize As Long)
Public Event QueueThresholdReached(ByVal queueSize As Long, ByVal threshold As Long)
Public Event PerformanceAlert(ByVal metricType As String, ByVal currentValue As Double, ByVal threshold As Double)
Public Event StorageAlert(ByVal availableSpace As Long, ByVal threshold As Long)

''' <summary>
''' ログを記録します
''' </summary>
''' <param name="moduleName">モジュール名</param>
''' <param name="message">ログメッセージ</param>
''' <param name="level">ログレベル（オプション）</param>
''' <param name="errorCode">エラーコード（オプション）</param>
''' <param name="options">ログオプション（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - パラメータの検証（NULL、空文字、最大長など）
''' - 出力先の状態確認
''' - エラー発生時の代替処理
''' - リトライメカニズムの実装
''' - キューの管理
''' - パフォーマンスの監視
''' </remarks>
Public Sub Log(ByVal moduleName As String, _
               ByVal message As String, _
               Optional ByVal level As LogLevel = llInfo, _
               Optional ByVal errorCode As ErrorCode, _
               Optional ByVal options As LogOptions)
End Sub

''' <summary>
''' バッチログを記録します
''' </summary>
''' <param name="entries">ログエントリのコレクション</param>
''' <param name="options">バッチオプション（オプション）</param>
Public Sub LogBatch(ByVal entries As Collection, Optional ByVal options As BatchLogOptions)
End Sub

''' <summary>
''' ログレベルを設定します
''' </summary>
''' <param name="level">ログレベル</param>
''' <param name="options">レベルオプション（オプション）</param>
Public Property Let LogLevel(ByVal level As LogLevel, Optional ByVal options As LevelOptions)
End Property

''' <summary>
''' 現在のログレベルを取得します
''' </summary>
Public Property Get LogLevel() As LogLevel
End Property

''' <summary>
''' ログの出力先を設定します
''' </summary>
''' <param name="destination">ログの出力先</param>
''' <param name="options">出力先オプション（オプション）</param>
Public Property Let LogDestination(ByVal destination As LogDestination, Optional ByVal options As DestinationOptions)
End Property

''' <summary>
''' 現在のログ出力先を取得します
''' </summary>
Public Property Get LogDestination() As LogDestination
End Property

''' <summary>
''' ログフィルターを設定します
''' </summary>
''' <param name="filter">フィルター条件</param>
''' <param name="options">フィルターオプション（オプション）</param>
Public Sub SetLogFilter(ByVal filter As String, Optional ByVal options As FilterOptions)
End Sub

''' <summary>
''' ログをフラッシュします
''' </summary>
''' <param name="options">フラッシュオプション（オプション）</param>
Public Sub Flush(Optional ByVal options As FlushOptions)
End Sub

''' <summary>
''' ログをローテーションします
''' </summary>
''' <param name="options">ローテーションオプション（オプション）</param>
Public Sub RotateLog(Optional ByVal options As RotationOptions)
End Sub

''' <summary>
''' ログを圧縮します
''' </summary>
''' <param name="filePath">ファイルパス</param>
''' <param name="options">圧縮オプション（オプション）</param>
Public Sub CompressLog(ByVal filePath As String, Optional ByVal options As CompressionOptions)
End Sub

''' <summary>
''' ログを検索します
''' </summary>
''' <param name="searchCriteria">検索条件</param>
''' <param name="options">検索オプション（オプション）</param>
''' <returns>検索結果のコレクション</returns>
Public Function SearchLogs(ByVal searchCriteria As String, Optional ByVal options As SearchOptions) As Collection
End Function

''' <summary>
''' ログの統計情報を取得します
''' </summary>
''' <param name="options">統計オプション（オプション）</param>
''' <returns>統計情報</returns>
Public Function GetLogStatistics(Optional ByVal options As StatisticsOptions) As LogStatistics
End Function

''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
''' <returns>パフォーマンス情報のコレクション</returns>
Public Function GetPerformanceMetrics() As Collection
End Function

''' <summary>
''' ログの状態を検証します
''' </summary>
''' <returns>有効な場合True</returns>
Public Function Validate() As Boolean
End Function

''' <summary>
''' リソースを解放します
''' </summary>
Public Sub Cleanup()
End Sub

================
File: ILoggerSettings.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "ILoggerSettings"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

'@Description("ロガーの設定管理と検証を提供するインターフェース")

' 定数定義
Private Const MAX_FILE_SIZE_MB As Long = 100       ' 最大ファイルサイズ（MB）
Private Const MIN_TIMER_INTERVAL As Long = 100     ' 最小タイマー間隔（ミリ秒）
Private Const MAX_TIMER_INTERVAL As Long = 3600000 ' 最大タイマー間隔（1時間）
Private Const MAX_BATCH_SIZE As Long = 1000        ' 最大バッチサイズ
Private Const CACHE_DURATION_MS As Long = 300000   ' キャッシュの有効期間（5分）
Private Const MAX_RETRY_COUNT As Long = 3          ' 最大リトライ回数
Private Const CLEANUP_INTERVAL_MS As Long = 3600000 ' クリーンアップ間隔（1時間）

' イベント定義
Public Event SettingChanged(ByVal settingName As String, ByVal oldValue As Variant, ByVal newValue As Variant)
Public Event ValidationFailed(ByVal settingName As String, ByVal value As Variant, ByVal reason As String)
Public Event ConfigurationLoaded(ByVal source As String, ByVal success As Boolean)
Public Event ConfigurationSaved(ByVal destination As String, ByVal success As Boolean)
Public Event EnvironmentChanged(ByVal oldEnvironment As String, ByVal newEnvironment As String)
Public Event SecurityAlert(ByVal alertType As String, ByVal details As String)
Public Event PerformanceAlert(ByVal metricType As String, ByVal currentValue As Double, ByVal threshold As Double)

' プロパティ定義
''' <summary>
''' ログレベルを取得または設定します
''' </summary>
Public Property Get LogLevel() As LogLevel
End Property

Public Property Let LogLevel(ByVal value As LogLevel)
End Property

''' <summary>
''' ログ出力先を取得または設定します
''' </summary>
Public Property Get LogDestination() As ILogDestination
End Property

Public Property Let LogDestination(ByVal value As ILogDestination)
End Property

''' <summary>
''' ログファイルパスを取得または設定します
''' </summary>
Public Property Get LogFilePath() As String
End Property

Public Property Let LogFilePath(ByVal value As String)
End Property

''' <summary>
''' ログテーブル名を取得または設定します
''' </summary>
Public Property Get LogTableName() As String
End Property

Public Property Let LogTableName(ByVal value As String)
End Property

''' <summary>
''' ログイベントソースを取得または設定します
''' </summary>
Public Property Get LogEventSource() As String
End Property

Public Property Let LogEventSource(ByVal value As String)
End Property

''' <summary>
''' タイマー間隔を取得または設定します
''' </summary>
Public Property Get TimerInterval() As Long
End Property

Public Property Let TimerInterval(ByVal value As Long)
End Property

''' <summary>
''' データベース接続文字列を取得または設定します
''' </summary>
Public Property Get ConnectionString() As String
End Property

Public Property Let ConnectionString(ByVal value As String)
End Property

' メソッド定義
''' <summary>
''' 設定を検証します
''' </summary>
''' <param name="options">検証オプション（オプション）</param>
''' <returns>検証結果</returns>
Public Function ValidateSettings(Optional ByVal options As ValidationOptions) As ValidationResult
End Function

''' <summary>
''' 設定をファイルから読み込みます
''' </summary>
''' <param name="filePath">ファイルパス</param>
''' <param name="options">読み込みオプション（オプション）</param>
Public Sub LoadFromFile(ByVal filePath As String, Optional ByVal options As LoadOptions)
End Sub

''' <summary>
''' 設定をファイルに保存します
''' </summary>
''' <param name="filePath">ファイルパス</param>
''' <param name="options">保存オプション（オプション）</param>
Public Sub SaveToFile(ByVal filePath As String, Optional ByVal options As SaveOptions)
End Sub

''' <summary>
''' 環境を設定します
''' </summary>
''' <param name="environment">環境名</param>
''' <param name="options">環境オプション（オプション）</param>
Public Sub SetEnvironment(ByVal environment As String, Optional ByVal options As EnvironmentOptions)
End Sub

''' <summary>
''' 設定をリセットします
''' </summary>
''' <param name="options">リセットオプション（オプション）</param>
Public Sub ResetToDefaults(Optional ByVal options As ResetOptions)
End Sub

''' <summary>
''' 設定のバックアップを作成します
''' </summary>
''' <param name="backupPath">バックアップパス（オプション）</param>
''' <returns>バックアップファイルのパス</returns>
Public Function CreateBackup(Optional ByVal backupPath As String) As String
End Function

''' <summary>
''' バックアップから復元します
''' </summary>
''' <param name="backupPath">バックアップファイルのパス</param>
''' <param name="options">復元オプション（オプション）</param>
Public Sub RestoreFromBackup(ByVal backupPath As String, Optional ByVal options As RestoreOptions)
End Sub

''' <summary>
''' 設定を暗号化します
''' </summary>
''' <param name="options">暗号化オプション（オプション）</param>
Public Sub EncryptSettings(Optional ByVal options As EncryptionOptions)
End Sub

''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
''' <returns>パフォーマンス情報のコレクション</returns>
Public Function GetPerformanceMetrics() As Collection
End Function

''' <summary>
''' 設定の状態を検証します
''' </summary>
''' <returns>有効な場合True</returns>
Public Function Validate() As Boolean
End Function

''' <summary>
''' リソースを解放します
''' </summary>
Public Sub Cleanup()
End Sub

================
File: IMessageFormatter.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IMessageFormatter"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredefinedId = False
Attribute VB_Exposed = True
Option Explicit

'@Description("メッセージのフォーマットとテンプレート管理を提供するインターフェース")

' 定数定義
Private Const MAX_MESSAGE_LENGTH As Long = 8192     ' メッセージの最大長
Private Const MAX_TEMPLATE_SIZE As Long = 32768     ' テンプレートの最大サイズ
Private Const MAX_PLACEHOLDERS As Long = 100        ' プレースホルダーの最大数
Private Const CACHE_DURATION_MS As Long = 300000    ' キャッシュの有効期間（5分）
Private Const MAX_RETRY_COUNT As Long = 3           ' 最大リトライ回数
Private Const DEFAULT_LOCALE As String = "ja-JP"    ' デフォルトロケール
Private Const CLEANUP_INTERVAL_MS As Long = 3600000 ' クリーンアップ間隔（1時間）

' イベント定義
Public Event MessageFormatted(ByVal originalMessage As String, ByVal formattedMessage As String)
Public Event TemplateLoaded(ByVal templateName As String, ByVal success As Boolean)
Public Event LocaleChanged(ByVal oldLocale As String, ByVal newLocale As String)
Public Event PlaceholderResolved(ByVal placeholder As String, ByVal value As String)
Public Event FormatError(ByVal errorType As String, ByVal details As String)
Public Event CacheUpdated(ByVal templateName As String, ByVal isCached As Boolean)
Public Event PerformanceAlert(ByVal metricType As String, ByVal currentValue As Double, ByVal threshold As Double)

''' <summary>
''' メッセージをフォーマットします
''' </summary>
''' <param name="message">基本メッセージ</param>
''' <param name="errorInfo">エラー情報</param>
''' <param name="options">フォーマットオプション（オプション）</param>
''' <returns>フォーマットされたメッセージ</returns>
''' <remarks>
''' エラー処理要件：
''' - メッセージの検証
''' - プレースホルダーの解決
''' - テンプレートの適用
''' - 文字列長の制限
''' - エスケープ処理
''' </remarks>
Public Function FormatMessage(ByVal message As String, _
                            ByRef errorInfo As ErrorInfo, _
                            Optional ByVal options As FormatOptions) As String
End Function

''' <summary>
''' テンプレートを使用してメッセージをフォーマットします
''' </summary>
''' <param name="templateName">テンプレート名</param>
''' <param name="parameters">パラメータのコレクション</param>
''' <param name="options">フォーマットオプション（オプション）</param>
''' <returns>フォーマットされたメッセージ</returns>
Public Function FormatWithTemplate(ByVal templateName As String, _
                                 ByVal parameters As Collection, _
                                 Optional ByVal options As TemplateOptions) As String
End Function

''' <summary>
''' メッセージテンプレートを設定します
''' </summary>
''' <param name="templateName">テンプレート名</param>
''' <param name="template">テンプレート内容</param>
''' <param name="options">テンプレートオプション（オプション）</param>
Public Sub SetTemplate(ByVal templateName As String, _
                      ByVal template As String, _
                      Optional ByVal options As TemplateOptions)
End Sub

''' <summary>
''' メッセージテンプレートを取得します
''' </summary>
''' <param name="templateName">テンプレート名</param>
''' <returns>テンプレート内容</returns>
Public Function GetTemplate(ByVal templateName As String) As String
End Function

''' <summary>
''' ロケールを設定します
''' </summary>
''' <param name="locale">ロケール</param>
''' <param name="options">ロケールオプション（オプション）</param>
Public Sub SetLocale(ByVal locale As String, Optional ByVal options As LocaleOptions)
End Sub

''' <summary>
''' 現在のロケールを取得します
''' </summary>
Public Property Get CurrentLocale() As String
End Property

''' <summary>
''' カスタムプレースホルダーを追加します
''' </summary>
''' <param name="placeholder">プレースホルダー</param>
''' <param name="resolver">解決関数</param>
Public Sub AddPlaceholder(ByVal placeholder As String, ByVal resolver As IPlaceholderResolver)
End Sub

''' <summary>
''' フォーマット設定をエクスポートします
''' </summary>
''' <param name="filePath">出力ファイルパス</param>
''' <param name="options">エクスポートオプション（オプション）</param>
Public Sub ExportSettings(ByVal filePath As String, Optional ByVal options As ExportOptions)
End Sub

''' <summary>
''' フォーマット設定をインポートします
''' </summary>
''' <param name="filePath">入力ファイルパス</param>
''' <param name="options">インポートオプション（オプション）</param>
Public Sub ImportSettings(ByVal filePath As String, Optional ByVal options As ImportOptions)
End Sub

''' <summary>
''' テンプレートをバリデーションします
''' </summary>
''' <param name="template">テンプレート内容</param>
''' <param name="options">検証オプション（オプション）</param>
''' <returns>検証結果</returns>
Public Function ValidateTemplate(ByVal template As String, Optional ByVal options As ValidationOptions) As ValidationResult
End Function

''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
''' <returns>パフォーマンス情報のコレクション</returns>
Public Function GetPerformanceMetrics() As Collection
End Function

''' <summary>
''' フォーマッターの状態を検証します
''' </summary>
''' <returns>有効な場合True</returns>
Public Function Validate() As Boolean
End Function

''' <summary>
''' リソースを解放します
''' </summary>
Public Sub Cleanup()
End Sub

================
File: IMutex.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IMutex"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

'@Description("スレッド間の同期と排他制御を提供するインターフェース")

' 定数定義
Private Const DEFAULT_TIMEOUT_MS As Long = 30000    ' デフォルトタイムアウト（30秒）
Private Const MAX_RETRY_COUNT As Long = 3           ' 最大リトライ回数
Private Const MIN_SPIN_COUNT As Long = 1000         ' 最小スピンカウント
Private Const MAX_RECURSION_DEPTH As Long = 100     ' 最大再帰深度
Private Const DEADLOCK_CHECK_INTERVAL_MS As Long = 1000 ' デッドロック検出間隔（1秒）
Private Const MAX_WAITING_THREADS As Long = 100     ' 最大待機スレッド数
Private Const CLEANUP_INTERVAL_MS As Long = 60000   ' クリーンアップ間隔（1分）

' イベント定義
Public Event MutexCreated(ByVal mutexName As String, ByVal initialOwner As Boolean)
Public Event MutexAcquired(ByVal mutexName As String, ByVal waitTime As Double)
Public Event MutexReleased(ByVal mutexName As String, ByVal holdTime As Double)
Public Event DeadlockDetected(ByVal mutexName As String, ByVal waitingThreads As Collection)
Public Event TimeoutOccurred(ByVal mutexName As String, ByVal timeout As Long)
Public Event PriorityInversion(ByVal mutexName As String, ByVal currentPriority As Long, ByVal requiredPriority As Long)
Public Event ResourceContentionDetected(ByVal mutexName As String, ByVal contentionLevel As Double)
Public Event PerformanceAlert(ByVal metricType As String, ByVal currentValue As Double, ByVal threshold As Double)

''' <summary>
''' ミューテックスを作成します
''' </summary>
''' <param name="initialOwner">初期所有者フラグ</param>
''' <param name="name">ミューテックスの名前</param>
''' <param name="options">作成オプション（オプション）</param>
''' <returns>成功時True、失敗時False</returns>
''' <remarks>
''' エラー処理要件：
''' - 名前の検証
''' - 重複チェック
''' - セキュリティ確認
''' - リソース確保
''' </remarks>
Public Function CreateMutex(ByVal initialOwner As Boolean, _
                          ByVal name As String, _
                          Optional ByVal options As MutexOptions) As Boolean
End Function

''' <summary>
''' ミューテックスを解放します
''' </summary>
''' <param name="options">解放オプション（オプション）</param>
''' <returns>成功時True、失敗時False</returns>
''' <remarks>
''' エラー処理要件：
''' - 所有権の確認
''' - 待機スレッドの管理
''' - リソースの解放確認
''' - イベントの発行
''' </remarks>
Public Function ReleaseMutex(Optional ByVal options As ReleaseOptions) As Boolean
End Function

''' <summary>
''' ミューテックスの所有権を取得します
''' </summary>
''' <param name="timeoutMilliseconds">タイムアウト時間（ミリ秒）</param>
''' <param name="options">取得オプション（オプション）</param>
''' <returns>成功時True、失敗時False</returns>
Public Function WaitForSingleObject(ByVal timeoutMilliseconds As Long, _
                                  Optional ByVal options As WaitOptions) As Boolean
End Function

''' <summary>
''' ミューテックスの状態を確認します
''' </summary>
''' <returns>ミューテックスの状態情報</returns>
Public Function GetMutexStatus() As MutexStatus
End Function

''' <summary>
''' 待機中のスレッドを取得します
''' </summary>
''' <returns>待機スレッドのコレクション</returns>
Public Function GetWaitingThreads() As Collection
End Function

''' <summary>
''' ミューテックスの優先度を設定します
''' </summary>
''' <param name="priority">優先度</param>
Public Property Let Priority(ByVal priority As MutexPriority)
End Property

''' <summary>
''' ミューテックスの優先度を取得します
''' </summary>
Public Property Get Priority() As MutexPriority
End Property

''' <summary>
''' 再入可能性を設定します
''' </summary>
''' <param name="value">再入可能な場合True</param>
Public Property Let IsReentrant(ByVal value As Boolean)
End Property

''' <summary>
''' 再入可能かどうかを取得します
''' </summary>
Public Property Get IsReentrant() As Boolean
End Property

''' <summary>
''' デッドロック検出を有効/無効にします
''' </summary>
''' <param name="value">有効な場合True</param>
Public Property Let DeadlockDetectionEnabled(ByVal value As Boolean)
End Property

''' <summary>
''' デッドロック検出が有効かどうかを取得します
''' </summary>
Public Property Get DeadlockDetectionEnabled() As Boolean
End Property

''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
''' <returns>パフォーマンス情報のコレクション</returns>
Public Function GetPerformanceMetrics() As Collection
End Function

''' <summary>
''' デッドロックを検出します
''' </summary>
''' <param name="options">検出オプション（オプション）</param>
''' <returns>デッドロック情報のコレクション</returns>
Public Function DetectDeadlocks(Optional ByVal options As DeadlockOptions) As Collection
End Function

''' <summary>
''' ミューテックスの状態を検証します
''' </summary>
''' <returns>有効な場合True</returns>
Public Function Validate() As Boolean
End Function

''' <summary>
''' リソースを解放します
''' </summary>
Public Sub Cleanup()
End Sub

================
File: IPerformanceCounter.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IPerformanceCounter"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

'@Description("高精度なパフォーマンス測定と監視機能を提供するインターフェース")

' 定数定義
Private Const MAX_SAMPLES As Long = 1000            ' 最大サンプル数
Private Const MIN_INTERVAL_MS As Long = 100         ' 最小測定間隔（ミリ秒）
Private Const CACHE_DURATION_MS As Long = 1000      ' キャッシュの有効期間（1秒）
Private Const DEFAULT_THRESHOLD As Double = 0.8      ' デフォルトの閾値（80%）
Private Const MAX_HISTORY_ENTRIES As Long = 1000    ' 履歴の最大エントリ数
Private Const CLEANUP_INTERVAL_MS As Long = 60000   ' クリーンアップ間隔（1分）

' イベント定義
Public Event CounterStarted(ByVal counterName As String, ByVal startTime As Date)
Public Event CounterStopped(ByVal counterName As String, ByVal elapsedTime As Double)
Public Event ThresholdExceeded(ByVal counterName As String, ByVal currentValue As Double, ByVal threshold As Double)
Public Event SampleCollected(ByVal counterName As String, ByVal value As Double)
Public Event StatisticsUpdated(ByVal counterName As String, ByVal statistics As PerformanceStatistics)
Public Event AnomalyDetected(ByVal counterName As String, ByVal anomalyType As String, ByVal value As Double)
Public Event CacheUpdated(ByVal counterName As String, ByVal isCached As Boolean)

''' <summary>
''' パフォーマンスカウンターの現在値を取得します
''' </summary>
''' <param name="performanceCount">カウンター値を格納する変数</param>
''' <param name="options">取得オプション（オプション）</param>
''' <returns>成功時True、失敗時False</returns>
''' <remarks>
''' エラー処理要件：
''' - カウンターの有効性確認
''' - オーバーフロー検出
''' - プロセッサ間の一貫性確認
''' - キャッシュの活用
''' </remarks>
Public Function QueryPerformanceCounter(ByRef performanceCount As Currency, Optional ByVal options As CounterOptions) As Boolean
End Function

''' <summary>
''' パフォーマンスカウンターの周波数を取得します
''' </summary>
''' <param name="frequency">周波数を格納する変数</param>
''' <param name="options">取得オプション（オプション）</param>
''' <returns>成功時True、失敗時False</returns>
''' <remarks>
''' エラー処理要件：
''' - システムサポートの確認
''' - 値の安定性確認
''' - キャッシュの活用
''' </remarks>
Public Function QueryPerformanceFrequency(ByRef frequency As Currency, Optional ByVal options As FrequencyOptions) As Boolean
End Function

''' <summary>
''' パフォーマンス測定を開始します
''' </summary>
''' <param name="counterName">カウンター名</param>
''' <param name="options">測定オプション（オプション）</param>
''' <returns>測定ID</returns>
Public Function StartMeasurement(ByVal counterName As String, Optional ByVal options As MeasurementOptions) As String
End Function

''' <summary>
''' パフォーマンス測定を停止します
''' </summary>
''' <param name="measurementId">測定ID</param>
''' <returns>測定結果</returns>
Public Function StopMeasurement(ByVal measurementId As String) As MeasurementResult
End Function

''' <summary>
''' パフォーマンス閾値を設定します
''' </summary>
''' <param name="counterName">カウンター名</param>
''' <param name="threshold">閾値</param>
''' <param name="options">閾値オプション（オプション）</param>
Public Sub SetThreshold(ByVal counterName As String, ByVal threshold As Double, Optional ByVal options As ThresholdOptions)
End Sub

''' <summary>
''' パフォーマンス統計を取得します
''' </summary>
''' <param name="counterName">カウンター名</param>
''' <param name="options">統計オプション（オプション）</param>
''' <returns>統計情報</returns>
Public Function GetStatistics(ByVal counterName As String, Optional ByVal options As StatisticsOptions) As PerformanceStatistics
End Function

''' <summary>
''' パフォーマンス履歴を取得します
''' </summary>
''' <param name="counterName">カウンター名</param>
''' <param name="options">履歴オプション（オプション）</param>
''' <returns>履歴データのコレクション</returns>
Public Function GetHistory(ByVal counterName As String, Optional ByVal options As HistoryOptions) As Collection
End Function

''' <summary>
''' 異常値を検出します
''' </summary>
''' <param name="counterName">カウンター名</param>
''' <param name="options">検出オプション（オプション）</param>
''' <returns>異常値のコレクション</returns>
Public Function DetectAnomalies(ByVal counterName As String, Optional ByVal options As AnomalyOptions) As Collection
End Function

''' <summary>
''' パフォーマンスレポートを生成します
''' </summary>
''' <param name="options">レポートオプション（オプション）</param>
''' <returns>レポートデータ</returns>
Public Function GenerateReport(Optional ByVal options As ReportOptions) As PerformanceReport
End Function

''' <summary>
''' カウンターをリセットします
''' </summary>
''' <param name="counterName">カウンター名（オプション）</param>
Public Sub Reset(Optional ByVal counterName As String)
End Sub

''' <summary>
''' カウンターの状態を検証します
''' </summary>
''' <returns>有効な場合True</returns>
Public Function Validate() As Boolean
End Function

''' <summary>
''' リソースを解放します
''' </summary>
Public Sub Cleanup()
End Sub

================
File: IPerformanceMonitor.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IPerformanceMonitor"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredefinedId = False
Attribute VB_Exposed = True
Option Explicit

'@Description("システム全体のパフォーマンスを監視し、分析、レポート生成を提供するインターフェース")

' 定数定義
Private Const MAX_MEASUREMENTS As Long = 1000       ' 最大測定数
Private Const SAMPLING_INTERVAL_MS As Long = 1000   ' サンプリング間隔（1秒）
Private Const ALERT_THRESHOLD As Double = 0.8       ' アラート閾値（80%）
Private Const MAX_HISTORY_DAYS As Long = 30         ' 履歴保持期間（日）
Private Const CLEANUP_INTERVAL_MS As Long = 3600000 ' クリーンアップ間隔（1時間）
Private Const DEFAULT_TIMEOUT_MS As Long = 30000    ' デフォルトタイムアウト（30秒）

' イベント定義
Public Event MeasurementStarted(ByVal measurementName As String, ByVal startTime As Date)
Public Event MeasurementCompleted(ByVal measurementName As String, ByVal duration As Double)
Public Event ThresholdExceeded(ByVal metricName As String, ByVal currentValue As Double, ByVal threshold As Double)
Public Event ResourceAlert(ByVal resourceType As String, ByVal usage As Double, ByVal capacity As Double)
Public Event PerformanceAnomaly(ByVal metricName As String, ByVal value As Double, ByVal expectedRange As String)
Public Event MonitoringStatusChanged(ByVal isEnabled As Boolean, ByVal reason As String)
Public Event ReportGenerated(ByVal reportType As String, ByVal timestamp As Date)

''' <summary>
''' 計測を開始します
''' </summary>
''' <param name="measurementName">計測名</param>
''' <param name="category">カテゴリ（オプション）</param>
''' <param name="options">計測オプション（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - 計測名の検証
''' - 重複計測の検出
''' - リソース使用量の確認
''' - タイムアウトの設定
''' </remarks>
Public Sub Start(ByVal measurementName As String, Optional ByVal category As String, Optional ByVal options As MeasurementOptions)
End Sub

''' <summary>
''' 計測を終了します
''' </summary>
''' <param name="measurementName">計測名</param>
''' <param name="options">終了オプション（オプション）</param>
''' <returns>計測結果</returns>
Public Function Stop(ByVal measurementName As String, Optional ByVal options As StopOptions) As MeasurementResult
End Function

''' <summary>
''' 指定した計測の結果を取得します
''' </summary>
''' <param name="measurementName">計測名</param>
''' <param name="options">取得オプション（オプション）</param>
''' <returns>計測結果</returns>
Public Function GetMeasurement(ByVal measurementName As String, Optional ByVal options As GetOptions) As MeasurementResult
End Function

''' <summary>
''' すべての計測結果を取得します
''' </summary>
''' <param name="filter">フィルター条件（オプション）</param>
''' <param name="options">取得オプション（オプション）</param>
''' <returns>計測結果のコレクション</returns>
Public Function GetAllMeasurements(Optional ByVal filter As String, Optional ByVal options As GetAllOptions) As Collection
End Function

''' <summary>
''' パフォーマンス統計を取得します
''' </summary>
''' <param name="metricName">メトリクス名</param>
''' <param name="options">統計オプション（オプション）</param>
''' <returns>統計情報</returns>
Public Function GetStatistics(ByVal metricName As String, Optional ByVal options As StatisticsOptions) As PerformanceStatistics
End Function

''' <summary>
''' リソース使用状況を監視します
''' </summary>
''' <param name="resourceType">リソースタイプ</param>
''' <param name="options">監視オプション（オプション）</param>
Public Sub MonitorResource(ByVal resourceType As String, Optional ByVal options As MonitorOptions)
End Sub

''' <summary>
''' パフォーマンスレポートを生成します
''' </summary>
''' <param name="reportType">レポートタイプ</param>
''' <param name="options">レポートオプション（オプション）</param>
''' <returns>レポートデータ</returns>
Public Function GenerateReport(ByVal reportType As String, Optional ByVal options As ReportOptions) As PerformanceReport
End Function

''' <summary>
''' アラート条件を設定します
''' </summary>
''' <param name="metricName">メトリクス名</param>
''' <param name="condition">アラート条件</param>
''' <param name="options">アラートオプション（オプション）</param>
Public Sub SetAlertCondition(ByVal metricName As String, ByVal condition As String, Optional ByVal options As AlertOptions)
End Sub

''' <summary>
''' すべての計測結果をクリアします
''' </summary>
''' <param name="options">クリアオプション（オプション）</param>
Public Sub Clear(Optional ByVal options As ClearOptions)
End Sub

''' <summary>
''' パフォーマンス監視が有効かどうかを取得します
''' </summary>
Public Property Get IsEnabled() As Boolean
End Property

''' <summary>
''' パフォーマンス監視を有効にします
''' </summary>
''' <param name="options">有効化オプション（オプション）</param>
Public Sub Enable(Optional ByVal options As EnableOptions)
End Sub

''' <summary>
''' パフォーマンス監視を無効にします
''' </summary>
''' <param name="options">無効化オプション（オプション）</param>
Public Sub Disable(Optional ByVal options As DisableOptions)
End Sub

''' <summary>
''' 監視設定をエクスポートします
''' </summary>
''' <param name="filePath">出力ファイルパス</param>
''' <param name="options">エクスポートオプション（オプション）</param>
Public Sub ExportSettings(ByVal filePath As String, Optional ByVal options As ExportOptions)
End Sub

''' <summary>
''' 監視設定をインポートします
''' </summary>
''' <param name="filePath">入力ファイルパス</param>
''' <param name="options">インポートオプション（オプション）</param>
Public Sub ImportSettings(ByVal filePath As String, Optional ByVal options As ImportOptions)
End Sub

''' <summary>
''' 監視の状態を検証します
''' </summary>
''' <returns>有効な場合True</returns>
Public Function Validate() As Boolean
End Function

''' <summary>
''' リソースを解放します
''' </summary>
Public Sub Cleanup()
End Sub

================
File: IQueue.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IQueue"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

'@Description("キューデータ構造を管理し、FIFOアクセスとイテレーション機能を提供するインターフェース")

' 定数定義
Private Const DEFAULT_CAPACITY As Long = 1000      ' デフォルトの容量
Private Const MAX_CAPACITY As Long = 1000000       ' 最大容量
Private Const GROWTH_FACTOR As Double = 1.5        ' 成長係数
Private Const SHRINK_THRESHOLD As Double = 0.25    ' 縮小閾値
Private Const MAX_BATCH_SIZE As Long = 1000        ' 最大バッチサイズ
Private Const CLEANUP_INTERVAL_MS As Long = 60000  ' クリーンアップ間隔（1分）

' イベント定義
Public Event ItemEnqueued(ByVal item As Variant, ByVal newCount As Long)
Public Event ItemDequeued(ByVal item As Variant, ByVal newCount As Long)
Public Event QueueCleared(ByVal oldCount As Long)
Public Event CapacityChanged(ByVal oldCapacity As Long, ByVal newCapacity As Long)
Public Event ThresholdReached(ByVal currentCount As Long, ByVal capacity As Long)
Public Event OperationFailed(ByVal operation As String, ByVal reason As String)
Public Event PerformanceAlert(ByVal metricType As String, ByVal currentValue As Double, ByVal threshold As Double)

''' <summary>
''' キューにアイテムを追加します
''' </summary>
''' <param name="item">追加するアイテム</param>
''' <param name="options">追加オプション（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - アイテムの検証
''' - 容量の確認
''' - メモリ使用量の監視
''' - 型の互換性確認
''' </remarks>
Public Sub Enqueue(ByVal item As Variant, Optional ByVal options As EnqueueOptions)
End Sub

''' <summary>
''' キューからアイテムを取り出します
''' </summary>
''' <param name="options">取り出しオプション（オプション）</param>
''' <returns>取り出したアイテム</returns>
''' <remarks>
''' エラー処理要件：
''' - 空キューの処理
''' - タイムアウト処理
''' - 型の一貫性確認
''' </remarks>
Public Function Dequeue(Optional ByVal options As DequeueOptions) As Variant
End Function

''' <summary>
''' 複数のアイテムをバッチでキューに追加します
''' </summary>
''' <param name="items">追加するアイテムのコレクション</param>
''' <param name="options">バッチオプション（オプション）</param>
Public Sub EnqueueBatch(ByVal items As Collection, Optional ByVal options As BatchOptions)
End Sub

''' <summary>
''' 指定した数のアイテムをバッチで取り出します
''' </summary>
''' <param name="count">取り出すアイテム数</param>
''' <param name="options">バッチオプション（オプション）</param>
''' <returns>取り出したアイテムのコレクション</returns>
Public Function DequeueBatch(ByVal count As Long, Optional ByVal options As BatchOptions) As Collection
End Function

''' <summary>
''' キューが空かどうかを確認します
''' </summary>
''' <returns>キューが空の場合True</returns>
Public Function IsEmpty() As Boolean
End Function

''' <summary>
''' キューが満杯かどうかを確認します
''' </summary>
''' <returns>キューが満杯の場合True</returns>
Public Function IsFull() As Boolean
End Function

''' <summary>
''' キュー内のアイテム数を取得します
''' </summary>
Public Property Get Count() As Long
End Property

''' <summary>
''' キューの容量を取得または設定します
''' </summary>
Public Property Get Capacity() As Long
End Property

Public Property Let Capacity(ByVal value As Long)
End Property

''' <summary>
''' キューの先頭アイテムを参照します（取り出さない）
''' </summary>
''' <param name="options">参照オプション（オプション）</param>
''' <returns>先頭アイテム</returns>
Public Function Peek(Optional ByVal options As PeekOptions) As Variant
End Function

''' <summary>
''' キュー内の指定位置のアイテムを参照します
''' </summary>
''' <param name="index">インデックス</param>
''' <returns>指定位置のアイテム</returns>
Public Function PeekAt(ByVal index As Long) As Variant
End Function

''' <summary>
''' キュー内のアイテムを検索します
''' </summary>
''' <param name="predicate">検索条件</param>
''' <returns>条件に一致するアイテムのコレクション</returns>
Public Function Search(ByVal predicate As String) As Collection
End Function

''' <summary>
''' キューをクリアします
''' </summary>
''' <param name="options">クリアオプション（オプション）</param>
Public Sub Clear(Optional ByVal options As ClearOptions)
End Sub

''' <summary>
''' キューの内容を配列にコピーします
''' </summary>
''' <returns>キューの内容を含む配列</returns>
Public Function ToArray() As Variant()
End Function

''' <summary>
''' キューの状態を検証します
''' </summary>
''' <returns>有効な場合True</returns>
Public Function Validate() As Boolean
End Function

''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
''' <returns>パフォーマンス情報のコレクション</returns>
Public Function GetPerformanceMetrics() As Collection
End Function

''' <summary>
''' リソースを解放します
''' </summary>
Public Sub Cleanup()
End Sub

================
File: IRegexEngine.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IRegexEngine"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

'@Description("正規表現エンジンの機能を提供し、パターンのキャッシュと最適化をサポートするインターフェース")

' 定数定義
Private Const MAX_PATTERN_LENGTH As Long = 1000     ' パターンの最大長
Private Const MAX_INPUT_LENGTH As Long = 1000000    ' 入力文字列の最大長
Private Const DEFAULT_TIMEOUT_MS As Long = 5000     ' デフォルトのタイムアウト時間（5秒）
Private Const MAX_CACHE_SIZE As Long = 100          ' キャッシュの最大サイズ
Private Const MAX_RECURSION_DEPTH As Long = 250     ' 最大再帰深度
Private Const CACHE_DURATION_MS As Long = 300000    ' キャッシュの有効期間（5分）
Private Const MAX_BATCH_SIZE As Long = 1000         ' 最大バッチサイズ
Private Const MAX_PARALLEL_THREADS As Long = 4      ' 最大並列スレッド数
Private Const MAX_HISTORY_ENTRIES As Long = 1000    ' 履歴の最大エントリ数
Private Const BACKUP_INTERVAL_MS As Long = 3600000  ' バックアップ間隔（1時間）

' イベント定義
Public Event PatternCompiled(ByVal pattern As String, ByVal compilationTime As Double)
Public Event MatchFound(ByVal pattern As String, ByVal matchCount As Long, ByVal executionTime As Double)
Public Event TimeoutOccurred(ByVal pattern As String, ByVal inputLength As Long)
Public Event CacheUpdated(ByVal pattern As String, ByVal isCached As Boolean)
Public Event PerformanceAlert(ByVal metricType As String, ByVal currentValue As Double, ByVal threshold As Double)
Public Event SecurityAlert(ByVal alertType As String, ByVal pattern As String)
Public Event ResourceExhausted(ByVal resourceType As String, ByVal currentUsage As Long)
Public Event BatchProcessed(ByVal batchId As String, ByVal successCount As Long, ByVal failureCount As Long)
Public Event PatternValidated(ByVal pattern As String, ByVal isValid As Boolean, ByVal issues As Collection)
Public Event BackupCreated(ByVal backupPath As String)

''' <summary>
''' 正規表現パターンに基づいて文字列を検証します
''' </summary>
''' <param name="pattern">正規表現パターン</param>
''' <param name="text">検証する文字列</param>
''' <param name="options">検証オプション（オプション）</param>
''' <returns>パターンにマッチする場合True</returns>
Public Function Test(ByVal pattern As String, ByVal text As String, Optional ByVal options As RegexOptions) As Boolean
End Function

''' <summary>
''' バッチで複数の文字列を検証します
''' </summary>
''' <param name="pattern">正規表現パターン</param>
''' <param name="texts">検証する文字列のコレクション</param>
''' <param name="options">バッチオプション（オプション）</param>
''' <returns>バッチ処理結果</returns>
Public Function TestBatch(ByVal pattern As String, ByVal texts As Collection, Optional ByVal options As BatchOptions) As BatchResult
End Function

''' <summary>
''' 並列処理で文字列を検証します
''' </summary>
''' <param name="pattern">正規表現パターン</param>
''' <param name="texts">検証する文字列のコレクション</param>
''' <param name="options">並列処理オプション（オプション）</param>
''' <returns>並列処理結果</returns>
Public Function TestParallel(ByVal pattern As String, ByVal texts As Collection, Optional ByVal options As ParallelOptions) As ParallelResult
End Function

''' <summary>
''' 正規表現パターンに基づいて文字列を置換します
''' </summary>
''' <param name="pattern">正規表現パターン</param>
''' <param name="text">対象の文字列</param>
''' <param name="replacement">置換後の文字列</param>
''' <param name="options">置換オプション（オプション）</param>
''' <returns>置換後の文字列</returns>
Public Function Replace(ByVal pattern As String, ByVal text As String, ByVal replacement As String, Optional ByVal options As ReplaceOptions) As String
End Function

''' <summary>
''' 正規表現パターンに基づいて文字列からマッチする部分を抽出します
''' </summary>
''' <param name="pattern">正規表現パターン</param>
''' <param name="text">対象の文字列</param>
''' <param name="options">マッチングオプション（オプション）</param>
''' <returns>マッチング結果のコレクション</returns>
Public Function Match(ByVal pattern As String, ByVal text As String, Optional ByVal options As MatchOptions) As Collection
End Function

''' <summary>
''' 正規表現パターンをコンパイルします
''' </summary>
''' <param name="pattern">正規表現パターン</param>
''' <param name="options">コンパイルオプション（オプション）</param>
''' <returns>コンパイル済みパターンID</returns>
Public Function CompilePattern(ByVal pattern As String, Optional ByVal options As CompileOptions) As String
End Function

''' <summary>
''' コンパイル済みパターンを使用して検証します
''' </summary>
''' <param name="patternId">パターンID</param>
''' <param name="text">検証する文字列</param>
''' <param name="options">検証オプション（オプション）</param>
''' <returns>パターンにマッチする場合True</returns>
Public Function TestCompiled(ByVal patternId As String, ByVal text As String, Optional ByVal options As RegexOptions) As Boolean
End Function

''' <summary>
''' パターンを分割して解析します
''' </summary>
''' <param name="pattern">正規表現パターン</param>
''' <returns>パターン解析結果</returns>
Public Function AnalyzePattern(ByVal pattern As String) As PatternAnalysis
End Function

''' <summary>
''' パターンの最適化を提案します
''' </summary>
''' <param name="pattern">正規表現パターン</param>
''' <returns>最適化提案のコレクション</returns>
Public Function SuggestOptimizations(ByVal pattern As String) As Collection
End Function

''' <summary>
''' パターンを検証します
''' </summary>
''' <param name="pattern">正規表現パターン</param>
''' <param name="options">検証オプション（オプション）</param>
''' <returns>検証結果</returns>
Public Function ValidatePattern(ByVal pattern As String, Optional ByVal options As ValidationOptions) As ValidationResult
End Function

''' <summary>
''' パターンの使用履歴を取得します
''' </summary>
''' <param name="pattern">正規表現パターン</param>
''' <param name="options">履歴オプション（オプション）</param>
''' <returns>使用履歴のコレクション</returns>
Public Function GetPatternHistory(ByVal pattern As String, Optional ByVal options As HistoryOptions) As Collection
End Function

''' <summary>
''' バックアップを作成します
''' </summary>
''' <param name="options">バックアップオプション（オプション）</param>
''' <returns>バックアップファイルのパス</returns>
Public Function CreateBackup(Optional ByVal options As BackupOptions) As String
End Function

''' <summary>
''' バックアップから復元します
''' </summary>
''' <param name="backupPath">バックアップファイルのパス</param>
''' <param name="options">復元オプション（オプション）</param>
''' <returns>成功時True</returns>
Public Function RestoreFromBackup(ByVal backupPath As String, Optional ByVal options As RestoreOptions) As Boolean
End Function

''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
''' <returns>パフォーマンス情報のコレクション</returns>
Public Function GetPerformanceMetrics() As Collection
End Function

''' <summary>
''' キャッシュ統計を取得します
''' </summary>
''' <returns>キャッシュ統計情報</returns>
Public Function GetCacheStatistics() As CacheStatistics
End Function

''' <summary>
''' タイムアウト時間を設定します
''' </summary>
''' <param name="milliseconds">タイムアウト時間（ミリ秒）</param>
Public Property Let TimeoutMilliseconds(ByVal milliseconds As Long)
End Property

''' <summary>
''' タイムアウト時間を取得します
''' </summary>
Public Property Get TimeoutMilliseconds() As Long
End Property

''' <summary>
''' エンジンの状態を検証します
''' </summary>
''' <returns>有効な場合True</returns>
Public Function Validate() As Boolean
End Function

''' <summary>
''' リソースを解放します
''' </summary>
Public Sub Cleanup()
End Sub

================
File: ISleep.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "ISleep"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

'@Description("高精度なスリープ機能とスケジューリングを提供するインターフェース")

' 定数定義
Private Const MIN_SLEEP_MS As Long = 1             ' 最小スリープ時間（ミリ秒）
Private Const MAX_SLEEP_MS As Long = 3600000       ' 最大スリープ時間（1時間）
Private Const TIMER_RESOLUTION_MS As Long = 1       ' タイマー分解能（ミリ秒）
Private Const MAX_RETRIES As Long = 3              ' 最大リトライ回数
Private Const SPIN_THRESHOLD_MS As Long = 15       ' スピンウェイト閾値（ミリ秒）
Private Const DEFAULT_TIMEOUT_MS As Long = 30000   ' デフォルトタイムアウト（30秒）
Private Const MAX_BATCH_SIZE As Long = 100         ' 最大バッチサイズ
Private Const MAX_GROUP_SIZE As Long = 10          ' 最大グループサイズ
Private Const ENERGY_CHECK_INTERVAL_MS As Long = 60000 ' エネルギーチェック間隔（1分）
Private Const CLEANUP_INTERVAL_MS As Long = 300000 ' クリーンアップ間隔（5分）

' イベント定義
Public Event SleepStarted(ByVal duration As Long, ByVal startTime As Date)
Public Event SleepCompleted(ByVal duration As Long, ByVal actualDuration As Double)
Public Event SleepInterrupted(ByVal duration As Long, ByVal elapsedTime As Double)
Public Event TimerResolutionChanged(ByVal oldResolution As Long, ByVal newResolution As Long)
Public Event PerformanceAlert(ByVal metricType As String, ByVal currentValue As Double, ByVal threshold As Double)
Public Event ScheduleRegistered(ByVal scheduleId As String, ByVal nextExecutionTime As Date)
Public Event ResourceStateChanged(ByVal resourceType As String, ByVal state As String)
Public Event BatchCompleted(ByVal batchId As String, ByVal successCount As Long)
Public Event GroupStateChanged(ByVal groupId As String, ByVal state As String)
Public Event EnergyStateChanged(ByVal oldState As String, ByVal newState As String)

''' <summary>
''' 指定された時間だけ実行を停止します
''' </summary>
''' <param name="milliseconds">スリープ時間（ミリ秒）</param>
''' <param name="options">スリープオプション（オプション）</param>
Public Sub Sleep(ByVal milliseconds As Long, Optional ByVal options As SleepOptions)
End Sub

''' <summary>
''' 高精度スリープを実行します
''' </summary>
''' <param name="milliseconds">スリープ時間（ミリ秒）</param>
''' <param name="options">高精度オプション（オプション）</param>
Public Sub HighPrecisionSleep(ByVal milliseconds As Long, Optional ByVal options As PrecisionOptions)
End Sub

''' <summary>
''' スピンウェイトを実行します
''' </summary>
''' <param name="milliseconds">待機時間（ミリ秒）</param>
''' <param name="options">スピンオプション（オプション）</param>
Public Sub SpinWait(ByVal milliseconds As Long, Optional ByVal options As SpinOptions)
End Sub

''' <summary>
''' スリープをスケジュールします
''' </summary>
''' <param name="milliseconds">スリープ時間（ミリ秒）</param>
''' <param name="scheduleTime">スケジュール時刻</param>
''' <param name="options">スケジュールオプション（オプション）</param>
''' <returns>スケジュールID</returns>
Public Function ScheduleSleep(ByVal milliseconds As Long, ByVal scheduleTime As Date, Optional ByVal options As ScheduleOptions) As String
End Function

''' <summary>
''' 定期的なスリープをスケジュールします
''' </summary>
''' <param name="milliseconds">スリープ時間（ミリ秒）</param>
''' <param name="interval">実行間隔（ミリ秒）</param>
''' <param name="options">定期実行オプション（オプション）</param>
''' <returns>スケジュールID</returns>
Public Function ScheduleRecurringSleep(ByVal milliseconds As Long, ByVal interval As Long, Optional ByVal options As RecurringOptions) As String
End Function

''' <summary>
''' スリープパターンを登録します
''' </summary>
''' <param name="pattern">スリープパターン</param>
''' <param name="options">パターンオプション（オプション）</param>
''' <returns>パターンID</returns>
Public Function RegisterPattern(ByVal pattern As SleepPattern, Optional ByVal options As PatternOptions) As String
End Function

''' <summary>
''' バッチスリープを実行します
''' </summary>
''' <param name="durations">スリープ時間のコレクション</param>
''' <param name="options">バッチオプション（オプション）</param>
''' <returns>バッチ実行結果</returns>
Public Function BatchSleep(ByVal durations As Collection, Optional ByVal options As BatchOptions) As BatchResult
End Function

''' <summary>
''' スリープグループを作成します
''' </summary>
''' <param name="name">グループ名</param>
''' <param name="options">グループオプション（オプション）</param>
''' <returns>グループID</returns>
Public Function CreateGroup(ByVal name As String, Optional ByVal options As GroupOptions) As String
End Function

''' <summary>
''' スリープをグループに追加します
''' </summary>
''' <param name="groupId">グループID</param>
''' <param name="milliseconds">スリープ時間（ミリ秒）</param>
''' <param name="options">追加オプション（オプション）</param>
Public Sub AddToGroup(ByVal groupId As String, ByVal milliseconds As Long, Optional ByVal options As AddOptions)
End Sub

''' <summary>
''' スケジュールされたスリープをキャンセルします
''' </summary>
''' <param name="scheduleId">スケジュールID</param>
Public Sub CancelScheduledSleep(ByVal scheduleId As String)
End Sub

''' <summary>
''' 現在のスリープを中断します
''' </summary>
Public Sub Interrupt()
End Sub

''' <summary>
''' エネルギー設定を構成します
''' </summary>
''' <param name="settings">エネルギー設定</param>
Public Sub ConfigureEnergy(ByVal settings As EnergySettings)
End Sub

''' <summary>
''' タイマーの分解能を設定します
''' </summary>
''' <param name="resolution">分解能（ミリ秒）</param>
Public Property Let TimerResolution(ByVal resolution As Long)
End Property

''' <summary>
''' タイマーの分解能を取得します
''' </summary>
Public Property Get TimerResolution() As Long
End Property

''' <summary>
''' スリープ状態を取得します
''' </summary>
Public Property Get State() As SleepState
End Property

''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
''' <returns>パフォーマンス情報のコレクション</returns>
Public Function GetPerformanceMetrics() As Collection
End Function

''' <summary>
''' スケジュール一覧を取得します
''' </summary>
''' <returns>スケジュール情報のコレクション</returns>
Public Function GetSchedules() As Collection
End Function

''' <summary>
''' グループ一覧を取得します
''' </summary>
''' <returns>グループ情報のコレクション</returns>
Public Function GetGroups() As Collection
End Function

''' <summary>
''' エネルギー使用状況を取得します
''' </summary>
''' <returns>エネルギー情報</returns>
Public Function GetEnergyUsage() As EnergyUsage
End Function

''' <summary>
''' スリープの状態を検証します
''' </summary>
''' <returns>有効な場合True</returns>
Public Function Validate() As Boolean
End Function

''' <summary>
''' リソースを解放します
''' </summary>
Public Sub Cleanup()
End Sub

================
File: IStack.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IStack"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredefinedId = False
Attribute VB_Exposed = True
Option Explicit

'@Description("スタックデータ構造を管理し、LIFOアクセスとイテレーション機能を提供するインターフェース")

' 定数定義
Private Const DEFAULT_CAPACITY As Long = 1000      ' デフォルトの容量
Private Const MAX_CAPACITY As Long = 1000000       ' 最大容量
Private Const GROWTH_FACTOR As Double = 1.5        ' 成長係数
Private Const SHRINK_THRESHOLD As Double = 0.25    ' 縮小閾値
Private Const MAX_BATCH_SIZE As Long = 1000        ' 最大バッチサイズ
Private Const CLEANUP_INTERVAL_MS As Long = 60000  ' クリーンアップ間隔（1分）

' イベント定義
Public Event ItemPushed(ByVal item As Variant, ByVal newCount As Long)
Public Event ItemPopped(ByVal item As Variant, ByVal newCount As Long)
Public Event StackCleared(ByVal oldCount As Long)
Public Event CapacityChanged(ByVal oldCapacity As Long, ByVal newCapacity As Long)
Public Event ThresholdReached(ByVal currentCount As Long, ByVal capacity As Long)
Public Event OperationFailed(ByVal operation As String, ByVal reason As String)
Public Event PerformanceAlert(ByVal metricType As String, ByVal currentValue As Double, ByVal threshold As Double)

''' <summary>
''' スタックに要素を追加します
''' </summary>
''' <param name="item">追加する要素</param>
''' <param name="options">追加オプション（オプション）</param>
''' <returns>追加成功時True、スタックが最大数を超えた場合False</returns>
''' <remarks>
''' エラー処理要件：
''' - アイテムの検証
''' - 容量の確認
''' - メモリ使用量の監視
''' - 型の互換性確認
''' </remarks>
Public Function Push(ByVal item As Variant, Optional ByVal options As PushOptions) As Boolean
End Function

''' <summary>
''' スタックから最後の要素を削除して返します
''' </summary>
''' <param name="options">取り出しオプション（オプション）</param>
''' <returns>削除した要素</returns>
''' <remarks>
''' エラー処理要件：
''' - 空スタックの処理
''' - メモリ解放の確認
''' - 型の一貫性確認
''' </remarks>
Public Function Pop(Optional ByVal options As PopOptions) As Variant
End Function

''' <summary>
''' 複数の要素をバッチでスタックに追加します
''' </summary>
''' <param name="items">追加する要素のコレクション</param>
''' <param name="options">バッチオプション（オプション）</param>
''' <returns>追加された要素数</returns>
Public Function PushBatch(ByVal items As Collection, Optional ByVal options As BatchOptions) As Long
End Function

''' <summary>
''' 指定した数の要素をバッチで取り出します
''' </summary>
''' <param name="count">取り出す要素数</param>
''' <param name="options">バッチオプション（オプション）</param>
''' <returns>取り出した要素のコレクション</returns>
Public Function PopBatch(ByVal count As Long, Optional ByVal options As BatchOptions) As Collection
End Function

''' <summary>
''' スタックの最後の要素を削除せずに取得します
''' </summary>
''' <param name="options">参照オプション（オプション）</param>
''' <returns>最後の要素</returns>
Public Function Peek(Optional ByVal options As PeekOptions) As Variant
End Function

''' <summary>
''' スタック内の指定位置の要素を参照します
''' </summary>
''' <param name="index">インデックス</param>
''' <returns>指定位置の要素</returns>
Public Function PeekAt(ByVal index As Long) As Variant
End Function

''' <summary>
''' スタックが空かどうかを確認します
''' </summary>
''' <returns>スタックが空の場合True</returns>
Public Function IsEmpty() As Boolean
End Function

''' <summary>
''' スタックが満杯かどうかを確認します
''' </summary>
''' <returns>スタックが満杯の場合True</returns>
Public Function IsFull() As Boolean
End Function

''' <summary>
''' スタック内の要素数を取得します
''' </summary>
Public Property Get Count() As Long
End Property

''' <summary>
''' スタックの容量を取得または設定します
''' </summary>
Public Property Get Capacity() As Long
End Property

Public Property Let Capacity(ByVal value As Long)
End Property

''' <summary>
''' スタック内の要素を検索します
''' </summary>
''' <param name="predicate">検索条件</param>
''' <returns>条件に一致する要素のコレクション</returns>
Public Function Search(ByVal predicate As String) As Collection
End Function

''' <summary>
''' スタックをクリアします
''' </summary>
''' <param name="options">クリアオプション（オプション）</param>
Public Sub Clear(Optional ByVal options As ClearOptions)
End Sub

''' <summary>
''' スタックの内容を配列にコピーします
''' </summary>
''' <returns>スタックの内容を含む配列</returns>
Public Function ToArray() As Variant()
End Function

''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
''' <returns>パフォーマンス情報のコレクション</returns>
Public Function GetPerformanceMetrics() As Collection
End Function

''' <summary>
''' スタックの状態を検証します
''' </summary>
''' <returns>有効な場合True</returns>
Public Function Validate() As Boolean
End Function

''' <summary>
''' リソースを解放します
''' </summary>
Public Sub Cleanup()
End Sub

================
File: IStackTrace.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IStackTrace"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredefinedId = False
Attribute VB_Exposed = True
Option Explicit

'@Description("スタックトレースの収集、管理、フォーマットを担当するインターフェース")

' 定数定義
Private Const MAX_STACK_DEPTH As Long = 100        ' 最大スタック深度
Private Const MAX_ENTRY_LENGTH As Long = 1024      ' エントリの最大長
Private Const CACHE_DURATION_MS As Long = 60000    ' キャッシュの有効期間（1分）
Private Const MAX_FORMAT_LENGTH As Long = 10240    ' フォーマット後の最大長（10KB）
Private Const DEFAULT_INDENT As Long = 2           ' デフォルトのインデントサイズ

' イベント定義
Public Event StackEntryPushed(ByVal entry As String, ByVal depth As Long)
Public Event StackEntryPopped(ByVal entry As String, ByVal remainingDepth As Long)
Public Event StackCleared()
Public Event MaxDepthReached()
Public Event StackOverflowPrevented(ByVal attemptedEntry As String)
Public Event PerformanceAlert(ByVal metricType As String, ByVal currentValue As Double, ByVal threshold As Double)

''' <summary>
''' スタックにエントリを追加します
''' </summary>
''' <param name="ClassName">クラス名</param>
''' <param name="MethodName">メソッド名</param>
''' <param name="Parameters">パラメータ（オプション）</param>
''' <param name="options">追加オプション（オプション）</param>
''' <returns>追加成功時True、スタックが最大数を超えた場合False</returns>
''' <remarks>
''' エラー処理要件：
''' - パラメータの検証
''' - スタックオーバーフローの防止
''' - メモリ使用量の監視
''' - 循環参照の検出
''' - イベントの適切な発行
''' </remarks>
Public Function PushStackEntry(ByVal ClassName As String, ByVal MethodName As String, Optional ByVal Parameters As Variant, Optional ByVal options As StackEntryOptions) As Boolean
End Function

''' <summary>
''' スタックから最後のエントリを削除して返します
''' </summary>
''' <param name="options">取得オプション（オプション）</param>
''' <returns>最後のエントリ、スタックが空の場合は空文字列</returns>
''' <remarks>
''' エラー処理要件：
''' - 空スタックの処理
''' - メモリ解放の確認
''' - イベントの発行
''' </remarks>
Public Function PopStackEntry(Optional ByVal options As StackEntryOptions) As String
End Function

''' <summary>
''' 現在のスタックトレースを文字列として取得します
''' </summary>
''' <param name="format">フォーマット指定（オプション）</param>
''' <param name="options">取得オプション（オプション）</param>
''' <returns>スタックトレースの文字列表現</returns>
''' <remarks>
''' エラー処理要件：
''' - フォーマットの検証
''' - メモリ使用量の最適化
''' - 長大なスタックの効率的な処理
''' - 特殊文字のエスケープ
''' </remarks>
Public Function GetStackTrace(Optional ByVal format As String, Optional ByVal options As StackTraceOptions) As String
End Function

''' <summary>
''' 現在のスタックの深さを取得します
''' </summary>
''' <returns>スタック内のエントリ数</returns>
Public Function GetStackDepth() As Long
End Function

''' <summary>
''' スタックを空にします
''' </summary>
''' <param name="options">クリアオプション（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - リソースの適切な解放
''' - イベントの発行
''' - 状態の整合性確認
''' </remarks>
Public Sub ClearStack(Optional ByVal options As ClearOptions)
End Sub

''' <summary>
''' スタックが空かどうかを確認します
''' </summary>
''' <returns>スタックが空の場合True</returns>
Public Function IsEmpty() As Boolean
End Function

''' <summary>
''' スタックの最後のエントリを削除せずに取得します
''' </summary>
''' <param name="options">取得オプション（オプション）</param>
''' <returns>最後のエントリ、スタックが空の場合は空文字列</returns>
Public Function Peek(Optional ByVal options As PeekOptions) As String
End Function

''' <summary>
''' スタックの特定位置のエントリを取得します
''' </summary>
''' <param name="index">取得するエントリのインデックス</param>
''' <returns>指定位置のエントリ、範囲外の場合は空文字列</returns>
Public Function GetEntryAt(ByVal index As Long) As String
End Function

''' <summary>
''' スタックの内容を検索します
''' </summary>
''' <param name="searchPattern">検索パターン</param>
''' <param name="options">検索オプション（オプション）</param>
''' <returns>マッチしたエントリのコレクション</returns>
Public Function SearchStack(ByVal searchPattern As String, Optional ByVal options As SearchOptions) As Collection
End Function

''' <summary>
''' スタックの内容をフィルタリングします
''' </summary>
''' <param name="filterExpression">フィルタ式</param>
''' <param name="options">フィルタオプション（オプション）</param>
''' <returns>フィルタリングされたスタックトレース</returns>
Public Function FilterStackTrace(ByVal filterExpression As String, Optional ByVal options As FilterOptions) As String
End Function

''' <summary>
''' スタックトレースをファイルに保存します
''' </summary>
''' <param name="filePath">保存先のファイルパス</param>
''' <param name="options">保存オプション（オプション）</param>
Public Sub SaveToFile(ByVal filePath As String, Optional ByVal options As SaveOptions)
End Sub

''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
''' <returns>パフォーマンス情報のコレクション</returns>
Public Function GetPerformanceMetrics() As Collection
End Function

''' <summary>
''' スタックトレースのフォーマッタを設定します
''' </summary>
''' <param name="formatter">フォーマッタ</param>
Public Property Let StackTraceFormatter(ByVal formatter As IStackTraceFormatter)
End Property

''' <summary>
''' メモリ使用量を最適化します
''' </summary>
Public Sub OptimizeMemoryUsage()
End Sub

''' <summary>
''' スタックトレースの状態を検証します
''' </summary>
''' <returns>有効な場合True</returns>
Public Function Validate() As Boolean
End Function

================
File: IUserNotifier.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IUserNotifier"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

'@Description("ユーザーへの通知機能を提供し、複数の通知チャネルと表示方法をサポートするインターフェース")

' 定数定義
Private Const MAX_MESSAGE_LENGTH As Long = 2048     ' メッセージの最大長
Private Const MAX_TITLE_LENGTH As Long = 256        ' タイトルの最大長
Private Const DEFAULT_TIMEOUT_MS As Long = 30000    ' デフォルトのタイムアウト時間（30秒）
Private Const MAX_RETRY_COUNT As Long = 3           ' 最大リトライ回数
Private Const MIN_DISPLAY_TIME_MS As Long = 3000    ' 最小表示時間（3秒）
Private Const MAX_QUEUED_NOTIFICATIONS As Long = 100 ' 最大キュー通知数

' イベント定義
Public Event NotificationDisplayed(ByVal notificationId As String, ByVal level As ErrorNotificationLevel)
Public Event NotificationClosed(ByVal notificationId As String, ByVal userResponse As VbMsgBoxResult)
Public Event NotificationQueued(ByVal notificationId As String, ByVal queuePosition As Long)
Public Event NotificationTimeout(ByVal notificationId As String)
Public Event StyleChanged(ByVal oldStyle As VbMsgBoxStyle, ByVal newStyle As VbMsgBoxStyle)
Public Event UserInteractionStarted(ByVal notificationId As String)
Public Event UserInteractionCompleted(ByVal notificationId As String, ByVal interactionTime As Long)
Public Event NotificationError(ByVal errorInfo As ErrorInfo)
Public Event ResourceExhausted(ByVal resourceType As String, ByVal currentUsage As Long)

''' <summary>
''' エラー情報をユーザーに通知します
''' </summary>
''' <param name="errorDetail">エラー詳細情報</param>
''' <param name="buttons">表示するボタンの種類（オプション）</param>
''' <param name="title">ダイアログのタイトル（オプション）</param>
''' <param name="options">通知オプション（オプション）</param>
''' <returns>ユーザーの選択結果</returns>
''' <remarks>
''' エラー処理要件：
''' - エラー詳細のNULLチェック
''' - メッセージ長の制限
''' - UI表示失敗時の代替通知手段
''' - ユーザー応答のタイムアウト処理
''' - 多重表示の防止
''' - システムリソースの監視
''' </remarks>
Public Function Notify(ByRef errorDetail As ErrorInfo, _
                      Optional ByVal buttons As VbMsgBoxStyle = vbOKOnly, _
                      Optional ByVal title As String = "エラー", _
                      Optional ByVal options As NotificationOptions) As VbMsgBoxResult
End Function

''' <summary>
''' バッチ通知を実行します
''' </summary>
''' <param name="notifications">通知のコレクション</param>
''' <param name="options">バッチオプション（オプション）</param>
''' <returns>バッチ処理の結果</returns>
Public Function NotifyBatch(ByVal notifications As Collection, Optional ByVal options As BatchNotificationOptions) As NotificationBatchResult
End Function

''' <summary>
''' 通知の表示方法を設定します
''' </summary>
''' <param name="style">通知スタイル</param>
''' <param name="options">スタイルオプション（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - 無効なスタイル値の検出
''' - スタイル変更時の整合性確認
''' - 現在表示中の通知への影響考慮
''' - イベントの適切な発行
''' </remarks>
Public Property Let NotificationStyle(ByVal style As VbMsgBoxStyle, Optional ByVal options As StyleOptions)
End Property

''' <summary>
''' 現在の通知表示方法を取得します
''' </summary>
''' <returns>通知スタイル</returns>
Public Property Get NotificationStyle() As VbMsgBoxStyle
End Property

''' <summary>
''' デフォルトのダイアログタイトルを設定します
''' </summary>
''' <param name="title">タイトル</param>
''' <param name="locale">ロケール（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - タイトル文字列の検証
''' - 長さ制限の確認
''' - 不正な文字の検出
''' - 設定変更の永続化
''' - 多言語対応の確認
''' </remarks>
Public Property Let DefaultTitle(ByVal title As String, Optional ByVal locale As String)
End Property

''' <summary>
''' 現在のデフォルトダイアログタイトルを取得します
''' </summary>
''' <param name="locale">ロケール（オプション）</param>
''' <returns>タイトル</returns>
Public Function GetDefaultTitle(Optional ByVal locale As String) As String
End Function

''' <summary>
''' 通知テンプレートを設定します
''' </summary>
''' <param name="templateName">テンプレート名</param>
''' <param name="template">テンプレート内容</param>
''' <param name="locale">ロケール（オプション）</param>
Public Sub SetNotificationTemplate(ByVal templateName As String, ByVal template As String, Optional ByVal locale As String)
End Sub

''' <summary>
''' 通知テンプレートを取得します
''' </summary>
''' <param name="templateName">テンプレート名</param>
''' <param name="locale">ロケール（オプション）</param>
Public Function GetNotificationTemplate(ByVal templateName As String, Optional ByVal locale As String) As String
End Function

''' <summary>
''' 通知の優先順位を設定します
''' </summary>
''' <param name="notificationId">通知ID</param>
''' <param name="priority">優先順位</param>
Public Sub SetNotificationPriority(ByVal notificationId As String, ByVal priority As ValidationPriority)
End Sub

''' <summary>
''' 通知履歴を取得します
''' </summary>
''' <param name="options">履歴オプション（オプション）</param>
''' <returns>通知履歴のコレクション</returns>
Public Function GetNotificationHistory(Optional ByVal options As HistoryOptions) As Collection
End Function

''' <summary>
''' 通知キューの状態を取得します
''' </summary>
''' <returns>キューの状態情報</returns>
Public Function GetQueueStatus() As NotificationQueueStatus
End Function

''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
''' <returns>パフォーマンス情報のコレクション</returns>
Public Function GetPerformanceMetrics() As Collection
End Function

''' <summary>
''' 通知をキャンセルします
''' </summary>
''' <param name="notificationId">通知ID</param>
Public Sub CancelNotification(ByVal notificationId As String)
End Sub

''' <summary>
''' すべての通知をクリアします
''' </summary>
''' <param name="options">クリアオプション（オプション）</param>
Public Sub ClearAllNotifications(Optional ByVal options As ClearOptions)
End Sub

''' <summary>
''' 通知の状態を検証します
''' </summary>
''' <returns>有効な場合True</returns>
Public Function Validate() As Boolean
End Function

''' <summary>
''' リソースを解放します
''' </summary>
Public Sub Cleanup()
End Sub

================
File: IValidationContext.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IValidationContext"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredefinedId = False
Attribute VB_Exposed = True
Option Explicit

'@Description("バリデーション実行時のコンテキスト情報を管理し、実行状態とリソースを制御するインターフェース")

' 定数定義
Private Const MAX_CONTEXT_ENTRIES As Long = 1000    ' コンテキストエントリの最大数
Private Const MAX_ERROR_LENGTH As Long = 1024       ' エラーメッセージの最大長
Private Const CACHE_TIMEOUT_MS As Long = 300000     ' キャッシュのタイムアウト時間（5分）
Private Const MAX_SNAPSHOT_COUNT As Long = 10       ' 保持する最大スナップショット数

' イベント定義
Public Event ContextChanged(ByVal key As String, ByVal oldValue As Variant, ByVal newValue As Variant)
Public Event ValidationStarted(ByVal validatorId As String, ByVal contextSnapshot As IValidationContext)
Public Event ValidationCompleted(ByVal validatorId As String, ByVal success As Boolean, ByVal results As Collection)
Public Event ValidationProgress(ByVal validatorId As String, ByVal progressPercentage As Long)
Public Event ContextStateChanged(ByVal oldState As ValidationContextState, ByVal newState As ValidationContextState)
Public Event ResourceExhausted(ByVal resourceType As String, ByVal currentUsage As Long)
Public Event CacheUpdated(ByVal key As String, ByVal isCached As Boolean)
Public Event SnapshotCreated(ByVal snapshotId As String)
Public Event ValidationError(ByVal errorInfo As ErrorInfo)

''' <summary>
''' コンテキストデータを設定します
''' </summary>
''' <param name="key">データのキー</param>
''' <param name="value">設定する値</param>
''' <param name="cacheOptions">キャッシュオプション（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - キーの一意性確認
''' - 値の型チェック
''' - メモリ使用量の監視
''' - 無効なキーの検出
''' - キャッシュ制限の確認
''' - 永続化要件の確認
''' 
''' 実装時の注意点：
''' 1. キーは大文字小文字を区別すること
''' 2. 値のディープコピーを保存すること
''' 3. 循環参照を検出すること
''' 4. 変更通知イベントを発行すること
''' 5. キャッシュ戦略を適用すること
''' </remarks>
Public Property Let ContextData(ByVal key As String, ByVal value As Variant, Optional ByVal cacheOptions As ValidationCacheOptions)
End Property

''' <summary>
''' コンテキストデータを取得します
''' </summary>
''' <param name="key">データのキー</param>
''' <returns>格納されている値</returns>
''' <remarks>
''' エラー処理要件：
''' - 存在しないキーの処理
''' - 型の互換性確認
''' - デフォルト値の提供
''' - キャッシュの有効性確認
''' - 読み取りタイムアウトの処理
''' </remarks>
Public Property Get ContextData(ByVal key As String) As Variant
End Property

''' <summary>
''' カスタムエラーメッセージを設定します
''' </summary>
''' <param name="rule">バリデーションルール</param>
''' <param name="message">カスタムメッセージ</param>
''' <param name="messageType">メッセージの種類（情報/警告/エラー）</param>
''' <param name="options">メッセージオプション（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - メッセージの妥当性確認
''' - ルールの存在確認
''' - メッセージの多言語対応
''' - メッセージタイプの検証
''' - メッセージ長の制限
''' - プレースホルダーの検証
''' </remarks>
Public Sub SetCustomErrorMessage(ByVal rule As IValidationRule, ByVal message As String, Optional ByVal messageType As ErrorNotificationLevel = enlError, Optional ByVal options As ValidationMessageOptions)
End Sub

''' <summary>
''' カスタムエラーメッセージを取得します
''' </summary>
''' <param name="rule">バリデーションルール</param>
''' <param name="locale">ロケール（オプション）</param>
''' <returns>カスタムメッセージ（未設定の場合は空文字列）</returns>
Public Function GetCustomErrorMessage(ByVal rule As IValidationRule, Optional ByVal locale As String) As String
End Function

''' <summary>
''' バリデーション優先度を設定します
''' </summary>
''' <param name="rule">バリデーションルール</param>
''' <param name="priority">優先度</param>
''' <remarks>
''' エラー処理要件：
''' - 優先度の範囲チェック
''' - ルールの存在確認
''' - 優先度の整合性確認
''' - 依存関係との整合性確認
''' - 実行中の検証への影響考慮
''' </remarks>
Public Sub SetValidationPriority(ByVal rule As IValidationRule, ByVal priority As ValidationPriority)
End Sub

''' <summary>
''' バリデーション優先度を取得します
''' </summary>
''' <param name="rule">バリデーションルール</param>
''' <returns>優先度（未設定の場合はvpNormal）</returns>
Public Function GetValidationPriority(ByVal rule As IValidationRule) As ValidationPriority
End Function

''' <summary>
''' コンテキストをクリアします
''' </summary>
''' <param name="options">クリアオプション（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - リソースの適切な解放
''' - 進行中のバリデーションへの影響考慮
''' - 状態の整合性維持
''' - イベントの適切な発行
''' - キャッシュの適切な処理
''' - スナップショットの管理
''' </remarks>
Public Sub Clear(Optional ByVal options As ValidationClearOptions)
End Sub

''' <summary>
''' コンテキストの状態を検証します
''' </summary>
''' <param name="validationLevel">検証レベル（オプション）</param>
''' <returns>有効な場合True</returns>
''' <remarks>
''' エラー処理要件：
''' - データの整合性確認
''' - リソースの状態確認
''' - 循環参照の検出
''' - メモリリークの検出
''' - キャッシュの有効性確認
''' - パフォーマンス指標の確認
''' </remarks>
Public Function Validate(Optional ByVal validationLevel As ValidationLevel = vlNormal) As Boolean
End Function

''' <summary>
''' コンテキストのスナップショットを作成します
''' </summary>
''' <param name="options">スナップショットオプション（オプション）</param>
''' <returns>現在の状態のコピー</returns>
''' <remarks>
''' エラー処理要件：
''' - メモリ使用量の考慮
''' - ディープコピーの実行
''' - 参照の適切な処理
''' - イベントハンドラの適切な複製
''' - スナップショット数の制限
''' - 古いスナップショットの管理
''' </remarks>
Public Function CreateSnapshot(Optional ByVal options As ValidationSnapshotOptions) As IValidationContext
End Function

''' <summary>
''' バリデーションの依存関係を設定します
''' </summary>
''' <param name="dependentRule">依存するルール</param>
''' <param name="requiredRule">必要とされるルール</param>
''' <param name="dependencyType">依存関係の種類（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - 循環依存の検出
''' - ルールの存在確認
''' - 依存関係の整合性確認
''' - 優先度との整合性確認
''' - 実行順序への影響確認
''' </remarks>
Public Sub SetRuleDependency(ByVal dependentRule As IValidationRule, ByVal requiredRule As IValidationRule, Optional ByVal dependencyType As ValidationDependencyType = vdtRequired)
End Sub

''' <summary>
''' バリデーションの実行順序を取得します
''' </summary>
''' <param name="optimizationStrategy">最適化戦略（オプション）</param>
''' <returns>実行順序に並べられたルールのコレクション</returns>
''' <remarks>
''' エラー処理要件：
''' - 循環依存のチェック
''' - 優先度の考慮
''' - 依存関係の解決
''' - 実行順序の最適化
''' - パフォーマンスの考慮
''' </remarks>
Public Function GetExecutionOrder(Optional ByVal optimizationStrategy As ValidationOptimizationStrategy = vosDefault) As Collection
End Function

''' <summary>
''' バリデーション結果をマージします
''' </summary>
''' <param name="results">マージする結果のコレクション</param>
''' <param name="options">マージオプション（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - 結果の整合性確認
''' - 重複の処理
''' - コンフリクトの解決
''' - メモリ使用量の最適化
''' - 優先順位の考慮
''' - イベントの発行
''' </remarks>
Public Sub MergeResults(ByVal results As Collection, Optional ByVal options As ValidationMergeOptions)
End Sub

''' <summary>
''' バリデーションの進行状況を取得します
''' </summary>
''' <returns>進行状況（0-100）</returns>
Public Property Get Progress() As Long
End Property

''' <summary>
''' バリデーションのキャンセル状態を設定/取得します
''' </summary>
Public Property Get IsCancellationRequested() As Boolean
End Property

Public Property Let IsCancellationRequested(ByVal value As Boolean)
End Property

''' <summary>
''' コンテキストの状態を取得します
''' </summary>
''' <returns>現在の状態</returns>
Public Property Get State() As ValidationContextState
End Property

''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
''' <returns>パフォーマンス情報のコレクション</returns>
Public Function GetPerformanceMetrics() As Collection
End Function

''' <summary>
''' リソース使用状況を取得します
''' </summary>
''' <returns>リソース使用情報のコレクション</returns>
Public Function GetResourceUsage() As Collection
End Function

''' <summary>
''' 非同期バリデーションをサポートしているかどうかを取得します
''' </summary>
Public Property Get SupportsAsyncValidation() As Boolean
End Property

''' <summary>
''' キャッシュ戦略を設定します
''' </summary>
''' <param name="strategy">キャッシュ戦略</param>
Public Property Let CacheStrategy(ByVal strategy As IValidationCacheStrategy)
End Property

================
File: IValidationGroup.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IValidationGroup"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredefinedId = False
Attribute VB_Exposed = True
Option Explicit

'@Description("複数のバリデーターをグループ化し、実行順序と依存関係を管理するインターフェース")

' イベント定義
Public Event GroupValidationStarted(ByVal groupName As String, ByVal context As IValidationContext)
Public Event GroupValidationCompleted(ByVal groupName As String, ByVal success As Boolean, ByVal results As Collection)
Public Event ValidatorAdded(ByVal validator As IValidator)
Public Event ValidatorRemoved(ByVal validator As IValidator)
Public Event GroupDependencyChanged(ByVal dependentGroup As IValidationGroup)
Public Event ExecutionOrderChanged(ByVal newOrder As Long)
Public Event ValidationError(ByVal errorInfo As ErrorInfo)
Public Event GroupStateChanged(ByVal groupName As String, ByVal newState As ValidationGroupState)

' 定数定義
Private Const MAX_VALIDATORS As Long = 100  ' 1グループあたりの最大バリデーター数

''' <summary>
''' グループ名を設定します
''' </summary>
''' <remarks>
''' エラー処理要件：
''' - 名前の一意性確認
''' - 無効な文字の検出
''' - 長さ制限の確認
''' - 既存の処理への影響考慮
''' </remarks>
Public Property Let GroupName(ByVal value As String)
End Property

''' <summary>
''' グループ名を取得します
''' </summary>
Public Property Get GroupName() As String
End Property

''' <summary>
''' グループの優先順位を設定します
''' </summary>
''' <remarks>
''' エラー処理要件：
''' - 優先順位の範囲チェック
''' - グループ間の整合性確認
''' - 実行中の検証への影響考慮
''' </remarks>
Public Property Let Priority(ByVal value As Long)
End Property

''' <summary>
''' グループの優先順位を取得します
''' </summary>
Public Property Get Priority() As Long
End Property

''' <summary>
''' バリデーターを追加します
''' </summary>
''' <param name="validator">追加するバリデーター</param>
''' <remarks>
''' エラー処理要件：
''' - バリデーターの有効性確認
''' - 重複チェック
''' - メモリ使用量の監視
''' - グループ内の整合性確認
''' - 最大バリデーター数の制限
''' - バリデーター間の依存関係確認
''' - イベントの適切な発行
''' </remarks>
Public Sub AddValidator(ByVal validator As IValidator)
End Sub

''' <summary>
''' バリデーターを削除します
''' </summary>
''' <param name="validator">削除するバリデーター</param>
''' <remarks>
''' エラー処理要件：
''' - 存在確認
''' - リソースの解放
''' - 依存関係の更新
''' - 実行中の検証への影響考慮
''' - イベントの適切な発行
''' </remarks>
Public Sub RemoveValidator(ByVal validator As IValidator)
End Sub

''' <summary>
''' グループ全体の検証を実行します
''' </summary>
''' <param name="context">バリデーションコンテキスト</param>
''' <returns>すべてのバリデーターが成功した場合True</returns>
''' <remarks>
''' エラー処理要件：
''' - 部分的な失敗の処理
''' - エラー情報の集約
''' - パフォーマンスの最適化
''' - タイムアウト処理
''' - 非同期実行のサポート
''' - キャンセル処理
''' - イベントの適切な発行
''' </remarks>
Public Function ValidateGroup(ByVal context As IValidationContext) As Boolean
End Function

''' <summary>
''' グループの依存関係を設定します
''' </summary>
''' <param name="dependentGroup">依存するグループ</param>
''' <remarks>
''' エラー処理要件：
''' - 循環依存の検出
''' - グループの存在確認
''' - 依存関係の整合性確認
''' - 実行順序との整合性確認
''' - イベントの適切な発行
''' </remarks>
Public Sub SetGroupDependency(ByVal dependentGroup As IValidationGroup)
End Sub

''' <summary>
''' グループの検証順序を設定します
''' </summary>
''' <param name="order">実行順序（1から開始）</param>
''' <remarks>
''' エラー処理要件：
''' - 順序の一意性確認
''' - 範囲チェック
''' - 依存関係との整合性確認
''' - 実行中の検証への影響考慮
''' - イベントの適切な発行
''' </remarks>
Public Sub SetExecutionOrder(ByVal order As Long)
End Sub

''' <summary>
''' グループの検証結果を取得します
''' </summary>
''' <returns>検証結果のコレクション</returns>
''' <remarks>
''' エラー処理要件：
''' - 結果の整合性確認
''' - メモリ使用量の最適化
''' - エラー情報の集約
''' - 結果のフィルタリング
''' - 結果の優先順位付け
''' </remarks>
Public Function GetGroupValidationResults() As Collection
End Function

''' <summary>
''' グループのメタデータを設定します
''' </summary>
''' <param name="key">メタデータのキー</param>
''' <param name="value">メタデータの値</param>
''' <remarks>
''' エラー処理要件：
''' - キーの一意性確認
''' - 値の型チェック
''' - メモリ使用量の監視
''' - キーの命名規則確認
''' - 値の永続化要件確認
''' </remarks>
Public Sub SetMetadata(ByVal key As String, ByVal value As Variant)
End Sub

''' <summary>
''' グループのメタデータを取得します
''' </summary>
''' <param name="key">メタデータのキー</param>
''' <returns>メタデータの値</returns>
Public Function GetMetadata(ByVal key As String) As Variant
End Function

''' <summary>
''' グループの状態を取得します
''' </summary>
''' <returns>現在の状態</returns>
''' <remarks>
''' エラー処理要件：
''' - 状態の整合性確認
''' - 遷移履歴の管理
''' - イベントの適切な発行
''' </remarks>
Public Property Get State() As ValidationGroupState
End Property

''' <summary>
''' グループの検証をキャンセルします
''' </summary>
''' <remarks>
''' エラー処理要件：
''' - 実行状態の確認
''' - リソースの適切な解放
''' - 依存グループへの影響考慮
''' - イベントの適切な発行
''' </remarks>
Public Sub CancelValidation()
End Sub

''' <summary>
''' グループの検証を一時停止します
''' </summary>
''' <remarks>
''' エラー処理要件：
''' - 実行状態の確認
''' - 中間状態の保存
''' - リソースの維持
''' - イベントの適切な発行
''' </remarks>
Public Sub PauseValidation()
End Sub

''' <summary>
''' グループの検証を再開します
''' </summary>
''' <remarks>
''' エラー処理要件：
''' - 状態の復元確認
''' - リソースの再確保
''' - 依存関係の再検証
''' - イベントの適切な発行
''' </remarks>
Public Sub ResumeValidation()
End Sub

''' <summary>
''' グループの進捗状況を取得します
''' </summary>
''' <returns>進捗率（0-100）</returns>
Public Property Get Progress() As Long
End Property

''' <summary>
''' グループのバリデーターをフィルタリングします
''' </summary>
''' <param name="criteria">フィルタリング条件</param>
''' <returns>フィルタリングされたバリデーターのコレクション</returns>
''' <remarks>
''' エラー処理要件：
''' - 条件式の構文検証
''' - パフォーマンスの最適化
''' - メモリ使用量の監視
''' - 結果の整合性確認
''' </remarks>
Public Function FilterValidators(ByVal criteria As String) As Collection
End Function

================
File: IValidationRule.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IValidationRule"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

'@Description("個別のバリデーションルールを定義し、値の検証とエラー情報の管理を行うインターフェース")

' 定数定義
Private Const MAX_ERROR_LENGTH As Long = 1024        ' エラーメッセージの最大長
Private Const MAX_METADATA_ENTRIES As Long = 100     ' メタデータエントリの最大数
Private Const CACHE_DURATION_MS As Long = 60000      ' キャッシュの有効期間（1分）
Private Const DEFAULT_TIMEOUT_MS As Long = 5000      ' デフォルトのタイムアウト時間（5秒）

' イベント定義
Public Event ValidationStarted(ByVal value As Variant, ByVal context As IValidationContext)
Public Event ValidationCompleted(ByVal value As Variant, ByVal success As Boolean, ByVal executionTime As Double)
Public Event ValidationError(ByVal errorInfo As ErrorInfo)
Public Event CacheUpdated(ByVal cacheKey As String, ByVal isCached As Boolean)
Public Event PerformanceAlert(ByVal metricType As String, ByVal currentValue As Double, ByVal threshold As Double)

''' <summary>
''' 値の妥当性を検証します
''' </summary>
''' <param name="value">検証する値</param>
''' <param name="context">検証コンテキスト（オプション）</param>
''' <param name="options">検証オプション（オプション）</param>
''' <returns>妥当な場合True</returns>
''' <remarks>
''' エラー処理要件：
''' - 入力値のNULLチェック
''' - データ型の互換性確認
''' - メモリ制限の考慮
''' - 検証ルールの整合性確認
''' - タイムアウト処理
''' - キャッシュの活用
''' 
''' 実装時の注意点：
''' 1. 検証失敗時は必ずErrorMessageを設定すること
''' 2. パフォーマンスに影響を与える検証は最後に実行すること
''' 3. 副作用を発生させないこと
''' 4. メトリクスを収集すること
''' 5. イベントを適切に発行すること
''' </remarks>
Public Function Validate(ByVal value As Variant, Optional ByVal context As IValidationContext, Optional ByVal options As ValidationOptions) As Boolean
End Function

''' <summary>
''' 検証エラーメッセージを取得します
''' </summary>
''' <param name="locale">ロケール（オプション）</param>
''' <returns>エラーメッセージ</returns>
''' <remarks>
''' エラー処理要件：
''' - メッセージの初期化状態確認
''' - 文字列長の制限
''' - 特殊文字のエスケープ
''' - 多言語対応
''' - テンプレートの適用
''' 
''' 実装時の注意点：
''' 1. エラーがない場合は空文字列を返すこと
''' 2. メッセージは具体的で理解しやすい内容にすること
''' 3. 機密情報を含めないこと
''' 4. フォーマット指定子を適切に使用すること
''' 5. メッセージの一貫性を保つこと
''' </remarks>
Public Function GetErrorMessage(Optional ByVal locale As String) As String
End Function

''' <summary>
''' 検証ルールのメタデータを設定します
''' </summary>
''' <param name="key">メタデータのキー</param>
''' <param name="value">メタデータの値</param>
Public Sub SetMetadata(ByVal key As String, ByVal value As Variant)
End Sub

''' <summary>
''' 検証ルールのメタデータを取得します
''' </summary>
''' <param name="key">メタデータのキー</param>
Public Function GetMetadata(ByVal key As String) As Variant
End Function

''' <summary>
''' 検証ルールの説明を取得します
''' </summary>
''' <param name="locale">ロケール（オプション）</param>
Public Function GetDescription(Optional ByVal locale As String) As String
End Function

''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
Public Function GetPerformanceMetrics() As Collection
End Function

''' <summary>
''' キャッシュ戦略を設定します
''' </summary>
''' <param name="strategy">キャッシュ戦略</param>
Public Property Let CacheStrategy(ByVal strategy As IValidationCacheStrategy)
End Property

''' <summary>
''' タイムアウト時間を設定します
''' </summary>
''' <param name="milliseconds">タイムアウト時間（ミリ秒）</param>
Public Property Let TimeoutMilliseconds(ByVal milliseconds As Long)
End Property

''' <summary>
''' タイムアウト時間を取得します
''' </summary>
Public Property Get TimeoutMilliseconds() As Long
End Property

''' <summary>
''' 検証ルールの状態を検証します
''' </summary>
''' <returns>有効な場合True</returns>
Public Function Validate() As Boolean
End Function

''' <summary>
''' リソースを解放します
''' </summary>
Public Sub Cleanup()
End Sub

================
File: IValidator.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IValidator"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

'@Description("バリデーションの実行と結果管理を担当するインターフェース")

' 定数定義
Private Const MAX_RULES As Long = 100               ' 最大ルール数
Private Const MAX_ERROR_LENGTH As Long = 1024       ' エラーメッセージの最大長
Private Const CACHE_DURATION_MS As Long = 300000    ' キャッシュの有効期間（5分）
Private Const DEFAULT_TIMEOUT_MS As Long = 30000    ' デフォルトのタイムアウト時間（30秒）
Private Const MAX_BATCH_SIZE As Long = 1000         ' 最大バッチサイズ
Private Const MIN_MEMORY_THRESHOLD As Long = 102400 ' 最小メモリ閾値（100KB）

' イベント定義
Public Event ValidationStarted(ByVal value As Variant, ByVal context As IValidationContext)
Public Event ValidationCompleted(ByVal value As Variant, ByVal success As Boolean, ByVal metrics As ValidationMetrics)
Public Event RuleExecutionStarted(ByVal rule As IValidationRule, ByVal context As IValidationContext)
Public Event RuleExecutionCompleted(ByVal rule As IValidationRule, ByVal success As Boolean, ByVal executionTime As Double)
Public Event ValidationError(ByVal errorInfo As ErrorInfo, ByVal rule As IValidationRule)
Public Event ResourceExhausted(ByVal resourceType As String, ByVal currentUsage As Long)
Public Event CacheUpdated(ByVal cacheKey As String, ByVal isCached As Boolean)
Public Event PerformanceAlert(ByVal metricType As String, ByVal currentValue As Double, ByVal threshold As Double)

''' <summary>
''' 値の妥当性を検証します
''' </summary>
''' <param name="value">検証する値</param>
''' <param name="context">検証コンテキスト（オプション）</param>
''' <param name="options">検証オプション（オプション）</param>
''' <returns>妥当な場合True</returns>
''' <remarks>
''' エラー処理要件：
''' - 入力値のNULLチェック
''' - データ型の互換性確認
''' - メモリ制限の考慮
''' - 再帰的な検証の制御
''' - 検証ルールの整合性確認
''' - タイムアウト処理
''' - キャッシュの活用
''' 
''' 実装時の注意点：
''' 1. 検証失敗時は必ずErrorMessageを設定すること
''' 2. 複数のエラーが検出された場合は適切に集約すること
''' 3. パフォーマンスに影響を与える検証は最後に実行すること
''' 4. 副作用を発生させないこと
''' 5. メトリクスを収集すること
''' </remarks>
Public Function Validate(ByVal value As Variant, Optional ByVal context As IValidationContext, Optional ByVal options As ValidationOptions) As Boolean
End Function

''' <summary>
''' バッチ検証を実行します
''' </summary>
''' <param name="values">検証する値のコレクション</param>
''' <param name="options">バッチオプション（オプション）</param>
''' <returns>バッチ検証結果</returns>
Public Function ValidateBatch(ByVal values As Collection, Optional ByVal options As BatchValidationOptions) As ValidationBatchResult
End Function

''' <summary>
''' 検証エラーメッセージを取得します
''' </summary>
''' <param name="locale">ロケール（オプション）</param>
''' <returns>エラーメッセージ</returns>
''' <remarks>
''' エラー処理要件：
''' - メッセージの初期化状態確認
''' - 文字列長の制限
''' - 特殊文字のエスケープ
''' - 多言語対応
''' - テンプレートの適用
''' 
''' 実装時の注意点：
''' 1. エラーがない場合は空文字列を返すこと
''' 2. メッセージは具体的で理解しやすい内容にすること
''' 3. 機密情報を含めないこと
''' 4. フォーマット指定子を適切に使用すること
''' 5. メッセージの一貫性を保つこと
''' </remarks>
Public Function GetErrorMessage(Optional ByVal locale As String) As String
End Function

''' <summary>
''' 検証ルールを追加します
''' </summary>
''' <param name="rule">検証ルール</param>
''' <param name="priority">優先度（オプション）</param>
''' <param name="options">追加オプション（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - ルールの妥当性確認
''' - 重複ルールの検出
''' - ルール間の依存関係確認
''' - メモリ使用量の監視
''' - 最大ルール数の制限
''' - 優先度の検証
''' </remarks>
Public Sub AddRule(ByVal rule As IValidationRule, Optional ByVal priority As ValidationPriority = vpNormal, Optional ByVal options As RuleOptions)
End Sub

''' <summary>
''' 検証ルールを削除します
''' </summary>
''' <param name="rule">削除するルール</param>
''' <param name="options">削除オプション（オプション）</param>
Public Sub RemoveRule(ByVal rule As IValidationRule, Optional ByVal options As RuleRemovalOptions)
End Sub

''' <summary>
''' 検証ルールをクリアします
''' </summary>
''' <param name="options">クリアオプション（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - リソースの適切な解放
''' - 実行中の検証への影響考慮
''' - 状態の整合性維持
''' - キャッシュの更新
''' </remarks>
Public Sub ClearRules(Optional ByVal options As ClearOptions)
End Sub

''' <summary>
''' 検証の詳細結果を取得します
''' </summary>
''' <param name="options">取得オプション（オプション）</param>
''' <returns>検証結果の詳細情報</returns>
''' <remarks>
''' エラー処理要件：
''' - 結果の初期化状態確認
''' - メモリ使用量の考慮
''' - 大量データの効率的な処理
''' - キャッシュの活用
''' </remarks>
Public Function GetValidationDetails(Optional ByVal options As ValidationDetailsOptions) As ValidationDetails
End Function

''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
''' <returns>パフォーマンス情報のコレクション</returns>
Public Function GetPerformanceMetrics() As Collection
End Function

''' <summary>
''' キャッシュ戦略を設定します
''' </summary>
''' <param name="strategy">キャッシュ戦略</param>
Public Property Let CacheStrategy(ByVal strategy As IValidationCacheStrategy)
End Property

''' <summary>
''' タイムアウト時間を設定します
''' </summary>
''' <param name="milliseconds">タイムアウト時間（ミリ秒）</param>
Public Property Let TimeoutMilliseconds(ByVal milliseconds As Long)
End Property

''' <summary>
''' タイムアウト時間を取得します
''' </summary>
Public Property Get TimeoutMilliseconds() As Long
End Property

''' <summary>
''' バリデーターの状態を検証します
''' </summary>
''' <returns>有効な場合True</returns>
Public Function Validate() As Boolean
End Function

''' <summary>
''' リソースを解放します
''' </summary>
Public Sub Cleanup()
End Sub

''' <summary>
''' メタデータを設定します
''' </summary>
''' <param name="key">メタデータのキー</param>
''' <param name="value">メタデータの値</param>
Public Sub SetMetadata(ByVal key As String, ByVal value As Variant)
End Sub

''' <summary>
''' メタデータを取得します
''' </summary>
''' <param name="key">メタデータのキー</param>
Public Function GetMetadata(ByVal key As String) As Variant
End Function

================
File: security/clsCriticalSectionLock.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "clsCriticalSectionLock"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements ILock

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "clsCriticalSectionLock"

' ======================
' Win32 API宣言
' ======================
Private Type CRITICAL_SECTION
    DebugInfo As Long
    LockCount As Long
    RecursionCount As Long
    OwningThread As Long
    LockSemaphore As Long
    SpinCount As Long
End Type

Private Declare Sub InitializeCriticalSection Lib "kernel32" (lpCriticalSection As CRITICAL_SECTION)
Private Declare Sub DeleteCriticalSection Lib "kernel32" (lpCriticalSection As CRITICAL_SECTION)
Private Declare Sub EnterCriticalSection Lib "kernel32" (lpCriticalSection As CRITICAL_SECTION)
Private Declare Function TryEnterCriticalSection Lib "kernel32" (lpCriticalSection As CRITICAL_SECTION) As Long
Private Declare Sub LeaveCriticalSection Lib "kernel32" (lpCriticalSection As CRITICAL_SECTION)
Private Declare Function GetTickCount Lib "kernel32" () As Long

' ======================
' メンバ変数
' ======================
Private criticalSection As CRITICAL_SECTION
Private isLocked As Boolean
Private isInitialized As Boolean

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    InitializeCriticalSection criticalSection
    isInitialized = True
    isLocked = False
End Sub

Private Sub Class_Terminate()
    If isLocked Then ILock_Release
    If isInitialized Then DeleteCriticalSection criticalSection
End Sub

' ======================
' ILock実装
' ======================
Private Function ILock_Acquire(Optional ByVal timeout As Long = -1) As Boolean
    On Error GoTo ErrorHandler
    
    If Not isInitialized Then Exit Function
    
    ' タイムアウトが指定されていない場合は即座に取得を試みる
    If timeout = -1 Then
        EnterCriticalSection criticalSection
        isLocked = True
        ILock_Acquire = True
        Exit Function
    End If
    
    ' タイムアウト付きの取得
    Dim startTime As Long
    startTime = GetTickCount()
    
    Do
        If TryEnterCriticalSection(criticalSection) <> 0 Then
            isLocked = True
            ILock_Acquire = True
            Exit Function
        End If
        
        ' タイムアウトチェック
        If timeout > 0 Then
            If GetTickCount() - startTime >= timeout Then Exit Do
        End If
        
        DoEvents ' 他のスレッドに実行機会を与える
    Loop
    
    Exit Function

ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = ErrLockAcquireFailed
        .Description = "クリティカルセクションの取得に失敗しました: " & Err.Description
        .Category = ECSystem
        .Source = MODULE_NAME
        .ProcedureName = "ILock_Acquire"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errInfo
End Function

Private Sub ILock_Release()
    If Not isLocked Then Exit Sub
    
    On Error GoTo ErrorHandler
    
    LeaveCriticalSection criticalSection
    isLocked = False
    Exit Sub

ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = ErrLockReleaseFailed
        .Description = "クリティカルセクションの解放に失敗しました: " & Err.Description
        .Category = ECSystem
        .Source = MODULE_NAME
        .ProcedureName = "ILock_Release"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errInfo
End Sub

' ======================
' テストサポート機能
' ======================
#If DEBUG Then
    Public Function ValidateLockState() As Boolean
        ValidateLockState = isLocked
    End Function
    
    Public Sub ForceRelease()
        If isLocked Then ILock_Release
    End Sub
    
    Public Function IsInitialized() As Boolean
        IsInitialized = isInitialized
    End Function
#End If

================
File: security/clsCrypto.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "clsCrypto"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' 定数定義
Private Const MS_ENHANCED_PROV As String = "Microsoft Enhanced Cryptographic Provider v1.0"
Private Const PROV_RSA_FULL As Long = 1
Private Const CRYPT_VERIFYCONTEXT As Long = &HF0000000
Private Const CALG_SHA_256 As Long = &H800C
Private Const HP_HASHVAL As Long = 2
Private Const HP_HASHSIZE As Long = 4

' メンバ変数
Private mCryptoProvider As LongPtr
Private mInitialized As Boolean
Private mAesKey As LongPtr
Private mPerformanceMonitor As IPerformanceMonitor
Private mLock As ILock
Private mCryptography As ICryptography
Private mKeyDerivation As IKeyDerivationStrategy

' ======================
' コンストラクタ
' ======================
Public Sub Initialize(ByVal performanceMonitor As IPerformanceMonitor, _
                     ByVal lock As ILock, _
                     ByVal cryptography As ICryptography, _
                     ByVal keyDerivation As IKeyDerivationStrategy)
    Set mPerformanceMonitor = performanceMonitor
    Set mLock = lock
    Set mCryptography = cryptography
    Set mKeyDerivation = keyDerivation
    InitializeCrypto
End Sub

Private Sub Class_Initialize()
    ' 依存性は Initialize メソッドで注入される
End Sub

Private Sub Class_Terminate()
    If mInitialized Then
        If mAesKey <> 0 Then
            CryptDestroyKey mAesKey
        End If
        CryptReleaseContext mCryptoProvider, 0
    End If
    Set mPerformanceMonitor = Nothing
    Set mLock = Nothing
End Sub

' ======================
' 内部メソッド
' ======================
Private Sub InitializeCrypto()
    If mCryptography.CryptAcquireContext(vbNullString, MS_ENHANCED_PROV, PROV_RSA_FULL, CRYPT_VERIFYCONTEXT) Then
        mInitialized = True
    Else
        Dim errInfo As ErrorInfo
        With errInfo
            .Code = ErrCryptoProviderInitFailed
            .Description = "暗号化プロバイダーの初期化に失敗しました。"
            .Category = ECSecurity
            .Source = "clsCrypto"
            .ProcedureName = "InitializeCrypto"
            .StackTrace = modStackTrace.GetStackTrace()
            .OccurredAt = Now
        End With
        modError.HandleError errInfo
    End If
End Sub

Private Function DeriveAESKey(ByVal key As String) As Boolean
    On Error GoTo ErrorHandler
    
    mLock.AcquireLock
    
    ' 既存のキーを破棄
    If mAesKey <> 0 Then
        CryptDestroyKey mAesKey
        mAesKey = 0
    End If
    
    ' キー導出戦略を使用してキーを生成
    Dim salt() As Byte
    ReDim salt(0 To 15)  ' 16バイトのソルト
    Dim derivedKey() As Byte
    derivedKey = mKeyDerivation.DeriveKey(key, salt, 10000)
    
    ' 導出されたキーからAESキーを生成
    If Not mCryptography.CryptDeriveKey(CALG_AES_256, CRYPT_EXPORTABLE) Then
        GoTo Cleanup
    End If
    DeriveAESKey = True
    
Cleanup:
    mLock.ReleaseLock
    Exit Function
ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = ErrCryptoKeyDerivationFailed
        .Description = "AESキーの生成に失敗しました。"
        .Category = ECSecurity
        .Source = "clsCrypto"
        .ProcedureName = "DeriveAESKey"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errInfo
    DeriveAESKey = False
    Resume Cleanup
End Function

' ======================
' パブリックメソッド
' ======================
Public Function EncryptString(ByVal plainText As String, ByVal key As String) As String
    mPerformanceMonitor.StartMeasurement "String Encryption"
    
    mLock.AcquireLock
    
    If Not mInitialized Then
        Dim errInfo As ErrorInfo
        With errInfo
            .Code = ErrCryptoNotInitialized
            .Description = "暗号化プロバイダーが初期化されていません。"
            .Category = ECSecurity
            .Source = "clsCrypto"
            .ProcedureName = "EncryptString"
            .StackTrace = modStackTrace.GetStackTrace()
            .OccurredAt = Now
        End With
        modError.HandleError errInfo
        mPerformanceMonitor.EndMeasurement "String Encryption"
        mLock.ReleaseLock
        Exit Function
    End If
    
    ' キーの検証
    If Len(key) = 0 Then
        Dim errInfo As ErrorInfo
        With errInfo
            .Code = ErrCryptoKeyNotSpecified
            .Description = "空の暗号化キーが指定されました。"
            .Category = ECSecurity
            .Source = "clsCrypto"
            .ProcedureName = "EncryptString"
            .StackTrace = modStackTrace.GetStackTrace()
            .OccurredAt = Now
        End With
        modError.HandleError errInfo
        mPerformanceMonitor.EndMeasurement "String Encryption"
        mLock.ReleaseLock
        Exit Function
    End If
    
    ' AESキーの生成
    If Not DeriveAESKey(key) Then
        mPerformanceMonitor.EndMeasurement "String Encryption"
        mLock.ReleaseLock
        Exit Function
    End If
    
    ' データの準備
    Dim dataLen As Long
    Dim blockSize As Long
    blockSize = 16 ' AESブロックサイズ
    
    ' パディングを含むデータ長を計算
    dataLen = Len(plainText)
    If (dataLen Mod blockSize) <> 0 Then
        dataLen = dataLen + (blockSize - (dataLen Mod blockSize))
    End If
    
    ' バッファの準備
    Dim buffer() As Byte
    ReDim buffer(0 To dataLen - 1)
    CopyMemory buffer(0), ByVal StrPtr(plainText), Len(plainText) * 2
    
    ' 暗号化
    If CryptEncrypt(mAesKey, 0, True, 0, buffer(0), dataLen, dataLen) = 0 Then
        Dim errInfo As ErrorInfo
        With errInfo
            .Code = ErrCryptoEncryptionFailed
            .Description = "データの暗号化に失敗しました。"
            .Category = ECSecurity
            .Source = "clsCrypto"
            .ProcedureName = "EncryptString"
            .StackTrace = modStackTrace.GetStackTrace()
            .OccurredAt = Now
        End With
        modError.HandleError errInfo
        mPerformanceMonitor.EndMeasurement "String Encryption"
        mLock.ReleaseLock
        Exit Function
    End If
    
    Dim result As String
    result = Base64Encode(buffer)
    
    mPerformanceMonitor.EndMeasurement "String Encryption"
    mLock.ReleaseLock
    EncryptString = result
End Function

Public Function DecryptString(ByVal cipherText As String, ByVal key As String) As String
    mPerformanceMonitor.StartMeasurement "String Decryption"
    
mLock.AcquireLock
    If Not mInitialized Then
        Dim errInfo As ErrorInfo
        With errInfo
            .Code = ErrCryptoNotInitialized
            .Description = "暗号化プロバイダーが初期化されていません。"
            .Category = ECSecurity
            .Source = "clsCrypto"
            .ProcedureName = "DecryptString"
            .StackTrace = modStackTrace.GetStackTrace()
            .OccurredAt = Now
        End With
        modError.HandleError errInfo
        mPerformanceMonitor.EndMeasurement "String Decryption"
        mLock.ReleaseLock
        Exit Function
    End If
    
    ' キーの検証
    If Len(key) = 0 Then
        Dim errInfo As ErrorInfo
        With errInfo
            .Code = ErrCryptoKeyNotSpecified
            .Description = "空の暗号化キーが指定されました。"
            .Category = ECSecurity
            .Source = "clsCrypto"
            .ProcedureName = "DecryptString"
            .StackTrace = modStackTrace.GetStackTrace()
            .OccurredAt = Now
        End With
        modError.HandleError errInfo
        mPerformanceMonitor.EndMeasurement "String Decryption"
        mLock.ReleaseLock
        Exit Function
    End If
    
    ' AESキーの生成
    If Not DeriveAESKey(key) Then
        mPerformanceMonitor.EndMeasurement "String Decryption"
        mLock.ReleaseLock
        Exit Function
    End If
    
    ' Base64デコード
    Dim buffer() As Byte
    buffer = Base64Decode(cipherText)
   
     ' データ長の取得
    Dim dataLen As Long
    dataLen = UBound(buffer) - LBound(buffer) + 1
    ' 復号化
    If CryptDecrypt(mAesKey, 0, True, 0, buffer(0), dataLen) = 0 Then
        Dim errInfo As ErrorInfo
        With errInfo
            .Code = ErrCryptoDecryptionFailed
            .Description = "データの復号化に失敗しました。"
            .Category = ECSecurity
            .Source = "clsCrypto"
            .ProcedureName = "DecryptString"
            .StackTrace = modStackTrace.GetStackTrace()
            .OccurredAt = Now
        End With
        modError.HandleError errInfo
        mPerformanceMonitor.EndMeasurement "String Decryption"
        mLock.ReleaseLock
        Exit Function
    End If
    
    Dim result As String
    result = Left$(StrConv(buffer, vbUnicode), dataLen)
    
    mPerformanceMonitor.EndMeasurement "String Decryption"
    mLock.ReleaseLock
    DecryptString = result
End Function

Public Function GenerateHash(ByVal inputString As String) As String
    mPerformanceMonitor.StartMeasurement "Hash Generation"
    mLock.AcquireLock
    
    If Not mInitialized Then
        Dim errInfo As ErrorInfo
        With errInfo
            .Code = ErrCryptoNotInitialized
            .Description = "暗号化プロバイダーが初期化されていません。"
            .Category = ECSecurity
            .Source = "clsCrypto"
            .ProcedureName = "GenerateHash"
            .StackTrace = modStackTrace.GetStackTrace()
            .OccurredAt = Now
        End With
        modError.HandleError errInfo
        mPerformanceMonitor.EndMeasurement "Hash Generation"
        mLock.ReleaseLock
        Exit Function
    End If
    
    Dim hHash As LongPtr
    Dim hashLen As Long
    Dim hashValue() As Byte
    Dim result As String
    
    ' ハッシュオブジェクトの作成
    If modWindowsAPI.CryptCreateHash(mCryptoProvider, CALG_SHA_256, 0, 0, hHash) = 0 Then
        Dim errInfo As ErrorInfo
        With errInfo
            .Code = ErrCryptoHashCreateFailed
            .Description = "ハッシュオブジェクトの作成に失敗しました。"
            .Category = ECSecurity
            .Source = "clsCrypto"
            .ProcedureName = "GenerateHash"
            .StackTrace = modStackTrace.GetStackTrace()
            .OccurredAt = Now
        End With
        modError.HandleError errInfo
        mPerformanceMonitor.EndMeasurement "Hash Generation"
        mLock.ReleaseLock
        Exit Function
    End If
    
    ' データのハッシュ化
    If modWindowsAPI.CryptHashData(hHash, ByVal inputString, Len(inputString), 0) = 0 Then
        modWindowsAPI.CryptDestroyHash hHash
        Dim errInfo As ErrorInfo
        With errInfo
            .Code = ErrCryptoHashDataFailed
            .Description = "データのハッシュ化に失敗しました。"
            .Category = ECSecurity
            .Source = "clsCrypto"
            .ProcedureName = "GenerateHash"
            .StackTrace = modStackTrace.GetStackTrace()
            .OccurredAt = Now
        End With
        modError.HandleError errInfo
        mPerformanceMonitor.EndMeasurement "Hash Generation"
        mLock.ReleaseLock
        Exit Function
    End If
    
    ' ハッシュサイズの取得
    If modWindowsAPI.CryptGetHashParam(hHash, HP_HASHSIZE, hashLen, 4, 0) = 0 Then
        modWindowsAPI.CryptDestroyHash hHash
        Dim errInfo As ErrorInfo
        With errInfo
            .Code = ErrCryptoHashDataFailed
            .Description = "ハッシュサイズの取得に失敗しました。"
            .Category = ECSecurity
            .Source = "clsCrypto"
            .ProcedureName = "GenerateHash"
            .StackTrace = modStackTrace.GetStackTrace()
            .OccurredAt = Now
        End With
        modError.HandleError errInfo
        mPerformanceMonitor.EndMeasurement "Hash Generation"
        mLock.ReleaseLock
        Exit Function
    End If
    
    ' ハッシュ値の取得
    ReDim hashValue(0 To hashLen - 1)
    If modWindowsAPI.CryptGetHashParam(hHash, HP_HASHVAL, hashValue(0), hashLen, 0) = 0 Then
        modWindowsAPI.CryptDestroyHash hHash
        Dim errInfo As ErrorInfo
        With errInfo
            .Code = ErrCryptoHashDataFailed
            .Description = "ハッシュ値の取得に失敗しました。"
            .Category = ECSecurity
            .Source = "clsCrypto"
            .ProcedureName = "GenerateHash"
            .StackTrace = modStackTrace.GetStackTrace()
            .OccurredAt = Now
        End With
        modError.HandleError errInfo
        mPerformanceMonitor.EndMeasurement "Hash Generation"
        mLock.ReleaseLock
        Exit Function
    End If
    
    ' ハッシュオブジェクトの破棄
    modWindowsAPI.CryptDestroyHash hHash
    
    ' バイト配列を16進数文字列に変換
    result = ""
    Dim i As Long
    For i = 0 To hashLen - 1
        result = result & Right$("0" & Hex$(hashValue(i)), 2)
    Next i
    
    mPerformanceMonitor.EndMeasurement "Hash Generation"
    mLock.ReleaseLock
    GenerateHash = result
    
End Function

' ======================
' ユーティリティメソッド
' ======================
Private Function Base64Encode(ByVal text As String) As String
    Dim xmlDoc As Object
    Dim xmlNode As Object
    
    Set xmlDoc = CreateObject("MSXML2.DOMDocument")
    Set xmlNode = xmlDoc.createElement("b64")
    
    xmlNode.DataType = "bin.base64"
    xmlNode.nodeTypedValue = StringToBytes(text)
    
    Base64Encode = xmlNode.text
    
    Set xmlNode = Nothing
    Set xmlDoc = Nothing
End Function

Private Function Base64Decode(ByVal base64 As String) As String
    Dim xmlDoc As Object
    Dim xmlNode As Object
    
    Set xmlDoc = CreateObject("MSXML2.DOMDocument")
    Set xmlNode = xmlDoc.createElement("b64")
    
    xmlNode.DataType = "bin.base64"
    xmlNode.text = base64
    
    Base64Decode = BytesToString(xmlNode.nodeTypedValue)
    
    Set xmlNode = Nothing
    Set xmlDoc = Nothing
End Function

Private Function StringToBytes(ByVal text As String) As Byte()
    Dim bytes() As Byte
    bytes = text
    StringToBytes = bytes
End Function

Private Function BytesToString(ByRef bytes() As Byte) As String
    BytesToString = bytes
End Function

' ======================
' テストサポート機能（開発環境専用）
' 警告: これらのメソッドは開発時のテスト目的でのみ使用し、
' 本番環境では使用しないでください。
' ======================
#If DEBUG Then
    Private Function ValidateProvider() As Boolean
        ' 暗号化プロバイダーの状態を検証（テスト用）
        ValidateProvider = mInitialized And mCryptoProvider <> 0
    End Function
    
    Private Sub ResetProvider()
        ' 暗号化プロバイダーをリセット（テスト用）
        If mInitialized Then
            CryptReleaseContext mCryptoProvider, 0
            mInitialized = False
        End If
        InitializeCrypto
    End Sub
#End If

================
File: security/clsLock.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "clsLock"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' 定数定義
Private Const INFINITE As Long = -1
Private Const WAIT_OBJECT_0 As Long = 0
Private Const ERROR_ALREADY_EXISTS As Long = 183&
Private Const MUTEX_NAME As String = "Global\MyApp_ModCommon_Mutex"

' メンバ変数
Private mMutexHandle As LongPtr
Private mIsLocked As Boolean

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    mMutexHandle = modWindowsAPI.CreateMutex(0&, 0&, MUTEX_NAME)
    mIsLocked = False
End Sub

Private Sub Class_Terminate()
    If mIsLocked Then modWindowsAPI.ReleaseMutex mMutexHandle
    If mMutexHandle <> 0 Then modWindowsAPI.CloseHandle mMutexHandle
End Sub

' ======================
' パブリックメソッド
' ======================
Public Sub AcquireLock()
    If mMutexHandle = 0 Then
        Dim errInfo As ErrorInfo
        With errInfo
            .Code = ErrLockMutexCreateFailed
            .Description = "Mutexの作成に失敗しました。"
            .Category = ECSystem
            .Source = "clsLock"
            .ProcedureName = "AcquireLock"
            .StackTrace = modStackTrace.GetStackTrace()
            .OccurredAt = Now
        End With
        modError.HandleError errInfo
    End If
    
    ' ロックの取得を試みる
    Dim result As Long
    result = modWindowsAPI.WaitForSingleObject(mMutexHandle, INFINITE)
    
    If result = WAIT_OBJECT_0 Then
        mIsLocked = True
    Else
        Dim errInfo As ErrorInfo
        With errInfo
            .Code = ErrLockAcquireFailed
            .Description = "ロックの取得に失敗しました。"
            .Category = ECSystem
            .Source = "clsLock"
            .ProcedureName = "AcquireLock"
            .StackTrace = modStackTrace.GetStackTrace()
            .OccurredAt = Now
        End With
        modError.HandleError errInfo
    End If
End Sub

Public Sub ReleaseLock()
    If mIsLocked Then
        If modWindowsAPI.ReleaseMutex(mMutexHandle) = 0 Then
            Dim errInfo As ErrorInfo
            With errInfo
                .Code = ErrLockReleaseFailed
                .Description = "ロックの解放に失敗しました。"
                .Category = ECSystem
                .Source = "clsLock"
                .ProcedureName = "ReleaseLock"
                .StackTrace = modStackTrace.GetStackTrace()
                .OccurredAt = Now
            End With
            modError.HandleError errInfo
        End If
        mIsLocked = False
    End If
End Sub

' ======================
' プロパティ
' ======================
Public Property Get IsLocked() As Boolean
    IsLocked = mIsLocked
End Property

' ======================
' テストサポート機能
' ======================
#If DEBUG Then
    Public Function ValidateLockState() As Boolean
        ValidateLockState = (mMutexHandle <> 0)
    End Function
    
    Public Sub ForceRelease()
        If mMutexHandle <> 0 Then
            If mIsLocked Then modWindowsAPI.ReleaseMutex mMutexHandle
            modWindowsAPI.CloseHandle mMutexHandle
            mMutexHandle = 0
            mIsLocked = False
        End If
    End Sub
#End If

================
File: security/clsMutexLock.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "clsMutexLock"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements ILock

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "clsMutexLock"

' ======================
' メンバ変数
' ======================
Private mutex As IMutex
Private mutexName As String
Private isLocked As Boolean
Private config As IAppConfig

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    Set mutex = New MutexImpl
    Set config = modConfig.GetAppConfig
    ' ミューテックス名を設定から取得
    mutexName = config.GetSetting("MutexName", "Global\MyApp_ModCommon_Mutex")
    isLocked = False
End Sub

Private Sub Class_Terminate()
    If isLocked Then ILock_Release
    Set mutex = Nothing
    Set config = Nothing
End Sub

' ======================
' ILock実装
' ======================
Private Function ILock_Acquire(Optional ByVal timeout As Long = -1) As Boolean
    On Error GoTo ErrorHandler
    
    ' ミューテックスの作成
    If Not mutex.CreateMutex(False, mutexName) Then
        LogError "ミューテックスの作成に失敗しました。"
        Exit Function
    End If
    
    ' ロックの取得を試みる
    If mutex.WaitForSingleObject(timeout) Then
        isLocked = True
        ILock_Acquire = True
    End If
    Exit Function

ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = ErrLockAcquireFailed
        .Description = "ロックの取得に失敗しました: " & Err.Description
        .Category = ECSystem
        .Source = MODULE_NAME
        .ProcedureName = "ILock_Acquire"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errInfo
End Function

Private Sub ILock_Release()
    If Not isLocked Then Exit Sub
    
    On Error GoTo ErrorHandler
    
    If Not mutex.ReleaseMutex() Then
        LogError "ロックの解放に失敗しました。"
    End If
    isLocked = False
    Exit Sub

ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = ErrLockReleaseFailed
        .Description = "ロックの解放に失敗しました: " & Err.Description
        .Category = ECSystem
        .Source = MODULE_NAME
        .ProcedureName = "ILock_Release"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errInfo
End Sub

' ======================
' パブリックメソッド
' ======================
Public Sub Configure(ByVal newMutexName As String)
    mutexName = newMutexName
End Sub

' ======================
' プライベートメソッド
' ======================
Private Sub LogError(ByVal message As String)
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = ErrUnexpected
        .Description = message
        .Category = ECSystem
        .Source = MODULE_NAME
        .ProcedureName = "Unknown"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errInfo
End Sub

' ======================
' テストサポート機能
' ======================
#If DEBUG Then
    Public Function ValidateLockState() As Boolean
        ValidateLockState = isLocked
    End Function
    
    Public Property Get MutexName() As String
        MutexName = mutexName
    End Property
    
    Public Sub ForceRelease()
        If isLocked Then ILock_Release
    End Sub
#End If

================
File: security/clsSemaphoreLock.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "clsSemaphoreLock"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements ILock

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "clsSemaphoreLock"

' ======================
' Win32 API宣言
' ======================
Private Declare Function CreateSemaphore Lib "kernel32" Alias "CreateSemaphoreA" ( _
    ByVal lpSemaphoreAttributes As Long, _
    ByVal lInitialCount As Long, _
    ByVal lMaximumCount As Long, _
    ByVal lpName As String) As Long

Private Declare Function ReleaseSemaphore Lib "kernel32" ( _
    ByVal hSemaphore As Long, _
    ByVal lReleaseCount As Long, _
    ByRef lpPreviousCount As Long) As Long

Private Declare Function WaitForSingleObject Lib "kernel32" ( _
    ByVal hHandle As Long, _
    ByVal dwMilliseconds As Long) As Long

Private Declare Function CloseHandle Lib "kernel32" ( _
    ByVal hObject As Long) As Long

' ======================
' 定数定義
' ======================
Private Const WAIT_OBJECT_0 As Long = 0
Private Const WAIT_TIMEOUT As Long = &H102&
Private Const INFINITE As Long = -1

' ======================
' メンバ変数
' ======================
Private semaphoreHandle As Long
Private semaphoreName As String
Private isLocked As Boolean
Private config As IAppConfig

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    Set config = modConfig.GetAppConfig
    semaphoreName = config.GetSetting("SemaphoreName", "Global\MyApp_ModCommon_Semaphore")
    isLocked = False
    InitializeSemaphore
End Sub

Private Sub Class_Terminate()
    If isLocked Then ILock_Release
    If semaphoreHandle <> 0 Then CloseHandle semaphoreHandle
    Set config = Nothing
End Sub

' ======================
' ILock実装
' ======================
Private Function ILock_Acquire(Optional ByVal timeout As Long = -1) As Boolean
    On Error GoTo ErrorHandler
    
    If semaphoreHandle = 0 Then
        If Not InitializeSemaphore Then Exit Function
    End If
    
    Dim waitResult As Long
    waitResult = WaitForSingleObject(semaphoreHandle, timeout)
    
    Select Case waitResult
        Case WAIT_OBJECT_0
            isLocked = True
            ILock_Acquire = True
        Case WAIT_TIMEOUT
            ' タイムアウト - 何もしない
        Case Else
            LogError "セマフォの取得に失敗しました。"
    End Select
    Exit Function

ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = ErrLockAcquireFailed
        .Description = "セマフォの取得に失敗しました: " & Err.Description
        .Category = ECSystem
        .Source = MODULE_NAME
        .ProcedureName = "ILock_Acquire"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errInfo
End Function

Private Sub ILock_Release()
    If Not isLocked Then Exit Sub
    
    On Error GoTo ErrorHandler
    
    Dim previousCount As Long
    If ReleaseSemaphore(semaphoreHandle, 1, previousCount) = 0 Then
        LogError "セマフォの解放に失敗しました。"
    Else
        isLocked = False
    End If
    Exit Sub

ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = ErrLockReleaseFailed
        .Description = "セマフォの解放に失敗しました: " & Err.Description
        .Category = ECSystem
        .Source = MODULE_NAME
        .ProcedureName = "ILock_Release"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errInfo
End Sub

' ======================
' パブリックメソッド
' ======================
Public Sub Configure(ByVal newSemaphoreName As String)
    If isLocked Then ILock_Release
    If semaphoreHandle <> 0 Then CloseHandle semaphoreHandle
    semaphoreName = newSemaphoreName
    InitializeSemaphore
End Sub

' ======================
' プライベートメソッド
' ======================
Private Function InitializeSemaphore() As Boolean
    semaphoreHandle = CreateSemaphore(0&, 1, 1, semaphoreName)
    InitializeSemaphore = (semaphoreHandle <> 0)
End Function

Private Sub LogError(ByVal message As String)
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = ErrUnexpected
        .Description = message
        .Category = ECSystem
        .Source = MODULE_NAME
        .ProcedureName = "Unknown"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errInfo
End Sub

' ======================
' テストサポート機能
' ======================
#If DEBUG Then
    Public Function ValidateLockState() As Boolean
        ValidateLockState = isLocked
    End Function
    
    Public Property Get SemaphoreName() As String
        SemaphoreName = semaphoreName
    End Property
    
    Public Sub ForceRelease()
        If isLocked Then ILock_Release
    End Sub
#End If

================
File: security/CryptographyImpl.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "CryptographyImpl"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements ICryptography

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "CryptographyImpl"

' ======================
' メンバ変数
' ======================
Private mCryptoProvider As LongPtr
Private mHash As LongPtr
Private mKey As LongPtr
Private mIsInitialized As Boolean
Private mPerformanceMonitor As clsPerformanceMonitor
Private mLock As clsLock

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    mCryptoProvider = 0
    mHash = 0
    mKey = 0
    Set mPerformanceMonitor = New clsPerformanceMonitor
    Set mLock = New clsLock
    mIsInitialized = True
End Sub

Private Sub Class_Terminate()
    CleanupResources
    Set mPerformanceMonitor = Nothing
    Set mLock = Nothing
    mIsInitialized = False
End Sub

' ======================
' ICryptography実装
' ======================
Private Function ICryptography_CryptAcquireContext(ByVal container As String, _
                                                 ByVal provider As String, _
                                                 ByVal provType As Long, _
                                                 ByVal flags As Long) As Boolean
    If Not mIsInitialized Then Exit Function
    
    mPerformanceMonitor.StartMeasurement "CryptAcquireContext"
    mLock.AcquireLock
    
    On Error GoTo ErrorHandler
    
    ' 既存のプロバイダをクリーンアップ
    If mCryptoProvider <> 0 Then
        modWindowsAPI.CryptReleaseContext mCryptoProvider, 0
        mCryptoProvider = 0
    End If
    
    ' 新しいプロバイダを取得
    Dim result As Boolean
    result = (modWindowsAPI.CryptAcquireContext(mCryptoProvider, container, provider, provType, flags) <> 0)
    
    ICryptography_CryptAcquireContext = result
    
CleanUp:
    mLock.ReleaseLock
    mPerformanceMonitor.EndMeasurement "CryptAcquireContext"
    Exit Function

ErrorHandler:
    LogError "暗号化プロバイダの取得中にエラーが発生しました: " & Err.Description
    ICryptography_CryptAcquireContext = False
    Resume CleanUp
End Function

Private Function ICryptography_CryptCreateHash(ByVal algorithm As Long) As Boolean
    If Not mIsInitialized Then Exit Function
    If mCryptoProvider = 0 Then Exit Function
    
    mPerformanceMonitor.StartMeasurement "CryptCreateHash"
    mLock.AcquireLock
    
    On Error GoTo ErrorHandler
    
    ' 既存のハッシュをクリーンアップ
    If mHash <> 0 Then
        modWindowsAPI.CryptDestroyHash mHash
        mHash = 0
    End If
    
    ' 新しいハッシュを作成
    Dim result As Boolean
    result = (modWindowsAPI.CryptCreateHash(mCryptoProvider, algorithm, 0, 0, mHash) <> 0)
    
    ICryptography_CryptCreateHash = result
    
CleanUp:
    mLock.ReleaseLock
    mPerformanceMonitor.EndMeasurement "CryptCreateHash"
    Exit Function

ErrorHandler:
    LogError "ハッシュの作成中にエラーが発生しました: " & Err.Description
    ICryptography_CryptCreateHash = False
    Resume CleanUp
End Function

Private Function ICryptography_CryptHashData(ByRef data As Any, _
                                           ByVal dataLen As Long) As Boolean
    If Not mIsInitialized Then Exit Function
    If mHash = 0 Then Exit Function
    
    mPerformanceMonitor.StartMeasurement "CryptHashData"
    mLock.AcquireLock
    
    On Error GoTo ErrorHandler
    
    Dim result As Boolean
    result = (modWindowsAPI.CryptHashData(mHash, data, dataLen, 0) <> 0)
    
    ICryptography_CryptHashData = result
    
CleanUp:
    mLock.ReleaseLock
    mPerformanceMonitor.EndMeasurement "CryptHashData"
    Exit Function

ErrorHandler:
    LogError "データのハッシュ化中にエラーが発生しました: " & Err.Description
    ICryptography_CryptHashData = False
    Resume CleanUp
End Function

Private Function ICryptography_CryptDeriveKey(ByVal algorithm As Long, _
                                            ByVal flags As Long) As Boolean
    If Not mIsInitialized Then Exit Function
    If mHash = 0 Then Exit Function
    
    mPerformanceMonitor.StartMeasurement "CryptDeriveKey"
    mLock.AcquireLock
    
    On Error GoTo ErrorHandler
    
    ' 既存の鍵をクリーンアップ
    If mKey <> 0 Then
        modWindowsAPI.CryptDestroyKey mKey
        mKey = 0
    End If
    
    ' 新しい鍵を生成
    Dim result As Boolean
    result = (modWindowsAPI.CryptDeriveKey(mCryptoProvider, algorithm, mHash, flags, mKey) <> 0)
    
    ICryptography_CryptDeriveKey = result
    
CleanUp:
    mLock.ReleaseLock
    mPerformanceMonitor.EndMeasurement "CryptDeriveKey"
    Exit Function

ErrorHandler:
    LogError "鍵の生成中にエラーが発生しました: " & Err.Description
    ICryptography_CryptDeriveKey = False
    Resume CleanUp
End Function

Private Function ICryptography_CryptEncrypt(ByRef data As Any, _
                                          ByRef dataLen As Long, _
                                          ByVal bufLen As Long) As Boolean
    If Not mIsInitialized Then Exit Function
    If mKey = 0 Then Exit Function
    
    mPerformanceMonitor.StartMeasurement "CryptEncrypt"
    mLock.AcquireLock
    
    On Error GoTo ErrorHandler
    
    Dim result As Boolean
    result = (modWindowsAPI.CryptEncrypt(mKey, 0, True, 0, data, dataLen, bufLen) <> 0)
    
    ICryptography_CryptEncrypt = result
    
CleanUp:
    mLock.ReleaseLock
    mPerformanceMonitor.EndMeasurement "CryptEncrypt"
    Exit Function

ErrorHandler:
    LogError "データの暗号化中にエラーが発生しました: " & Err.Description
    ICryptography_CryptEncrypt = False
    Resume CleanUp
End Function

Private Function ICryptography_CryptDecrypt(ByRef data As Any, _
                                          ByRef dataLen As Long) As Boolean
    If Not mIsInitialized Then Exit Function
    If mKey = 0 Then Exit Function
    
    mPerformanceMonitor.StartMeasurement "CryptDecrypt"
    mLock.AcquireLock
    
    On Error GoTo ErrorHandler
    
    Dim result As Boolean
    result = (modWindowsAPI.CryptDecrypt(mKey, 0, True, 0, data, dataLen) <> 0)
    
    ICryptography_CryptDecrypt = result
    
CleanUp:
    mLock.ReleaseLock
    mPerformanceMonitor.EndMeasurement "CryptDecrypt"
    Exit Function

ErrorHandler:
    LogError "データの復号化中にエラーが発生しました: " & Err.Description
    ICryptography_CryptDecrypt = False
    Resume CleanUp
End Function

Private Function ICryptography_CryptDestroyKey() As Boolean
    If Not mIsInitialized Then Exit Function
    If mKey = 0 Then Exit Function
    
    mPerformanceMonitor.StartMeasurement "CryptDestroyKey"
    mLock.AcquireLock
    
    On Error GoTo ErrorHandler
    
    Dim result As Boolean
    result = (modWindowsAPI.CryptDestroyKey(mKey) <> 0)
    If result Then mKey = 0
    
    ICryptography_CryptDestroyKey = result
    
CleanUp:
    mLock.ReleaseLock
    mPerformanceMonitor.EndMeasurement "CryptDestroyKey"
    Exit Function

ErrorHandler:
    LogError "鍵の破棄中にエラーが発生しました: " & Err.Description
    ICryptography_CryptDestroyKey = False
    Resume CleanUp
End Function

Private Function ICryptography_CryptDestroyHash() As Boolean
    If Not mIsInitialized Then Exit Function
    If mHash = 0 Then Exit Function
    
    mPerformanceMonitor.StartMeasurement "CryptDestroyHash"
    mLock.AcquireLock
    
    On Error GoTo ErrorHandler
    
    Dim result As Boolean
    result = (modWindowsAPI.CryptDestroyHash(mHash) <> 0)
    If result Then mHash = 0
    
    ICryptography_CryptDestroyHash = result
    
CleanUp:
    mLock.ReleaseLock
    mPerformanceMonitor.EndMeasurement "CryptDestroyHash"
    Exit Function

ErrorHandler:
    LogError "ハッシュの破棄中にエラーが発生しました: " & Err.Description
    ICryptography_CryptDestroyHash = False
    Resume CleanUp
End Function

Private Function ICryptography_CryptReleaseContext() As Boolean
    If Not mIsInitialized Then Exit Function
    If mCryptoProvider = 0 Then Exit Function
    
    mPerformanceMonitor.StartMeasurement "CryptReleaseContext"
    mLock.AcquireLock
    
    On Error GoTo ErrorHandler
    
    Dim result As Boolean
    result = (modWindowsAPI.CryptReleaseContext(mCryptoProvider, 0) <> 0)
    If result Then mCryptoProvider = 0
    
    ICryptography_CryptReleaseContext = result
    
CleanUp:
    mLock.ReleaseLock
    mPerformanceMonitor.EndMeasurement "CryptReleaseContext"
    Exit Function

ErrorHandler:
    LogError "暗号化コンテキストの解放中にエラーが発生しました: " & Err.Description
    ICryptography_CryptReleaseContext = False
    Resume CleanUp
End Function

' ======================
' プライベートメソッド
' ======================
Private Sub CleanupResources()
    If mKey <> 0 Then
        modWindowsAPI.CryptDestroyKey mKey
        mKey = 0
    End If
    
    If mHash <> 0 Then
        modWindowsAPI.CryptDestroyHash mHash
        mHash = 0
    End If
    
    If mCryptoProvider <> 0 Then
        modWindowsAPI.CryptReleaseContext mCryptoProvider, 0
        mCryptoProvider = 0
    End If
End Sub

Private Sub LogError(ByVal message As String)
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = ErrUnexpected
        .Description = message
        .Category = ECSecurity
        .Source = MODULE_NAME
        .ProcedureName = "Unknown"  ' スタックトレースから取得可能
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errInfo
End Sub

' ======================
' テストサポート機能
' ======================
#If DEBUG Then
    Public Function ValidateState() As Boolean
        ValidateState = mIsInitialized And _
                       Not (mPerformanceMonitor Is Nothing) And _
                       Not (mLock Is Nothing)
    End Function
    
    Public Sub ForceCleanup()
        CleanupResources
    End Sub
    
    Public Function GetPerformanceMonitor() As clsPerformanceMonitor
        Set GetPerformanceMonitor = mPerformanceMonitor
    End Function
#End If

================
File: security/MutexImpl.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "MutexImpl"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements IMutex

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "MutexImpl"

' ======================
' プライベート変数
' ======================
Private mMutexHandle As LongPtr
Private mIsInitialized As Boolean
Private mPerformanceMonitor As clsPerformanceMonitor

' ======================
' Win32 APIの再定義
' ======================
Private Const WAIT_OBJECT_0 As Long = 0
Private Const WAIT_FAILED As Long = &HFFFFFFFF
Private Const WAIT_ABANDONED As Long = &H80
Private Const ERROR_ALREADY_EXISTS As Long = 183&

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    mMutexHandle = 0
    Set mPerformanceMonitor = New clsPerformanceMonitor
    mIsInitialized = True
End Sub

Private Sub Class_Terminate()
    If mMutexHandle <> 0 Then
        modWindowsAPI.CloseHandle mMutexHandle
        mMutexHandle = 0
    End If
    Set mPerformanceMonitor = Nothing
    mIsInitialized = False
End Sub

' ======================
' IMutex実装
' ======================
Private Function IMutex_CreateMutex(ByVal initialOwner As Boolean, ByVal name As String) As Boolean
    If Not mIsInitialized Then Exit Function
    
    mPerformanceMonitor.StartMeasurement "CreateMutex"
    On Error GoTo ErrorHandler
    
    ' 既存のハンドルをクリーンアップ
    If mMutexHandle <> 0 Then
        modWindowsAPI.CloseHandle mMutexHandle
        mMutexHandle = 0
    End If
    
    ' ミューテックスの作成
    mMutexHandle = modWindowsAPI.CreateMutex(0&, IIf(initialOwner, 1&, 0&), name)
    
    If mMutexHandle = 0 Then
        LogError "ミューテックスの作成に失敗しました。"
        IMutex_CreateMutex = False
    Else
        IMutex_CreateMutex = True
    End If
    
    mPerformanceMonitor.EndMeasurement "CreateMutex"
    Exit Function

ErrorHandler:
    LogError "ミューテックスの作成中にエラーが発生しました: " & Err.Description
    If Not mPerformanceMonitor Is Nothing Then
        mPerformanceMonitor.EndMeasurement "CreateMutex"
    End If
    IMutex_CreateMutex = False
End Function

Private Function IMutex_ReleaseMutex() As Boolean
    If Not mIsInitialized Then Exit Function
    If mMutexHandle = 0 Then Exit Function
    
    mPerformanceMonitor.StartMeasurement "ReleaseMutex"
    On Error GoTo ErrorHandler
    
    IMutex_ReleaseMutex = (modWindowsAPI.ReleaseMutex(mMutexHandle) <> 0)
    
    mPerformanceMonitor.EndMeasurement "ReleaseMutex"
    Exit Function

ErrorHandler:
    LogError "ミューテックスの解放中にエラーが発生しました: " & Err.Description
    If Not mPerformanceMonitor Is Nothing Then
        mPerformanceMonitor.EndMeasurement "ReleaseMutex"
    End If
    IMutex_ReleaseMutex = False
End Function

Private Function IMutex_WaitForSingleObject(ByVal timeoutMilliseconds As Long) As Boolean
    If Not mIsInitialized Then Exit Function
    If mMutexHandle = 0 Then Exit Function
    
    mPerformanceMonitor.StartMeasurement "WaitForSingleObject"
    On Error GoTo ErrorHandler
    
    Dim result As Long
    result = modWindowsAPI.WaitForSingleObject(mMutexHandle, timeoutMilliseconds)
    
    Select Case result
        Case WAIT_OBJECT_0, WAIT_ABANDONED
            IMutex_WaitForSingleObject = True
        Case Else
            IMutex_WaitForSingleObject = False
    End Select
    
    mPerformanceMonitor.EndMeasurement "WaitForSingleObject"
    Exit Function

ErrorHandler:
    LogError "ミューテックスの待機中にエラーが発生しました: " & Err.Description
    If Not mPerformanceMonitor Is Nothing Then
        mPerformanceMonitor.EndMeasurement "WaitForSingleObject"
    End If
    IMutex_WaitForSingleObject = False
End Function

' ======================
' プライベートメソッド
' ======================
Private Sub LogError(ByVal message As String)
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = ErrUnexpected
        .Description = message
        .Category = ECSystem
        .Source = MODULE_NAME
        .ProcedureName = "Unknown"  ' スタックトレースから取得可能
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errInfo
End Sub

' ======================
' テストサポート機能
' ======================
#If DEBUG Then
    Public Function GetMutexHandle() As LongPtr
        GetMutexHandle = mMutexHandle
    End Function
    
    Public Function IsValid() As Boolean
        IsValid = (mMutexHandle <> 0)
    End Function
    
    Public Sub ForceRelease()
        If mMutexHandle <> 0 Then
            modWindowsAPI.CloseHandle mMutexHandle
            mMutexHandle = 0
        End If
    End Sub
    
    Public Function GetPerformanceMonitor() As clsPerformanceMonitor
        Set GetPerformanceMonitor = mPerformanceMonitor
    End Function
#End If

================
File: security/MutexLock.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "MutexLock"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements ILock

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "MutexLock"

' ======================
' メンバ変数
' ======================
Private mMutex As IMutex
Private mMutexName As String
Private mIsLocked As Boolean
Private mConfig As IAppConfig

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    Set mMutex = New MutexImpl
    Set mConfig = modConfig.GetAppConfig
    ' ミューテックス名を設定から取得
    mMutexName = mConfig.GetSetting("MutexName", "Global\MyApp_ModCommon_Mutex")
    mIsLocked = False
End Sub

Private Sub Class_Terminate()
    If mIsLocked Then ILock_Release
    Set mMutex = Nothing
    Set mConfig = Nothing
End Sub

' ======================
' ILock実装
' ======================
Private Function ILock_Acquire(Optional ByVal timeout As Long = -1) As Boolean
    On Error GoTo ErrorHandler
    
    ' ミューテックスの作成
    If Not mMutex.CreateMutex(False, mMutexName) Then
        LogError "ミューテックスの作成に失敗しました。"
        Exit Function
    End If
    
    ' ロックの取得を試みる
    If mMutex.WaitForSingleObject(timeout) Then
        mIsLocked = True
        ILock_Acquire = True
    End If
    Exit Function

ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = ErrLockAcquireFailed
        .Description = "ロックの取得に失敗しました: " & Err.Description
        .Category = ECSystem
        .Source = MODULE_NAME
        .ProcedureName = "ILock_Acquire"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errInfo
End Function

Private Sub ILock_Release()
    If Not mIsLocked Then Exit Sub
    
    On Error GoTo ErrorHandler
    
    If Not mMutex.ReleaseMutex() Then
        LogError "ロックの解放に失敗しました。"
    End If
    mIsLocked = False
    Exit Sub

ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = ErrLockReleaseFailed
        .Description = "ロックの解放に失敗しました: " & Err.Description
        .Category = ECSystem
        .Source = MODULE_NAME
        .ProcedureName = "ILock_Release"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errInfo
End Sub

' ======================
' パブリックメソッド
' ======================
Public Sub Configure(ByVal mutexName As String)
    mMutexName = mutexName
End Sub

' ======================
' プライベートメソッド
' ======================
Private Sub LogError(ByVal message As String)
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = ErrUnexpected
        .Description = message
        .Category = ECSystem
        .Source = MODULE_NAME
        .ProcedureName = "Unknown"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errInfo
End Sub

' ======================
' テストサポート機能
' ======================
#If DEBUG Then
    Public Function ValidateLockState() As Boolean
        ValidateLockState = mIsLocked
    End Function
    
    Public Property Get MutexName() As String
        MutexName = mMutexName
    End Property
    
    Public Sub ForceRelease()
        If mIsLocked Then ILock_Release
    End Sub
#End If

================
File: security/PBKDF2KeyDerivationStrategy.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "PBKDF2KeyDerivationStrategy"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements IKeyDerivationStrategy

' 定数定義
Private Const MS_ENHANCED_PROV As String = "Microsoft Enhanced Cryptographic Provider v1.0"
Private Const PROV_RSA_FULL As Long = 1
Private Const CRYPT_VERIFYCONTEXT As Long = &HF0000000
Private Const CALG_SHA_256 As Long = &H800C
Private Const CALG_AES_256 As Long = &H6610

' メンバ変数
Private mCryptoProvider As LongPtr
Private mInitialized As Boolean

Private Sub Class_Initialize()
    InitializeCrypto
End Sub

Private Sub Class_Terminate()
    If mInitialized Then
        CryptReleaseContext mCryptoProvider, 0
    End If
End Sub

Private Sub InitializeCrypto()
    If modWindowsAPI.CryptAcquireContext(mCryptoProvider, vbNullString, MS_ENHANCED_PROV, PROV_RSA_FULL, CRYPT_VERIFYCONTEXT) <> 0 Then
        mInitialized = True
    Else
        Dim errInfo As ErrorInfo
        With errInfo
            .Code = ErrCryptoProviderInitFailed
            .Description = "暗号化プロバイダーの初期化に失敗しました。"
            .Category = ECSecurity
            .Source = "PBKDF2KeyDerivationStrategy"
            .ProcedureName = "InitializeCrypto"
            .StackTrace = modStackTrace.GetStackTrace()
            .OccurredAt = Now
        End With
        modError.HandleError errInfo
    End If
End Sub

Private Function IKeyDerivationStrategy_DeriveKey(ByVal password As String, ByRef salt As Variant, ByVal iterations As Long) As Byte()
    If Not mInitialized Then
        Dim errInfo As ErrorInfo
        With errInfo
            .Code = ErrCryptoNotInitialized
            .Description = "暗号化プロバイダーが初期化されていません。"
            .Category = ECSecurity
            .Source = "PBKDF2KeyDerivationStrategy"
            .ProcedureName = "DeriveKey"
            .StackTrace = modStackTrace.GetStackTrace()
            .OccurredAt = Now
        End With
        modError.HandleError errInfo
        Exit Function
    End If
    
    ' ハッシュオブジェクトの作成
    Dim hHash As LongPtr
    If CryptCreateHash(mCryptoProvider, CALG_SHA_256, 0, 0, hHash) = 0 Then
        RaiseError ErrCryptoHashCreateFailed, "ハッシュオブジェクトの作成に失敗しました。"
        Exit Function
    End If
    
    ' パスワードとソルトを結合
    Dim combinedData() As Byte
    ReDim combinedData(0 To Len(password) + UBound(salt) + 1)
    CopyMemory combinedData(0), ByVal StrPtr(password), Len(password) * 2
    CopyMemory combinedData(Len(password)), salt(0), UBound(salt) + 1
    
    ' 反復処理でキーを生成
    Dim i As Long
    For i = 1 To iterations
        If CryptHashData(hHash, combinedData(0), UBound(combinedData) + 1, 0) = 0 Then
            CryptDestroyHash hHash
            RaiseError ErrCryptoHashDataFailed, "データのハッシュ化に失敗しました。"
            Exit Function
        End If
    Next i
    
    ' ハッシュ値の取得
    Dim hashLen As Long
    If CryptGetHashParam(hHash, HP_HASHSIZE, hashLen, 4, 0) = 0 Then
        CryptDestroyHash hHash
        RaiseError ErrCryptoHashDataFailed, "ハッシュサイズの取得に失敗しました。"
        Exit Function
    End If
    
    Dim derivedKey() As Byte
    ReDim derivedKey(0 To hashLen - 1)
    If CryptGetHashParam(hHash, HP_HASHVAL, derivedKey(0), hashLen, 0) = 0 Then
        CryptDestroyHash hHash
        RaiseError ErrCryptoHashDataFailed, "ハッシュ値の取得に失敗しました。"
        Exit Function
    End If
    
    ' ハッシュオブジェクトの破棄
    CryptDestroyHash hHash
    
    IKeyDerivationStrategy_DeriveKey = derivedKey
End Function

Private Sub RaiseError(ByVal errorCode As Long, ByVal description As String)
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = errorCode
        .Description = description
        .Category = ECSecurity
        .Source = "PBKDF2KeyDerivationStrategy"
        .ProcedureName = "DeriveKey"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errInfo
End Sub

================
File: security/repomix-output.txt
================
This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-27T00:46:00.755Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
clsCriticalSectionLock.cls
clsCrypto.cls
clsLock.cls
clsMutexLock.cls
clsSemaphoreLock.cls
CryptographyImpl.cls
MutexImpl.cls
MutexLock.cls
PBKDF2KeyDerivationStrategy.cls

================================================================
Files
================================================================

================
File: clsCriticalSectionLock.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "clsCriticalSectionLock"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements ILock

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "clsCriticalSectionLock"

' ======================
' Win32 API宣言
' ======================
Private Type CRITICAL_SECTION
    DebugInfo As Long
    LockCount As Long
    RecursionCount As Long
    OwningThread As Long
    LockSemaphore As Long
    SpinCount As Long
End Type

Private Declare Sub InitializeCriticalSection Lib "kernel32" (lpCriticalSection As CRITICAL_SECTION)
Private Declare Sub DeleteCriticalSection Lib "kernel32" (lpCriticalSection As CRITICAL_SECTION)
Private Declare Sub EnterCriticalSection Lib "kernel32" (lpCriticalSection As CRITICAL_SECTION)
Private Declare Function TryEnterCriticalSection Lib "kernel32" (lpCriticalSection As CRITICAL_SECTION) As Long
Private Declare Sub LeaveCriticalSection Lib "kernel32" (lpCriticalSection As CRITICAL_SECTION)
Private Declare Function GetTickCount Lib "kernel32" () As Long

' ======================
' メンバ変数
' ======================
Private criticalSection As CRITICAL_SECTION
Private isLocked As Boolean
Private isInitialized As Boolean

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    InitializeCriticalSection criticalSection
    isInitialized = True
    isLocked = False
End Sub

Private Sub Class_Terminate()
    If isLocked Then ILock_Release
    If isInitialized Then DeleteCriticalSection criticalSection
End Sub

' ======================
' ILock実装
' ======================
Private Function ILock_Acquire(Optional ByVal timeout As Long = -1) As Boolean
    On Error GoTo ErrorHandler
    
    If Not isInitialized Then Exit Function
    
    ' タイムアウトが指定されていない場合は即座に取得を試みる
    If timeout = -1 Then
        EnterCriticalSection criticalSection
        isLocked = True
        ILock_Acquire = True
        Exit Function
    End If
    
    ' タイムアウト付きの取得
    Dim startTime As Long
    startTime = GetTickCount()
    
    Do
        If TryEnterCriticalSection(criticalSection) <> 0 Then
            isLocked = True
            ILock_Acquire = True
            Exit Function
        End If
        
        ' タイムアウトチェック
        If timeout > 0 Then
            If GetTickCount() - startTime >= timeout Then Exit Do
        End If
        
        DoEvents ' 他のスレッドに実行機会を与える
    Loop
    
    Exit Function

ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = ErrLockAcquireFailed
        .Description = "クリティカルセクションの取得に失敗しました: " & Err.Description
        .Category = ECSystem
        .Source = MODULE_NAME
        .ProcedureName = "ILock_Acquire"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errInfo
End Function

Private Sub ILock_Release()
    If Not isLocked Then Exit Sub
    
    On Error GoTo ErrorHandler
    
    LeaveCriticalSection criticalSection
    isLocked = False
    Exit Sub

ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = ErrLockReleaseFailed
        .Description = "クリティカルセクションの解放に失敗しました: " & Err.Description
        .Category = ECSystem
        .Source = MODULE_NAME
        .ProcedureName = "ILock_Release"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errInfo
End Sub

' ======================
' テストサポート機能
' ======================
#If DEBUG Then
    Public Function ValidateLockState() As Boolean
        ValidateLockState = isLocked
    End Function
    
    Public Sub ForceRelease()
        If isLocked Then ILock_Release
    End Sub
    
    Public Function IsInitialized() As Boolean
        IsInitialized = isInitialized
    End Function
#End If

================
File: clsCrypto.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "clsCrypto"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' 定数定義
Private Const MS_ENHANCED_PROV As String = "Microsoft Enhanced Cryptographic Provider v1.0"
Private Const PROV_RSA_FULL As Long = 1
Private Const CRYPT_VERIFYCONTEXT As Long = &HF0000000
Private Const CALG_SHA_256 As Long = &H800C
Private Const HP_HASHVAL As Long = 2
Private Const HP_HASHSIZE As Long = 4

' メンバ変数
Private mCryptoProvider As LongPtr
Private mInitialized As Boolean
Private mAesKey As LongPtr
Private mPerformanceMonitor As IPerformanceMonitor
Private mLock As ILock
Private mCryptography As ICryptography
Private mKeyDerivation As IKeyDerivationStrategy

' ======================
' コンストラクタ
' ======================
Public Sub Initialize(ByVal performanceMonitor As IPerformanceMonitor, _
                     ByVal lock As ILock, _
                     ByVal cryptography As ICryptography, _
                     ByVal keyDerivation As IKeyDerivationStrategy)
    Set mPerformanceMonitor = performanceMonitor
    Set mLock = lock
    Set mCryptography = cryptography
    Set mKeyDerivation = keyDerivation
    InitializeCrypto
End Sub

Private Sub Class_Initialize()
    ' 依存性は Initialize メソッドで注入される
End Sub

Private Sub Class_Terminate()
    If mInitialized Then
        If mAesKey <> 0 Then
            CryptDestroyKey mAesKey
        End If
        CryptReleaseContext mCryptoProvider, 0
    End If
    Set mPerformanceMonitor = Nothing
    Set mLock = Nothing
End Sub

' ======================
' 内部メソッド
' ======================
Private Sub InitializeCrypto()
    If mCryptography.CryptAcquireContext(vbNullString, MS_ENHANCED_PROV, PROV_RSA_FULL, CRYPT_VERIFYCONTEXT) Then
        mInitialized = True
    Else
        Dim errInfo As ErrorInfo
        With errInfo
            .Code = ErrCryptoProviderInitFailed
            .Description = "暗号化プロバイダーの初期化に失敗しました。"
            .Category = ECSecurity
            .Source = "clsCrypto"
            .ProcedureName = "InitializeCrypto"
            .StackTrace = modStackTrace.GetStackTrace()
            .OccurredAt = Now
        End With
        modError.HandleError errInfo
    End If
End Sub

Private Function DeriveAESKey(ByVal key As String) As Boolean
    On Error GoTo ErrorHandler
    
    mLock.AcquireLock
    
    ' 既存のキーを破棄
    If mAesKey <> 0 Then
        CryptDestroyKey mAesKey
        mAesKey = 0
    End If
    
    ' キー導出戦略を使用してキーを生成
    Dim salt() As Byte
    ReDim salt(0 To 15)  ' 16バイトのソルト
    Dim derivedKey() As Byte
    derivedKey = mKeyDerivation.DeriveKey(key, salt, 10000)
    
    ' 導出されたキーからAESキーを生成
    If Not mCryptography.CryptDeriveKey(CALG_AES_256, CRYPT_EXPORTABLE) Then
        GoTo Cleanup
    End If
    DeriveAESKey = True
    
Cleanup:
    mLock.ReleaseLock
    Exit Function
ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = ErrCryptoKeyDerivationFailed
        .Description = "AESキーの生成に失敗しました。"
        .Category = ECSecurity
        .Source = "clsCrypto"
        .ProcedureName = "DeriveAESKey"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errInfo
    DeriveAESKey = False
    Resume Cleanup
End Function

' ======================
' パブリックメソッド
' ======================
Public Function EncryptString(ByVal plainText As String, ByVal key As String) As String
    mPerformanceMonitor.StartMeasurement "String Encryption"
    
    mLock.AcquireLock
    
    If Not mInitialized Then
        Dim errInfo As ErrorInfo
        With errInfo
            .Code = ErrCryptoNotInitialized
            .Description = "暗号化プロバイダーが初期化されていません。"
            .Category = ECSecurity
            .Source = "clsCrypto"
            .ProcedureName = "EncryptString"
            .StackTrace = modStackTrace.GetStackTrace()
            .OccurredAt = Now
        End With
        modError.HandleError errInfo
        mPerformanceMonitor.EndMeasurement "String Encryption"
        mLock.ReleaseLock
        Exit Function
    End If
    
    ' キーの検証
    If Len(key) = 0 Then
        Dim errInfo As ErrorInfo
        With errInfo
            .Code = ErrCryptoKeyNotSpecified
            .Description = "空の暗号化キーが指定されました。"
            .Category = ECSecurity
            .Source = "clsCrypto"
            .ProcedureName = "EncryptString"
            .StackTrace = modStackTrace.GetStackTrace()
            .OccurredAt = Now
        End With
        modError.HandleError errInfo
        mPerformanceMonitor.EndMeasurement "String Encryption"
        mLock.ReleaseLock
        Exit Function
    End If
    
    ' AESキーの生成
    If Not DeriveAESKey(key) Then
        mPerformanceMonitor.EndMeasurement "String Encryption"
        mLock.ReleaseLock
        Exit Function
    End If
    
    ' データの準備
    Dim dataLen As Long
    Dim blockSize As Long
    blockSize = 16 ' AESブロックサイズ
    
    ' パディングを含むデータ長を計算
    dataLen = Len(plainText)
    If (dataLen Mod blockSize) <> 0 Then
        dataLen = dataLen + (blockSize - (dataLen Mod blockSize))
    End If
    
    ' バッファの準備
    Dim buffer() As Byte
    ReDim buffer(0 To dataLen - 1)
    CopyMemory buffer(0), ByVal StrPtr(plainText), Len(plainText) * 2
    
    ' 暗号化
    If CryptEncrypt(mAesKey, 0, True, 0, buffer(0), dataLen, dataLen) = 0 Then
        Dim errInfo As ErrorInfo
        With errInfo
            .Code = ErrCryptoEncryptionFailed
            .Description = "データの暗号化に失敗しました。"
            .Category = ECSecurity
            .Source = "clsCrypto"
            .ProcedureName = "EncryptString"
            .StackTrace = modStackTrace.GetStackTrace()
            .OccurredAt = Now
        End With
        modError.HandleError errInfo
        mPerformanceMonitor.EndMeasurement "String Encryption"
        mLock.ReleaseLock
        Exit Function
    End If
    
    Dim result As String
    result = Base64Encode(buffer)
    
    mPerformanceMonitor.EndMeasurement "String Encryption"
    mLock.ReleaseLock
    EncryptString = result
End Function

Public Function DecryptString(ByVal cipherText As String, ByVal key As String) As String
    mPerformanceMonitor.StartMeasurement "String Decryption"
    
mLock.AcquireLock
    If Not mInitialized Then
        Dim errInfo As ErrorInfo
        With errInfo
            .Code = ErrCryptoNotInitialized
            .Description = "暗号化プロバイダーが初期化されていません。"
            .Category = ECSecurity
            .Source = "clsCrypto"
            .ProcedureName = "DecryptString"
            .StackTrace = modStackTrace.GetStackTrace()
            .OccurredAt = Now
        End With
        modError.HandleError errInfo
        mPerformanceMonitor.EndMeasurement "String Decryption"
        mLock.ReleaseLock
        Exit Function
    End If
    
    ' キーの検証
    If Len(key) = 0 Then
        Dim errInfo As ErrorInfo
        With errInfo
            .Code = ErrCryptoKeyNotSpecified
            .Description = "空の暗号化キーが指定されました。"
            .Category = ECSecurity
            .Source = "clsCrypto"
            .ProcedureName = "DecryptString"
            .StackTrace = modStackTrace.GetStackTrace()
            .OccurredAt = Now
        End With
        modError.HandleError errInfo
        mPerformanceMonitor.EndMeasurement "String Decryption"
        mLock.ReleaseLock
        Exit Function
    End If
    
    ' AESキーの生成
    If Not DeriveAESKey(key) Then
        mPerformanceMonitor.EndMeasurement "String Decryption"
        mLock.ReleaseLock
        Exit Function
    End If
    
    ' Base64デコード
    Dim buffer() As Byte
    buffer = Base64Decode(cipherText)
   
     ' データ長の取得
    Dim dataLen As Long
    dataLen = UBound(buffer) - LBound(buffer) + 1
    ' 復号化
    If CryptDecrypt(mAesKey, 0, True, 0, buffer(0), dataLen) = 0 Then
        Dim errInfo As ErrorInfo
        With errInfo
            .Code = ErrCryptoDecryptionFailed
            .Description = "データの復号化に失敗しました。"
            .Category = ECSecurity
            .Source = "clsCrypto"
            .ProcedureName = "DecryptString"
            .StackTrace = modStackTrace.GetStackTrace()
            .OccurredAt = Now
        End With
        modError.HandleError errInfo
        mPerformanceMonitor.EndMeasurement "String Decryption"
        mLock.ReleaseLock
        Exit Function
    End If
    
    Dim result As String
    result = Left$(StrConv(buffer, vbUnicode), dataLen)
    
    mPerformanceMonitor.EndMeasurement "String Decryption"
    mLock.ReleaseLock
    DecryptString = result
End Function

Public Function GenerateHash(ByVal inputString As String) As String
    mPerformanceMonitor.StartMeasurement "Hash Generation"
    mLock.AcquireLock
    
    If Not mInitialized Then
        Dim errInfo As ErrorInfo
        With errInfo
            .Code = ErrCryptoNotInitialized
            .Description = "暗号化プロバイダーが初期化されていません。"
            .Category = ECSecurity
            .Source = "clsCrypto"
            .ProcedureName = "GenerateHash"
            .StackTrace = modStackTrace.GetStackTrace()
            .OccurredAt = Now
        End With
        modError.HandleError errInfo
        mPerformanceMonitor.EndMeasurement "Hash Generation"
        mLock.ReleaseLock
        Exit Function
    End If
    
    Dim hHash As LongPtr
    Dim hashLen As Long
    Dim hashValue() As Byte
    Dim result As String
    
    ' ハッシュオブジェクトの作成
    If modWindowsAPI.CryptCreateHash(mCryptoProvider, CALG_SHA_256, 0, 0, hHash) = 0 Then
        Dim errInfo As ErrorInfo
        With errInfo
            .Code = ErrCryptoHashCreateFailed
            .Description = "ハッシュオブジェクトの作成に失敗しました。"
            .Category = ECSecurity
            .Source = "clsCrypto"
            .ProcedureName = "GenerateHash"
            .StackTrace = modStackTrace.GetStackTrace()
            .OccurredAt = Now
        End With
        modError.HandleError errInfo
        mPerformanceMonitor.EndMeasurement "Hash Generation"
        mLock.ReleaseLock
        Exit Function
    End If
    
    ' データのハッシュ化
    If modWindowsAPI.CryptHashData(hHash, ByVal inputString, Len(inputString), 0) = 0 Then
        modWindowsAPI.CryptDestroyHash hHash
        Dim errInfo As ErrorInfo
        With errInfo
            .Code = ErrCryptoHashDataFailed
            .Description = "データのハッシュ化に失敗しました。"
            .Category = ECSecurity
            .Source = "clsCrypto"
            .ProcedureName = "GenerateHash"
            .StackTrace = modStackTrace.GetStackTrace()
            .OccurredAt = Now
        End With
        modError.HandleError errInfo
        mPerformanceMonitor.EndMeasurement "Hash Generation"
        mLock.ReleaseLock
        Exit Function
    End If
    
    ' ハッシュサイズの取得
    If modWindowsAPI.CryptGetHashParam(hHash, HP_HASHSIZE, hashLen, 4, 0) = 0 Then
        modWindowsAPI.CryptDestroyHash hHash
        Dim errInfo As ErrorInfo
        With errInfo
            .Code = ErrCryptoHashDataFailed
            .Description = "ハッシュサイズの取得に失敗しました。"
            .Category = ECSecurity
            .Source = "clsCrypto"
            .ProcedureName = "GenerateHash"
            .StackTrace = modStackTrace.GetStackTrace()
            .OccurredAt = Now
        End With
        modError.HandleError errInfo
        mPerformanceMonitor.EndMeasurement "Hash Generation"
        mLock.ReleaseLock
        Exit Function
    End If
    
    ' ハッシュ値の取得
    ReDim hashValue(0 To hashLen - 1)
    If modWindowsAPI.CryptGetHashParam(hHash, HP_HASHVAL, hashValue(0), hashLen, 0) = 0 Then
        modWindowsAPI.CryptDestroyHash hHash
        Dim errInfo As ErrorInfo
        With errInfo
            .Code = ErrCryptoHashDataFailed
            .Description = "ハッシュ値の取得に失敗しました。"
            .Category = ECSecurity
            .Source = "clsCrypto"
            .ProcedureName = "GenerateHash"
            .StackTrace = modStackTrace.GetStackTrace()
            .OccurredAt = Now
        End With
        modError.HandleError errInfo
        mPerformanceMonitor.EndMeasurement "Hash Generation"
        mLock.ReleaseLock
        Exit Function
    End If
    
    ' ハッシュオブジェクトの破棄
    modWindowsAPI.CryptDestroyHash hHash
    
    ' バイト配列を16進数文字列に変換
    result = ""
    Dim i As Long
    For i = 0 To hashLen - 1
        result = result & Right$("0" & Hex$(hashValue(i)), 2)
    Next i
    
    mPerformanceMonitor.EndMeasurement "Hash Generation"
    mLock.ReleaseLock
    GenerateHash = result
    
End Function

' ======================
' ユーティリティメソッド
' ======================
Private Function Base64Encode(ByVal text As String) As String
    Dim xmlDoc As Object
    Dim xmlNode As Object
    
    Set xmlDoc = CreateObject("MSXML2.DOMDocument")
    Set xmlNode = xmlDoc.createElement("b64")
    
    xmlNode.DataType = "bin.base64"
    xmlNode.nodeTypedValue = StringToBytes(text)
    
    Base64Encode = xmlNode.text
    
    Set xmlNode = Nothing
    Set xmlDoc = Nothing
End Function

Private Function Base64Decode(ByVal base64 As String) As String
    Dim xmlDoc As Object
    Dim xmlNode As Object
    
    Set xmlDoc = CreateObject("MSXML2.DOMDocument")
    Set xmlNode = xmlDoc.createElement("b64")
    
    xmlNode.DataType = "bin.base64"
    xmlNode.text = base64
    
    Base64Decode = BytesToString(xmlNode.nodeTypedValue)
    
    Set xmlNode = Nothing
    Set xmlDoc = Nothing
End Function

Private Function StringToBytes(ByVal text As String) As Byte()
    Dim bytes() As Byte
    bytes = text
    StringToBytes = bytes
End Function

Private Function BytesToString(ByRef bytes() As Byte) As String
    BytesToString = bytes
End Function

' ======================
' テストサポート機能（開発環境専用）
' 警告: これらのメソッドは開発時のテスト目的でのみ使用し、
' 本番環境では使用しないでください。
' ======================
#If DEBUG Then
    Private Function ValidateProvider() As Boolean
        ' 暗号化プロバイダーの状態を検証（テスト用）
        ValidateProvider = mInitialized And mCryptoProvider <> 0
    End Function
    
    Private Sub ResetProvider()
        ' 暗号化プロバイダーをリセット（テスト用）
        If mInitialized Then
            CryptReleaseContext mCryptoProvider, 0
            mInitialized = False
        End If
        InitializeCrypto
    End Sub
#End If

================
File: clsLock.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "clsLock"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' 定数定義
Private Const INFINITE As Long = -1
Private Const WAIT_OBJECT_0 As Long = 0
Private Const ERROR_ALREADY_EXISTS As Long = 183&
Private Const MUTEX_NAME As String = "Global\MyApp_ModCommon_Mutex"

' メンバ変数
Private mMutexHandle As LongPtr
Private mIsLocked As Boolean

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    mMutexHandle = modWindowsAPI.CreateMutex(0&, 0&, MUTEX_NAME)
    mIsLocked = False
End Sub

Private Sub Class_Terminate()
    If mIsLocked Then modWindowsAPI.ReleaseMutex mMutexHandle
    If mMutexHandle <> 0 Then modWindowsAPI.CloseHandle mMutexHandle
End Sub

' ======================
' パブリックメソッド
' ======================
Public Sub AcquireLock()
    If mMutexHandle = 0 Then
        Dim errInfo As ErrorInfo
        With errInfo
            .Code = ErrLockMutexCreateFailed
            .Description = "Mutexの作成に失敗しました。"
            .Category = ECSystem
            .Source = "clsLock"
            .ProcedureName = "AcquireLock"
            .StackTrace = modStackTrace.GetStackTrace()
            .OccurredAt = Now
        End With
        modError.HandleError errInfo
    End If
    
    ' ロックの取得を試みる
    Dim result As Long
    result = modWindowsAPI.WaitForSingleObject(mMutexHandle, INFINITE)
    
    If result = WAIT_OBJECT_0 Then
        mIsLocked = True
    Else
        Dim errInfo As ErrorInfo
        With errInfo
            .Code = ErrLockAcquireFailed
            .Description = "ロックの取得に失敗しました。"
            .Category = ECSystem
            .Source = "clsLock"
            .ProcedureName = "AcquireLock"
            .StackTrace = modStackTrace.GetStackTrace()
            .OccurredAt = Now
        End With
        modError.HandleError errInfo
    End If
End Sub

Public Sub ReleaseLock()
    If mIsLocked Then
        If modWindowsAPI.ReleaseMutex(mMutexHandle) = 0 Then
            Dim errInfo As ErrorInfo
            With errInfo
                .Code = ErrLockReleaseFailed
                .Description = "ロックの解放に失敗しました。"
                .Category = ECSystem
                .Source = "clsLock"
                .ProcedureName = "ReleaseLock"
                .StackTrace = modStackTrace.GetStackTrace()
                .OccurredAt = Now
            End With
            modError.HandleError errInfo
        End If
        mIsLocked = False
    End If
End Sub

' ======================
' プロパティ
' ======================
Public Property Get IsLocked() As Boolean
    IsLocked = mIsLocked
End Property

' ======================
' テストサポート機能
' ======================
#If DEBUG Then
    Public Function ValidateLockState() As Boolean
        ValidateLockState = (mMutexHandle <> 0)
    End Function
    
    Public Sub ForceRelease()
        If mMutexHandle <> 0 Then
            If mIsLocked Then modWindowsAPI.ReleaseMutex mMutexHandle
            modWindowsAPI.CloseHandle mMutexHandle
            mMutexHandle = 0
            mIsLocked = False
        End If
    End Sub
#End If

================
File: clsMutexLock.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "clsMutexLock"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements ILock

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "clsMutexLock"

' ======================
' メンバ変数
' ======================
Private mutex As IMutex
Private mutexName As String
Private isLocked As Boolean
Private config As IAppConfig

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    Set mutex = New MutexImpl
    Set config = modConfig.GetAppConfig
    ' ミューテックス名を設定から取得
    mutexName = config.GetSetting("MutexName", "Global\MyApp_ModCommon_Mutex")
    isLocked = False
End Sub

Private Sub Class_Terminate()
    If isLocked Then ILock_Release
    Set mutex = Nothing
    Set config = Nothing
End Sub

' ======================
' ILock実装
' ======================
Private Function ILock_Acquire(Optional ByVal timeout As Long = -1) As Boolean
    On Error GoTo ErrorHandler
    
    ' ミューテックスの作成
    If Not mutex.CreateMutex(False, mutexName) Then
        LogError "ミューテックスの作成に失敗しました。"
        Exit Function
    End If
    
    ' ロックの取得を試みる
    If mutex.WaitForSingleObject(timeout) Then
        isLocked = True
        ILock_Acquire = True
    End If
    Exit Function

ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = ErrLockAcquireFailed
        .Description = "ロックの取得に失敗しました: " & Err.Description
        .Category = ECSystem
        .Source = MODULE_NAME
        .ProcedureName = "ILock_Acquire"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errInfo
End Function

Private Sub ILock_Release()
    If Not isLocked Then Exit Sub
    
    On Error GoTo ErrorHandler
    
    If Not mutex.ReleaseMutex() Then
        LogError "ロックの解放に失敗しました。"
    End If
    isLocked = False
    Exit Sub

ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = ErrLockReleaseFailed
        .Description = "ロックの解放に失敗しました: " & Err.Description
        .Category = ECSystem
        .Source = MODULE_NAME
        .ProcedureName = "ILock_Release"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errInfo
End Sub

' ======================
' パブリックメソッド
' ======================
Public Sub Configure(ByVal newMutexName As String)
    mutexName = newMutexName
End Sub

' ======================
' プライベートメソッド
' ======================
Private Sub LogError(ByVal message As String)
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = ErrUnexpected
        .Description = message
        .Category = ECSystem
        .Source = MODULE_NAME
        .ProcedureName = "Unknown"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errInfo
End Sub

' ======================
' テストサポート機能
' ======================
#If DEBUG Then
    Public Function ValidateLockState() As Boolean
        ValidateLockState = isLocked
    End Function
    
    Public Property Get MutexName() As String
        MutexName = mutexName
    End Property
    
    Public Sub ForceRelease()
        If isLocked Then ILock_Release
    End Sub
#End If

================
File: clsSemaphoreLock.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "clsSemaphoreLock"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements ILock

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "clsSemaphoreLock"

' ======================
' Win32 API宣言
' ======================
Private Declare Function CreateSemaphore Lib "kernel32" Alias "CreateSemaphoreA" ( _
    ByVal lpSemaphoreAttributes As Long, _
    ByVal lInitialCount As Long, _
    ByVal lMaximumCount As Long, _
    ByVal lpName As String) As Long

Private Declare Function ReleaseSemaphore Lib "kernel32" ( _
    ByVal hSemaphore As Long, _
    ByVal lReleaseCount As Long, _
    ByRef lpPreviousCount As Long) As Long

Private Declare Function WaitForSingleObject Lib "kernel32" ( _
    ByVal hHandle As Long, _
    ByVal dwMilliseconds As Long) As Long

Private Declare Function CloseHandle Lib "kernel32" ( _
    ByVal hObject As Long) As Long

' ======================
' 定数定義
' ======================
Private Const WAIT_OBJECT_0 As Long = 0
Private Const WAIT_TIMEOUT As Long = &H102&
Private Const INFINITE As Long = -1

' ======================
' メンバ変数
' ======================
Private semaphoreHandle As Long
Private semaphoreName As String
Private isLocked As Boolean
Private config As IAppConfig

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    Set config = modConfig.GetAppConfig
    semaphoreName = config.GetSetting("SemaphoreName", "Global\MyApp_ModCommon_Semaphore")
    isLocked = False
    InitializeSemaphore
End Sub

Private Sub Class_Terminate()
    If isLocked Then ILock_Release
    If semaphoreHandle <> 0 Then CloseHandle semaphoreHandle
    Set config = Nothing
End Sub

' ======================
' ILock実装
' ======================
Private Function ILock_Acquire(Optional ByVal timeout As Long = -1) As Boolean
    On Error GoTo ErrorHandler
    
    If semaphoreHandle = 0 Then
        If Not InitializeSemaphore Then Exit Function
    End If
    
    Dim waitResult As Long
    waitResult = WaitForSingleObject(semaphoreHandle, timeout)
    
    Select Case waitResult
        Case WAIT_OBJECT_0
            isLocked = True
            ILock_Acquire = True
        Case WAIT_TIMEOUT
            ' タイムアウト - 何もしない
        Case Else
            LogError "セマフォの取得に失敗しました。"
    End Select
    Exit Function

ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = ErrLockAcquireFailed
        .Description = "セマフォの取得に失敗しました: " & Err.Description
        .Category = ECSystem
        .Source = MODULE_NAME
        .ProcedureName = "ILock_Acquire"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errInfo
End Function

Private Sub ILock_Release()
    If Not isLocked Then Exit Sub
    
    On Error GoTo ErrorHandler
    
    Dim previousCount As Long
    If ReleaseSemaphore(semaphoreHandle, 1, previousCount) = 0 Then
        LogError "セマフォの解放に失敗しました。"
    Else
        isLocked = False
    End If
    Exit Sub

ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = ErrLockReleaseFailed
        .Description = "セマフォの解放に失敗しました: " & Err.Description
        .Category = ECSystem
        .Source = MODULE_NAME
        .ProcedureName = "ILock_Release"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errInfo
End Sub

' ======================
' パブリックメソッド
' ======================
Public Sub Configure(ByVal newSemaphoreName As String)
    If isLocked Then ILock_Release
    If semaphoreHandle <> 0 Then CloseHandle semaphoreHandle
    semaphoreName = newSemaphoreName
    InitializeSemaphore
End Sub

' ======================
' プライベートメソッド
' ======================
Private Function InitializeSemaphore() As Boolean
    semaphoreHandle = CreateSemaphore(0&, 1, 1, semaphoreName)
    InitializeSemaphore = (semaphoreHandle <> 0)
End Function

Private Sub LogError(ByVal message As String)
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = ErrUnexpected
        .Description = message
        .Category = ECSystem
        .Source = MODULE_NAME
        .ProcedureName = "Unknown"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errInfo
End Sub

' ======================
' テストサポート機能
' ======================
#If DEBUG Then
    Public Function ValidateLockState() As Boolean
        ValidateLockState = isLocked
    End Function
    
    Public Property Get SemaphoreName() As String
        SemaphoreName = semaphoreName
    End Property
    
    Public Sub ForceRelease()
        If isLocked Then ILock_Release
    End Sub
#End If

================
File: CryptographyImpl.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "CryptographyImpl"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements ICryptography

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "CryptographyImpl"

' ======================
' メンバ変数
' ======================
Private mCryptoProvider As LongPtr
Private mHash As LongPtr
Private mKey As LongPtr
Private mIsInitialized As Boolean
Private mPerformanceMonitor As clsPerformanceMonitor
Private mLock As clsLock

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    mCryptoProvider = 0
    mHash = 0
    mKey = 0
    Set mPerformanceMonitor = New clsPerformanceMonitor
    Set mLock = New clsLock
    mIsInitialized = True
End Sub

Private Sub Class_Terminate()
    CleanupResources
    Set mPerformanceMonitor = Nothing
    Set mLock = Nothing
    mIsInitialized = False
End Sub

' ======================
' ICryptography実装
' ======================
Private Function ICryptography_CryptAcquireContext(ByVal container As String, _
                                                 ByVal provider As String, _
                                                 ByVal provType As Long, _
                                                 ByVal flags As Long) As Boolean
    If Not mIsInitialized Then Exit Function
    
    mPerformanceMonitor.StartMeasurement "CryptAcquireContext"
    mLock.AcquireLock
    
    On Error GoTo ErrorHandler
    
    ' 既存のプロバイダをクリーンアップ
    If mCryptoProvider <> 0 Then
        modWindowsAPI.CryptReleaseContext mCryptoProvider, 0
        mCryptoProvider = 0
    End If
    
    ' 新しいプロバイダを取得
    Dim result As Boolean
    result = (modWindowsAPI.CryptAcquireContext(mCryptoProvider, container, provider, provType, flags) <> 0)
    
    ICryptography_CryptAcquireContext = result
    
CleanUp:
    mLock.ReleaseLock
    mPerformanceMonitor.EndMeasurement "CryptAcquireContext"
    Exit Function

ErrorHandler:
    LogError "暗号化プロバイダの取得中にエラーが発生しました: " & Err.Description
    ICryptography_CryptAcquireContext = False
    Resume CleanUp
End Function

Private Function ICryptography_CryptCreateHash(ByVal algorithm As Long) As Boolean
    If Not mIsInitialized Then Exit Function
    If mCryptoProvider = 0 Then Exit Function
    
    mPerformanceMonitor.StartMeasurement "CryptCreateHash"
    mLock.AcquireLock
    
    On Error GoTo ErrorHandler
    
    ' 既存のハッシュをクリーンアップ
    If mHash <> 0 Then
        modWindowsAPI.CryptDestroyHash mHash
        mHash = 0
    End If
    
    ' 新しいハッシュを作成
    Dim result As Boolean
    result = (modWindowsAPI.CryptCreateHash(mCryptoProvider, algorithm, 0, 0, mHash) <> 0)
    
    ICryptography_CryptCreateHash = result
    
CleanUp:
    mLock.ReleaseLock
    mPerformanceMonitor.EndMeasurement "CryptCreateHash"
    Exit Function

ErrorHandler:
    LogError "ハッシュの作成中にエラーが発生しました: " & Err.Description
    ICryptography_CryptCreateHash = False
    Resume CleanUp
End Function

Private Function ICryptography_CryptHashData(ByRef data As Any, _
                                           ByVal dataLen As Long) As Boolean
    If Not mIsInitialized Then Exit Function
    If mHash = 0 Then Exit Function
    
    mPerformanceMonitor.StartMeasurement "CryptHashData"
    mLock.AcquireLock
    
    On Error GoTo ErrorHandler
    
    Dim result As Boolean
    result = (modWindowsAPI.CryptHashData(mHash, data, dataLen, 0) <> 0)
    
    ICryptography_CryptHashData = result
    
CleanUp:
    mLock.ReleaseLock
    mPerformanceMonitor.EndMeasurement "CryptHashData"
    Exit Function

ErrorHandler:
    LogError "データのハッシュ化中にエラーが発生しました: " & Err.Description
    ICryptography_CryptHashData = False
    Resume CleanUp
End Function

Private Function ICryptography_CryptDeriveKey(ByVal algorithm As Long, _
                                            ByVal flags As Long) As Boolean
    If Not mIsInitialized Then Exit Function
    If mHash = 0 Then Exit Function
    
    mPerformanceMonitor.StartMeasurement "CryptDeriveKey"
    mLock.AcquireLock
    
    On Error GoTo ErrorHandler
    
    ' 既存の鍵をクリーンアップ
    If mKey <> 0 Then
        modWindowsAPI.CryptDestroyKey mKey
        mKey = 0
    End If
    
    ' 新しい鍵を生成
    Dim result As Boolean
    result = (modWindowsAPI.CryptDeriveKey(mCryptoProvider, algorithm, mHash, flags, mKey) <> 0)
    
    ICryptography_CryptDeriveKey = result
    
CleanUp:
    mLock.ReleaseLock
    mPerformanceMonitor.EndMeasurement "CryptDeriveKey"
    Exit Function

ErrorHandler:
    LogError "鍵の生成中にエラーが発生しました: " & Err.Description
    ICryptography_CryptDeriveKey = False
    Resume CleanUp
End Function

Private Function ICryptography_CryptEncrypt(ByRef data As Any, _
                                          ByRef dataLen As Long, _
                                          ByVal bufLen As Long) As Boolean
    If Not mIsInitialized Then Exit Function
    If mKey = 0 Then Exit Function
    
    mPerformanceMonitor.StartMeasurement "CryptEncrypt"
    mLock.AcquireLock
    
    On Error GoTo ErrorHandler
    
    Dim result As Boolean
    result = (modWindowsAPI.CryptEncrypt(mKey, 0, True, 0, data, dataLen, bufLen) <> 0)
    
    ICryptography_CryptEncrypt = result
    
CleanUp:
    mLock.ReleaseLock
    mPerformanceMonitor.EndMeasurement "CryptEncrypt"
    Exit Function

ErrorHandler:
    LogError "データの暗号化中にエラーが発生しました: " & Err.Description
    ICryptography_CryptEncrypt = False
    Resume CleanUp
End Function

Private Function ICryptography_CryptDecrypt(ByRef data As Any, _
                                          ByRef dataLen As Long) As Boolean
    If Not mIsInitialized Then Exit Function
    If mKey = 0 Then Exit Function
    
    mPerformanceMonitor.StartMeasurement "CryptDecrypt"
    mLock.AcquireLock
    
    On Error GoTo ErrorHandler
    
    Dim result As Boolean
    result = (modWindowsAPI.CryptDecrypt(mKey, 0, True, 0, data, dataLen) <> 0)
    
    ICryptography_CryptDecrypt = result
    
CleanUp:
    mLock.ReleaseLock
    mPerformanceMonitor.EndMeasurement "CryptDecrypt"
    Exit Function

ErrorHandler:
    LogError "データの復号化中にエラーが発生しました: " & Err.Description
    ICryptography_CryptDecrypt = False
    Resume CleanUp
End Function

Private Function ICryptography_CryptDestroyKey() As Boolean
    If Not mIsInitialized Then Exit Function
    If mKey = 0 Then Exit Function
    
    mPerformanceMonitor.StartMeasurement "CryptDestroyKey"
    mLock.AcquireLock
    
    On Error GoTo ErrorHandler
    
    Dim result As Boolean
    result = (modWindowsAPI.CryptDestroyKey(mKey) <> 0)
    If result Then mKey = 0
    
    ICryptography_CryptDestroyKey = result
    
CleanUp:
    mLock.ReleaseLock
    mPerformanceMonitor.EndMeasurement "CryptDestroyKey"
    Exit Function

ErrorHandler:
    LogError "鍵の破棄中にエラーが発生しました: " & Err.Description
    ICryptography_CryptDestroyKey = False
    Resume CleanUp
End Function

Private Function ICryptography_CryptDestroyHash() As Boolean
    If Not mIsInitialized Then Exit Function
    If mHash = 0 Then Exit Function
    
    mPerformanceMonitor.StartMeasurement "CryptDestroyHash"
    mLock.AcquireLock
    
    On Error GoTo ErrorHandler
    
    Dim result As Boolean
    result = (modWindowsAPI.CryptDestroyHash(mHash) <> 0)
    If result Then mHash = 0
    
    ICryptography_CryptDestroyHash = result
    
CleanUp:
    mLock.ReleaseLock
    mPerformanceMonitor.EndMeasurement "CryptDestroyHash"
    Exit Function

ErrorHandler:
    LogError "ハッシュの破棄中にエラーが発生しました: " & Err.Description
    ICryptography_CryptDestroyHash = False
    Resume CleanUp
End Function

Private Function ICryptography_CryptReleaseContext() As Boolean
    If Not mIsInitialized Then Exit Function
    If mCryptoProvider = 0 Then Exit Function
    
    mPerformanceMonitor.StartMeasurement "CryptReleaseContext"
    mLock.AcquireLock
    
    On Error GoTo ErrorHandler
    
    Dim result As Boolean
    result = (modWindowsAPI.CryptReleaseContext(mCryptoProvider, 0) <> 0)
    If result Then mCryptoProvider = 0
    
    ICryptography_CryptReleaseContext = result
    
CleanUp:
    mLock.ReleaseLock
    mPerformanceMonitor.EndMeasurement "CryptReleaseContext"
    Exit Function

ErrorHandler:
    LogError "暗号化コンテキストの解放中にエラーが発生しました: " & Err.Description
    ICryptography_CryptReleaseContext = False
    Resume CleanUp
End Function

' ======================
' プライベートメソッド
' ======================
Private Sub CleanupResources()
    If mKey <> 0 Then
        modWindowsAPI.CryptDestroyKey mKey
        mKey = 0
    End If
    
    If mHash <> 0 Then
        modWindowsAPI.CryptDestroyHash mHash
        mHash = 0
    End If
    
    If mCryptoProvider <> 0 Then
        modWindowsAPI.CryptReleaseContext mCryptoProvider, 0
        mCryptoProvider = 0
    End If
End Sub

Private Sub LogError(ByVal message As String)
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = ErrUnexpected
        .Description = message
        .Category = ECSecurity
        .Source = MODULE_NAME
        .ProcedureName = "Unknown"  ' スタックトレースから取得可能
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errInfo
End Sub

' ======================
' テストサポート機能
' ======================
#If DEBUG Then
    Public Function ValidateState() As Boolean
        ValidateState = mIsInitialized And _
                       Not (mPerformanceMonitor Is Nothing) And _
                       Not (mLock Is Nothing)
    End Function
    
    Public Sub ForceCleanup()
        CleanupResources
    End Sub
    
    Public Function GetPerformanceMonitor() As clsPerformanceMonitor
        Set GetPerformanceMonitor = mPerformanceMonitor
    End Function
#End If

================
File: MutexImpl.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "MutexImpl"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements IMutex

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "MutexImpl"

' ======================
' プライベート変数
' ======================
Private mMutexHandle As LongPtr
Private mIsInitialized As Boolean
Private mPerformanceMonitor As clsPerformanceMonitor

' ======================
' Win32 APIの再定義
' ======================
Private Const WAIT_OBJECT_0 As Long = 0
Private Const WAIT_FAILED As Long = &HFFFFFFFF
Private Const WAIT_ABANDONED As Long = &H80
Private Const ERROR_ALREADY_EXISTS As Long = 183&

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    mMutexHandle = 0
    Set mPerformanceMonitor = New clsPerformanceMonitor
    mIsInitialized = True
End Sub

Private Sub Class_Terminate()
    If mMutexHandle <> 0 Then
        modWindowsAPI.CloseHandle mMutexHandle
        mMutexHandle = 0
    End If
    Set mPerformanceMonitor = Nothing
    mIsInitialized = False
End Sub

' ======================
' IMutex実装
' ======================
Private Function IMutex_CreateMutex(ByVal initialOwner As Boolean, ByVal name As String) As Boolean
    If Not mIsInitialized Then Exit Function
    
    mPerformanceMonitor.StartMeasurement "CreateMutex"
    On Error GoTo ErrorHandler
    
    ' 既存のハンドルをクリーンアップ
    If mMutexHandle <> 0 Then
        modWindowsAPI.CloseHandle mMutexHandle
        mMutexHandle = 0
    End If
    
    ' ミューテックスの作成
    mMutexHandle = modWindowsAPI.CreateMutex(0&, IIf(initialOwner, 1&, 0&), name)
    
    If mMutexHandle = 0 Then
        LogError "ミューテックスの作成に失敗しました。"
        IMutex_CreateMutex = False
    Else
        IMutex_CreateMutex = True
    End If
    
    mPerformanceMonitor.EndMeasurement "CreateMutex"
    Exit Function

ErrorHandler:
    LogError "ミューテックスの作成中にエラーが発生しました: " & Err.Description
    If Not mPerformanceMonitor Is Nothing Then
        mPerformanceMonitor.EndMeasurement "CreateMutex"
    End If
    IMutex_CreateMutex = False
End Function

Private Function IMutex_ReleaseMutex() As Boolean
    If Not mIsInitialized Then Exit Function
    If mMutexHandle = 0 Then Exit Function
    
    mPerformanceMonitor.StartMeasurement "ReleaseMutex"
    On Error GoTo ErrorHandler
    
    IMutex_ReleaseMutex = (modWindowsAPI.ReleaseMutex(mMutexHandle) <> 0)
    
    mPerformanceMonitor.EndMeasurement "ReleaseMutex"
    Exit Function

ErrorHandler:
    LogError "ミューテックスの解放中にエラーが発生しました: " & Err.Description
    If Not mPerformanceMonitor Is Nothing Then
        mPerformanceMonitor.EndMeasurement "ReleaseMutex"
    End If
    IMutex_ReleaseMutex = False
End Function

Private Function IMutex_WaitForSingleObject(ByVal timeoutMilliseconds As Long) As Boolean
    If Not mIsInitialized Then Exit Function
    If mMutexHandle = 0 Then Exit Function
    
    mPerformanceMonitor.StartMeasurement "WaitForSingleObject"
    On Error GoTo ErrorHandler
    
    Dim result As Long
    result = modWindowsAPI.WaitForSingleObject(mMutexHandle, timeoutMilliseconds)
    
    Select Case result
        Case WAIT_OBJECT_0, WAIT_ABANDONED
            IMutex_WaitForSingleObject = True
        Case Else
            IMutex_WaitForSingleObject = False
    End Select
    
    mPerformanceMonitor.EndMeasurement "WaitForSingleObject"
    Exit Function

ErrorHandler:
    LogError "ミューテックスの待機中にエラーが発生しました: " & Err.Description
    If Not mPerformanceMonitor Is Nothing Then
        mPerformanceMonitor.EndMeasurement "WaitForSingleObject"
    End If
    IMutex_WaitForSingleObject = False
End Function

' ======================
' プライベートメソッド
' ======================
Private Sub LogError(ByVal message As String)
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = ErrUnexpected
        .Description = message
        .Category = ECSystem
        .Source = MODULE_NAME
        .ProcedureName = "Unknown"  ' スタックトレースから取得可能
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errInfo
End Sub

' ======================
' テストサポート機能
' ======================
#If DEBUG Then
    Public Function GetMutexHandle() As LongPtr
        GetMutexHandle = mMutexHandle
    End Function
    
    Public Function IsValid() As Boolean
        IsValid = (mMutexHandle <> 0)
    End Function
    
    Public Sub ForceRelease()
        If mMutexHandle <> 0 Then
            modWindowsAPI.CloseHandle mMutexHandle
            mMutexHandle = 0
        End If
    End Sub
    
    Public Function GetPerformanceMonitor() As clsPerformanceMonitor
        Set GetPerformanceMonitor = mPerformanceMonitor
    End Function
#End If

================
File: MutexLock.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "MutexLock"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements ILock

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "MutexLock"

' ======================
' メンバ変数
' ======================
Private mMutex As IMutex
Private mMutexName As String
Private mIsLocked As Boolean
Private mConfig As IAppConfig

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    Set mMutex = New MutexImpl
    Set mConfig = modConfig.GetAppConfig
    ' ミューテックス名を設定から取得
    mMutexName = mConfig.GetSetting("MutexName", "Global\MyApp_ModCommon_Mutex")
    mIsLocked = False
End Sub

Private Sub Class_Terminate()
    If mIsLocked Then ILock_Release
    Set mMutex = Nothing
    Set mConfig = Nothing
End Sub

' ======================
' ILock実装
' ======================
Private Function ILock_Acquire(Optional ByVal timeout As Long = -1) As Boolean
    On Error GoTo ErrorHandler
    
    ' ミューテックスの作成
    If Not mMutex.CreateMutex(False, mMutexName) Then
        LogError "ミューテックスの作成に失敗しました。"
        Exit Function
    End If
    
    ' ロックの取得を試みる
    If mMutex.WaitForSingleObject(timeout) Then
        mIsLocked = True
        ILock_Acquire = True
    End If
    Exit Function

ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = ErrLockAcquireFailed
        .Description = "ロックの取得に失敗しました: " & Err.Description
        .Category = ECSystem
        .Source = MODULE_NAME
        .ProcedureName = "ILock_Acquire"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errInfo
End Function

Private Sub ILock_Release()
    If Not mIsLocked Then Exit Sub
    
    On Error GoTo ErrorHandler
    
    If Not mMutex.ReleaseMutex() Then
        LogError "ロックの解放に失敗しました。"
    End If
    mIsLocked = False
    Exit Sub

ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = ErrLockReleaseFailed
        .Description = "ロックの解放に失敗しました: " & Err.Description
        .Category = ECSystem
        .Source = MODULE_NAME
        .ProcedureName = "ILock_Release"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errInfo
End Sub

' ======================
' パブリックメソッド
' ======================
Public Sub Configure(ByVal mutexName As String)
    mMutexName = mutexName
End Sub

' ======================
' プライベートメソッド
' ======================
Private Sub LogError(ByVal message As String)
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = ErrUnexpected
        .Description = message
        .Category = ECSystem
        .Source = MODULE_NAME
        .ProcedureName = "Unknown"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errInfo
End Sub

' ======================
' テストサポート機能
' ======================
#If DEBUG Then
    Public Function ValidateLockState() As Boolean
        ValidateLockState = mIsLocked
    End Function
    
    Public Property Get MutexName() As String
        MutexName = mMutexName
    End Property
    
    Public Sub ForceRelease()
        If mIsLocked Then ILock_Release
    End Sub
#End If

================
File: PBKDF2KeyDerivationStrategy.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "PBKDF2KeyDerivationStrategy"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements IKeyDerivationStrategy

' 定数定義
Private Const MS_ENHANCED_PROV As String = "Microsoft Enhanced Cryptographic Provider v1.0"
Private Const PROV_RSA_FULL As Long = 1
Private Const CRYPT_VERIFYCONTEXT As Long = &HF0000000
Private Const CALG_SHA_256 As Long = &H800C
Private Const CALG_AES_256 As Long = &H6610

' メンバ変数
Private mCryptoProvider As LongPtr
Private mInitialized As Boolean

Private Sub Class_Initialize()
    InitializeCrypto
End Sub

Private Sub Class_Terminate()
    If mInitialized Then
        CryptReleaseContext mCryptoProvider, 0
    End If
End Sub

Private Sub InitializeCrypto()
    If modWindowsAPI.CryptAcquireContext(mCryptoProvider, vbNullString, MS_ENHANCED_PROV, PROV_RSA_FULL, CRYPT_VERIFYCONTEXT) <> 0 Then
        mInitialized = True
    Else
        Dim errInfo As ErrorInfo
        With errInfo
            .Code = ErrCryptoProviderInitFailed
            .Description = "暗号化プロバイダーの初期化に失敗しました。"
            .Category = ECSecurity
            .Source = "PBKDF2KeyDerivationStrategy"
            .ProcedureName = "InitializeCrypto"
            .StackTrace = modStackTrace.GetStackTrace()
            .OccurredAt = Now
        End With
        modError.HandleError errInfo
    End If
End Sub

Private Function IKeyDerivationStrategy_DeriveKey(ByVal password As String, ByRef salt As Variant, ByVal iterations As Long) As Byte()
    If Not mInitialized Then
        Dim errInfo As ErrorInfo
        With errInfo
            .Code = ErrCryptoNotInitialized
            .Description = "暗号化プロバイダーが初期化されていません。"
            .Category = ECSecurity
            .Source = "PBKDF2KeyDerivationStrategy"
            .ProcedureName = "DeriveKey"
            .StackTrace = modStackTrace.GetStackTrace()
            .OccurredAt = Now
        End With
        modError.HandleError errInfo
        Exit Function
    End If
    
    ' ハッシュオブジェクトの作成
    Dim hHash As LongPtr
    If CryptCreateHash(mCryptoProvider, CALG_SHA_256, 0, 0, hHash) = 0 Then
        RaiseError ErrCryptoHashCreateFailed, "ハッシュオブジェクトの作成に失敗しました。"
        Exit Function
    End If
    
    ' パスワードとソルトを結合
    Dim combinedData() As Byte
    ReDim combinedData(0 To Len(password) + UBound(salt) + 1)
    CopyMemory combinedData(0), ByVal StrPtr(password), Len(password) * 2
    CopyMemory combinedData(Len(password)), salt(0), UBound(salt) + 1
    
    ' 反復処理でキーを生成
    Dim i As Long
    For i = 1 To iterations
        If CryptHashData(hHash, combinedData(0), UBound(combinedData) + 1, 0) = 0 Then
            CryptDestroyHash hHash
            RaiseError ErrCryptoHashDataFailed, "データのハッシュ化に失敗しました。"
            Exit Function
        End If
    Next i
    
    ' ハッシュ値の取得
    Dim hashLen As Long
    If CryptGetHashParam(hHash, HP_HASHSIZE, hashLen, 4, 0) = 0 Then
        CryptDestroyHash hHash
        RaiseError ErrCryptoHashDataFailed, "ハッシュサイズの取得に失敗しました。"
        Exit Function
    End If
    
    Dim derivedKey() As Byte
    ReDim derivedKey(0 To hashLen - 1)
    If CryptGetHashParam(hHash, HP_HASHVAL, derivedKey(0), hashLen, 0) = 0 Then
        CryptDestroyHash hHash
        RaiseError ErrCryptoHashDataFailed, "ハッシュ値の取得に失敗しました。"
        Exit Function
    End If
    
    ' ハッシュオブジェクトの破棄
    CryptDestroyHash hHash
    
    IKeyDerivationStrategy_DeriveKey = derivedKey
End Function

Private Sub RaiseError(ByVal errorCode As Long, ByVal description As String)
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = errorCode
        .Description = description
        .Category = ECSecurity
        .Source = "PBKDF2KeyDerivationStrategy"
        .ProcedureName = "DeriveKey"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errInfo
End Sub

================
File: tests/MockCryptography.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "MockCryptography"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements ICryptography

Private mEncryptWasCalled As Boolean
Private mDecryptWasCalled As Boolean
Private mEncryptedValue As String
Private mDecryptedValue As String
Private mShouldThrowError As Boolean
Private mErrorNumber As Long
Private mErrorMessage As String

Private Sub Class_Initialize()
    ResetFlags
    mShouldThrowError = False
    mErrorNumber = 0
    mErrorMessage = ""
End Sub

'@Description("暗号化時の戻り値を設定")
Public Sub SetupEncryption(ByVal encryptedValue As String)
    mEncryptedValue = encryptedValue
End Sub

'@Description("復号化時の戻り値を設定")
Public Sub SetupDecryption(ByVal decryptedValue As String)
    mDecryptedValue = decryptedValue
End Sub

'@Description("エラーをシミュレートするように設定")
Public Sub SetupError(ByVal errorNumber As Long, ByVal errorMessage As String)
    mShouldThrowError = True
    mErrorNumber = errorNumber
    mErrorMessage = errorMessage
End Sub

'@Description("暗号化メソッドが呼び出されたかどうか")
Public Property Get EncryptWasCalled() As Boolean
    EncryptWasCalled = mEncryptWasCalled
End Property

'@Description("復号化メソッドが呼び出されたかどうか")
Public Property Get DecryptWasCalled() As Boolean
    DecryptWasCalled = mDecryptWasCalled
End Property

'@Description("フラグをリセット")
Public Sub ResetFlags()
    mEncryptWasCalled = False
    mDecryptWasCalled = False
    mEncryptedValue = ""
    mDecryptedValue = ""
End Sub

'ICryptography実装

Private Function ICryptography_Encrypt(ByVal value As String, ByVal key As String) As String
    If mShouldThrowError Then
        Err.Raise mErrorNumber, "MockCryptography", mErrorMessage
    End If
    
    mEncryptWasCalled = True
    If mEncryptedValue = "" Then
        ' デフォルトの動作：単純な文字列操作で暗号化をシミュレート
        ICryptography_Encrypt = "ENC:" & value
    Else
        ICryptography_Encrypt = mEncryptedValue
    End If
End Function

Private Function ICryptography_Decrypt(ByVal value As String, ByVal key As String) As String
    If mShouldThrowError Then
        Err.Raise mErrorNumber, "MockCryptography", mErrorMessage
    End If
    
    mDecryptWasCalled = True
    If mDecryptedValue = "" Then
        ' デフォルトの動作：単純な文字列操作で復号化をシミュレート
        If Left$(value, 4) = "ENC:" Then
            ICryptography_Decrypt = Mid$(value, 5)
        Else
            ICryptography_Decrypt = value
        End If
    Else
        ICryptography_Decrypt = mDecryptedValue
    End If
End Function

' 未使用のインターフェースメソッド
Private Function ICryptography_CreateHash() As Long
    ' テストでは使用しない
End Function

Private Sub ICryptography_DestroyHash(ByVal hHash As Long)
    ' テストでは使用しない
End Sub

Private Function ICryptography_DeriveKey(ByVal password As String, Optional ByVal salt As String) As String
    ' テストでは使用しない
End Function

Private Function ICryptography_GetCryptoContext() As Long
    ' テストでは使用しない
End Function

Private Sub ICryptography_ReleaseCryptoContext(ByVal hCryptProv As Long)
    ' テストでは使用しない
End Sub

Private Function ICryptography_HashData(ByVal hHash As Long, ByVal data() As Byte) As Boolean
    ' テストでは使用しない
End Function

Private Sub ICryptography_DestroyKey(ByVal hKey As Long)
    ' テストでは使用しない
End Sub

================
File: tests/MockDatabaseConfig.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "MockDatabaseConfig"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements IDatabaseConfig

' モック用の内部状態
Private mConnectionString As String
Private mMaxPoolSize As Long
Private mRetryCount As Long
Private mRetryInterval As Long
Private mConnectionTimeout As Long

' メソッド呼び出し回数のカウンター
Private mGetConnectionStringCallCount As Long
Private mGetMaxPoolSizeCallCount As Long
Private mGetRetryCountCallCount As Long
Private mGetRetryIntervalCallCount As Long
Private mGetConnectionTimeoutCallCount As Long

'*******************************************************************************
' 初期化
'*******************************************************************************
Private Sub Class_Initialize()
    ' デフォルト値の設定
    mConnectionString = "Provider=SQLOLEDB;Data Source=TestServer;"
    mMaxPoolSize = 5
    mRetryCount = 3
    mRetryInterval = 1000
    mConnectionTimeout = 30000
    
    ' カウンターの初期化
    mGetConnectionStringCallCount = 0
    mGetMaxPoolSizeCallCount = 0
    mGetRetryCountCallCount = 0
    mGetRetryIntervalCallCount = 0
    mGetConnectionTimeoutCallCount = 0
End Sub

'*******************************************************************************
' IDatabaseConfig インターフェースの実装
'*******************************************************************************
Private Function IDatabaseConfig_GetConnectionString() As String
    mGetConnectionStringCallCount = mGetConnectionStringCallCount + 1
    IDatabaseConfig_GetConnectionString = mConnectionString
End Function

Private Function IDatabaseConfig_GetMaxPoolSize() As Long
    mGetMaxPoolSizeCallCount = mGetMaxPoolSizeCallCount + 1
    IDatabaseConfig_GetMaxPoolSize = mMaxPoolSize
End Function

Private Function IDatabaseConfig_GetRetryCount() As Long
    mGetRetryCountCallCount = mGetRetryCountCallCount + 1
    IDatabaseConfig_GetRetryCount = mRetryCount
End Function

Private Function IDatabaseConfig_GetRetryInterval() As Long
    mGetRetryIntervalCallCount = mGetRetryIntervalCallCount + 1
    IDatabaseConfig_GetRetryInterval = mRetryInterval
End Function

Private Function IDatabaseConfig_GetConnectionTimeout() As Long
    mGetConnectionTimeoutCallCount = mGetConnectionTimeoutCallCount + 1
    IDatabaseConfig_GetConnectionTimeout = mConnectionTimeout
End Function

'*******************************************************************************
' モック用のセッターメソッド
'*******************************************************************************
Public Sub SetConnectionString(ByVal value As String)
    mConnectionString = value
End Sub

Public Sub SetMaxPoolSize(ByVal value As Long)
    mMaxPoolSize = value
End Sub

Public Sub SetRetryCount(ByVal value As Long)
    mRetryCount = value
End Sub

Public Sub SetRetryInterval(ByVal value As Long)
    mRetryInterval = value
End Sub

Public Sub SetConnectionTimeout(ByVal value As Long)
    mConnectionTimeout = value
End Sub

'*******************************************************************************
' 呼び出し回数の取得メソッド
'*******************************************************************************
Public Property Get GetConnectionStringCallCount() As Long
    GetConnectionStringCallCount = mGetConnectionStringCallCount
End Property

Public Property Get GetMaxPoolSizeCallCount() As Long
    GetMaxPoolSizeCallCount = mGetMaxPoolSizeCallCount
End Property

Public Property Get GetRetryCountCallCount() As Long
    GetRetryCountCallCount = mGetRetryCountCallCount
End Property

Public Property Get GetRetryIntervalCallCount() As Long
    GetRetryIntervalCallCount = mGetRetryIntervalCallCount
End Property

Public Property Get GetConnectionTimeoutCallCount() As Long
    GetConnectionTimeoutCallCount = mGetConnectionTimeoutCallCount
End Property

'*******************************************************************************
' カウンターのリセット
'*******************************************************************************
Public Sub ResetCallCounts()
    mGetConnectionStringCallCount = 0
    mGetMaxPoolSizeCallCount = 0
    mGetRetryCountCallCount = 0
    mGetRetryIntervalCallCount = 0
    mGetConnectionTimeoutCallCount = 0
End Sub

================
File: tests/MockError.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "MockError"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "MockError"

' ======================
' インターフェース実装
' ======================
Implements IError

' ======================
' プライベート変数
' ======================
Private mErrors As Collection
Private mLastError As ErrorInfo

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    Set mErrors = New Collection
End Sub

Private Sub Class_Terminate()
    Set mErrors = Nothing
    Set mLastError = Nothing
End Sub

' ======================
' プロパティ
' ======================
Public Property Get Errors() As Collection
    Set Errors = mErrors
End Property

Public Property Get LastError() As ErrorInfo
    Set LastError = mLastError
End Property

' ======================
' メソッド
' ======================
Private Sub IError_HandleError(ByVal errorInfo As ErrorInfo)
    Set mLastError = errorInfo
    mErrors.Add errorInfo
End Sub

Public Sub ClearErrors()
    Set mErrors = New Collection
    Set mLastError = Nothing
End Sub

Public Function GetErrorCount() As Long
    GetErrorCount = mErrors.Count
End Function

Public Function GetErrorAt(ByVal index As Long) As ErrorInfo
    If index <= 0 Or index > mErrors.Count Then
        Err.Raise 9, MODULE_NAME, "インデックスが範囲外です。"
    End If
    Set GetErrorAt = mErrors(index)
End Function

Public Function ContainsError(ByVal errorCode As Long) As Boolean
    Dim err As ErrorInfo
    For Each err In mErrors
        If err.Code = errorCode Then
            ContainsError = True
            Exit Function
        End If
    Next err
    ContainsError = False
End Function

Public Function ContainsErrorMessage(ByVal message As String) As Boolean
    Dim err As ErrorInfo
    For Each err In mErrors
        If InStr(1, err.Description, message, vbTextCompare) > 0 Then
            ContainsErrorMessage = True
            Exit Function
        End If
    Next err
    ContainsErrorMessage = False
End Function

================
File: tests/MockFileIO.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "MockFileIO"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' インターフェース実装
' ======================
Implements IFileIO

' ======================
' プライベート変数
' ======================
Private Type FileExistsEntry
    FilePath As String
    Exists As Boolean
End Type

Private Type CreateFolderEntry
    FolderPath As String
    Success As Boolean
End Type

Private Type OpenFileEntry
    FilePath As String
    Result As Object
End Type

Private Type BinaryFileEntry
    FilePath As String
    Content() As Byte
End Type

Private mFileExistsEntries As Collection
Private mFolderExistsEntries As Collection
Private mCreateFolderEntries As Collection
Private mDeleteFileEntries As Collection
Private mDeleteFolderEntries As Collection
Private mOpenFileEntries As Collection
Private mBinaryFileEntries As Collection

Private mMethodCalls As Collection

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    Set mFileExistsEntries = New Collection
    Set mFolderExistsEntries = New Collection
    Set mCreateFolderEntries = New Collection
    Set mDeleteFileEntries = New Collection
    Set mDeleteFolderEntries = New Collection
    Set mOpenFileEntries = New Collection
    Set mBinaryFileEntries = New Collection
    Set mMethodCalls = New Collection
End Sub

' ======================
' モック設定メソッド
' ======================
Public Sub SetFileExists(ByVal filePath As String, ByVal exists As Boolean)
    Dim entry As FileExistsEntry
    entry.FilePath = filePath
    entry.Exists = exists
    AddToCollection mFileExistsEntries, entry, filePath
End Sub

Public Sub SetFolderExists(ByVal folderPath As String, ByVal exists As Boolean)
    Dim entry As FileExistsEntry
    entry.FilePath = folderPath
    entry.Exists = exists
    AddToCollection mFolderExistsEntries, entry, folderPath
End Sub

Public Sub SetCreateFolderResult(ByVal folderPath As String, ByVal success As Boolean)
    Dim entry As CreateFolderEntry
    entry.FolderPath = folderPath
    entry.Success = success
    AddToCollection mCreateFolderEntries, entry, folderPath
End Sub

Public Sub SetOpenFileResult(ByVal filePath As String, ByVal result As Object)
    Dim entry As OpenFileEntry
    entry.FilePath = filePath
    Set entry.Result = result
    AddToCollection mOpenFileEntries, entry, filePath
End Sub

Public Sub SetBinaryFileContent(ByVal filePath As String, ByRef content() As Byte)
    Dim entry As BinaryFileEntry
    entry.FilePath = filePath
    ReDim entry.Content(LBound(content) To UBound(content))
    Dim i As Long
    For i = LBound(content) To UBound(content)
        entry.Content(i) = content(i)
    Next i
    AddToCollection mBinaryFileEntries, entry, filePath
End Sub

' ======================
' 検証メソッド
' ======================
Public Function WasMethodCalled(ByVal methodName As String) As Boolean
    Dim call As Variant
    For Each call In mMethodCalls
        If call = methodName Then
            WasMethodCalled = True
            Exit Function
        End If
    Next call
    WasMethodCalled = False
End Function

Public Function GetMethodCallCount(ByVal methodName As String) As Long
    Dim count As Long
    Dim call As Variant
    For Each call In mMethodCalls
        If call = methodName Then count = count + 1
    Next call
    GetMethodCallCount = count
End Function

' ======================
' IFileIO実装
' ======================
Private Function IFileIO_FileExists(ByVal filePath As String) As Boolean
    mMethodCalls.Add "FileExists"
    
    Dim entry As FileExistsEntry
    Dim var As Variant
    For Each var In mFileExistsEntries
        entry = var
        If entry.FilePath = filePath Then
            IFileIO_FileExists = entry.Exists
            Exit Function
        End If
    Next var
    IFileIO_FileExists = False
End Function

Private Function IFileIO_FolderExists(ByVal folderPath As String) As Boolean
    mMethodCalls.Add "FolderExists"
    
    Dim entry As FileExistsEntry
    Dim var As Variant
    For Each var In mFolderExistsEntries
        entry = var
        If entry.FilePath = folderPath Then
            IFileIO_FolderExists = entry.Exists
            Exit Function
        End If
    Next var
    IFileIO_FolderExists = False
End Function

Private Function IFileIO_CreateFolder(ByVal folderPath As String) As Boolean
    mMethodCalls.Add "CreateFolder"
    
    Dim entry As CreateFolderEntry
    Dim var As Variant
    For Each var In mCreateFolderEntries
        entry = var
        If entry.FolderPath = folderPath Then
            IFileIO_CreateFolder = entry.Success
            Exit Function
        End If
    Next var
    IFileIO_CreateFolder = False
End Function

Private Function IFileIO_DeleteFile(ByVal filePath As String) As Boolean
    mMethodCalls.Add "DeleteFile"
    IFileIO_DeleteFile = True ' デフォルトで成功を返す
End Function

Private Function IFileIO_CopyFile(ByVal sourceFilePath As String, ByVal destinationFilePath As String) As Boolean
    mMethodCalls.Add "CopyFile"
    IFileIO_CopyFile = True ' デフォルトで成功を返す
End Function

Private Function IFileIO_MoveFile(ByVal sourceFilePath As String, ByVal destinationFilePath As String) As Boolean
    mMethodCalls.Add "MoveFile"
    IFileIO_MoveFile = True ' デフォルトで成功を返す
End Function

Private Function IFileIO_OpenFile(ByVal filePath As String, ByVal mode As String) As Object
    mMethodCalls.Add "OpenFile"
    
    Dim entry As OpenFileEntry
    Dim var As Variant
    For Each var In mOpenFileEntries
        entry = var
        If entry.FilePath = filePath Then
            Set IFileIO_OpenFile = entry.Result
            Exit Function
        End If
    Next var
    Set IFileIO_OpenFile = Nothing
End Function

Private Function IFileIO_CloseFile(ByVal file As Object) As Boolean
    mMethodCalls.Add "CloseFile"
    IFileIO_CloseFile = True ' デフォルトで成功を返す
End Function

' ======================
' プライベートヘルパーメソッド
' ======================
Private Sub AddToCollection(ByVal col As Collection, ByRef entry As Variant, ByVal key As String)
    On Error Resume Next
    col.Remove key
    On Error GoTo 0
    col.Add entry, key
End Sub

================
File: tests/MockFileOperations.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "MockFileOperations"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements IFileOperations

Private mFileExists As Boolean
Private mFileAccessError As Boolean
Private mCopyFileWasCalled As Boolean
Private mReadFileWasCalled As Boolean
Private mWriteFileWasCalled As Boolean
Private mFileContents As Dictionary
Private mLastSourcePath As String
Private mLastDestPath As String

Private Sub Class_Initialize()
    Set mFileContents = New Dictionary
    ResetFlags
End Sub

Private Sub Class_Terminate()
    Set mFileContents = Nothing
End Sub

'@Description("ファイルの存在有無を設定")
Public Sub SetupFileExists(ByVal exists As Boolean)
    mFileExists = exists
End Sub

'@Description("ファイルアクセスエラーを設定")
Public Sub SetupFileAccessError(ByVal hasError As Boolean)
    mFileAccessError = hasError
End Sub

'@Description("ファイルの内容を設定")
Public Sub SetupFileContent(ByVal path As String, ByVal content As String)
    mFileContents(path) = content
End Sub

'@Description("CopyFileメソッドが呼び出されたかどうか")
Public Property Get CopyFileWasCalled() As Boolean
    CopyFileWasCalled = mCopyFileWasCalled
End Property

'@Description("ReadTextFileメソッドが呼び出されたかどうか")
Public Property Get ReadFileWasCalled() As Boolean
    ReadFileWasCalled = mReadFileWasCalled
End Property

'@Description("WriteTextFileメソッドが呼び出されたかどうか")
Public Property Get WriteFileWasCalled() As Boolean
    WriteFileWasCalled = mWriteFileWasCalled
End Property

'@Description("最後にコピーされたソースパス")
Public Property Get LastSourcePath() As String
    LastSourcePath = mLastSourcePath
End Property

'@Description("最後にコピーされた宛先パス")
Public Property Get LastDestPath() As String
    LastDestPath = mLastDestPath
End Property

'@Description("フラグをリセット")
Public Sub ResetFlags()
    mFileExists = True
    mFileAccessError = False
    mCopyFileWasCalled = False
    mReadFileWasCalled = False
    mWriteFileWasCalled = False
    mLastSourcePath = ""
    mLastDestPath = ""
    Set mFileContents = New Dictionary
End Sub

' IFileOperations実装

Private Function IFileOperations_FileExists(ByVal path As String) As Boolean
    If mFileAccessError Then
        Err.Raise 75, "MockFileOperations", "ファイルアクセスエラー"
    End If
    IFileOperations_FileExists = mFileExists
End Function

Private Function IFileOperations_FolderExists(ByVal path As String) As Boolean
    If mFileAccessError Then
        Err.Raise 75, "MockFileOperations", "ファイルアクセスエラー"
    End If
    IFileOperations_FolderExists = mFileExists
End Function

Private Sub IFileOperations_CreateFolder(ByVal path As String)
    If mFileAccessError Then
        Err.Raise 75, "MockFileOperations", "ファイルアクセスエラー"
    End If
End Sub

Private Function IFileOperations_CopyFile(ByVal sourcePath As String, ByVal destPath As String) As Boolean
    If mFileAccessError Then
        Err.Raise 75, "MockFileOperations", "ファイルアクセスエラー"
    End If
    
    mCopyFileWasCalled = True
    mLastSourcePath = sourcePath
    mLastDestPath = destPath
    
    If mFileContents.Exists(sourcePath) Then
        mFileContents(destPath) = mFileContents(sourcePath)
    End If
    
    IFileOperations_CopyFile = True
End Function

Private Function IFileOperations_DeleteFile(ByVal path As String) As Boolean
    If mFileAccessError Then
        Err.Raise 75, "MockFileOperations", "ファイルアクセスエラー"
    End If
    
    If mFileContents.Exists(path) Then
        mFileContents.Remove path
    End If
    
    IFileOperations_DeleteFile = True
End Function

Private Function IFileOperations_MoveFile(ByVal sourcePath As String, ByVal destPath As String) As Boolean
    If mFileAccessError Then
        Err.Raise 75, "MockFileOperations", "ファイルアクセスエラー"
    End If
    
    If mFileContents.Exists(sourcePath) Then
        mFileContents(destPath) = mFileContents(sourcePath)
        mFileContents.Remove sourcePath
    End If
    
    IFileOperations_MoveFile = True
End Function

Private Function IFileOperations_ReadTextFile(ByVal path As String) As String
    If mFileAccessError Then
        Err.Raise 75, "MockFileOperations", "ファイルアクセスエラー"
    End If
    
    mReadFileWasCalled = True
    
    If mFileContents.Exists(path) Then
        IFileOperations_ReadTextFile = mFileContents(path)
    Else
        IFileOperations_ReadTextFile = ""
    End If
End Function

Private Sub IFileOperations_WriteTextFile(ByVal path As String, ByVal content As String)
    If mFileAccessError Then
        Err.Raise 75, "MockFileOperations", "ファイルアクセスエラー"
    End If
    
    mWriteFileWasCalled = True
    mFileContents(path) = content
End Sub

Private Function IFileOperations_ReadBinaryFile(ByVal path As String) As Byte()
    If mFileAccessError Then
        Err.Raise 75, "MockFileOperations", "ファイルアクセスエラー"
    End If
    
    ' バイナリファイルの読み込みは未実装
    Dim result() As Byte
    IFileOperations_ReadBinaryFile = result
End Function

Private Sub IFileOperations_WriteBinaryFile(ByVal path As String, ByVal content() As Byte)
    If mFileAccessError Then
        Err.Raise 75, "MockFileOperations", "ファイルアクセスエラー"
    End If
    
    ' バイナリファイルの書き込みは未実装
End Sub

Private Function IFileOperations_GetAbsolutePath(ByVal path As String) As String
    IFileOperations_GetAbsolutePath = path ' 単純に入力パスを返す
End Function

================
File: tests/MockIniFile.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "MockIniFile"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements IIniFile

Private mReturnValues As Dictionary
Private mWrittenValues As Dictionary
Private mGetCallCount As Long
Private mWriteCallCount As Long

Private Sub Class_Initialize()
    Set mReturnValues = New Dictionary
    Set mWrittenValues = New Dictionary
    mGetCallCount = 0
    mWriteCallCount = 0
End Sub

Private Sub Class_Terminate()
    Set mReturnValues = Nothing
    Set mWrittenValues = Nothing
End Sub

'@Description("テスト用の戻り値を設定する")
Public Sub SetReturnValue(ByVal section As String, ByVal key As String, ByVal value As String)
    Dim dictKey As String
    dictKey = section & "|" & key
    mReturnValues(dictKey) = value
End Sub

'@Description("GetPrivateProfileStringの呼び出し回数を取得")
Public Property Get GetCallCount() As Long
    GetCallCount = mGetCallCount
End Property

'@Description("WritePrivateProfileStringの呼び出し回数を取得")
Public Property Get WriteCallCount() As Long
    WriteCallCount = mWriteCallCount
End Property

'@Description("書き込まれた値を取得する")
Public Function GetWrittenValue(ByVal section As String, ByVal key As String) As String
    Dim dictKey As String
    dictKey = section & "|" & key
    If mWrittenValues.Exists(dictKey) Then
        GetWrittenValue = mWrittenValues(dictKey)
    Else
        GetWrittenValue = ""
    End If
End Function

'@Description("IIniFile.GetPrivateProfileStringの実装")
Private Function IIniFile_GetPrivateProfileString(ByVal section As String, ByVal key As String, ByVal defaultValue As String, ByVal filePath As String) As String
    mGetCallCount = mGetCallCount + 1
    
    Dim dictKey As String
    dictKey = section & "|" & key
    
    If mReturnValues.Exists(dictKey) Then
        IIniFile_GetPrivateProfileString = mReturnValues(dictKey)
    Else
        IIniFile_GetPrivateProfileString = defaultValue
    End If
End Function

'@Description("IIniFile.WritePrivateProfileStringの実装")
Private Function IIniFile_WritePrivateProfileString(ByVal section As String, ByVal key As String, ByVal value As String, ByVal filePath As String) As Boolean
    mWriteCallCount = mWriteCallCount + 1
    
    Dim dictKey As String
    dictKey = section & "|" & key
    mWrittenValues(dictKey) = value
    
    IIniFile_WritePrivateProfileString = True
End Function

'@Description("すべてのカウンターをリセットする")
Public Sub ResetCounters()
    mGetCallCount = 0
    mWriteCallCount = 0
    Set mWrittenValues = New Dictionary
End Sub

================
File: tests/MockLock.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "MockLock"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements ILock

' モック用の内部状態
Private mIsLocked As Boolean
Private mAcquireLockCallCount As Long
Private mReleaseLockCallCount As Long
Private mShouldFailAcquire As Boolean
Private mShouldFailRelease As Boolean

'*******************************************************************************
' 初期化
'*******************************************************************************
Private Sub Class_Initialize()
    mIsLocked = False
    mAcquireLockCallCount = 0
    mReleaseLockCallCount = 0
    mShouldFailAcquire = False
    mShouldFailRelease = False
End Sub

'*******************************************************************************
' ILock インターフェースの実装
'*******************************************************************************
Private Sub ILock_AcquireLock()
    mAcquireLockCallCount = mAcquireLockCallCount + 1
    
    If mShouldFailAcquire Then
        Err.Raise vbObjectError + 1001, "MockLock", "ロックの取得に失敗しました"
    End If
    
    If mIsLocked Then
        Err.Raise vbObjectError + 1002, "MockLock", "既にロックされています"
    End If
    
    mIsLocked = True
End Sub

Private Sub ILock_ReleaseLock()
    mReleaseLockCallCount = mReleaseLockCallCount + 1
    
    If mShouldFailRelease Then
        Err.Raise vbObjectError + 1003, "MockLock", "ロックの解放に失敗しました"
    End If
    
    If Not mIsLocked Then
        Err.Raise vbObjectError + 1004, "MockLock", "ロックされていません"
    End If
    
    mIsLocked = False
End Sub

'*******************************************************************************
' モック用のヘルパーメソッド
'*******************************************************************************
Public Property Get IsLocked() As Boolean
    IsLocked = mIsLocked
End Property

Public Property Get AcquireLockCallCount() As Long
    AcquireLockCallCount = mAcquireLockCallCount
End Property

Public Property Get ReleaseLockCallCount() As Long
    ReleaseLockCallCount = mReleaseLockCallCount
End Property

Public Sub SetShouldFailAcquire(ByVal value As Boolean)
    mShouldFailAcquire = value
End Sub

Public Sub SetShouldFailRelease(ByVal value As Boolean)
    mShouldFailRelease = value
End Sub

Public Sub ResetCallCounts()
    mAcquireLockCallCount = 0
    mReleaseLockCallCount = 0
End Sub

Public Sub Reset()
    mIsLocked = False
    ResetCallCounts
    mShouldFailAcquire = False
    mShouldFailRelease = False
End Sub

'*******************************************************************************
' テスト用のヘルパーメソッド
'*******************************************************************************
Public Function IsLockBalanced() As Boolean
    IsLockBalanced = (mAcquireLockCallCount = mReleaseLockCallCount) And (Not mIsLocked)
End Function

Public Function GetUnbalancedLockCount() As Long
    GetUnbalancedLockCount = mAcquireLockCallCount - mReleaseLockCallCount
End Function

================
File: tests/MockLogger.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "MockLogger"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements ILogger

' ログエントリの構造体
Private Type LogEntry
    Level As String
    Module As String
    Procedure As String
    Message As String
    Timestamp As Date
End Type

' モック用の内部状態
Private mLogEntries() As LogEntry
Private mLogCount As Long
Private mMaxEntries As Long

' カウンター
Private mDebugLogCount As Long
Private mInfoLogCount As Long
Private mWarnLogCount As Long
Private mErrorLogCount As Long

'*******************************************************************************
' 初期化
'*******************************************************************************
Private Sub Class_Initialize()
    mMaxEntries = 1000
    ReDim mLogEntries(1 To mMaxEntries)
    mLogCount = 0
    ResetCounters
End Sub

'*******************************************************************************
' ILogger インターフェースの実装
'*******************************************************************************
Private Sub ILogger_LogDebug(ByVal Module As String, ByVal Procedure As String, ByVal Message As String)
    AddLogEntry "DEBUG", Module, Procedure, Message
    mDebugLogCount = mDebugLogCount + 1
End Sub

Private Sub ILogger_LogInfo(ByVal Module As String, ByVal Procedure As String, ByVal Message As String)
    AddLogEntry "INFO", Module, Procedure, Message
    mInfoLogCount = mInfoLogCount + 1
End Sub

Private Sub ILogger_LogWarning(ByVal Module As String, ByVal Procedure As String, ByVal Message As String)
    AddLogEntry "WARN", Module, Procedure, Message
    mWarnLogCount = mWarnLogCount + 1
End Sub

Private Sub ILogger_LogError(ByVal Module As String, ByVal Procedure As String, ByVal Message As String)
    AddLogEntry "ERROR", Module, Procedure, Message
    mErrorLogCount = mErrorLogCount + 1
End Sub

'*******************************************************************************
' プライベートメソッド
'*******************************************************************************
Private Sub AddLogEntry(ByVal Level As String, ByVal Module As String, ByVal Procedure As String, ByVal Message As String)
    If mLogCount >= mMaxEntries Then Exit Sub
    
    mLogCount = mLogCount + 1
    With mLogEntries(mLogCount)
        .Level = Level
        .Module = Module
        .Procedure = Procedure
        .Message = Message
        .Timestamp = Now
    End With
End Sub

'*******************************************************************************
' モック用のヘルパーメソッド
'*******************************************************************************
Public Property Get LogCount() As Long
    LogCount = mLogCount
End Property

Public Property Get DebugLogCount() As Long
    DebugLogCount = mDebugLogCount
End Property

Public Property Get InfoLogCount() As Long
    InfoLogCount = mInfoLogCount
End Property

Public Property Get WarnLogCount() As Long
    WarnLogCount = mWarnLogCount
End Property

Public Property Get ErrorLogCount() As Long
    ErrorLogCount = mErrorLogCount
End Property

Public Function GetLogEntry(ByVal index As Long) As String
    If index < 1 Or index > mLogCount Then
        GetLogEntry = ""
        Exit Function
    End If
    
    With mLogEntries(index)
        GetLogEntry = .Level & "|" & .Module & "|" & .Procedure & "|" & .Message
    End With
End Function

Public Function ContainsMessage(ByVal searchText As String) As Boolean
    Dim i As Long
    For i = 1 To mLogCount
        If InStr(1, mLogEntries(i).Message, searchText, vbTextCompare) > 0 Then
            ContainsMessage = True
            Exit Function
        End If
    Next i
    ContainsMessage = False
End Function

Public Sub ClearLogs()
    mLogCount = 0
    ResetCounters
End Sub

Private Sub ResetCounters()
    mDebugLogCount = 0
    mInfoLogCount = 0
    mWarnLogCount = 0
    mErrorLogCount = 0
End Sub

'*******************************************************************************
' テスト用のヘルパーメソッド
'*******************************************************************************
Public Function GetLastLogEntry() As String
    If mLogCount = 0 Then
        GetLastLogEntry = ""
    Else
        GetLastLogEntry = GetLogEntry(mLogCount)
    End If
End Function

Public Function GetLogEntriesByLevel(ByVal Level As String) As Long
    Dim count As Long
    Dim i As Long
    For i = 1 To mLogCount
        If mLogEntries(i).Level = Level Then count = count + 1
    Next i
    GetLogEntriesByLevel = count
End Function

================
File: tests/MockMessageFormatter.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "MockMessageFormatter"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' インターフェース実装
' ======================
Implements IMessageFormatter

' ======================
' プライベート変数
' ======================
Private mWasCalled As Boolean
Private mReturnValue As String
Private mLastMessage As String
Private mLastErrorInfo As ErrorInfo

' ======================
' プロパティ
' ======================
Public Property Get WasCalled() As Boolean
    WasCalled = mWasCalled
End Property

Public Property Get LastMessage() As String
    LastMessage = mLastMessage
End Property

Public Property Get LastErrorInfo() As ErrorInfo
    LastErrorInfo = mLastErrorInfo
End Property

' ======================
' パブリックメソッド
' ======================
Public Sub SetReturnValue(ByVal value As String)
    mReturnValue = value
End Sub

Public Sub Reset()
    mWasCalled = False
    mReturnValue = ""
    mLastMessage = ""
    Set mLastErrorInfo = Nothing
End Sub

' ======================
' IMessageFormatter実装
' ======================
Private Function IMessageFormatter_FormatMessage(ByVal message As String, ByRef errorInfo As ErrorInfo) As String
    mWasCalled = True
    mLastMessage = message
    Set mLastErrorInfo = errorInfo
    IMessageFormatter_FormatMessage = mReturnValue
End Function

================
File: tests/MockPerformanceMonitor.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "MockPerformanceMonitor"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements IPerformanceMonitor

Private mEnabled As Boolean
Private mStartCallCount As Long
Private mEndCallCount As Long
Private mMetrics As Collection
Private mCurrentOperation As String

Private Sub Class_Initialize()
    mEnabled = True
    Set mMetrics = New Collection
    ResetCounters
End Sub

Private Sub Class_Terminate()
    Set mMetrics = Nothing
End Sub

'@Description("パフォーマンス監視の有効/無効を設定")
Public Property Let Enabled(ByVal value As Boolean)
    mEnabled = value
End Property

'@Description("パフォーマンス監視の有効/無効を取得")
Public Property Get Enabled() As Boolean
    Enabled = mEnabled
End Property

'@Description("StartMeasurementの呼び出し回数を取得")
Public Property Get StartCallCount() As Long
    StartCallCount = mStartCallCount
End Property

'@Description("EndMeasurementの呼び出し回数を取得")
Public Property Get EndCallCount() As Long
    EndCallCount = mEndCallCount
End Property

'@Description("記録されたメトリクスを取得")
Public Property Get Metrics() As Collection
    Set Metrics = mMetrics
End Property

'@Description("カウンターをリセット")
Public Sub ResetCounters()
    mStartCallCount = 0
    mEndCallCount = 0
    Set mMetrics = New Collection
    mCurrentOperation = ""
End Sub

'@Description("メトリクスを追加")
Public Sub AddMetric(ByVal operationName As String, ByVal executionTime As Double)
    Dim metric As New Dictionary
    metric.Add "Operation", operationName
    metric.Add "ExecutionTime", executionTime
    metric.Add "Timestamp", Now
    mMetrics.Add metric
End Sub

' IPerformanceMonitor実装

Private Sub IPerformanceMonitor_StartMeasurement(ByVal operationName As String)
    If Not mEnabled Then Exit Sub
    
    mStartCallCount = mStartCallCount + 1
    mCurrentOperation = operationName
End Sub

Private Sub IPerformanceMonitor_EndMeasurement()
    If Not mEnabled Then Exit Sub
    
    mEndCallCount = mEndCallCount + 1
    
    If mCurrentOperation <> "" Then
        ' 実行時間をシミュレート（0.1秒）
        AddMetric mCurrentOperation, 0.1
        mCurrentOperation = ""
    End If
End Sub

Private Function IPerformanceMonitor_GetMetrics() As Collection
    Set IPerformanceMonitor_GetMetrics = mMetrics
End Function

Private Sub IPerformanceMonitor_ClearMetrics()
    Set mMetrics = New Collection
End Sub

Private Property Get IPerformanceMonitor_Enabled() As Boolean
    IPerformanceMonitor_Enabled = mEnabled
End Property

Private Property Let IPerformanceMonitor_Enabled(ByVal value As Boolean)
    mEnabled = value
End Property

================
File: tests/modTestRunner.bas
================
Attribute VB_Name = "modTestRunner"
Option Explicit

'@Description("テストの実行を管理するモジュール")

' テスト結果を格納する構造体
Private Type TestResult
    TestName As String
    ClassName As String
    Success As Boolean
    ErrorMessage As String
    ExecutionTime As Double
End Type

' グローバル変数
Private mTestResults As Collection
Private mTotalTests As Long
Private mPassedTests As Long
Private mFailedTests As Long
Private mStartTime As Date
Private mEndTime As Date

'@Description("すべてのテストを実行する")
Public Sub RunAllTests()
    ' テスト結果の初期化
    Set mTestResults = New Collection
    mTotalTests = 0
    mPassedTests = 0
    mFailedTests = 0
    mStartTime = Now
    
    On Error GoTo ErrorHandler
    
    ' テストの実行
    Debug.Print "テストの実行を開始します..."
    Debug.Print String(50, "-")
    
    ' 各テストクラスの実行
    RunConfigTests
    RunLoggerTests
    RunFileOperationsTests
    RunValidatorTests
    RunDatabaseTests
    RunSecurityTests
    
    ' 結果の出力
    mEndTime = Now
    OutputTestResults
    
    Exit Sub
    
ErrorHandler:
    Debug.Print "テスト実行中にエラーが発生しました: " & Err.Description
    Resume Next
End Sub

'@Description("設定関連のテストを実行")
Private Sub RunConfigTests()
    Dim testConfig As New TestConfigImpl
    
    ' テストメソッドの実行
    RunTestMethod testConfig, "TestGetSetSetting"
    RunTestMethod testConfig, "TestLoadSettings"
    RunTestMethod testConfig, "TestEncryptedSetting"
    RunTestMethod testConfig, "TestEnvironmentSpecificSettings"
    RunTestMethod testConfig, "TestSettingsValidation"
    RunTestMethod testConfig, "TestPerformanceMetrics"
    RunTestMethod testConfig, "TestBackupAndRestore"
    RunTestMethod testConfig, "TestSettingHistory"
    RunTestMethod testConfig, "TestInvalidEncryptionKey"
    RunTestMethod testConfig, "TestFileAccessError"
    
    Set testConfig = Nothing
End Sub

'@Description("ロガー関連のテストを実行")
Private Sub RunLoggerTests()
    ' 既存のロガーテスト
    ' ...（既存のコード）
End Sub

'@Description("ファイル操作関連のテストを実行")
Private Sub RunFileOperationsTests()
    ' 既存のファイル操作テスト
    ' ...（既存のコード）
End Sub

'@Description("バリデーション関連のテストを実行")
Private Sub RunValidatorTests()
    ' 既存のバリデーションテスト
    ' ...（既存のコード）
End Sub

'@Description("データベース関連のテストを実行")
Private Sub RunDatabaseTests()
    ' 既存のデータベーステスト
    ' ...（既存のコード）
End Sub

'@Description("セキュリティ関連のテストを実行")
Private Sub RunSecurityTests()
    ' 既存のセキュリティテスト
    ' ...（既存のコード）
End Sub

'@Description("テストメソッドを実行")
Private Sub RunTestMethod(ByVal testClass As Object, ByVal methodName As String)
    Dim result As TestResult
    result.TestName = methodName
    result.ClassName = TypeName(testClass)
    
    On Error Resume Next
    
    Dim startTime As Date
    startTime = Now
    
    ' テストの初期化
    CallByName testClass, "TestInitialize", VbMethod
    
    ' テストメソッドの実行
    CallByName testClass, methodName, VbMethod
    
    ' エラーチェック
    If Err.Number = 0 Then
        result.Success = True
    Else
        result.Success = False
        result.ErrorMessage = Err.Description
    End If
    
    ' テストのクリーンアップ
    CallByName testClass, "TestCleanup", VbMethod
    
    result.ExecutionTime = DateDiff("s", startTime, Now)
    
    ' 結果の集計
    mTestResults.Add result
    mTotalTests = mTotalTests + 1
    If result.Success Then
        mPassedTests = mPassedTests + 1
    Else
        mFailedTests = mFailedTests + 1
    End If
    
    ' 進捗表示
    Debug.Print result.ClassName & "." & result.TestName & ": " & _
                IIf(result.Success, "成功", "失敗 - " & result.ErrorMessage)
    
    On Error GoTo 0
End Sub

'@Description("テスト結果を出力")
Private Sub OutputTestResults()
    Debug.Print String(50, "-")
    Debug.Print "テスト実行結果"
    Debug.Print String(50, "-")
    Debug.Print "合計テスト数: " & mTotalTests
    Debug.Print "成功: " & mPassedTests
    Debug.Print "失敗: " & mFailedTests
    Debug.Print "実行時間: " & Format$(DateDiff("s", mStartTime, mEndTime), "#,##0") & " 秒"
    Debug.Print String(50, "-")
    
    ' 失敗したテストの詳細を出力
    If mFailedTests > 0 Then
        Debug.Print
        Debug.Print "失敗したテストの詳細:"
        Debug.Print String(50, "-")
        
        Dim result As TestResult
        Dim i As Long
        For i = 1 To mTestResults.Count
            result = mTestResults(i)
            If Not result.Success Then
                Debug.Print result.ClassName & "." & result.TestName
                Debug.Print "エラー: " & result.ErrorMessage
                Debug.Print String(50, "-")
            End If
        Next i
    End If
End Sub

================
File: tests/modTestUtility.bas
================
Option Explicit

' ======================
' テスト関連の定数
' ======================
Private Const MODULE_NAME As String = "modTestUtility"
Private Const TEST_RESULTS_FILE As String = "TestResults.log"

' テスト結果の状態
Public Enum TestResult
    ResultPass = 1
    ResultFail = 2
    ResultSkip = 3
    ResultError = 4
End Enum

' テストケース情報
Private Type TestCase
    Name As String
    Description As String
    Category As String
    Priority As Integer
    Result As TestResult
    ErrorMessage As String
    ExecutionTime As Double
End Type

' ======================
' プライベート変数
' ======================
Private testCases As Collection
Private performanceMonitor As clsPerformanceMonitor
Private currentTestCase As TestCase
Private isInitialized As Boolean

' ======================
' 初期化処理
' ======================
Public Sub InitializeTestModule()
    If isInitialized Then Exit Sub
    
    On Error GoTo ErrorHandler
    
    Set testCases = New Collection
    Set performanceMonitor = New clsPerformanceMonitor
    isInitialized = True
    Exit Sub

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "テストモジュールの初期化中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "InitializeTestModule"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    ' 初期化失敗時は例外を再スロー
    Err.Raise errDetail.Code, errDetail.Source, errDetail.Description
End Sub

' ======================
' テスト実行関連
' ======================
Public Sub StartTest(ByVal testName As String, ByVal description As String, _
                    Optional ByVal category As String = "General", _
                    Optional ByVal priority As Integer = 1)
                    
    If Not isInitialized Then InitializeTestModule
    On Error GoTo ErrorHandler
    
    ' 新しいテストケースを初期化
    With currentTestCase
        .Name = testName
        .Description = description
        .Category = category
        .Priority = priority
        .Result = ResultSkip
        .ErrorMessage = ""
    End With
    
    ' パフォーマンス計測開始
    performanceMonitor.StartMeasurement testName
    
    ' ログにテスト開始を記録
    LogTestEvent "テスト開始: " & testName & " (" & description & ")"
    Exit Sub

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "テスト開始処理中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "StartTest"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    ' エラー発生時は現在のテストのパフォーマンス計測を終了
    If Not performanceMonitor Is Nothing Then
        performanceMonitor.EndMeasurement testName
    End If
    ' エラー発生時はテストをエラー状態で終了
    EndTest ResultError, "テスト開始処理中にエラーが発生: " & Err.Description
End Sub

Public Sub EndTest(ByVal result As TestResult, Optional ByVal errorMessage As String = "")
    If Not isInitialized Then Exit Sub
    On Error GoTo ErrorHandler
    
    Dim originalResult As TestResult
    originalResult = result
    
    ' パフォーマンス計測終了
    performanceMonitor.EndMeasurement currentTestCase.Name
    
    ' テスト結果を設定
    With currentTestCase
        .Result = result
        .ErrorMessage = errorMessage
        .ExecutionTime = GetTestExecutionTime(.Name)
    End With
    
    ' テストケースをコレクションに追加
    testCases.Add currentTestCase, currentTestCase.Name
    
    ' ログにテスト終了を記録
    LogTestEvent "テスト終了: " & currentTestCase.Name & " - " & GetResultText(result)
    If errorMessage <> "" Then
        LogTestEvent "エラー詳細: " & errorMessage
    End If
    Exit Sub

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "テスト終了処理中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "EndTest"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    ' エラー発生時は元のテスト結果を保持しつつ、エラーメッセージを追加
    With currentTestCase
        .Result = originalResult
        .ErrorMessage = .ErrorMessage & vbCrLf & "テスト終了処理中にエラーが発生: " & Err.Description
    End With
End Sub

' ======================
' アサーション関数
' ======================
Public Sub AssertEqual(ByVal expected As Variant, ByVal actual As Variant, _
                      Optional ByVal message As String = "")
    If Not isInitialized Then InitializeTestModule
    On Error GoTo ErrorHandler
    
    If expected <> actual Then
        Dim errorMsg As String
        errorMsg = "AssertEqual失敗: " & vbCrLf & _
                  "期待値: " & CStr(expected) & vbCrLf & _
                  "実際値: " & CStr(actual)
        If message <> "" Then
            errorMsg = errorMsg & vbCrLf & "メッセージ: " & message
        End If
        
        EndTest ResultFail, errorMsg
        Exit Sub
    End If
    Exit Sub

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "AssertEqual実行中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "AssertEqual"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    ' アサーション実行中のエラーはテストを失敗として扱う
    EndTest ResultFail, "アサーション実行中にエラーが発生: " & Err.Description
End Sub

Public Sub AssertTrue(ByVal condition As Boolean, Optional ByVal message As String = "")
    If Not isInitialized Then InitializeTestModule
    On Error GoTo ErrorHandler
    
    If Not condition Then
        Dim errorMsg As String
        errorMsg = "AssertTrue失敗"
        If message <> "" Then
            errorMsg = errorMsg & ": " & message
        End If
        
        EndTest ResultFail, errorMsg
        Exit Sub
    End If
    Exit Sub

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "AssertTrue実行中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "AssertTrue"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    ' アサーション実行中のエラーはテストを失敗として扱う
    EndTest ResultFail, "アサーション実行中にエラーが発生: " & Err.Description
End Sub

Public Sub AssertFalse(ByVal condition As Boolean, Optional ByVal message As String = "")
    If Not isInitialized Then InitializeTestModule
    On Error GoTo ErrorHandler
    
    If condition Then
        Dim errorMsg As String
        errorMsg = "AssertFalse失敗"
        If message <> "" Then
            errorMsg = errorMsg & ": " & message
        End If
        
        EndTest ResultFail, errorMsg
        Exit Sub
    End If
    Exit Sub

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "AssertFalse実行中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "AssertFalse"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    ' アサーション実行中のエラーはテストを失敗として扱う
    EndTest ResultFail, "アサーション実行中にエラーが発生: " & Err.Description
End Sub

' ======================
' テスト結果レポート
' ======================
Public Function GenerateTestReport() As String
    If Not isInitialized Then InitializeTestModule
    On Error GoTo ErrorHandler
    
    Dim report As String
    Dim testCase As TestCase
    Dim i As Long
    Dim totalTests As Long
    Dim passedTests As Long
    Dim failedTests As Long
    Dim skippedTests As Long
    Dim errorTests As Long
    
    report = "テスト実行レポート" & vbCrLf & _
            "=================" & vbCrLf & _
            "実行日時: " & Now & vbCrLf & vbCrLf
    
    ' カテゴリ別の結果集計
    Dim categories As Collection
    Set categories = New Collection
    
    For i = 1 To testCases.Count
        testCase = testCases(i)
        
        ' カテゴリの追加
        On Error Resume Next
        categories.Add testCase.Category, testCase.Category
        On Error GoTo ErrorHandler
        
        ' 全体の集計
        totalTests = totalTests + 1
        Select Case testCase.Result
            Case ResultPass: passedTests = passedTests + 1
            Case ResultFail: failedTests = failedTests + 1
            Case ResultSkip: skippedTests = skippedTests + 1
            Case ResultError: errorTests = errorTests + 1
        End Select
    Next i
    
    ' 概要の追加
    report = report & "概要:" & vbCrLf & _
            "- 総テスト数: " & totalTests & vbCrLf & _
            "- 成功: " & passedTests & vbCrLf & _
            "- 失敗: " & failedTests & vbCrLf & _
            "- スキップ: " & skippedTests & vbCrLf & _
            "- エラー: " & errorTests & vbCrLf & vbCrLf
    
    ' カテゴリ別の詳細
    report = report & "カテゴリ別詳細:" & vbCrLf & _
            "=================" & vbCrLf
    
    Dim category As Variant
    For Each category In categories
        report = report & vbCrLf & "カテゴリ: " & category & vbCrLf
        
        For i = 1 To testCases.Count
            testCase = testCases(i)
            If testCase.Category = category Then
                report = report & _
                        "  - " & testCase.Name & vbCrLf & _
                        "    結果: " & GetResultText(testCase.Result) & vbCrLf & _
                        "    実行時間: " & Format$(testCase.ExecutionTime, "0.000") & " ms" & vbCrLf
                If testCase.ErrorMessage <> "" Then
                    report = report & "    エラー: " & testCase.ErrorMessage & vbCrLf
                End If
            End If
        Next i
    Next category
    
    GenerateTestReport = report
    Exit Function

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "テストレポート生成中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "GenerateTestReport"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    ' レポート生成エラー時は基本情報のみ返す
    GenerateTestReport = "テストレポート生成中にエラーが発生しました。" & vbCrLf & _
                        "エラー詳細: " & Err.Description & vbCrLf & _
                        "実行日時: " & Now
End Function

' ======================
' ユーティリティ関数
' ======================
Private Function GetResultText(ByVal result As TestResult) As String
    Select Case result
        Case ResultPass: GetResultText = "成功"
        Case ResultFail: GetResultText = "失敗"
        Case ResultSkip: GetResultText = "スキップ"
        Case ResultError: GetResultText = "エラー"
        Case Else: GetResultText = "不明"
    End Select
End Function

Private Function GetTestExecutionTime(ByVal testName As String) As Double
    On Error GoTo ErrorHandler
    
    Dim perfData As String
    perfData = performanceMonitor.GetMeasurement(testName)
    
    ' 実行時間を抽出（パフォーマンスモニターの出力形式に依存）
    Dim pos As Long
    pos = InStr(perfData, "Elapsed Time: ")
    If pos > 0 Then
        GetTestExecutionTime = Val(Mid$(perfData, pos + 14))
    End If
    Exit Function

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "テスト実行時間の取得中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "GetTestExecutionTime"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    ' エラー時は0を返す
    GetTestExecutionTime = 0
End Function

Private Sub LogTestEvent(ByVal message As String)
    On Error Resume Next
    
    ' clsLoggerを使用してログを出力
    With New clsLogger
        Dim settings As New DefaultLoggerSettings
        settings.LogFilePath = TEST_RESULTS_FILE
        settings.LogDestination = LOG_DESTINATION_FILE
        .Configure settings
        .Log MODULE_NAME, message, 0
   eEnd With
    
    If Err.Number <> 0 Then
        Debug.Print "ログ出力エラー: " & Err.Description
        Err.Clear
    End If
End Sub

' ======================
' クリーンアップ
' ======================
Public Sub CleanupTestModule()
    If Not isInitialized Then Exit Sub
    
    On Error Resume Next
    Set testCases = Nothing
    Set performanceMonitor = Nothing
    isInitialized = False
    
    If Err.Number <> 0 Then
        Debug.Print "クリーンアップ中にエラーが発生: " & Err.Description
        Err.Clear
    End If
End Sub

================
File: tests/repomix-output.txt
================
This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-27T00:46:07.782Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
MockDatabaseConfig.cls
MockError.cls
MockFileIO.cls
MockLock.cls
MockLogger.cls
MockMessageFormatter.cls
MockPerformanceMonitor.cls
modTestRunner.bas
modTestUtility.bas
TestClsCrypto.cls
TestConnectionPool.cls
TestConsoleLogger.cls
TestCriticalSectionLock.cls
TestDatabaseLogger.cls
TestDateValidator.cls
TestDefaultMessageFormatter.cls
TestEventLogLogger.cls
TestFileLogger.cls
TestFileSystemOperations.cls
TestLogger.cls
TestMsgBoxNotifier.cls
TestMutexLock.cls
TestSemaphoreLock.cls
TestStringValidator.cls

================================================================
Files
================================================================

================
File: MockDatabaseConfig.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "MockDatabaseConfig"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements IDatabaseConfig

' モック用の内部状態
Private mConnectionString As String
Private mMaxPoolSize As Long
Private mRetryCount As Long
Private mRetryInterval As Long
Private mConnectionTimeout As Long

' メソッド呼び出し回数のカウンター
Private mGetConnectionStringCallCount As Long
Private mGetMaxPoolSizeCallCount As Long
Private mGetRetryCountCallCount As Long
Private mGetRetryIntervalCallCount As Long
Private mGetConnectionTimeoutCallCount As Long

'*******************************************************************************
' 初期化
'*******************************************************************************
Private Sub Class_Initialize()
    ' デフォルト値の設定
    mConnectionString = "Provider=SQLOLEDB;Data Source=TestServer;"
    mMaxPoolSize = 5
    mRetryCount = 3
    mRetryInterval = 1000
    mConnectionTimeout = 30000
    
    ' カウンターの初期化
    mGetConnectionStringCallCount = 0
    mGetMaxPoolSizeCallCount = 0
    mGetRetryCountCallCount = 0
    mGetRetryIntervalCallCount = 0
    mGetConnectionTimeoutCallCount = 0
End Sub

'*******************************************************************************
' IDatabaseConfig インターフェースの実装
'*******************************************************************************
Private Function IDatabaseConfig_GetConnectionString() As String
    mGetConnectionStringCallCount = mGetConnectionStringCallCount + 1
    IDatabaseConfig_GetConnectionString = mConnectionString
End Function

Private Function IDatabaseConfig_GetMaxPoolSize() As Long
    mGetMaxPoolSizeCallCount = mGetMaxPoolSizeCallCount + 1
    IDatabaseConfig_GetMaxPoolSize = mMaxPoolSize
End Function

Private Function IDatabaseConfig_GetRetryCount() As Long
    mGetRetryCountCallCount = mGetRetryCountCallCount + 1
    IDatabaseConfig_GetRetryCount = mRetryCount
End Function

Private Function IDatabaseConfig_GetRetryInterval() As Long
    mGetRetryIntervalCallCount = mGetRetryIntervalCallCount + 1
    IDatabaseConfig_GetRetryInterval = mRetryInterval
End Function

Private Function IDatabaseConfig_GetConnectionTimeout() As Long
    mGetConnectionTimeoutCallCount = mGetConnectionTimeoutCallCount + 1
    IDatabaseConfig_GetConnectionTimeout = mConnectionTimeout
End Function

'*******************************************************************************
' モック用のセッターメソッド
'*******************************************************************************
Public Sub SetConnectionString(ByVal value As String)
    mConnectionString = value
End Sub

Public Sub SetMaxPoolSize(ByVal value As Long)
    mMaxPoolSize = value
End Sub

Public Sub SetRetryCount(ByVal value As Long)
    mRetryCount = value
End Sub

Public Sub SetRetryInterval(ByVal value As Long)
    mRetryInterval = value
End Sub

Public Sub SetConnectionTimeout(ByVal value As Long)
    mConnectionTimeout = value
End Sub

'*******************************************************************************
' 呼び出し回数の取得メソッド
'*******************************************************************************
Public Property Get GetConnectionStringCallCount() As Long
    GetConnectionStringCallCount = mGetConnectionStringCallCount
End Property

Public Property Get GetMaxPoolSizeCallCount() As Long
    GetMaxPoolSizeCallCount = mGetMaxPoolSizeCallCount
End Property

Public Property Get GetRetryCountCallCount() As Long
    GetRetryCountCallCount = mGetRetryCountCallCount
End Property

Public Property Get GetRetryIntervalCallCount() As Long
    GetRetryIntervalCallCount = mGetRetryIntervalCallCount
End Property

Public Property Get GetConnectionTimeoutCallCount() As Long
    GetConnectionTimeoutCallCount = mGetConnectionTimeoutCallCount
End Property

'*******************************************************************************
' カウンターのリセット
'*******************************************************************************
Public Sub ResetCallCounts()
    mGetConnectionStringCallCount = 0
    mGetMaxPoolSizeCallCount = 0
    mGetRetryCountCallCount = 0
    mGetRetryIntervalCallCount = 0
    mGetConnectionTimeoutCallCount = 0
End Sub

================
File: MockError.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "MockError"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "MockError"

' ======================
' インターフェース実装
' ======================
Implements IError

' ======================
' プライベート変数
' ======================
Private mErrors As Collection
Private mLastError As ErrorInfo

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    Set mErrors = New Collection
End Sub

Private Sub Class_Terminate()
    Set mErrors = Nothing
    Set mLastError = Nothing
End Sub

' ======================
' プロパティ
' ======================
Public Property Get Errors() As Collection
    Set Errors = mErrors
End Property

Public Property Get LastError() As ErrorInfo
    Set LastError = mLastError
End Property

' ======================
' メソッド
' ======================
Private Sub IError_HandleError(ByVal errorInfo As ErrorInfo)
    Set mLastError = errorInfo
    mErrors.Add errorInfo
End Sub

Public Sub ClearErrors()
    Set mErrors = New Collection
    Set mLastError = Nothing
End Sub

Public Function GetErrorCount() As Long
    GetErrorCount = mErrors.Count
End Function

Public Function GetErrorAt(ByVal index As Long) As ErrorInfo
    If index <= 0 Or index > mErrors.Count Then
        Err.Raise 9, MODULE_NAME, "インデックスが範囲外です。"
    End If
    Set GetErrorAt = mErrors(index)
End Function

Public Function ContainsError(ByVal errorCode As Long) As Boolean
    Dim err As ErrorInfo
    For Each err In mErrors
        If err.Code = errorCode Then
            ContainsError = True
            Exit Function
        End If
    Next err
    ContainsError = False
End Function

Public Function ContainsErrorMessage(ByVal message As String) As Boolean
    Dim err As ErrorInfo
    For Each err In mErrors
        If InStr(1, err.Description, message, vbTextCompare) > 0 Then
            ContainsErrorMessage = True
            Exit Function
        End If
    Next err
    ContainsErrorMessage = False
End Function

================
File: MockFileIO.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "MockFileIO"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' インターフェース実装
' ======================
Implements IFileIO

' ======================
' プライベート変数
' ======================
Private Type FileExistsEntry
    FilePath As String
    Exists As Boolean
End Type

Private Type CreateFolderEntry
    FolderPath As String
    Success As Boolean
End Type

Private Type OpenFileEntry
    FilePath As String
    Result As Object
End Type

Private Type BinaryFileEntry
    FilePath As String
    Content() As Byte
End Type

Private mFileExistsEntries As Collection
Private mFolderExistsEntries As Collection
Private mCreateFolderEntries As Collection
Private mDeleteFileEntries As Collection
Private mDeleteFolderEntries As Collection
Private mOpenFileEntries As Collection
Private mBinaryFileEntries As Collection

Private mMethodCalls As Collection

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    Set mFileExistsEntries = New Collection
    Set mFolderExistsEntries = New Collection
    Set mCreateFolderEntries = New Collection
    Set mDeleteFileEntries = New Collection
    Set mDeleteFolderEntries = New Collection
    Set mOpenFileEntries = New Collection
    Set mBinaryFileEntries = New Collection
    Set mMethodCalls = New Collection
End Sub

' ======================
' モック設定メソッド
' ======================
Public Sub SetFileExists(ByVal filePath As String, ByVal exists As Boolean)
    Dim entry As FileExistsEntry
    entry.FilePath = filePath
    entry.Exists = exists
    AddToCollection mFileExistsEntries, entry, filePath
End Sub

Public Sub SetFolderExists(ByVal folderPath As String, ByVal exists As Boolean)
    Dim entry As FileExistsEntry
    entry.FilePath = folderPath
    entry.Exists = exists
    AddToCollection mFolderExistsEntries, entry, folderPath
End Sub

Public Sub SetCreateFolderResult(ByVal folderPath As String, ByVal success As Boolean)
    Dim entry As CreateFolderEntry
    entry.FolderPath = folderPath
    entry.Success = success
    AddToCollection mCreateFolderEntries, entry, folderPath
End Sub

Public Sub SetOpenFileResult(ByVal filePath As String, ByVal result As Object)
    Dim entry As OpenFileEntry
    entry.FilePath = filePath
    Set entry.Result = result
    AddToCollection mOpenFileEntries, entry, filePath
End Sub

Public Sub SetBinaryFileContent(ByVal filePath As String, ByRef content() As Byte)
    Dim entry As BinaryFileEntry
    entry.FilePath = filePath
    ReDim entry.Content(LBound(content) To UBound(content))
    Dim i As Long
    For i = LBound(content) To UBound(content)
        entry.Content(i) = content(i)
    Next i
    AddToCollection mBinaryFileEntries, entry, filePath
End Sub

' ======================
' 検証メソッド
' ======================
Public Function WasMethodCalled(ByVal methodName As String) As Boolean
    Dim call As Variant
    For Each call In mMethodCalls
        If call = methodName Then
            WasMethodCalled = True
            Exit Function
        End If
    Next call
    WasMethodCalled = False
End Function

Public Function GetMethodCallCount(ByVal methodName As String) As Long
    Dim count As Long
    Dim call As Variant
    For Each call In mMethodCalls
        If call = methodName Then count = count + 1
    Next call
    GetMethodCallCount = count
End Function

' ======================
' IFileIO実装
' ======================
Private Function IFileIO_FileExists(ByVal filePath As String) As Boolean
    mMethodCalls.Add "FileExists"
    
    Dim entry As FileExistsEntry
    Dim var As Variant
    For Each var In mFileExistsEntries
        entry = var
        If entry.FilePath = filePath Then
            IFileIO_FileExists = entry.Exists
            Exit Function
        End If
    Next var
    IFileIO_FileExists = False
End Function

Private Function IFileIO_FolderExists(ByVal folderPath As String) As Boolean
    mMethodCalls.Add "FolderExists"
    
    Dim entry As FileExistsEntry
    Dim var As Variant
    For Each var In mFolderExistsEntries
        entry = var
        If entry.FilePath = folderPath Then
            IFileIO_FolderExists = entry.Exists
            Exit Function
        End If
    Next var
    IFileIO_FolderExists = False
End Function

Private Function IFileIO_CreateFolder(ByVal folderPath As String) As Boolean
    mMethodCalls.Add "CreateFolder"
    
    Dim entry As CreateFolderEntry
    Dim var As Variant
    For Each var In mCreateFolderEntries
        entry = var
        If entry.FolderPath = folderPath Then
            IFileIO_CreateFolder = entry.Success
            Exit Function
        End If
    Next var
    IFileIO_CreateFolder = False
End Function

Private Function IFileIO_DeleteFile(ByVal filePath As String) As Boolean
    mMethodCalls.Add "DeleteFile"
    IFileIO_DeleteFile = True ' デフォルトで成功を返す
End Function

Private Function IFileIO_CopyFile(ByVal sourceFilePath As String, ByVal destinationFilePath As String) As Boolean
    mMethodCalls.Add "CopyFile"
    IFileIO_CopyFile = True ' デフォルトで成功を返す
End Function

Private Function IFileIO_MoveFile(ByVal sourceFilePath As String, ByVal destinationFilePath As String) As Boolean
    mMethodCalls.Add "MoveFile"
    IFileIO_MoveFile = True ' デフォルトで成功を返す
End Function

Private Function IFileIO_OpenFile(ByVal filePath As String, ByVal mode As String) As Object
    mMethodCalls.Add "OpenFile"
    
    Dim entry As OpenFileEntry
    Dim var As Variant
    For Each var In mOpenFileEntries
        entry = var
        If entry.FilePath = filePath Then
            Set IFileIO_OpenFile = entry.Result
            Exit Function
        End If
    Next var
    Set IFileIO_OpenFile = Nothing
End Function

Private Function IFileIO_CloseFile(ByVal file As Object) As Boolean
    mMethodCalls.Add "CloseFile"
    IFileIO_CloseFile = True ' デフォルトで成功を返す
End Function

' ======================
' プライベートヘルパーメソッド
' ======================
Private Sub AddToCollection(ByVal col As Collection, ByRef entry As Variant, ByVal key As String)
    On Error Resume Next
    col.Remove key
    On Error GoTo 0
    col.Add entry, key
End Sub

================
File: MockLock.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "MockLock"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements ILock

' モック用の内部状態
Private mIsLocked As Boolean
Private mAcquireLockCallCount As Long
Private mReleaseLockCallCount As Long
Private mShouldFailAcquire As Boolean
Private mShouldFailRelease As Boolean

'*******************************************************************************
' 初期化
'*******************************************************************************
Private Sub Class_Initialize()
    mIsLocked = False
    mAcquireLockCallCount = 0
    mReleaseLockCallCount = 0
    mShouldFailAcquire = False
    mShouldFailRelease = False
End Sub

'*******************************************************************************
' ILock インターフェースの実装
'*******************************************************************************
Private Sub ILock_AcquireLock()
    mAcquireLockCallCount = mAcquireLockCallCount + 1
    
    If mShouldFailAcquire Then
        Err.Raise vbObjectError + 1001, "MockLock", "ロックの取得に失敗しました"
    End If
    
    If mIsLocked Then
        Err.Raise vbObjectError + 1002, "MockLock", "既にロックされています"
    End If
    
    mIsLocked = True
End Sub

Private Sub ILock_ReleaseLock()
    mReleaseLockCallCount = mReleaseLockCallCount + 1
    
    If mShouldFailRelease Then
        Err.Raise vbObjectError + 1003, "MockLock", "ロックの解放に失敗しました"
    End If
    
    If Not mIsLocked Then
        Err.Raise vbObjectError + 1004, "MockLock", "ロックされていません"
    End If
    
    mIsLocked = False
End Sub

'*******************************************************************************
' モック用のヘルパーメソッド
'*******************************************************************************
Public Property Get IsLocked() As Boolean
    IsLocked = mIsLocked
End Property

Public Property Get AcquireLockCallCount() As Long
    AcquireLockCallCount = mAcquireLockCallCount
End Property

Public Property Get ReleaseLockCallCount() As Long
    ReleaseLockCallCount = mReleaseLockCallCount
End Property

Public Sub SetShouldFailAcquire(ByVal value As Boolean)
    mShouldFailAcquire = value
End Sub

Public Sub SetShouldFailRelease(ByVal value As Boolean)
    mShouldFailRelease = value
End Sub

Public Sub ResetCallCounts()
    mAcquireLockCallCount = 0
    mReleaseLockCallCount = 0
End Sub

Public Sub Reset()
    mIsLocked = False
    ResetCallCounts
    mShouldFailAcquire = False
    mShouldFailRelease = False
End Sub

'*******************************************************************************
' テスト用のヘルパーメソッド
'*******************************************************************************
Public Function IsLockBalanced() As Boolean
    IsLockBalanced = (mAcquireLockCallCount = mReleaseLockCallCount) And (Not mIsLocked)
End Function

Public Function GetUnbalancedLockCount() As Long
    GetUnbalancedLockCount = mAcquireLockCallCount - mReleaseLockCallCount
End Function

================
File: MockLogger.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "MockLogger"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements ILogger

' ログエントリの構造体
Private Type LogEntry
    Level As String
    Module As String
    Procedure As String
    Message As String
    Timestamp As Date
End Type

' モック用の内部状態
Private mLogEntries() As LogEntry
Private mLogCount As Long
Private mMaxEntries As Long

' カウンター
Private mDebugLogCount As Long
Private mInfoLogCount As Long
Private mWarnLogCount As Long
Private mErrorLogCount As Long

'*******************************************************************************
' 初期化
'*******************************************************************************
Private Sub Class_Initialize()
    mMaxEntries = 1000
    ReDim mLogEntries(1 To mMaxEntries)
    mLogCount = 0
    ResetCounters
End Sub

'*******************************************************************************
' ILogger インターフェースの実装
'*******************************************************************************
Private Sub ILogger_LogDebug(ByVal Module As String, ByVal Procedure As String, ByVal Message As String)
    AddLogEntry "DEBUG", Module, Procedure, Message
    mDebugLogCount = mDebugLogCount + 1
End Sub

Private Sub ILogger_LogInfo(ByVal Module As String, ByVal Procedure As String, ByVal Message As String)
    AddLogEntry "INFO", Module, Procedure, Message
    mInfoLogCount = mInfoLogCount + 1
End Sub

Private Sub ILogger_LogWarning(ByVal Module As String, ByVal Procedure As String, ByVal Message As String)
    AddLogEntry "WARN", Module, Procedure, Message
    mWarnLogCount = mWarnLogCount + 1
End Sub

Private Sub ILogger_LogError(ByVal Module As String, ByVal Procedure As String, ByVal Message As String)
    AddLogEntry "ERROR", Module, Procedure, Message
    mErrorLogCount = mErrorLogCount + 1
End Sub

'*******************************************************************************
' プライベートメソッド
'*******************************************************************************
Private Sub AddLogEntry(ByVal Level As String, ByVal Module As String, ByVal Procedure As String, ByVal Message As String)
    If mLogCount >= mMaxEntries Then Exit Sub
    
    mLogCount = mLogCount + 1
    With mLogEntries(mLogCount)
        .Level = Level
        .Module = Module
        .Procedure = Procedure
        .Message = Message
        .Timestamp = Now
    End With
End Sub

'*******************************************************************************
' モック用のヘルパーメソッド
'*******************************************************************************
Public Property Get LogCount() As Long
    LogCount = mLogCount
End Property

Public Property Get DebugLogCount() As Long
    DebugLogCount = mDebugLogCount
End Property

Public Property Get InfoLogCount() As Long
    InfoLogCount = mInfoLogCount
End Property

Public Property Get WarnLogCount() As Long
    WarnLogCount = mWarnLogCount
End Property

Public Property Get ErrorLogCount() As Long
    ErrorLogCount = mErrorLogCount
End Property

Public Function GetLogEntry(ByVal index As Long) As String
    If index < 1 Or index > mLogCount Then
        GetLogEntry = ""
        Exit Function
    End If
    
    With mLogEntries(index)
        GetLogEntry = .Level & "|" & .Module & "|" & .Procedure & "|" & .Message
    End With
End Function

Public Function ContainsMessage(ByVal searchText As String) As Boolean
    Dim i As Long
    For i = 1 To mLogCount
        If InStr(1, mLogEntries(i).Message, searchText, vbTextCompare) > 0 Then
            ContainsMessage = True
            Exit Function
        End If
    Next i
    ContainsMessage = False
End Function

Public Sub ClearLogs()
    mLogCount = 0
    ResetCounters
End Sub

Private Sub ResetCounters()
    mDebugLogCount = 0
    mInfoLogCount = 0
    mWarnLogCount = 0
    mErrorLogCount = 0
End Sub

'*******************************************************************************
' テスト用のヘルパーメソッド
'*******************************************************************************
Public Function GetLastLogEntry() As String
    If mLogCount = 0 Then
        GetLastLogEntry = ""
    Else
        GetLastLogEntry = GetLogEntry(mLogCount)
    End If
End Function

Public Function GetLogEntriesByLevel(ByVal Level As String) As Long
    Dim count As Long
    Dim i As Long
    For i = 1 To mLogCount
        If mLogEntries(i).Level = Level Then count = count + 1
    Next i
    GetLogEntriesByLevel = count
End Function

================
File: MockMessageFormatter.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "MockMessageFormatter"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' インターフェース実装
' ======================
Implements IMessageFormatter

' ======================
' プライベート変数
' ======================
Private mWasCalled As Boolean
Private mReturnValue As String
Private mLastMessage As String
Private mLastErrorInfo As ErrorInfo

' ======================
' プロパティ
' ======================
Public Property Get WasCalled() As Boolean
    WasCalled = mWasCalled
End Property

Public Property Get LastMessage() As String
    LastMessage = mLastMessage
End Property

Public Property Get LastErrorInfo() As ErrorInfo
    LastErrorInfo = mLastErrorInfo
End Property

' ======================
' パブリックメソッド
' ======================
Public Sub SetReturnValue(ByVal value As String)
    mReturnValue = value
End Sub

Public Sub Reset()
    mWasCalled = False
    mReturnValue = ""
    mLastMessage = ""
    Set mLastErrorInfo = Nothing
End Sub

' ======================
' IMessageFormatter実装
' ======================
Private Function IMessageFormatter_FormatMessage(ByVal message As String, ByRef errorInfo As ErrorInfo) As String
    mWasCalled = True
    mLastMessage = message
    Set mLastErrorInfo = errorInfo
    IMessageFormatter_FormatMessage = mReturnValue
End Function

================
File: MockPerformanceMonitor.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "MockPerformanceMonitor"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements IPerformanceMonitor

' モック用の内部状態
Private Type MeasurementInfo
    StartTime As Date
    EndTime As Date
    Category As String
End Type

Private mMeasurements() As MeasurementInfo
Private mMeasurementCount As Long
Private mMaxMeasurements As Long

'*******************************************************************************
' 初期化
'*******************************************************************************
Private Sub Class_Initialize()
    mMaxMeasurements = 100
    ReDim mMeasurements(1 To mMaxMeasurements)
    mMeasurementCount = 0
End Sub

'*******************************************************************************
' IPerformanceMonitor インターフェースの実装
'*******************************************************************************
Private Sub IPerformanceMonitor_StartMeasurement(ByVal category As String)
    If mMeasurementCount >= mMaxMeasurements Then Exit Sub
    
    mMeasurementCount = mMeasurementCount + 1
    With mMeasurements(mMeasurementCount)
        .StartTime = Now
        .Category = category
    End With
End Sub

Private Sub IPerformanceMonitor_EndMeasurement(ByVal category As String)
    Dim i As Long
    For i = mMeasurementCount To 1 Step -1
        If mMeasurements(i).Category = category Then
            mMeasurements(i).EndTime = Now
            Exit Sub
        End If
    Next i
End Sub

'*******************************************************************************
' モック用のヘルパーメソッド
'*******************************************************************************
Public Function GetMeasurementCount() As Long
    GetMeasurementCount = mMeasurementCount
End Function

Public Function GetMeasurementDuration(ByVal index As Long) As Double
    If index < 1 Or index > mMeasurementCount Then
        GetMeasurementDuration = 0
        Exit Function
    End If
    
    With mMeasurements(index)
        If .EndTime = #12:00:00 AM# Then
            GetMeasurementDuration = 0
        Else
            GetMeasurementDuration = DateDiff("s", .StartTime, .EndTime)
        End If
    End With
End Function

Public Function GetMeasurementCategory(ByVal index As Long) As String
    If index < 1 Or index > mMeasurementCount Then
        GetMeasurementCategory = ""
        Exit Function
    End If
    
    GetMeasurementCategory = mMeasurements(index).Category
End Function

Public Sub ResetMeasurements()
    mMeasurementCount = 0
End Sub

'*******************************************************************************
' テスト用のヘルパーメソッド
'*******************************************************************************
Public Function HasMeasurement(ByVal category As String) As Boolean
    Dim i As Long
    For i = 1 To mMeasurementCount
        If mMeasurements(i).Category = category Then
            HasMeasurement = True
            Exit Function
        End If
    Next i
    HasMeasurement = False
End Function

Public Function GetCompletedMeasurementCount() As Long
    Dim count As Long
    Dim i As Long
    For i = 1 To mMeasurementCount
        If mMeasurements(i).EndTime <> #12:00:00 AM# Then
            count = count + 1
        End If
    Next i
    GetCompletedMeasurementCount = count
End Function

================
File: modTestRunner.bas
================
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "modTestRunner"

' ======================
' テスト実行モジュール
' ======================
Public Sub RunAllTests()
    On Error GoTo ErrorHandler
    
    modTestUtility.InitializeTestModule

    ' エラーハンドリング関連のテスト
    RunErrorHandlingTests
    
    ' ロギング関連のテスト
    RunLoggingTests
    
    ' ファイル操作関連のテスト
    RunFileOperationsTests
    
    ' バリデーション関連のテスト
    RunValidationTests
    
    ' ユーティリティ関連のテスト
    RunUtilityTests
    
    ' データベース関連のテスト
    RunDatabaseTests
    
    ' セキュリティ関連のテスト
    RunSecurityTests
    
    ' パフォーマンス関連のテスト
    RunPerformanceTests
    
    ' テストレポートの出力
    Debug.Print modTestUtility.GenerateTestReport
    modTestUtility.CleanupTestModule
    Exit Sub

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "テスト実行中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "RunAllTests"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
End Sub

' ======================
' エラーハンドリングテスト
' ======================
Private Sub RunErrorHandlingTests()
    On Error GoTo ErrorHandler
    
    modTestUtility.StartTest "Test_ErrorHandlers", "エラーハンドラーのテスト"
    Test_ErrorHandlers
    modTestUtility.EndTest modTestUtility.ResultPass
    
    Exit Sub

ErrorHandler:
    modTestUtility.EndTest modTestUtility.ResultFail, "エラーハンドリングテストでエラー発生: " & Err.Description
End Sub

' ======================
' ロギングテスト
' ======================
Private Sub RunLoggingTests()
    On Error GoTo ErrorHandler
    
    modTestUtility.StartTest "Test_Loggers", "ロガーのテスト"
    Test_Loggers
    modTestUtility.EndTest modTestUtility.ResultPass
    
    Exit Sub

ErrorHandler:
    modTestUtility.EndTest modTestUtility.ResultFail, "ロギングテストでエラー発生: " & Err.Description
End Sub

' ======================
' ファイル操作テスト
' ======================
Private Sub RunFileOperationsTests()
    On Error GoTo ErrorHandler
    
    modTestUtility.StartTest "Test_FileOperations", "ファイル操作のテスト"
    Test_FileOperations
    modTestUtility.EndTest modTestUtility.ResultPass
    
    Exit Sub

ErrorHandler:
    modTestUtility.EndTest modTestUtility.ResultFail, "ファイル操作テストでエラー発生: " & Err.Description
End Sub

' ======================
' バリデーションテスト
' ======================
Private Sub RunValidationTests()
    On Error GoTo ErrorHandler
    
    modTestUtility.StartTest "Test_Validators", "バリデーターのテスト"
    Test_Validators
    modTestUtility.EndTest modTestUtility.ResultPass
    
    Exit Sub

ErrorHandler:
    modTestUtility.EndTest modTestUtility.ResultFail, "バリデーションテストでエラー発生: " & Err.Description
End Sub

' ======================
' ユーティリティテスト
' ======================
Private Sub RunUtilityTests()
    On Error GoTo ErrorHandler
    
    modTestUtility.StartTest "Test_MathUtils", "数学ユーティリティのテスト"
    Test_MathUtils
    modTestUtility.EndTest modTestUtility.ResultPass
    
    modTestUtility.StartTest "Test_StringUtils", "文字列ユーティリティのテスト"
    Test_StringUtils
    modTestUtility.EndTest modTestUtility.ResultPass
    
    modTestUtility.StartTest "Test_DateUtils", "日付ユーティリティのテスト"
    Test_DateUtils
    modTestUtility.EndTest modTestUtility.ResultPass
    
    Exit Sub

ErrorHandler:
    modTestUtility.EndTest modTestUtility.ResultFail, "ユーティリティテストでエラー発生: " & Err.Description
End Sub

' ======================
' データベーステスト
' ======================
Private Sub RunDatabaseTests()
    On Error GoTo ErrorHandler
    
    modTestUtility.StartTest "Test_DatabaseUtils", "データベースユーティリティのテスト"
    Test_DatabaseUtils
    modTestUtility.EndTest modTestUtility.ResultPass
    
    modTestUtility.StartTest "Test_ConnectionPool", "接続プールのテスト"
    Test_ConnectionPool
    modTestUtility.EndTest modTestUtility.ResultPass
    
    Exit Sub

ErrorHandler:
    modTestUtility.EndTest modTestUtility.ResultFail, "データベーステストでエラー発生: " & Err.Description
End Sub

' ======================
' セキュリティテスト
' ======================
Private Sub RunSecurityTests()
    On Error GoTo ErrorHandler
    
    modTestUtility.StartTest "Test_Crypto", "暗号化のテスト"
    Test_Crypto
    modTestUtility.EndTest modTestUtility.ResultPass
    
    Exit Sub

ErrorHandler:
    modTestUtility.EndTest modTestUtility.ResultFail, "セキュリティテストでエラー発生: " & Err.Description
End Sub

' ======================
' パフォーマンステスト
' ======================
Private Sub RunPerformanceTests()
    On Error GoTo ErrorHandler
    
    modTestUtility.StartTest "Test_PerformanceMonitor", "パフォーマンスモニターのテスト"
    Test_PerformanceMonitor
    modTestUtility.EndTest modTestUtility.ResultPass
    
    modTestUtility.StartTest "Test_Lock", "ロック機能のテスト"
    Test_Lock
    modTestUtility.EndTest modTestUtility.ResultPass
    
    modTestUtility.StartTest "Test_CallStack", "コールスタックのテスト"
    Test_CallStack
    modTestUtility.EndTest modTestUtility.ResultPass
    
    Exit Sub

ErrorHandler:
    modTestUtility.EndTest modTestUtility.ResultFail, "パフォーマンステストでエラー発生: " & Err.Description
End Sub

#If DEBUG Then
    ' ======================
    ' エラーハンドリングテストケース
    ' ======================
    Private Sub Test_ErrorHandlers()
        ' DatabaseConnectionErrorHandlerのテスト
        Dim dbErrorHandler As New DatabaseConnectionErrorHandler
        modTestUtility.AssertTrue TypeOf dbErrorHandler Is IErrorHandler, "DatabaseConnectionErrorHandlerがIErrorHandlerを実装していることを確認"
        
        ' FileNotFoundErrorHandlerのテスト
        Dim fileNotFoundHandler As New FileNotFoundErrorHandler
        modTestUtility.AssertTrue TypeOf fileNotFoundHandler Is IErrorHandler, "FileNotFoundErrorHandlerがIErrorHandlerを実装していることを確認"
        
        ' InvalidInputErrorHandlerのテスト
        Dim invalidInputHandler As New InvalidInputErrorHandler
        modTestUtility.AssertTrue TypeOf invalidInputHandler Is IErrorHandler, "InvalidInputErrorHandlerがIErrorHandlerを実装していることを確認"
        
        ' エラーコードの検証
        Dim errInfo As New ErrorInfo
        modTestUtility.AssertTrue dbErrorHandler.HandleError(errInfo) <> 0, "エラーハンドリングの結果確認"
    End Sub
    
    ' ======================
    ' ロギングテストケース
    ' ======================
    Private Sub Test_Loggers()
        ' FileLoggerのテスト
        Dim fileLogger As New FileLogger
        modTestUtility.AssertTrue TypeOf fileLogger Is ILogger, "FileLoggerがILoggerを実装していることを確認"
        
        ' MockLoggerのテスト
        Dim mockLogger As New MockLogger
        modTestUtility.AssertTrue TypeOf mockLogger Is ILogger, "MockLoggerがILoggerを実装していることを確認"
        
        ' clsLoggerのテスト
        Dim logger As New clsLogger
        modTestUtility.AssertTrue TypeOf logger Is ILogger, "clsLoggerがILoggerを実装していることを確認"
        
        ' DefaultLoggerSettingsのテスト
        Dim settings As New DefaultLoggerSettings
        modTestUtility.AssertTrue TypeOf settings Is ILoggerSettings, "DefaultLoggerSettingsがILoggerSettingsを実装していることを確認"
        
        ' ログ出力のテスト
        fileLogger.LogMessage "テストメッセージ", LogLevel.Info
        mockLogger.LogMessage "テストメッセージ", LogLevel.Info
        logger.LogMessage "テストメッセージ", LogLevel.Info
    End Sub
    
    ' ======================
    ' ファイル操作テストケース
    ' ======================
    Private Sub Test_FileOperations()
        ' FileSystemOperationsのテスト
        Dim fileOps As New FileSystemOperations
        modTestUtility.AssertTrue TypeOf fileOps Is IFileOperations, "FileSystemOperationsがIFileOperationsを実装していることを確認"
        
        ' modFileIOのテスト
        Dim testPath As String
        testPath = "test.txt"
        
        modFileIO.WriteTextFile testPath, "テストデータ"
        modTestUtility.AssertTrue modFileIO.FileExists(testPath), "ファイル作成の確認"
        
        Dim content As String
        content = modFileIO.ReadTextFile(testPath)
        modTestUtility.AssertEqual "テストデータ", content, "ファイル内容の確認"
        
        modFileIO.DeleteFile testPath
        modTestUtility.AssertFalse modFileIO.FileExists(testPath), "ファイル削除の確認"
    End Sub
    
    ' ======================
    ' バリデーションテストケース
    ' ======================
    Private Sub Test_Validators()
        ' StringValidatorのテスト
        Dim strValidator As New StringValidator
        modTestUtility.AssertTrue TypeOf strValidator Is IValidator, "StringValidatorがIValidatorを実装していることを確認"
        modTestUtility.AssertTrue strValidator.Validate("テスト"), "有効な文字列の検証"
        modTestUtility.AssertFalse strValidator.Validate(""), "空文字列の検証"
        
        ' DateValidatorのテスト
        Dim dateValidator As New DateValidator
        modTestUtility.AssertTrue TypeOf dateValidator Is IValidator, "DateValidatorがIValidatorを実装していることを確認"
        modTestUtility.AssertTrue dateValidator.Validate(Date), "有効な日付の検証"
        modTestUtility.AssertFalse dateValidator.Validate(Empty), "無効な日付の検証"
    End Sub
    
    ' ======================
    ' ユーティリティテストケース
    ' ======================
    Private Sub Test_MathUtils()
        modTestUtility.AssertEqual 10, modMathUtils.Add(7, 3), "加算のテスト"
        modTestUtility.AssertEqual 4, modMathUtils.Subtract(7, 3), "減算のテスト"
        modTestUtility.AssertEqual 21, modMathUtils.Multiply(7, 3), "乗算のテスト"
    End Sub
    
    Private Sub Test_StringUtils()
        modTestUtility.AssertEqual "HELLO", modStringUtils.ToUpper("hello"), "大文字変換のテスト"
        modTestUtility.AssertEqual "hello", modStringUtils.ToLower("HELLO"), "小文字変換のテスト"
        modTestUtility.AssertTrue modStringUtils.IsEmpty(""), "空文字チェックのテスト"
    End Sub
    
    Private Sub Test_DateUtils()
        Dim testDate As Date
        testDate = DateSerial(2025, 1, 1)
        
        modTestUtility.AssertEqual 2025, modDateUtils.GetYear(testDate), "年の取得テスト"
        modTestUtility.AssertEqual 1, modDateUtils.GetMonth(testDate), "月の取得テスト"
        modTestUtility.AssertEqual 1, modDateUtils.GetDay(testDate), "日の取得テスト"
    End Sub
    
    ' ======================
    ' データベーステストケース
    ' ======================
    Private Sub Test_DatabaseUtils()
        ' 接続文字列の生成テスト
        Dim connStr As String
        connStr = modDatabaseUtils.BuildConnectionString("Server", "Database", "User", "Pass")
        modTestUtility.AssertTrue Len(connStr) > 0, "接続文字列生成のテスト"
    End Sub
    
    Private Sub Test_ConnectionPool()
        Dim pool As New ConnectionPool
        
        ' プール設定のテスト
        pool.MaxPoolSize = 10
        modTestUtility.AssertEqual 10, pool.MaxPoolSize, "最大プールサイズの設定テスト"
        
        ' 接続管理のテスト
        modTestUtility.AssertEqual 0, pool.ActiveConnections, "初期接続数のテスト"
    End Sub
    
    ' ======================
    ' セキュリティテストケース
    ' ======================
    Private Sub Test_Crypto()
        Dim crypto As New clsCrypto
        
        ' プロバイダーの検証
        modTestUtility.AssertTrue crypto.ValidateProvider(), "ValidateProviderのテスト"
        
        ' 暗号化/復号化のテスト
        Const testString As String = "テスト文字列"
        Const testKey As String = "テストキー"
        
        Dim encrypted As String
        encrypted = crypto.EncryptString(testString, testKey)
        modTestUtility.AssertTrue Len(encrypted) > 0, "暗号化テスト"
        
        Dim decrypted As String
        decrypted = crypto.DecryptString(encrypted, testKey)
        modTestUtility.AssertEqual testString, decrypted, "復号化テスト"
    End Sub
    
    ' ======================
    ' パフォーマンステストケース
    ' ======================
    Private Sub Test_PerformanceMonitor()
        Dim monitor As New clsPerformanceMonitor
        
        monitor.StartMeasurement "TestOperation"
        ' 何らかの処理
        monitor.EndMeasurement "TestOperation"
        
        Dim result As String
        result = monitor.GetMeasurement("TestOperation")
        modTestUtility.AssertTrue Len(result) > 0, "パフォーマンス計測結果の確認"
    End Sub
    
    Private Sub Test_Lock()
        Dim lock As New clsLock
        
        modTestUtility.AssertTrue lock.TryAcquire(), "ロック取得のテスト"
        lock.Release
        modTestUtility.AssertTrue lock.TryAcquire(), "ロック解放後の再取得テスト"
    End Sub
    
    Private Sub Test_CallStack()
        Dim callStack As New clsCallStack
        
        ' Push/Popのテスト
        callStack.Push "Module1", "Proc1"
        callStack.Push "Module2", "Proc2"
        
        modTestUtility.AssertEqual "Module2.Proc2", callStack.Pop(), "Pop()のテスト1"
        modTestUtility.AssertEqual "Module1.Proc1", callStack.Pop(), "Pop()のテスト2"
        
        ' スタックの状態検証
        modTestUtility.AssertTrue callStack.ValidateStackState(), "ValidateStackStateのテスト"
    End Sub
#End If

================
File: modTestUtility.bas
================
Option Explicit

' ======================
' テスト関連の定数
' ======================
Private Const MODULE_NAME As String = "modTestUtility"
Private Const TEST_RESULTS_FILE As String = "TestResults.log"

' テスト結果の状態
Public Enum TestResult
    ResultPass = 1
    ResultFail = 2
    ResultSkip = 3
    ResultError = 4
End Enum

' テストケース情報
Private Type TestCase
    Name As String
    Description As String
    Category As String
    Priority As Integer
    Result As TestResult
    ErrorMessage As String
    ExecutionTime As Double
End Type

' ======================
' プライベート変数
' ======================
Private testCases As Collection
Private performanceMonitor As clsPerformanceMonitor
Private currentTestCase As TestCase
Private isInitialized As Boolean

' ======================
' 初期化処理
' ======================
Public Sub InitializeTestModule()
    If isInitialized Then Exit Sub
    
    On Error GoTo ErrorHandler
    
    Set testCases = New Collection
    Set performanceMonitor = New clsPerformanceMonitor
    isInitialized = True
    Exit Sub

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "テストモジュールの初期化中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "InitializeTestModule"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    ' 初期化失敗時は例外を再スロー
    Err.Raise errDetail.Code, errDetail.Source, errDetail.Description
End Sub

' ======================
' テスト実行関連
' ======================
Public Sub StartTest(ByVal testName As String, ByVal description As String, _
                    Optional ByVal category As String = "General", _
                    Optional ByVal priority As Integer = 1)
                    
    If Not isInitialized Then InitializeTestModule
    On Error GoTo ErrorHandler
    
    ' 新しいテストケースを初期化
    With currentTestCase
        .Name = testName
        .Description = description
        .Category = category
        .Priority = priority
        .Result = ResultSkip
        .ErrorMessage = ""
    End With
    
    ' パフォーマンス計測開始
    performanceMonitor.StartMeasurement testName
    
    ' ログにテスト開始を記録
    LogTestEvent "テスト開始: " & testName & " (" & description & ")"
    Exit Sub

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "テスト開始処理中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "StartTest"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    ' エラー発生時は現在のテストのパフォーマンス計測を終了
    If Not performanceMonitor Is Nothing Then
        performanceMonitor.EndMeasurement testName
    End If
    ' エラー発生時はテストをエラー状態で終了
    EndTest ResultError, "テスト開始処理中にエラーが発生: " & Err.Description
End Sub

Public Sub EndTest(ByVal result As TestResult, Optional ByVal errorMessage As String = "")
    If Not isInitialized Then Exit Sub
    On Error GoTo ErrorHandler
    
    Dim originalResult As TestResult
    originalResult = result
    
    ' パフォーマンス計測終了
    performanceMonitor.EndMeasurement currentTestCase.Name
    
    ' テスト結果を設定
    With currentTestCase
        .Result = result
        .ErrorMessage = errorMessage
        .ExecutionTime = GetTestExecutionTime(.Name)
    End With
    
    ' テストケースをコレクションに追加
    testCases.Add currentTestCase, currentTestCase.Name
    
    ' ログにテスト終了を記録
    LogTestEvent "テスト終了: " & currentTestCase.Name & " - " & GetResultText(result)
    If errorMessage <> "" Then
        LogTestEvent "エラー詳細: " & errorMessage
    End If
    Exit Sub

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "テスト終了処理中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "EndTest"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    ' エラー発生時は元のテスト結果を保持しつつ、エラーメッセージを追加
    With currentTestCase
        .Result = originalResult
        .ErrorMessage = .ErrorMessage & vbCrLf & "テスト終了処理中にエラーが発生: " & Err.Description
    End With
End Sub

' ======================
' アサーション関数
' ======================
Public Sub AssertEqual(ByVal expected As Variant, ByVal actual As Variant, _
                      Optional ByVal message As String = "")
    If Not isInitialized Then InitializeTestModule
    On Error GoTo ErrorHandler
    
    If expected <> actual Then
        Dim errorMsg As String
        errorMsg = "AssertEqual失敗: " & vbCrLf & _
                  "期待値: " & CStr(expected) & vbCrLf & _
                  "実際値: " & CStr(actual)
        If message <> "" Then
            errorMsg = errorMsg & vbCrLf & "メッセージ: " & message
        End If
        
        EndTest ResultFail, errorMsg
        Exit Sub
    End If
    Exit Sub

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "AssertEqual実行中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "AssertEqual"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    ' アサーション実行中のエラーはテストを失敗として扱う
    EndTest ResultFail, "アサーション実行中にエラーが発生: " & Err.Description
End Sub

Public Sub AssertTrue(ByVal condition As Boolean, Optional ByVal message As String = "")
    If Not isInitialized Then InitializeTestModule
    On Error GoTo ErrorHandler
    
    If Not condition Then
        Dim errorMsg As String
        errorMsg = "AssertTrue失敗"
        If message <> "" Then
            errorMsg = errorMsg & ": " & message
        End If
        
        EndTest ResultFail, errorMsg
        Exit Sub
    End If
    Exit Sub

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "AssertTrue実行中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "AssertTrue"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    ' アサーション実行中のエラーはテストを失敗として扱う
    EndTest ResultFail, "アサーション実行中にエラーが発生: " & Err.Description
End Sub

Public Sub AssertFalse(ByVal condition As Boolean, Optional ByVal message As String = "")
    If Not isInitialized Then InitializeTestModule
    On Error GoTo ErrorHandler
    
    If condition Then
        Dim errorMsg As String
        errorMsg = "AssertFalse失敗"
        If message <> "" Then
            errorMsg = errorMsg & ": " & message
        End If
        
        EndTest ResultFail, errorMsg
        Exit Sub
    End If
    Exit Sub

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "AssertFalse実行中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "AssertFalse"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    ' アサーション実行中のエラーはテストを失敗として扱う
    EndTest ResultFail, "アサーション実行中にエラーが発生: " & Err.Description
End Sub

' ======================
' テスト結果レポート
' ======================
Public Function GenerateTestReport() As String
    If Not isInitialized Then InitializeTestModule
    On Error GoTo ErrorHandler
    
    Dim report As String
    Dim testCase As TestCase
    Dim i As Long
    Dim totalTests As Long
    Dim passedTests As Long
    Dim failedTests As Long
    Dim skippedTests As Long
    Dim errorTests As Long
    
    report = "テスト実行レポート" & vbCrLf & _
            "=================" & vbCrLf & _
            "実行日時: " & Now & vbCrLf & vbCrLf
    
    ' カテゴリ別の結果集計
    Dim categories As Collection
    Set categories = New Collection
    
    For i = 1 To testCases.Count
        testCase = testCases(i)
        
        ' カテゴリの追加
        On Error Resume Next
        categories.Add testCase.Category, testCase.Category
        On Error GoTo ErrorHandler
        
        ' 全体の集計
        totalTests = totalTests + 1
        Select Case testCase.Result
            Case ResultPass: passedTests = passedTests + 1
            Case ResultFail: failedTests = failedTests + 1
            Case ResultSkip: skippedTests = skippedTests + 1
            Case ResultError: errorTests = errorTests + 1
        End Select
    Next i
    
    ' 概要の追加
    report = report & "概要:" & vbCrLf & _
            "- 総テスト数: " & totalTests & vbCrLf & _
            "- 成功: " & passedTests & vbCrLf & _
            "- 失敗: " & failedTests & vbCrLf & _
            "- スキップ: " & skippedTests & vbCrLf & _
            "- エラー: " & errorTests & vbCrLf & vbCrLf
    
    ' カテゴリ別の詳細
    report = report & "カテゴリ別詳細:" & vbCrLf & _
            "=================" & vbCrLf
    
    Dim category As Variant
    For Each category In categories
        report = report & vbCrLf & "カテゴリ: " & category & vbCrLf
        
        For i = 1 To testCases.Count
            testCase = testCases(i)
            If testCase.Category = category Then
                report = report & _
                        "  - " & testCase.Name & vbCrLf & _
                        "    結果: " & GetResultText(testCase.Result) & vbCrLf & _
                        "    実行時間: " & Format$(testCase.ExecutionTime, "0.000") & " ms" & vbCrLf
                If testCase.ErrorMessage <> "" Then
                    report = report & "    エラー: " & testCase.ErrorMessage & vbCrLf
                End If
            End If
        Next i
    Next category
    
    GenerateTestReport = report
    Exit Function

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "テストレポート生成中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "GenerateTestReport"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    ' レポート生成エラー時は基本情報のみ返す
    GenerateTestReport = "テストレポート生成中にエラーが発生しました。" & vbCrLf & _
                        "エラー詳細: " & Err.Description & vbCrLf & _
                        "実行日時: " & Now
End Function

' ======================
' ユーティリティ関数
' ======================
Private Function GetResultText(ByVal result As TestResult) As String
    Select Case result
        Case ResultPass: GetResultText = "成功"
        Case ResultFail: GetResultText = "失敗"
        Case ResultSkip: GetResultText = "スキップ"
        Case ResultError: GetResultText = "エラー"
        Case Else: GetResultText = "不明"
    End Select
End Function

Private Function GetTestExecutionTime(ByVal testName As String) As Double
    On Error GoTo ErrorHandler
    
    Dim perfData As String
    perfData = performanceMonitor.GetMeasurement(testName)
    
    ' 実行時間を抽出（パフォーマンスモニターの出力形式に依存）
    Dim pos As Long
    pos = InStr(perfData, "Elapsed Time: ")
    If pos > 0 Then
        GetTestExecutionTime = Val(Mid$(perfData, pos + 14))
    End If
    Exit Function

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "テスト実行時間の取得中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "GetTestExecutionTime"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    ' エラー時は0を返す
    GetTestExecutionTime = 0
End Function

Private Sub LogTestEvent(ByVal message As String)
    On Error Resume Next
    
    ' clsLoggerを使用してログを出力
    With New clsLogger
        Dim settings As New DefaultLoggerSettings
        settings.LogFilePath = TEST_RESULTS_FILE
        settings.LogDestination = LOG_DESTINATION_FILE
        .Configure settings
        .Log MODULE_NAME, message, 0
   eEnd With
    
    If Err.Number <> 0 Then
        Debug.Print "ログ出力エラー: " & Err.Description
        Err.Clear
    End If
End Sub

' ======================
' クリーンアップ
' ======================
Public Sub CleanupTestModule()
    If Not isInitialized Then Exit Sub
    
    On Error Resume Next
    Set testCases = Nothing
    Set performanceMonitor = Nothing
    isInitialized = False
    
    If Err.Number <> 0 Then
        Debug.Print "クリーンアップ中にエラーが発生: " & Err.Description
        Err.Clear
    End If
End Sub

================
File: TestClsCrypto.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "TestClsCrypto"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Private mCrypto As clsCrypto
Private mPerformanceMonitor As MockPerformanceMonitor
Private mLock As MockLock
Private mCryptography As ICryptography
Private mKeyDerivation As IKeyDerivationStrategy

Private Sub Class_Initialize()
    ' モックオブジェクトの初期化
    Set mPerformanceMonitor = New MockPerformanceMonitor
    Set mLock = New MockLock
    Set mCryptography = New CryptographyImpl
    Set mKeyDerivation = New PBKDF2KeyDerivationStrategy
    
    ' テスト対象の初期化
    Set mCrypto = New clsCrypto
    mCrypto.Initialize mPerformanceMonitor, mLock, mCryptography, mKeyDerivation
End Sub

Private Sub Class_Terminate()
    Set mCrypto = Nothing
    Set mPerformanceMonitor = Nothing
    Set mLock = Nothing
    Set mCryptography = Nothing
    Set mKeyDerivation = Nothing
End Sub

''' <summary>
''' 暗号化と復号化のテスト
''' </summary>
Public Sub TestEncryptionAndDecryption()
    On Error GoTo TestFail
    
    ' テストデータ
    Const TEST_KEY As String = "TestKey123"
    Const TEST_DATA As String = "Hello, World!"
    
    ' 暗号化
    Dim encrypted As String
    encrypted = mCrypto.EncryptString(TEST_DATA, TEST_KEY)
    
    ' 暗号化されたデータの検証
    Debug.Assert Len(encrypted) > 0, "暗号化データが空です"
    Debug.Assert encrypted <> TEST_DATA, "データが暗号化されていません"
    
    ' 復号化
    Dim decrypted As String
    decrypted = mCrypto.DecryptString(encrypted, TEST_KEY)
    
    ' 復号化されたデータの検証
    Debug.Assert decrypted = TEST_DATA, "復号化されたデータが元のデータと一致しません"
    
    Exit Sub
    
TestFail:
    Debug.Print "TestEncryptionAndDecryption failed: " & Err.Description
    Resume Next
End Sub

''' <summary>
''' パフォーマンスモニタリングのテスト
''' </summary>
Public Sub TestPerformanceMonitoring()
    On Error GoTo TestFail
    
    ' テストデータ
    Const TEST_KEY As String = "TestKey123"
    Const TEST_DATA As String = "Hello, World!"
    
    ' 暗号化処理の実行
    Dim encrypted As String
    encrypted = mCrypto.EncryptString(TEST_DATA, TEST_KEY)
    
    ' パフォーマンスモニタリングの検証
    Debug.Assert mPerformanceMonitor.WasMeasurementStarted("String Encryption"), _
                "暗号化のパフォーマンス計測が開始されていません"
    Debug.Assert mPerformanceMonitor.WasMeasurementEnded("String Encryption"), _
                "暗号化のパフォーマンス計測が終了されていません"
    
    Exit Sub
    
TestFail:
    Debug.Print "TestPerformanceMonitoring failed: " & Err.Description
    Resume Next
End Sub

''' <summary>
''' 排他制御のテスト
''' </summary>
Public Sub TestLocking()
    On Error GoTo TestFail
    
    ' テストデータ
    Const TEST_KEY As String = "TestKey123"
    Const TEST_DATA As String = "Hello, World!"
    
    ' 暗号化処理の実行
    Dim encrypted As String
    encrypted = mCrypto.EncryptString(TEST_DATA, TEST_KEY)
    
    ' ロック制御の検証
    Debug.Assert mLock.WasLockAcquired, "ロックが取得されていません"
    Debug.Assert mLock.WasLockReleased, "ロックが解放されていません"
    
    Exit Sub
    
TestFail:
    Debug.Print "TestLocking failed: " & Err.Description
    Resume Next
End Sub

''' <summary>
''' エラー処理のテスト
''' </summary>
Public Sub TestErrorHandling()
    On Error GoTo TestFail
    
    ' 無効なキーでのテスト
    Dim result As String
    result = mCrypto.EncryptString("Test", "")
    
    ' エラー処理の検証
    Debug.Assert result = "", "空のキーでエラーが発生しませんでした"
    
    Exit Sub
    
TestFail:
    Debug.Print "TestErrorHandling failed: " & Err.Description
    Resume Next
End Sub

''' <summary>
''' すべてのテストを実行
''' </summary>
Public Sub RunAllTests()
    TestEncryptionAndDecryption
    TestPerformanceMonitoring
    TestLocking
    TestErrorHandling
    Debug.Print "All tests completed successfully"
End Sub

================
File: TestConnectionPool.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "TestConnectionPool"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Private Const MODULE_NAME As String = "TestConnectionPool"

' モックオブジェクト
Private mMockConfig As MockDatabaseConfig
Private mMockPerformanceMonitor As MockPerformanceMonitor
Private mMockLock As MockLock
Private mMockLogger As MockLogger

' テスト対象
Private mConnectionPool As ConnectionPool

'*******************************************************************************
' テスト初期化
'*******************************************************************************
Private Sub Class_Initialize()
    ' モックオブジェクトの初期化
    Set mMockConfig = New MockDatabaseConfig
    Set mMockPerformanceMonitor = New MockPerformanceMonitor
    Set mMockLock = New MockLock
    Set mMockLogger = New MockLogger
    
    ' テスト対象の初期化
    Set mConnectionPool = New ConnectionPool
End Sub

'*******************************************************************************
' テストクリーンアップ
'*******************************************************************************
Private Sub Class_Terminate()
    Set mConnectionPool = Nothing
    Set mMockLogger = Nothing
    Set mMockLock = Nothing
    Set mMockPerformanceMonitor = Nothing
    Set mMockConfig = Nothing
End Sub

'*******************************************************************************
' テストケース：初期化時に依存オブジェクトが正しく設定されること
'*******************************************************************************
Public Sub TestInitialize()
    On Error GoTo TestFail
    
    ' 準備
    mMockConfig.SetConnectionString "Provider=SQLOLEDB;Data Source=TestServer;"
    mMockConfig.SetMaxPoolSize 5
    mMockConfig.SetRetryCount 3
    mMockConfig.SetRetryInterval 1000
    
    ' 実行
    mConnectionPool.Initialize mMockConfig, mMockPerformanceMonitor, mMockLock, mMockLogger
    
    ' 検証
    Debug.Assert mMockConfig.GetConnectionStringCallCount > 0
    Debug.Print "TestInitialize: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestInitialize: Failed - " & Err.Description
End Sub

'*******************************************************************************
' テストケース：不正な接続文字列の場合、エラーログが出力されること
'*******************************************************************************
Public Sub TestInvalidConnectionString()
    On Error GoTo TestFail
    
    ' 準備
    mMockConfig.SetConnectionString "Invalid Connection String"
    mConnectionPool.Initialize mMockConfig, mMockPerformanceMonitor, mMockLock, mMockLogger
    
    ' 実行
    Dim conn As Object
    Set conn = mConnectionPool.AcquireConnection
    
    ' 検証
    Debug.Assert mMockLogger.ErrorLogCount > 0
    Debug.Assert conn Is Nothing
    Debug.Print "TestInvalidConnectionString: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestInvalidConnectionString: Failed - " & Err.Description
End Sub

'*******************************************************************************
' テストケース：接続失敗時にリトライ処理が行われること
'*******************************************************************************
Public Sub TestConnectionRetry()
    On Error GoTo TestFail
    
    ' 準備
    mMockConfig.SetConnectionString "Provider=SQLOLEDB;Data Source=TestServer;"
    mMockConfig.SetRetryCount 3
    mMockConfig.SetRetryInterval 100
    mConnectionPool.Initialize mMockConfig, mMockPerformanceMonitor, mMockLock, mMockLogger
    
    ' 実行
    Dim conn As Object
    Set conn = mConnectionPool.AcquireConnection
    
    ' 検証
    Debug.Assert mMockConfig.GetRetryCountCallCount > 0
    Debug.Assert mMockConfig.GetRetryIntervalCallCount > 0
    Debug.Print "TestConnectionRetry: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestConnectionRetry: Failed - " & Err.Description
End Sub

'*******************************************************************************
' テストケース：プールサイズが設定値を超えないこと
'*******************************************************************************
Public Sub TestPoolSizeLimit()
    On Error GoTo TestFail
    
    ' 準備
    mMockConfig.SetConnectionString "Provider=SQLOLEDB;Data Source=TestServer;"
    mMockConfig.SetMaxPoolSize 2
    mConnectionPool.Initialize mMockConfig, mMockPerformanceMonitor, mMockLock, mMockLogger
    
    ' 実行
    Dim conn1 As Object, conn2 As Object, conn3 As Object
    Set conn1 = mConnectionPool.AcquireConnection
    Set conn2 = mConnectionPool.AcquireConnection
    Set conn3 = mConnectionPool.AcquireConnection ' これは失敗するはず
    
    ' 検証
    Debug.Assert Not conn1 Is Nothing
    Debug.Assert Not conn2 Is Nothing
    Debug.Assert conn3 Is Nothing
    Debug.Assert mConnectionPool.ActiveConnections = 2
    Debug.Print "TestPoolSizeLimit: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestPoolSizeLimit: Failed - " & Err.Description
End Sub

'*******************************************************************************
' テストケース：解放された接続が再利用可能になること
'*******************************************************************************
Public Sub TestConnectionReuse()
    On Error GoTo TestFail
    
    ' 準備
    mMockConfig.SetConnectionString "Provider=SQLOLEDB;Data Source=TestServer;"
    mMockConfig.SetMaxPoolSize 1
    mConnectionPool.Initialize mMockConfig, mMockPerformanceMonitor, mMockLock, mMockLogger
    
    ' 実行
    Dim conn1 As Object, conn2 As Object
    Set conn1 = mConnectionPool.AcquireConnection
    mConnectionPool.ReleaseConnection conn1
    Set conn2 = mConnectionPool.AcquireConnection
    
    ' 検証
    Debug.Assert Not conn2 Is Nothing
    Debug.Assert mConnectionPool.ActiveConnections = 1
    Debug.Print "TestConnectionReuse: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestConnectionReuse: Failed - " & Err.Description
End Sub

'*******************************************************************************
' 全テストの実行
'*******************************************************************************
Public Sub RunAllTests()
    TestInitialize
    TestInvalidConnectionString
    TestConnectionRetry
    TestPoolSizeLimit
    TestConnectionReuse
End Sub

================
File: TestConsoleLogger.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "TestConsoleLogger"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "TestConsoleLogger"

' ======================
' メンバ変数
' ======================
Private mConsoleLogger As ConsoleLogger
Private mPerformanceMonitor As IPerformanceMonitor

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    ' テスト対象の初期化
    Set mConsoleLogger = New ConsoleLogger
    Set mPerformanceMonitor = New clsPerformanceMonitor
End Sub

Private Sub Class_Terminate()
    Set mConsoleLogger = Nothing
    Set mPerformanceMonitor = Nothing
End Sub

' ======================
' テストメソッド
' ======================
Public Sub TestInitialization()
    On Error GoTo TestFail
    
    ' 初期化
    mConsoleLogger.Initialize mPerformanceMonitor, True
    
    Debug.Print "TestInitialization: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestInitialization: Failed - " & Err.Description
End Sub

Public Sub TestLogWriting()
    On Error GoTo TestFail
    
    ' ロガーの初期化
    mConsoleLogger.Initialize mPerformanceMonitor, True
    
    ' ログの書き込み
    Debug.Print "=== TestLogWriting Start ==="
    mConsoleLogger.Log "INFO", "Test console message", "Test stack trace", 4001
    Debug.Print "=== TestLogWriting End ==="
    
    Debug.Print "TestLogWriting: OK - イミディエイトウィンドウで出力を確認してください"
    Exit Sub
    
TestFail:
    Debug.Print "TestLogWriting: Failed - " & Err.Description
End Sub

Public Sub TestDifferentLogLevels()
    On Error GoTo TestFail
    
    ' ロガーの初期化
    mConsoleLogger.Initialize mPerformanceMonitor, True
    
    ' 異なるログレベルでの書き込み
    Debug.Print "=== TestDifferentLogLevels Start ==="
    mConsoleLogger.Log "INFO", "Information message", "", 0
    mConsoleLogger.Log "WARNING", "Warning message", "", 4002
    mConsoleLogger.Log "ERROR", "Error message", "Error stack trace", 4003
    Debug.Print "=== TestDifferentLogLevels End ==="
    
    Debug.Print "TestDifferentLogLevels: OK - イミディエイトウィンドウで出力を確認してください"
    Exit Sub
    
TestFail:
    Debug.Print "TestDifferentLogLevels: Failed - " & Err.Description
End Sub

Public Sub TestPerformanceMonitoring()
    On Error GoTo TestFail
    
    ' ロガーの初期化
    mConsoleLogger.Initialize mPerformanceMonitor, True
    
    ' パフォーマンス計測付きのログ出力
    Debug.Print "=== TestPerformanceMonitoring Start ==="
    Dim i As Long
    For i = 1 To 100
        mConsoleLogger.Log "INFO", "Performance test message " & i, "", i
    Next i
    Debug.Print "=== TestPerformanceMonitoring End ==="
    
    ' パフォーマンス情報の確認
    Dim measurements As Collection
    Set measurements = mPerformanceMonitor.GetMeasurements("ConsoleLogger_Log")
    Debug.Assert Not measurements Is Nothing
    Debug.Assert measurements.Count > 0
    
    Debug.Print "TestPerformanceMonitoring: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestPerformanceMonitoring: Failed - " & Err.Description
End Sub

' ======================
' 全テストの実行
' ======================
Public Sub RunAllTests()
    TestInitialization
    TestLogWriting
    TestDifferentLogLevels
    TestPerformanceMonitoring
End Sub

================
File: TestCriticalSectionLock.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "TestCriticalSectionLock"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Private Const MODULE_NAME As String = "TestCriticalSectionLock"
Private testLock As clsCriticalSectionLock

'@TestInitialize
Private Sub TestInitialize()
    Set testLock = New clsCriticalSectionLock
End Sub

'@TestCleanup
Private Sub TestCleanup()
    If Not testLock Is Nothing Then
        testLock.ForceRelease
        Set testLock = Nothing
    End If
End Sub

'@TestMethod("CriticalSectionLock")
Public Sub TestAcquireSuccess()
    On Error GoTo TestFail
    
    'Arrange
    Dim result As Boolean
    
    'Act
    result = testLock.Acquire()
    
    'Assert
    Debug.Assert result = True
    Debug.Assert testLock.ValidateLockState() = True
    Debug.Assert testLock.IsInitialized() = True
    
    Exit Sub
TestFail:
    Debug.Print "TestAcquireSuccess failed: " & Err.Description
End Sub

'@TestMethod("CriticalSectionLock")
Public Sub TestAcquireWithTimeout()
    On Error GoTo TestFail
    
    'Arrange
    Dim result As Boolean
    Dim timeout As Long
    timeout = 1000 ' 1秒
    
    'Act
    result = testLock.Acquire(timeout)
    
    'Assert
    Debug.Assert result = True
    Debug.Assert testLock.ValidateLockState() = True
    
    Exit Sub
TestFail:
    Debug.Print "TestAcquireWithTimeout failed: " & Err.Description
End Sub

'@TestMethod("CriticalSectionLock")
Public Sub TestReleaseSuccess()
    On Error GoTo TestFail
    
    'Arrange
    testLock.Acquire
    
    'Act
    testLock.Release
    
    'Assert
    Debug.Assert testLock.ValidateLockState() = False
    
    Exit Sub
TestFail:
    Debug.Print "TestReleaseSuccess failed: " & Err.Description
End Sub

'@TestMethod("CriticalSectionLock")
Public Sub TestMultipleAcquire()
    On Error GoTo TestFail
    
    'Arrange
    Dim secondLock As clsCriticalSectionLock
    Set secondLock = New clsCriticalSectionLock
    
    'Act
    testLock.Acquire
    Dim result As Boolean
    result = secondLock.Acquire(100) ' 100msタイムアウト
    
    'Assert
    Debug.Assert result = False ' 2番目のロックは失敗するはず
    
    'Cleanup
    Set secondLock = Nothing
    
    Exit Sub
TestFail:
    Debug.Print "TestMultipleAcquire failed: " & Err.Description
End Sub

'@TestMethod("CriticalSectionLock")
Public Sub TestInitialization()
    On Error GoTo TestFail
    
    'Assert
    Debug.Assert testLock.IsInitialized() = True
    
    Exit Sub
TestFail:
    Debug.Print "TestInitialization failed: " & Err.Description
End Sub

================
File: TestDatabaseLogger.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "TestDatabaseLogger"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "TestDatabaseLogger"

' ======================
' メンバ変数
' ======================
Private mDatabaseLogger As DatabaseLogger
Private mConnectionPool As IConnectionPool
Private mLock As ILock
Private mPerformanceMonitor As IPerformanceMonitor
Private mDatabaseConfig As IDatabaseConfig
Private mTestTableName As String

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    ' テスト対象の初期化
    Set mDatabaseLogger = New DatabaseLogger
    Set mConnectionPool = New ConnectionPool
    Set mLock = New clsLock
    Set mPerformanceMonitor = New clsPerformanceMonitor
    Set mDatabaseConfig = New ConfigImpl
    mTestTableName = "TestLog"
    
    ' テストテーブルの作成
    CreateTestTable
End Sub

Private Sub Class_Terminate()
    ' テストテーブルの削除
    DropTestTable
    
    Set mDatabaseLogger = Nothing
    Set mConnectionPool = Nothing
    Set mLock = Nothing
    Set mPerformanceMonitor = Nothing
    Set mDatabaseConfig = Nothing
End Sub

' ======================
' テストメソッド
' ======================
Public Sub TestInitialization()
    On Error GoTo TestFail
    
    ' 初期化
    mDatabaseLogger.Initialize mConnectionPool, mLock, mPerformanceMonitor, mDatabaseConfig, mTestTableName
    
    Debug.Print "TestInitialization: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestInitialization: Failed - " & Err.Description
End Sub

Public Sub TestLogWriting()
    On Error GoTo TestFail
    
    ' ロガーの初期化
    mDatabaseLogger.Initialize mConnectionPool, mLock, mPerformanceMonitor, mDatabaseConfig, mTestTableName
    
    ' ログの書き込み
    mDatabaseLogger.Log "INFO", "Test database message", "Test stack trace", 2001
    
    ' データベースの内容確認
    Dim conn As Object
    Set conn = mConnectionPool.AcquireConnection()
    
    Dim rs As Object
    Set rs = CreateObject("ADODB.Recordset")
    rs.Open "SELECT * FROM " & mTestTableName & " WHERE Message = 'Test database message'", conn
    
    Debug.Assert Not rs.EOF
    Debug.Assert rs.Fields("LogLevel").value = "INFO"
    Debug.Assert rs.Fields("StackTrace").value = "Test stack trace"
    Debug.Assert rs.Fields("ErrorCode").value = 2001
    
    rs.Close
    mConnectionPool.ReleaseConnection conn
    
    Debug.Print "TestLogWriting: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestLogWriting: Failed - " & Err.Description
End Sub

Public Sub TestConcurrentWriting()
    On Error GoTo TestFail
    
    ' ロガーの初期化
    mDatabaseLogger.Initialize mConnectionPool, mLock, mPerformanceMonitor, mDatabaseConfig, mTestTableName
    
    ' 複数のログメッセージを同時に書き込み
    Dim i As Long
    For i = 1 To 10
        mDatabaseLogger.Log "INFO", "Concurrent DB message " & i, "", i
    Next i
    
    ' データベースの内容確認
    Dim conn As Object
    Set conn = mConnectionPool.AcquireConnection()
    
    Dim rs As Object
    Set rs = CreateObject("ADODB.Recordset")
    rs.Open "SELECT COUNT(*) AS MessageCount FROM " & mTestTableName & _
           " WHERE Message LIKE 'Concurrent DB message%'", conn
    
    Debug.Assert rs.Fields("MessageCount").value = 10
    
    rs.Close
    mConnectionPool.ReleaseConnection conn
    
    Debug.Print "TestConcurrentWriting: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestConcurrentWriting: Failed - " & Err.Description
End Sub

Public Sub TestErrorHandling()
    On Error GoTo TestFail
    
    ' 無効なテーブル名での初期化
    mDatabaseLogger.Initialize mConnectionPool, mLock, mPerformanceMonitor, mDatabaseConfig, "InvalidTable"
    
    ' エラーが発生するはずのログ書き込み
    mDatabaseLogger.Log "ERROR", "Error test message", "", 2002
    
    Debug.Print "TestErrorHandling: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestErrorHandling: Failed - " & Err.Description
End Sub

' ======================
' ヘルパーメソッド
' ======================
Private Sub CreateTestTable()
    On Error Resume Next
    
    Dim conn As Object
    Set conn = mConnectionPool.AcquireConnection()
    
    ' テストテーブルの作成
    conn.Execute "CREATE TABLE " & mTestTableName & " (" & _
                "ID IDENTITY PRIMARY KEY, " & _
                "LogTime DATETIME, " & _
                "LogLevel VARCHAR(50), " & _
                "Message VARCHAR(4000), " & _
                "StackTrace VARCHAR(4000), " & _
                "ErrorCode INT)"
    
    mConnectionPool.ReleaseConnection conn
End Sub

Private Sub DropTestTable()
    On Error Resume Next
    
    Dim conn As Object
    Set conn = mConnectionPool.AcquireConnection()
    
    ' テストテーブルの削除
    conn.Execute "DROP TABLE " & mTestTableName
    
    mConnectionPool.ReleaseConnection conn
End Sub

' ======================
' 全テストの実行
' ======================
Public Sub RunAllTests()
    TestInitialization
    TestLogWriting
    TestConcurrentWriting
    TestErrorHandling
End Sub

================
File: TestDateValidator.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "TestDateValidator"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "TestDateValidator"

' ======================
' プライベート変数
' ======================
Private mValidator As DateValidator
Private mMockError As MockError

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    Set mMockError = New MockError
End Sub

Private Sub Class_Terminate()
    Set mValidator = Nothing
    Set mMockError = Nothing
End Sub

' ======================
' テストメソッド
' ======================
Public Sub TestMinDateValidation()
    ' 準備
    Set mValidator = New DateValidator
    Set mValidator.Error = mMockError
    
    Dim minDateRule As MinDateRule
    Set minDateRule = New MinDateRule
    minDateRule.MinDate = DateSerial(2000, 1, 1)
    mValidator.AddRule minDateRule
    
    ' 実行と検証
    Debug.Assert Not mValidator.Validate(DateSerial(1999, 12, 31)), "最小日付より前の日付は失敗するべき"
    Debug.Assert mValidator.Validate(DateSerial(2000, 1, 1)), "最小日付と同じ日付は成功するべき"
    Debug.Assert mValidator.Validate(DateSerial(2000, 1, 2)), "最小日付より後の日付は成功するべき"
End Sub

Public Sub TestMaxDateValidation()
    ' 準備
    Set mValidator = New DateValidator
    Set mValidator.Error = mMockError
    
    Dim maxDateRule As MaxDateRule
    Set maxDateRule = New MaxDateRule
    maxDateRule.MaxDate = DateSerial(2000, 12, 31)
    mValidator.AddRule maxDateRule
    
    ' 実行と検証
    Debug.Assert mValidator.Validate(DateSerial(2000, 12, 30)), "最大日付より前の日付は成功するべき"
    Debug.Assert mValidator.Validate(DateSerial(2000, 12, 31)), "最大日付と同じ日付は成功するべき"
    Debug.Assert Not mValidator.Validate(DateSerial(2001, 1, 1)), "最大日付より後の日付は失敗するべき"
End Sub

Public Sub TestAllowFutureDateValidation()
    ' 準備
    Set mValidator = New DateValidator
    Set mValidator.Error = mMockError
    
    Dim futureDateRule As AllowFutureDateRule
    Set futureDateRule = New AllowFutureDateRule
    futureDateRule.AllowFutureDate = False
    mValidator.AddRule futureDateRule
    
    ' 実行と検証
    Debug.Assert mValidator.Validate(DateAdd("d", -1, Date)), "過去の日付は成功するべき"
    Debug.Assert mValidator.Validate(Date), "現在の日付は成功するべき"
    Debug.Assert Not mValidator.Validate(DateAdd("d", 1, Date)), "未来の日付は失敗するべき"
End Sub

Public Sub TestAllowPastDateValidation()
    ' 準備
    Set mValidator = New DateValidator
    Set mValidator.Error = mMockError
    
    Dim pastDateRule As AllowPastDateRule
    Set pastDateRule = New AllowPastDateRule
    pastDateRule.AllowPastDate = False
    mValidator.AddRule pastDateRule
    
    ' 実行と検証
    Debug.Assert Not mValidator.Validate(DateAdd("d", -1, Date)), "過去の日付は失敗するべき"
    Debug.Assert mValidator.Validate(Date), "現在の日付は成功するべき"
    Debug.Assert mValidator.Validate(DateAdd("d", 1, Date)), "未来の日付は成功するべき"
End Sub

Public Sub TestBirthDateValidation()
    ' 準備
    Set mValidator = CreateBirthDateValidator(mMockError)
    
    ' 実行と検証
    Debug.Assert Not mValidator.Validate(DateSerial(1899, 12, 31)), "1900年以前の日付は失敗するべき"
    Debug.Assert mValidator.Validate(DateSerial(1900, 1, 1)), "1900年1月1日は成功するべき"
    Debug.Assert mValidator.Validate(DateAdd("d", -1, Date)), "昨日の日付は成功するべき"
    Debug.Assert mValidator.Validate(Date), "今日の日付は成功するべき"
    Debug.Assert Not mValidator.Validate(DateAdd("d", 1, Date)), "未来の日付は失敗するべき"
End Sub

Public Sub TestExpiryDateValidation()
    ' 準備
    Set mValidator = CreateExpiryDateValidator(mMockError)
    
    ' 実行と検証
    Debug.Assert Not mValidator.Validate(DateAdd("d", -1, Date)), "過去の日付は失敗するべき"
    Debug.Assert mValidator.Validate(Date), "今日の日付は成功するべき"
    Debug.Assert mValidator.Validate(DateAdd("yyyy", 50, Date)), "50年後の日付は成功するべき"
    Debug.Assert mValidator.Validate(DateAdd("yyyy", 100, Date)), "100年後の日付は成功するべき"
    Debug.Assert Not mValidator.Validate(DateAdd("yyyy", 101, Date)), "100年より先の日付は失敗するべき"
End Sub

Public Sub TestMultipleRules()
    ' 準備
    Set mValidator = New DateValidator
    Set mValidator.Error = mMockError
    
    Dim minDateRule As MinDateRule
    Set minDateRule = New MinDateRule
    minDateRule.MinDate = DateSerial(2000, 1, 1)
    mValidator.AddRule minDateRule
    
    Dim maxDateRule As MaxDateRule
    Set maxDateRule = New MaxDateRule
    maxDateRule.MaxDate = DateSerial(2100, 12, 31)
    mValidator.AddRule maxDateRule
    
    Dim futureDateRule As AllowFutureDateRule
    Set futureDateRule = New AllowFutureDateRule
    futureDateRule.AllowFutureDate = True
    mValidator.AddRule futureDateRule
    
    Dim pastDateRule As AllowPastDateRule
    Set pastDateRule = New AllowPastDateRule
    pastDateRule.AllowPastDate = True
    mValidator.AddRule pastDateRule
    
    ' 実行と検証
    Debug.Assert Not mValidator.Validate(DateSerial(1999, 12, 31)), "範囲外の過去の日付は失敗するべき"
    Debug.Assert mValidator.Validate(DateSerial(2000, 1, 1)), "範囲内の過去の日付は成功するべき"
    Debug.Assert mValidator.Validate(Date), "現在の日付は成功するべき"
    Debug.Assert mValidator.Validate(DateSerial(2100, 12, 31)), "範囲内の未来の日付は成功するべき"
    Debug.Assert Not mValidator.Validate(DateSerial(2101, 1, 1)), "範囲外の未来の日付は失敗するべき"
End Sub

================
File: TestDefaultMessageFormatter.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "TestDefaultMessageFormatter"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Private Const MODULE_NAME As String = "TestDefaultMessageFormatter"

' テスト対象
Private mFormatter As DefaultMessageFormatter

' ======================
' セットアップ/クリーンアップ
' ======================
Private Sub Class_Initialize()
    Set mFormatter = New DefaultMessageFormatter
End Sub

Private Sub Class_Terminate()
    Set mFormatter = Nothing
End Sub

' ======================
' テストケース
' ======================

''' <summary>
''' 基本的なメッセージフォーマットのテスト
''' </summary>
Public Sub TestBasicFormatting()
    On Error GoTo TestFail
    
    ' テスト用エラー情報の作成
    Dim testError As ErrorInfo
    With testError
        .Code = ErrUnexpected
        .Description = "テストエラー"
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "TestBasicFormatting"
        .StackTrace = ""
    End With
    
    ' メッセージのフォーマット
    Dim result As String
    result = mFormatter.TestFormatMessage("テストメッセージ", testError)
    
    ' 結果の検証
    If InStr(result, "テストメッセージ") > 0 And _
       InStr(result, "テストエラー") > 0 And _
       InStr(result, MODULE_NAME) > 0 Then
        Debug.Print "TestBasicFormatting: OK"
    Else
        Debug.Print "TestBasicFormatting: Failed - Unexpected format"
        Debug.Print "Result: " & result
    End If
    Exit Sub
    
TestFail:
    Debug.Print "TestBasicFormatting: Failed - " & Err.Description
End Sub

''' <summary>
''' スタックトレース付きメッセージのテスト
''' </summary>
Public Sub TestWithStackTrace()
    On Error GoTo TestFail
    
    ' テスト用エラー情報の作成
    Dim testError As ErrorInfo
    With testError
        .Code = ErrUnexpected
        .Description = "テストエラー"
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "TestWithStackTrace"
        .StackTrace = "テストスタックトレース" & vbCrLf & "行1" & vbCrLf & "行2"
    End With
    
    ' メッセージのフォーマット
    Dim result As String
    result = mFormatter.TestFormatMessage("", testError)
    
    ' 結果の検証
    If InStr(result, "スタックトレース") > 0 And _
       InStr(result, "テストスタックトレース") > 0 Then
        Debug.Print "TestWithStackTrace: OK"
    Else
        Debug.Print "TestWithStackTrace: Failed - Stack trace not found"
        Debug.Print "Result: " & result
    End If
    Exit Sub
    
TestFail:
    Debug.Print "TestWithStackTrace: Failed - " & Err.Description
End Sub

''' <summary>
''' 空のメッセージ処理のテスト
''' </summary>
Public Sub TestEmptyMessage()
    On Error GoTo TestFail
    
    ' テスト用エラー情報の作成
    Dim testError As ErrorInfo
    With testError
        .Code = ErrUnexpected
        .Description = "テストエラー"
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "TestEmptyMessage"
    End With
    
    ' メッセージのフォーマット
    Dim result As String
    result = mFormatter.TestFormatMessage("", testError)
    
    ' 結果の検証
    If InStr(result, "エラーが発生しました") > 0 Then
        Debug.Print "TestEmptyMessage: OK"
    Else
        Debug.Print "TestEmptyMessage: Failed - Default message not found"
        Debug.Print "Result: " & result
    End If
    Exit Sub
    
TestFail:
    Debug.Print "TestEmptyMessage: Failed - " & Err.Description
End Sub

''' <summary>
''' エラー処理のテスト
''' </summary>
Public Sub TestErrorHandling()
    On Error Resume Next
    
    ' 不正なエラー情報でテスト
    Dim result As String
    result = mFormatter.TestFormatMessage("テスト", Nothing)
    
    ' エラーが適切に処理されることを確認
    If InStr(result, "エラーメッセージのフォーマットに失敗") > 0 Then
        Debug.Print "TestErrorHandling: OK"
    Else
        Debug.Print "TestErrorHandling: Failed - Error not handled properly"
        Debug.Print "Result: " & result
    End If
    
    On Error GoTo 0
End Sub

' ======================
' テスト実行
' ======================
Public Sub RunAllTests()
    TestBasicFormatting
    TestWithStackTrace
    TestEmptyMessage
    TestErrorHandling
End Sub

================
File: TestEventLogLogger.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "TestEventLogLogger"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "TestEventLogLogger"

' ======================
' メンバ変数
' ======================
Private mEventLogLogger As EventLogLogger
Private mEventLog As IEventLog
Private mLock As ILock
Private mPerformanceMonitor As IPerformanceMonitor
Private mTestEventSource As String

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    ' テスト対象の初期化
    Set mEventLogLogger = New EventLogLogger
    Set mEventLog = New EventLogImpl
    Set mLock = New clsLock
    Set mPerformanceMonitor = New clsPerformanceMonitor
    mTestEventSource = "PDILoggerTest"
    
    ' テストイベントソースの作成
    CreateEventSource
End Sub

Private Sub Class_Terminate()
    ' テストイベントソースの削除
    RemoveEventSource
    
    Set mEventLogLogger = Nothing
    Set mEventLog = Nothing
    Set mLock = Nothing
    Set mPerformanceMonitor = Nothing
End Sub

' ======================
' テストメソッド
' ======================
Public Sub TestInitialization()
    On Error GoTo TestFail
    
    ' 初期化
    mEventLogLogger.Initialize mEventLog, mLock, mPerformanceMonitor, mTestEventSource
    
    Debug.Print "TestInitialization: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestInitialization: Failed - " & Err.Description
End Sub

Public Sub TestLogWriting()
    On Error GoTo TestFail
    
    ' ロガーの初期化
    mEventLogLogger.Initialize mEventLog, mLock, mPerformanceMonitor, mTestEventSource
    
    ' ログの書き込み
    mEventLogLogger.Log "INFO", "Test event log message", "Test stack trace", 3001
    
    ' イベントログの確認は手動で行う必要がある
    Debug.Print "TestLogWriting: OK - イベントビューアーで確認してください"
    Exit Sub
    
TestFail:
    Debug.Print "TestLogWriting: Failed - " & Err.Description
End Sub

Public Sub TestDifferentLogLevels()
    On Error GoTo TestFail
    
    ' ロガーの初期化
    mEventLogLogger.Initialize mEventLog, mLock, mPerformanceMonitor, mTestEventSource
    
    ' 異なるログレベルでの書き込み
    mEventLogLogger.Log "INFO", "Information message", "", 0
    mEventLogLogger.Log "WARNING", "Warning message", "", 3002
    mEventLogLogger.Log "ERROR", "Error message", "Error stack trace", 3003
    
    Debug.Print "TestDifferentLogLevels: OK - イベントビューアーで確認してください"
    Exit Sub
    
TestFail:
    Debug.Print "TestDifferentLogLevels: Failed - " & Err.Description
End Sub

Public Sub TestErrorHandling()
    On Error GoTo TestFail
    
    ' 無効なイベントソースでの初期化
    mEventLogLogger.Initialize mEventLog, mLock, mPerformanceMonitor, "InvalidSource"
    
    ' エラーが発生するはずのログ書き込み
    mEventLogLogger.Log "ERROR", "Error test message", "", 3004
    
    Debug.Print "TestErrorHandling: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestErrorHandling: Failed - " & Err.Description
End Sub

' ======================
' ヘルパーメソッド
' ======================
Private Sub CreateEventSource()
    On Error Resume Next
    
    ' イベントソースの作成
    Dim shell As Object
    Set shell = CreateObject("WScript.Shell")
    
    Dim regPath As String
    regPath = "HKLM\SYSTEM\CurrentControlSet\Services\EventLog\Application\" & mTestEventSource
    
    shell.RegWrite regPath & "\EventMessageFile", "C:\Windows\Microsoft.NET\Framework64\v4.0.30319\EventLogMessages.dll", "REG_SZ"
    shell.RegWrite regPath & "\TypesSupported", 7, "REG_DWORD"
    
    Set shell = Nothing
End Sub

Private Sub RemoveEventSource()
    On Error Resume Next
    
    ' イベントソースの削除
    Dim shell As Object
    Set shell = CreateObject("WScript.Shell")
    
    Dim regPath As String
    regPath = "HKLM\SYSTEM\CurrentControlSet\Services\EventLog\Application\" & mTestEventSource
    
    shell.RegDelete regPath & "\"
    
    Set shell = Nothing
End Sub

' ======================
' 全テストの実行
' ======================
Public Sub RunAllTests()
    TestInitialization
    TestLogWriting
    TestDifferentLogLevels
    TestErrorHandling
End Sub

================
File: TestFileLogger.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "TestFileLogger"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "TestFileLogger"

' ======================
' メンバ変数
' ======================
Private mFileLogger As FileLogger
Private mFileOperations As IFileOperations
Private mLock As ILock
Private mPerformanceMonitor As IPerformanceMonitor
Private mTestFilePath As String

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    ' テスト対象の初期化
    Set mFileLogger = New FileLogger
    Set mFileOperations = New FileSystemOperations
    Set mLock = New clsLock
    Set mPerformanceMonitor = New clsPerformanceMonitor
    mTestFilePath = "test_log.txt"
End Sub

Private Sub Class_Terminate()
    ' テストファイルの削除
    On Error Resume Next
    mFileOperations.DeleteFile mTestFilePath
    On Error GoTo 0
    
    Set mFileLogger = Nothing
    Set mFileOperations = Nothing
    Set mLock = Nothing
    Set mPerformanceMonitor = Nothing
End Sub

' ======================
' テストメソッド
' ======================
Public Sub TestInitialization()
    On Error GoTo TestFail
    
    ' 初期化
    mFileLogger.Initialize mFileOperations, mLock, mPerformanceMonitor, mTestFilePath
    
    Debug.Print "TestInitialization: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestInitialization: Failed - " & Err.Description
End Sub

Public Sub TestLogWriting()
    On Error GoTo TestFail
    
    ' ロガーの初期化
    mFileLogger.Initialize mFileOperations, mLock, mPerformanceMonitor, mTestFilePath
    
    ' ログの書き込み
    mFileLogger.Log "INFO", "Test message", "Test stack trace", 1001
    
    ' ファイルの存在確認
    Debug.Assert mFileOperations.FileExists(mTestFilePath)
    
    ' ファイルの内容確認
    Dim content As String
    content = mFileOperations.ReadAllText(mTestFilePath)
    Debug.Assert InStr(content, "Test message") > 0
    Debug.Assert InStr(content, "Test stack trace") > 0
    Debug.Assert InStr(content, "1001") > 0
    
    Debug.Print "TestLogWriting: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestLogWriting: Failed - " & Err.Description
End Sub

Public Sub TestConcurrentWriting()
    On Error GoTo TestFail
    
    ' ロガーの初期化
    mFileLogger.Initialize mFileOperations, mLock, mPerformanceMonitor, mTestFilePath
    
    ' 複数のログメッセージを同時に書き込み
    Dim i As Long
    For i = 1 To 10
        mFileLogger.Log "INFO", "Concurrent message " & i, "", i
    Next i
    
    ' ファイルの内容確認
    Dim content As String
    content = mFileOperations.ReadAllText(mTestFilePath)
    For i = 1 To 10
        Debug.Assert InStr(content, "Concurrent message " & i) > 0
    Next i
    
    Debug.Print "TestConcurrentWriting: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestConcurrentWriting: Failed - " & Err.Description
End Sub

Public Sub TestErrorHandling()
    On Error GoTo TestFail
    
    ' 無効なファイルパスでの初期化
    mFileLogger.Initialize mFileOperations, mLock, mPerformanceMonitor, "|invalid|path"
    
    ' エラーが発生するはずのログ書き込み
    mFileLogger.Log "ERROR", "Error test message", "", 1002
    
    Debug.Print "TestErrorHandling: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestErrorHandling: Failed - " & Err.Description
End Sub

' ======================
' 全テストの実行
' ======================
Public Sub RunAllTests()
    TestInitialization
    TestLogWriting
    TestConcurrentWriting
    TestErrorHandling
End Sub

================
File: TestFileSystemOperations.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "TestFileSystemOperations"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Private Const MODULE_NAME As String = "TestFileSystemOperations"

' モックオブジェクト
Private mockLock As MockLock
Private mockPerformanceMonitor As MockPerformanceMonitor
Private mockFileIO As MockFileIO
Private fileOps As FileSystemOperations

'@TestInitialize
Private Sub TestInitialize()
    ' モックオブジェクトの初期化
    Set mockLock = New MockLock
    Set mockPerformanceMonitor = New MockPerformanceMonitor
    Set mockFileIO = New MockFileIO
    Set fileOps = New FileSystemOperations
    
    ' 依存性の注入
    fileOps.Initialize mockLock, mockPerformanceMonitor, mockFileIO
End Sub

'@TestCleanup
Private Sub TestCleanup()
    Set mockLock = Nothing
    Set mockPerformanceMonitor = Nothing
    Set mockFileIO = Nothing
    Set fileOps = Nothing
End Sub

'@TestMethod("初期化")
Private Sub TestInitialization()
    On Error GoTo TestFail
    
    ' 未初期化の状態でメソッドを呼び出すとエラーになることを確認
    Dim uninitializedOps As New FileSystemOperations
    Dim success As Boolean
    
    On Error Resume Next
    success = uninitializedOps.FileExists("test.txt")
    
    Debug.Assert Err.Number <> 0, "未初期化状態でのメソッド呼び出しはエラーになるべき"
    On Error GoTo 0
    
    ' 正しく初期化された状態ではエラーにならないことを確認
    On Error Resume Next
    success = fileOps.FileExists("test.txt")
    Debug.Assert Err.Number = 0, "初期化済み状態でのメソッド呼び出しはエラーにならない"
    
    Exit Sub
    
TestFail:
    Debug.Print "TestInitialization failed: " & Err.Description
    Resume Next
End Sub

'@TestMethod("ファイル操作")
Private Sub TestFileOperations()
    On Error GoTo TestFail
    
    ' FileExistsのテスト
    mockFileIO.SetFileExists "test.txt", True
    Debug.Assert fileOps.FileExists("test.txt"), "FileExists should return True"
    
    ' CreateFolderのテスト
    mockFileIO.SetCreateFolderResult "testFolder", True
    Debug.Assert fileOps.CreateFolder("testFolder"), "CreateFolder should return True"
    
    ' パフォーマンスモニタリングの確認
    Debug.Assert mockPerformanceMonitor.WasMeasurementStarted("Create Folder"), _
                 "パフォーマンスモニタリングが開始されていない"
    Debug.Assert mockPerformanceMonitor.WasMeasurementEnded("Create Folder"), _
                 "パフォーマンスモニタリングが終了されていない"
    
    Exit Sub
    
TestFail:
    Debug.Print "TestFileOperations failed: " & Err.Description
    Resume Next
End Sub

'@TestMethod("エラー処理")
Private Sub TestErrorHandling()
    On Error GoTo TestFail
    
    ' ファイル読み込みエラーのテスト
    mockFileIO.SetOpenFileResult "error.txt", Nothing
    Dim content As String
    content = fileOps.ReadTextFile("error.txt")
    Debug.Assert content = vbNullString, "エラー時は空文字列を返すべき"
    
    ' ファイル書き込みエラーのテスト
    mockFileIO.SetOpenFileResult "readonly.txt", Nothing
    Dim writeSuccess As Boolean
    writeSuccess = fileOps.WriteTextFile("readonly.txt", "test")
    Debug.Assert Not writeSuccess, "エラー時はFalseを返すべき"
    
    Exit Sub
    
TestFail:
    Debug.Print "TestErrorHandling failed: " & Err.Description
    Resume Next
End Sub

'@TestMethod("バイナリファイル操作")
Private Sub TestBinaryOperations()
    On Error GoTo TestFail
    
    ' バイナリファイル読み込みのテスト
    Dim testData(0 To 2) As Byte
    testData(0) = 1: testData(1) = 2: testData(2) = 3
    
    mockFileIO.SetBinaryFileContent "test.bin", testData
    Dim readData() As Byte
    readData = fileOps.ReadBinaryFile("test.bin")
    
    Debug.Assert UBound(readData) = UBound(testData), "バイナリデータのサイズが一致しない"
    Debug.Assert readData(0) = testData(0), "バイナリデータの内容が一致しない"
    
    Exit Sub
    
TestFail:
    Debug.Print "TestBinaryOperations failed: " & Err.Description
    Resume Next
End Sub

'@TestMethod("パス操作")
Private Sub TestPathOperations()
    On Error GoTo TestFail
    
    ' 相対パスから絶対パスへの変換テスト
    Dim absolutePath As String
    absolutePath = fileOps.GetAbsolutePath("test.txt", "C:\temp")
    Debug.Assert absolutePath = "C:\temp\test.txt", "絶対パスの解決が正しくない"
    
    Exit Sub
    
TestFail:
    Debug.Print "TestPathOperations failed: " & Err.Description
    Resume Next
End Sub

================
File: TestLogger.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "TestLogger"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "TestLogger"

' ======================
' メンバ変数
' ======================
Private mLogger As clsLogger
Private mSettings As ILoggerSettings
Private mQueue As IQueue
Private mLock As ILock
Private mPerformanceMonitor As IPerformanceMonitor
Private mTestFileLogger As FileLogger
Private mTestDatabaseLogger As DatabaseLogger
Private mTestEventLogLogger As EventLogLogger
Private mTestConsoleLogger As ConsoleLogger

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    ' テスト対象の初期化
    Set mLogger = New clsLogger
    Set mSettings = New DefaultLoggerSettings
    Set mQueue = New QueueImpl
    Set mLock = New clsLock
    Set mPerformanceMonitor = New clsPerformanceMonitor
    
    ' テスト用ロガーの初期化
    Set mTestFileLogger = New FileLogger
    Set mTestDatabaseLogger = New DatabaseLogger
    Set mTestEventLogLogger = New EventLogLogger
    Set mTestConsoleLogger = New ConsoleLogger
End Sub

Private Sub Class_Terminate()
    Set mLogger = Nothing
    Set mSettings = Nothing
    Set mQueue = Nothing
    Set mLock = Nothing
    Set mPerformanceMonitor = Nothing
    Set mTestFileLogger = Nothing
    Set mTestDatabaseLogger = Nothing
    Set mTestEventLogLogger = Nothing
    Set mTestConsoleLogger = Nothing
End Sub

' ======================
' テストメソッド
' ======================
Public Sub TestInitialization()
    On Error GoTo TestFail
    
    ' 初期化前の状態確認
    Debug.Assert mLogger.GetQueueCount() = 0
    
    ' 初期化
    mLogger.Configure mSettings, mQueue, mLock, mPerformanceMonitor
    
    ' 初期化後の状態確認
    Debug.Assert Not mLogger Is Nothing
    Debug.Print "TestInitialization: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestInitialization: Failed - " & Err.Description
End Sub

Public Sub TestLoggerAddition()
    On Error GoTo TestFail
    
    ' ロガーの初期化
    mLogger.Configure mSettings, mQueue, mLock, mPerformanceMonitor
    
    ' ロガーの追加
    mLogger.SetLogger "File", mTestFileLogger
    mLogger.SetLogger "Database", mTestDatabaseLogger
    mLogger.SetLogger "EventLog", mTestEventLogLogger
    mLogger.SetLogger "Console", mTestConsoleLogger
    
    ' 同じ出力先に対する上書き確認
    Dim newFileLogger As New FileLogger
    mLogger.SetLogger "File", newFileLogger
    
    Debug.Print "TestLoggerAddition: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestLoggerAddition: Failed - " & Err.Description
End Sub

Public Sub TestLogMessageQueuing()
    On Error GoTo TestFail
    
    ' ロガーの初期化
    mLogger.Configure mSettings, mQueue, mLock, mPerformanceMonitor
    
    ' ログメッセージの追加
    mLogger.Log "TestModule", "Test message 1", LOG_LEVEL_INFO
    mLogger.Log "TestModule", "Test message 2", LOG_LEVEL_WARNING
    mLogger.Log "TestModule", "Test message 3", LOG_LEVEL_ERROR
    
    ' キューの状態確認
    Debug.Assert mLogger.GetQueueCount() = 3
    
    Debug.Print "TestLogMessageQueuing: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestLogMessageQueuing: Failed - " & Err.Description
End Sub

Public Sub TestAsyncProcessing()
    On Error GoTo TestFail
    
    ' ロガーの初期化
    mLogger.Configure mSettings, mQueue, mLock, mPerformanceMonitor
    
    ' ログメッセージの追加
    mLogger.Log "TestModule", "Async test message", LOG_LEVEL_INFO
    
    ' 非同期処理のシミュレーション
    mLogger.SimulateTimer
    
    ' キューが空になっていることを確認
    Debug.Assert mLogger.GetQueueCount() = 0
    
    Debug.Print "TestAsyncProcessing: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestAsyncProcessing: Failed - " & Err.Description
End Sub

' ======================
' 全テストの実行
' ======================
Public Sub RunAllTests()
    TestInitialization
    TestLoggerAddition
    TestLogMessageQueuing
    TestAsyncProcessing
End Sub

================
File: TestMsgBoxNotifier.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "TestMsgBoxNotifier"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Private Const MODULE_NAME As String = "TestMsgBoxNotifier"

' テスト対象
Private mNotifier As MsgBoxNotifier
Private mMockLock As MockLock
Private mMockMonitor As MockPerformanceMonitor
Private mMockConfig As MockAppConfig
Private mMockFormatter As MockMessageFormatter

' ======================
' セットアップ/クリーンアップ
' ======================
Private Sub Class_Initialize()
    ' モックオブジェクトの初期化
    Set mMockLock = New MockLock
    Set mMockMonitor = New MockPerformanceMonitor
    Set mMockConfig = New MockAppConfig
    Set mMockFormatter = New MockMessageFormatter
    
    ' テスト対象の初期化
    Set mNotifier = New MsgBoxNotifier
    mNotifier.Initialize mMockLock, mMockMonitor, mMockConfig, mMockFormatter
End Sub

Private Sub Class_Terminate()
    Set mNotifier = Nothing
    Set mMockLock = Nothing
    Set mMockMonitor = Nothing
    Set mMockConfig = Nothing
    Set mMockFormatter = Nothing
End Sub

' ======================
' テストケース
' ======================

''' <summary>
''' 初期化テスト - 正常系
''' </summary>
Public Sub TestInitialize()
    On Error GoTo TestFail
    
    ' 新しいインスタンスで初期化テスト
    Dim notifier As New MsgBoxNotifier
    notifier.Initialize mMockLock, mMockMonitor, mMockConfig, mMockFormatter
    
    Debug.Print "TestInitialize: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestInitialize: Failed - " & Err.Description
End Sub

''' <summary>
''' 初期化テスト - 異常系（Nothingを渡す）
''' </summary>
Public Sub TestInitializeWithNothing()
    On Error Resume Next
    
    Dim notifier As New MsgBoxNotifier
    notifier.Initialize Nothing, Nothing, Nothing, Nothing
    
    ' エラーが発生することを確認
    If Err.Number = 5 Then
        Debug.Print "TestInitializeWithNothing: OK"
    Else
        Debug.Print "TestInitializeWithNothing: Failed - Expected error 5, got " & Err.Number
    End If
    
    On Error GoTo 0
End Sub

''' <summary>
''' 通知スタイル設定テスト
''' </summary>
Public Sub TestNotificationStyle()
    On Error GoTo TestFail
    
    ' スタイル設定
    Dim testStyle As VbMsgBoxStyle
    testStyle = vbOKOnly Or vbInformation
    mNotifier.NotificationStyle = testStyle
    
    ' 設定値の取得と検証
    If mNotifier.NotificationStyle = testStyle Then
        Debug.Print "TestNotificationStyle: OK"
    Else
        Debug.Print "TestNotificationStyle: Failed - Style mismatch"
    End If
    Exit Sub
    
TestFail:
    Debug.Print "TestNotificationStyle: Failed - " & Err.Description
End Sub

''' <summary>
''' メッセージフォーマット処理テスト
''' </summary>
Public Sub TestMessageFormatting()
    On Error GoTo TestFail
    
    ' テスト用エラー情報
    Dim testError As ErrorInfo
    With testError
        .Code = ErrUnexpected
        .Description = "テストエラー"
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "TestMessageFormatting"
    End With
    
    ' モックフォーマッタの戻り値を設定
    mMockFormatter.SetReturnValue "テストフォーマット済メッセージ"
    
    ' 通知実行
    mNotifier.Notify testError
    
    ' フォーマッタが呼び出されたことを確認
    If mMockFormatter.WasCalled Then
        Debug.Print "TestMessageFormatting: OK"
    Else
        Debug.Print "TestMessageFormatting: Failed - Formatter not called"
    End If
    Exit Sub
    
TestFail:
    Debug.Print "TestMessageFormatting: Failed - " & Err.Description
End Sub

''' <summary>
''' ロック処理テスト
''' </summary>
Public Sub TestLocking()
    On Error GoTo TestFail
    
    ' テスト用エラー情報
    Dim testError As ErrorInfo
    With testError
        .Code = ErrUnexpected
        .Description = "テストエラー"
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "TestLocking"
    End With
    
    ' 通知実行
    mNotifier.Notify testError
    
    ' ロックの取得と解放が行われたことを確認
    If mMockLock.AcquireCalled And mMockLock.ReleaseCalled Then
        Debug.Print "TestLocking: OK"
    Else
        Debug.Print "TestLocking: Failed - Lock operations not called"
    End If
    Exit Sub
    
TestFail:
    Debug.Print "TestLocking: Failed - " & Err.Description
End Sub

' ======================
' テスト実行
' ======================
Public Sub RunAllTests()
    TestInitialize
    TestInitializeWithNothing
    TestNotificationStyle
    TestMessageFormatting
    TestLocking
End Sub

================
File: TestMutexLock.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "TestMutexLock"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Private Const MODULE_NAME As String = "TestMutexLock"
Private testLock As clsMutexLock

'@TestInitialize
Private Sub TestInitialize()
    Set testLock = New clsMutexLock
End Sub

'@TestCleanup
Private Sub TestCleanup()
    If Not testLock Is Nothing Then
        testLock.ForceRelease
        Set testLock = Nothing
    End If
End Sub

'@TestMethod("MutexLock")
Public Sub TestAcquireSuccess()
    On Error GoTo TestFail
    
    'Arrange
    Dim result As Boolean
    
    'Act
    result = testLock.Acquire()
    
    'Assert
    Debug.Assert result = True
    Debug.Assert testLock.ValidateLockState() = True
    
    Exit Sub
TestFail:
    Debug.Print "TestAcquireSuccess failed: " & Err.Description
End Sub

'@TestMethod("MutexLock")
Public Sub TestAcquireWithTimeout()
    On Error GoTo TestFail
    
    'Arrange
    Dim result As Boolean
    Dim timeout As Long
    timeout = 1000 ' 1秒
    
    'Act
    result = testLock.Acquire(timeout)
    
    'Assert
    Debug.Assert result = True
    Debug.Assert testLock.ValidateLockState() = True
    
    Exit Sub
TestFail:
    Debug.Print "TestAcquireWithTimeout failed: " & Err.Description
End Sub

'@TestMethod("MutexLock")
Public Sub TestReleaseSuccess()
    On Error GoTo TestFail
    
    'Arrange
    testLock.Acquire
    
    'Act
    testLock.Release
    
    'Assert
    Debug.Assert testLock.ValidateLockState() = False
    
    Exit Sub
TestFail:
    Debug.Print "TestReleaseSuccess failed: " & Err.Description
End Sub

'@TestMethod("MutexLock")
Public Sub TestConfigure()
    On Error GoTo TestFail
    
    'Arrange
    Const NEW_MUTEX_NAME As String = "TestMutex"
    
    'Act
    testLock.Configure NEW_MUTEX_NAME
    
    'Assert
    Debug.Assert testLock.MutexName = NEW_MUTEX_NAME
    
    Exit Sub
TestFail:
    Debug.Print "TestConfigure failed: " & Err.Description
End Sub

'@TestMethod("MutexLock")
Public Sub TestMultipleAcquire()
    On Error GoTo TestFail
    
    'Arrange
    Dim secondLock As clsMutexLock
    Set secondLock = New clsMutexLock
    
    'Act
    testLock.Acquire
    Dim result As Boolean
    result = secondLock.Acquire(100) ' 100msタイムアウト
    
    'Assert
    Debug.Assert result = False ' 2番目のロックは失敗するはず
    
    'Cleanup
    Set secondLock = Nothing
    
    Exit Sub
TestFail:
    Debug.Print "TestMultipleAcquire failed: " & Err.Description
End Sub

================
File: TestSemaphoreLock.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "TestSemaphoreLock"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Private Const MODULE_NAME As String = "TestSemaphoreLock"
Private testLock As clsSemaphoreLock

'@TestInitialize
Private Sub TestInitialize()
    Set testLock = New clsSemaphoreLock
End Sub

'@TestCleanup
Private Sub TestCleanup()
    If Not testLock Is Nothing Then
        testLock.ForceRelease
        Set testLock = Nothing
    End If
End Sub

'@TestMethod("SemaphoreLock")
Public Sub TestAcquireSuccess()
    On Error GoTo TestFail
    
    'Arrange
    Dim result As Boolean
    
    'Act
    result = testLock.Acquire()
    
    'Assert
    Debug.Assert result = True
    Debug.Assert testLock.ValidateLockState() = True
    
    Exit Sub
TestFail:
    Debug.Print "TestAcquireSuccess failed: " & Err.Description
End Sub

'@TestMethod("SemaphoreLock")
Public Sub TestAcquireWithTimeout()
    On Error GoTo TestFail
    
    'Arrange
    Dim result As Boolean
    Dim timeout As Long
    timeout = 1000 ' 1秒
    
    'Act
    result = testLock.Acquire(timeout)
    
    'Assert
    Debug.Assert result = True
    Debug.Assert testLock.ValidateLockState() = True
    
    Exit Sub
TestFail:
    Debug.Print "TestAcquireWithTimeout failed: " & Err.Description
End Sub

'@TestMethod("SemaphoreLock")
Public Sub TestReleaseSuccess()
    On Error GoTo TestFail
    
    'Arrange
    testLock.Acquire
    
    'Act
    testLock.Release
    
    'Assert
    Debug.Assert testLock.ValidateLockState() = False
    
    Exit Sub
TestFail:
    Debug.Print "TestReleaseSuccess failed: " & Err.Description
End Sub

'@TestMethod("SemaphoreLock")
Public Sub TestConfigure()
    On Error GoTo TestFail
    
    'Arrange
    Const NEW_SEMAPHORE_NAME As String = "TestSemaphore"
    
    'Act
    testLock.Configure NEW_SEMAPHORE_NAME
    
    'Assert
    Debug.Assert testLock.SemaphoreName = NEW_SEMAPHORE_NAME
    
    Exit Sub
TestFail:
    Debug.Print "TestConfigure failed: " & Err.Description
End Sub

'@TestMethod("SemaphoreLock")
Public Sub TestMultipleAcquire()
    On Error GoTo TestFail
    
    'Arrange
    Dim secondLock As clsSemaphoreLock
    Set secondLock = New clsSemaphoreLock
    
    'Act
    testLock.Acquire
    Dim result As Boolean
    result = secondLock.Acquire(100) ' 100msタイムアウト
    
    'Assert
    Debug.Assert result = False ' 2番目のロックは失敗するはず
    
    'Cleanup
    Set secondLock = Nothing
    
    Exit Sub
TestFail:
    Debug.Print "TestMultipleAcquire failed: " & Err.Description
End Sub

================
File: TestStringValidator.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "TestStringValidator"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "TestStringValidator"

' ======================
' プライベート変数
' ======================
Private mValidator As StringValidator
Private mMockError As MockError

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    Set mMockError = New MockError
End Sub

Private Sub Class_Terminate()
    Set mValidator = Nothing
    Set mMockError = Nothing
End Sub

' ======================
' テストメソッド
' ======================
Public Sub TestMinLengthValidation()
    ' 準備
    Set mValidator = New StringValidator
    Set mValidator.Error = mMockError
    
    Dim minLengthRule As MinLengthRule
    Set minLengthRule = New MinLengthRule
    minLengthRule.MinLength = 5
    mValidator.AddRule minLengthRule
    
    ' 実行と検証
    Debug.Assert Not mValidator.Validate("abc"), "最小長より短い文字列は失敗するべき"
    Debug.Assert mValidator.Validate("abcde"), "最小長と同じ長さの文字列は成功するべき"
    Debug.Assert mValidator.Validate("abcdef"), "最小長より長い文字列は成功するべき"
End Sub

Public Sub TestMaxLengthValidation()
    ' 準備
    Set mValidator = New StringValidator
    Set mValidator.Error = mMockError
    
    Dim maxLengthRule As MaxLengthRule
    Set maxLengthRule = New MaxLengthRule
    maxLengthRule.MaxLength = 5
    mValidator.AddRule maxLengthRule
    
    ' 実行と検証
    Debug.Assert mValidator.Validate("abc"), "最大長より短い文字列は成功するべき"
    Debug.Assert mValidator.Validate("abcde"), "最大長と同じ長さの文字列は成功するべき"
    Debug.Assert Not mValidator.Validate("abcdef"), "最大長より長い文字列は失敗するべき"
End Sub

Public Sub TestPatternValidation()
    ' 準備
    Set mValidator = New StringValidator
    Set mValidator.Error = mMockError
    
    Dim patternRule As PatternRule
    Set patternRule = New PatternRule
    patternRule.Pattern = "^[0-9]+$"
    mValidator.AddRule patternRule
    
    ' 実行と検証
    Debug.Assert mValidator.Validate("12345"), "数字のみの文字列は成功するべき"
    Debug.Assert Not mValidator.Validate("abc"), "数字以外の文字列は失敗するべき"
    Debug.Assert Not mValidator.Validate("123abc"), "数字と文字が混在する文字列は失敗するべき"
End Sub

Public Sub TestEmailValidation()
    ' 準備
    Set mValidator = CreateEmailValidator(mMockError)
    
    ' 実行と検証
    Debug.Assert mValidator.Validate("test@example.com"), "正しい形式のメールアドレスは成功するべき"
    Debug.Assert Not mValidator.Validate("invalid-email"), "@を含まないメールアドレスは失敗するべき"
    Debug.Assert Not mValidator.Validate("test@"), "ドメインがないメールアドレスは失敗するべき"
    Debug.Assert Not mValidator.Validate("@example.com"), "ローカル部がないメールアドレスは失敗するべき"
End Sub

Public Sub TestPhoneValidation()
    ' 準備
    Set mValidator = CreatePhoneValidator(mMockError)
    
    ' 実行と検証
    Debug.Assert mValidator.Validate("03-1234-5678"), "正しい形式の電話番号は成功するべき"
    Debug.Assert mValidator.Validate("0312345678"), "ハイフンなしの電話番号は成功するべき"
    Debug.Assert Not mValidator.Validate("abc-defg-hijk"), "数字以外の文字列は失敗するべき"
    Debug.Assert Not mValidator.Validate("03-1234"), "短すぎる電話番号は失敗するべき"
    Debug.Assert Not mValidator.Validate("03-1234-5678-9012"), "長すぎる電話番号は失敗するべき"
End Sub

Public Sub TestMultipleRules()
    ' 準備
    Set mValidator = New StringValidator
    Set mValidator.Error = mMockError
    
    Dim minLengthRule As MinLengthRule
    Set minLengthRule = New MinLengthRule
    minLengthRule.MinLength = 5
    mValidator.AddRule minLengthRule
    
    Dim maxLengthRule As MaxLengthRule
    Set maxLengthRule = New MaxLengthRule
    maxLengthRule.MaxLength = 10
    mValidator.AddRule maxLengthRule
    
    Dim patternRule As PatternRule
    Set patternRule = New PatternRule
    patternRule.Pattern = "^[a-zA-Z]+$"
    mValidator.AddRule patternRule
    
    ' 実行と検証
    Debug.Assert Not mValidator.Validate("abc"), "短すぎる文字列は失敗するべき"
    Debug.Assert Not mValidator.Validate("abcdefghijk"), "長すぎる文字列は失敗するべき"
    Debug.Assert Not mValidator.Validate("abc123"), "数字を含む文字列は失敗するべき"
    Debug.Assert mValidator.Validate("abcdef"), "すべてのルールを満たす文字列は成功するべき"
End Sub

================
File: tests/TestClsCrypto.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "TestClsCrypto"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Private mCrypto As clsCrypto
Private mPerformanceMonitor As MockPerformanceMonitor
Private mLock As MockLock
Private mCryptography As ICryptography
Private mKeyDerivation As IKeyDerivationStrategy

Private Sub Class_Initialize()
    ' モックオブジェクトの初期化
    Set mPerformanceMonitor = New MockPerformanceMonitor
    Set mLock = New MockLock
    Set mCryptography = New CryptographyImpl
    Set mKeyDerivation = New PBKDF2KeyDerivationStrategy
    
    ' テスト対象の初期化
    Set mCrypto = New clsCrypto
    mCrypto.Initialize mPerformanceMonitor, mLock, mCryptography, mKeyDerivation
End Sub

Private Sub Class_Terminate()
    Set mCrypto = Nothing
    Set mPerformanceMonitor = Nothing
    Set mLock = Nothing
    Set mCryptography = Nothing
    Set mKeyDerivation = Nothing
End Sub

''' <summary>
''' 暗号化と復号化のテスト
''' </summary>
Public Sub TestEncryptionAndDecryption()
    On Error GoTo TestFail
    
    ' テストデータ
    Const TEST_KEY As String = "TestKey123"
    Const TEST_DATA As String = "Hello, World!"
    
    ' 暗号化
    Dim encrypted As String
    encrypted = mCrypto.EncryptString(TEST_DATA, TEST_KEY)
    
    ' 暗号化されたデータの検証
    Debug.Assert Len(encrypted) > 0, "暗号化データが空です"
    Debug.Assert encrypted <> TEST_DATA, "データが暗号化されていません"
    
    ' 復号化
    Dim decrypted As String
    decrypted = mCrypto.DecryptString(encrypted, TEST_KEY)
    
    ' 復号化されたデータの検証
    Debug.Assert decrypted = TEST_DATA, "復号化されたデータが元のデータと一致しません"
    
    Exit Sub
    
TestFail:
    Debug.Print "TestEncryptionAndDecryption failed: " & Err.Description
    Resume Next
End Sub

''' <summary>
''' パフォーマンスモニタリングのテスト
''' </summary>
Public Sub TestPerformanceMonitoring()
    On Error GoTo TestFail
    
    ' テストデータ
    Const TEST_KEY As String = "TestKey123"
    Const TEST_DATA As String = "Hello, World!"
    
    ' 暗号化処理の実行
    Dim encrypted As String
    encrypted = mCrypto.EncryptString(TEST_DATA, TEST_KEY)
    
    ' パフォーマンスモニタリングの検証
    Debug.Assert mPerformanceMonitor.WasMeasurementStarted("String Encryption"), _
                "暗号化のパフォーマンス計測が開始されていません"
    Debug.Assert mPerformanceMonitor.WasMeasurementEnded("String Encryption"), _
                "暗号化のパフォーマンス計測が終了されていません"
    
    Exit Sub
    
TestFail:
    Debug.Print "TestPerformanceMonitoring failed: " & Err.Description
    Resume Next
End Sub

''' <summary>
''' 排他制御のテスト
''' </summary>
Public Sub TestLocking()
    On Error GoTo TestFail
    
    ' テストデータ
    Const TEST_KEY As String = "TestKey123"
    Const TEST_DATA As String = "Hello, World!"
    
    ' 暗号化処理の実行
    Dim encrypted As String
    encrypted = mCrypto.EncryptString(TEST_DATA, TEST_KEY)
    
    ' ロック制御の検証
    Debug.Assert mLock.WasLockAcquired, "ロックが取得されていません"
    Debug.Assert mLock.WasLockReleased, "ロックが解放されていません"
    
    Exit Sub
    
TestFail:
    Debug.Print "TestLocking failed: " & Err.Description
    Resume Next
End Sub

''' <summary>
''' エラー処理のテスト
''' </summary>
Public Sub TestErrorHandling()
    On Error GoTo TestFail
    
    ' 無効なキーでのテスト
    Dim result As String
    result = mCrypto.EncryptString("Test", "")
    
    ' エラー処理の検証
    Debug.Assert result = "", "空のキーでエラーが発生しませんでした"
    
    Exit Sub
    
TestFail:
    Debug.Print "TestErrorHandling failed: " & Err.Description
    Resume Next
End Sub

''' <summary>
''' すべてのテストを実行
''' </summary>
Public Sub RunAllTests()
    TestEncryptionAndDecryption
    TestPerformanceMonitoring
    TestLocking
    TestErrorHandling
    Debug.Print "All tests completed successfully"
End Sub

================
File: tests/TestConfigImpl.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "TestConfigImpl"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

'@TestModule
'@Folder("Tests")

Private Assert As Object
Private Fakes As Object

Private config As ConfigImpl
Private mockIniFile As MockIniFile
Private mockCrypto As MockCryptography
Private mockFileOps As MockFileOperations
Private mockPerfMon As MockPerformanceMonitor

'@ModuleInitialize
Private Sub ModuleInitialize()
    'このメソッドは、モジュール内の各テストの前に1回実行されます
    Set Assert = CreateObject("Rubberduck.AssertClass")
    Set Fakes = CreateObject("Rubberduck.FakesProvider")
End Sub

'@ModuleCleanup
Private Sub ModuleCleanup()
    'このメソッドは、モジュール内のすべてのテストの後に1回実行されます
    Set Assert = Nothing
    Set Fakes = Nothing
End Sub

'@TestInitialize
Private Sub TestInitialize()
    'このメソッドは、各テストメソッドの前に実行されます
    Set config = New ConfigImpl
    Set mockIniFile = New MockIniFile
    Set mockCrypto = New MockCryptography
    Set mockFileOps = New MockFileOperations
    Set mockPerfMon = New MockPerformanceMonitor
    
    ' モックオブジェクトの注入
    Set config.IniFile = mockIniFile
    Set config.Crypto = mockCrypto
    Set config.FileOperations = mockFileOps
    Set config.PerformanceMonitor = mockPerfMon
End Sub

'@TestCleanup
Private Sub TestCleanup()
    'このメソッドは、各テストメソッドの後に実行されます
    Set config = Nothing
    Set mockIniFile = Nothing
    Set mockCrypto = Nothing
    Set mockFileOps = Nothing
    Set mockPerfMon = Nothing
End Sub

'@TestMethod("基本機能")
Public Sub TestGetSetSetting()
    On Error GoTo TestFail
    
    'Arrange
    Const KEY As String = "TestKey"
    Const VALUE As String = "TestValue"
    
    'Act
    config.SetSetting KEY, VALUE
    Dim result As Variant
    result = config.GetSetting(KEY)
    
    'Assert
    Assert.AreEqual VALUE, result, "設定値が正しく保存・取得されていません"
    
TestExit:
    Exit Sub
TestFail:
    Assert.Fail "テストが失敗しました: " & Err.Description
End Sub

'@TestMethod("基本機能")
Public Sub TestLoadSettings()
    On Error GoTo TestFail
    
    'Arrange
    Const TEST_PATH As String = "C:\test\config.ini"
    mockIniFile.SetReturnValue "Logging", "LogFilePath", "C:\logs\app.log"
    mockIniFile.SetReturnValue "Logging", "LogLevel", "2" ' llInfo
    
    'Act
    config.LoadSettings TEST_PATH
    
    'Assert
    Assert.AreEqual "C:\logs\app.log", config.LogFilePath, "LogFilePathが正しく読み込まれていません"
    Assert.AreEqual llInfo, config.LogLevel, "LogLevelが正しく読み込まれていません"
    
TestExit:
    Exit Sub
TestFail:
    Assert.Fail "テストが失敗しました: " & Err.Description
End Sub

'@TestMethod("暗号化")
Public Sub TestEncryptedSetting()
    On Error GoTo TestFail
    
    'Arrange
    Const KEY As String = "SecretKey"
    Const VALUE As String = "SecretValue"
    mockCrypto.SetupEncryption "EncryptedValue"
    config.SetEncryptionKey "TestKey"
    
    'Act
    config.SetSetting KEY, VALUE, soEncrypt
    Dim result As Variant
    result = config.GetSetting(KEY, soEncrypt)
    
    'Assert
    Assert.AreEqual VALUE, result, "暗号化された設定値が正しく復号化されていません"
    Assert.IsTrue mockCrypto.EncryptWasCalled, "暗号化メソッドが呼び出されていません"
    Assert.IsTrue mockCrypto.DecryptWasCalled, "復号化メソッドが呼び出されていません"
    
TestExit:
    Exit Sub
TestFail:
    Assert.Fail "テストが失敗しました: " & Err.Description
End Sub

'@TestMethod("環境管理")
Public Sub TestEnvironmentSpecificSettings()
    On Error GoTo TestFail
    
    'Arrange
    mockIniFile.SetReturnValue "Environment_development", "LogFilePath", "C:\dev\logs\app.log"
    
    'Act
    config.SetEnvironment "development"
    config.LoadSettings "test.ini", loApplyEnvironment
    
    'Assert
    Assert.AreEqual "C:\dev\logs\app.log", config.LogFilePath, "環境固有の設定が正しく適用されていません"
    
TestExit:
    Exit Sub
TestFail:
    Assert.Fail "テストが失敗しました: " & Err.Description
End Sub

'@TestMethod("バリデーション")
Public Sub TestSettingsValidation()
    On Error GoTo TestFail
    
    'Arrange
    config.MaxRetryCount = -1 ' 無効な値
    
    'Act
    Dim result As ValidationResult
    Set result = config.ValidateSettings(voDataType)
    
    'Assert
    Assert.IsFalse result.IsValid, "無効な設定値がバリデーションを通過しています"
    Assert.IsTrue result.Errors.Count > 0, "バリデーションエラーが記録されていません"
    
TestExit:
    Exit Sub
TestFail:
    Assert.Fail "テストが失敗しました: " & Err.Description
End Sub

'@TestMethod("パフォーマンス")
Public Sub TestPerformanceMetrics()
    On Error GoTo TestFail
    
    'Arrange
    config.PerformanceMonitoringEnabled = True
    
    'Act
    config.SetSetting "TestKey", "TestValue"
    Dim metrics As Collection
    Set metrics = config.GetPerformanceMetrics
    
    'Assert
    Assert.IsTrue metrics.Count > 0, "パフォーマンスメトリクスが記録されていません"
    
TestExit:
    Exit Sub
TestFail:
    Assert.Fail "テストが失敗しました: " & Err.Description
End Sub

'@TestMethod("バックアップ/復元")
Public Sub TestBackupAndRestore()
    On Error GoTo TestFail
    
    'Arrange
    Const BACKUP_PATH As String = "C:\backup\config.bak"
    mockFileOps.SetupFileExists True
    
    'Act
    Dim backupResult As Boolean
    backupResult = config.CreateBackup(BACKUP_PATH)
    
    'Assert
    Assert.IsTrue backupResult, "バックアップの作成に失敗しました"
    Assert.IsTrue mockFileOps.CopyFileWasCalled, "ファイルのコピーが実行されていません"
    
TestExit:
    Exit Sub
TestFail:
    Assert.Fail "テストが失敗しました: " & Err.Description
End Sub

'@TestMethod("履歴管理")
Public Sub TestSettingHistory()
    On Error GoTo TestFail
    
    'Arrange
    Const KEY As String = "TestKey"
    
    'Act
    config.SetSetting KEY, "Value1", soLogHistory
    config.SetSetting KEY, "Value2", soLogHistory
    Dim history As Collection
    Set history = config.GetSettingHistory(KEY)
    
    'Assert
    Assert.AreEqual 2, history.Count, "設定履歴が正しく記録されていません"
    
TestExit:
    Exit Sub
TestFail:
    Assert.Fail "テストが失敗しました: " & Err.Description
End Sub

'@TestMethod("エラー処理")
Public Sub TestInvalidEncryptionKey()
    On Error GoTo TestFail
    
    'Arrange
    Const KEY As String = "SecretKey"
    Const VALUE As String = "SecretValue"
    
    'Act
    On Error Resume Next
    config.SetSetting KEY, VALUE, soEncrypt
    Dim errNumber As Long
    errNumber = Err.Number
    On Error GoTo TestFail
    
    'Assert
    Assert.IsTrue errNumber <> 0, "暗号化キーが設定されていない場合にエラーが発生していません"
    
TestExit:
    Exit Sub
TestFail:
    Assert.Fail "テストが失敗しました: " & Err.Description
End Sub

'@TestMethod("エラー処理")
Public Sub TestFileAccessError()
    On Error GoTo TestFail
    
    'Arrange
    mockFileOps.SetupFileExists False
    mockFileOps.SetupFileAccessError True
    
    'Act
    On Error Resume Next
    config.LoadSettings "nonexistent.ini"
    Dim errNumber As Long
    errNumber = Err.Number
    On Error GoTo TestFail
    
    'Assert
    Assert.IsTrue errNumber <> 0, "存在しないファイルへのアクセスでエラーが発生していません"
    
TestExit:
    Exit Sub
TestFail:
    Assert.Fail "テストが失敗しました: " & Err.Description
End Sub

================
File: tests/TestConnectionPool.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "TestConnectionPool"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Private Const MODULE_NAME As String = "TestConnectionPool"

' モックオブジェクト
Private mMockConfig As MockDatabaseConfig
Private mMockPerformanceMonitor As MockPerformanceMonitor
Private mMockLock As MockLock
Private mMockLogger As MockLogger

' テスト対象
Private mConnectionPool As ConnectionPool

'*******************************************************************************
' テスト初期化
'*******************************************************************************
Private Sub Class_Initialize()
    ' モックオブジェクトの初期化
    Set mMockConfig = New MockDatabaseConfig
    Set mMockPerformanceMonitor = New MockPerformanceMonitor
    Set mMockLock = New MockLock
    Set mMockLogger = New MockLogger
    
    ' テスト対象の初期化
    Set mConnectionPool = New ConnectionPool
End Sub

'*******************************************************************************
' テストクリーンアップ
'*******************************************************************************
Private Sub Class_Terminate()
    Set mConnectionPool = Nothing
    Set mMockLogger = Nothing
    Set mMockLock = Nothing
    Set mMockPerformanceMonitor = Nothing
    Set mMockConfig = Nothing
End Sub

'*******************************************************************************
' テストケース：初期化時に依存オブジェクトが正しく設定されること
'*******************************************************************************
Public Sub TestInitialize()
    On Error GoTo TestFail
    
    ' 準備
    mMockConfig.SetConnectionString "Provider=SQLOLEDB;Data Source=TestServer;"
    mMockConfig.SetMaxPoolSize 5
    mMockConfig.SetRetryCount 3
    mMockConfig.SetRetryInterval 1000
    
    ' 実行
    mConnectionPool.Initialize mMockConfig, mMockPerformanceMonitor, mMockLock, mMockLogger
    
    ' 検証
    Debug.Assert mMockConfig.GetConnectionStringCallCount > 0
    Debug.Print "TestInitialize: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestInitialize: Failed - " & Err.Description
End Sub

'*******************************************************************************
' テストケース：不正な接続文字列の場合、エラーログが出力されること
'*******************************************************************************
Public Sub TestInvalidConnectionString()
    On Error GoTo TestFail
    
    ' 準備
    mMockConfig.SetConnectionString "Invalid Connection String"
    mConnectionPool.Initialize mMockConfig, mMockPerformanceMonitor, mMockLock, mMockLogger
    
    ' 実行
    Dim conn As Object
    Set conn = mConnectionPool.AcquireConnection
    
    ' 検証
    Debug.Assert mMockLogger.ErrorLogCount > 0
    Debug.Assert conn Is Nothing
    Debug.Print "TestInvalidConnectionString: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestInvalidConnectionString: Failed - " & Err.Description
End Sub

'*******************************************************************************
' テストケース：接続失敗時にリトライ処理が行われること
'*******************************************************************************
Public Sub TestConnectionRetry()
    On Error GoTo TestFail
    
    ' 準備
    mMockConfig.SetConnectionString "Provider=SQLOLEDB;Data Source=TestServer;"
    mMockConfig.SetRetryCount 3
    mMockConfig.SetRetryInterval 100
    mConnectionPool.Initialize mMockConfig, mMockPerformanceMonitor, mMockLock, mMockLogger
    
    ' 実行
    Dim conn As Object
    Set conn = mConnectionPool.AcquireConnection
    
    ' 検証
    Debug.Assert mMockConfig.GetRetryCountCallCount > 0
    Debug.Assert mMockConfig.GetRetryIntervalCallCount > 0
    Debug.Print "TestConnectionRetry: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestConnectionRetry: Failed - " & Err.Description
End Sub

'*******************************************************************************
' テストケース：プールサイズが設定値を超えないこと
'*******************************************************************************
Public Sub TestPoolSizeLimit()
    On Error GoTo TestFail
    
    ' 準備
    mMockConfig.SetConnectionString "Provider=SQLOLEDB;Data Source=TestServer;"
    mMockConfig.SetMaxPoolSize 2
    mConnectionPool.Initialize mMockConfig, mMockPerformanceMonitor, mMockLock, mMockLogger
    
    ' 実行
    Dim conn1 As Object, conn2 As Object, conn3 As Object
    Set conn1 = mConnectionPool.AcquireConnection
    Set conn2 = mConnectionPool.AcquireConnection
    Set conn3 = mConnectionPool.AcquireConnection ' これは失敗するはず
    
    ' 検証
    Debug.Assert Not conn1 Is Nothing
    Debug.Assert Not conn2 Is Nothing
    Debug.Assert conn3 Is Nothing
    Debug.Assert mConnectionPool.ActiveConnections = 2
    Debug.Print "TestPoolSizeLimit: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestPoolSizeLimit: Failed - " & Err.Description
End Sub

'*******************************************************************************
' テストケース：解放された接続が再利用可能になること
'*******************************************************************************
Public Sub TestConnectionReuse()
    On Error GoTo TestFail
    
    ' 準備
    mMockConfig.SetConnectionString "Provider=SQLOLEDB;Data Source=TestServer;"
    mMockConfig.SetMaxPoolSize 1
    mConnectionPool.Initialize mMockConfig, mMockPerformanceMonitor, mMockLock, mMockLogger
    
    ' 実行
    Dim conn1 As Object, conn2 As Object
    Set conn1 = mConnectionPool.AcquireConnection
    mConnectionPool.ReleaseConnection conn1
    Set conn2 = mConnectionPool.AcquireConnection
    
    ' 検証
    Debug.Assert Not conn2 Is Nothing
    Debug.Assert mConnectionPool.ActiveConnections = 1
    Debug.Print "TestConnectionReuse: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestConnectionReuse: Failed - " & Err.Description
End Sub

'*******************************************************************************
' 全テストの実行
'*******************************************************************************
Public Sub RunAllTests()
    TestInitialize
    TestInvalidConnectionString
    TestConnectionRetry
    TestPoolSizeLimit
    TestConnectionReuse
End Sub

================
File: tests/TestConsoleLogger.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "TestConsoleLogger"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "TestConsoleLogger"

' ======================
' メンバ変数
' ======================
Private mConsoleLogger As ConsoleLogger
Private mPerformanceMonitor As IPerformanceMonitor

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    ' テスト対象の初期化
    Set mConsoleLogger = New ConsoleLogger
    Set mPerformanceMonitor = New clsPerformanceMonitor
End Sub

Private Sub Class_Terminate()
    Set mConsoleLogger = Nothing
    Set mPerformanceMonitor = Nothing
End Sub

' ======================
' テストメソッド
' ======================
Public Sub TestInitialization()
    On Error GoTo TestFail
    
    ' 初期化
    mConsoleLogger.Initialize mPerformanceMonitor, True
    
    Debug.Print "TestInitialization: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestInitialization: Failed - " & Err.Description
End Sub

Public Sub TestLogWriting()
    On Error GoTo TestFail
    
    ' ロガーの初期化
    mConsoleLogger.Initialize mPerformanceMonitor, True
    
    ' ログの書き込み
    Debug.Print "=== TestLogWriting Start ==="
    mConsoleLogger.Log "INFO", "Test console message", "Test stack trace", 4001
    Debug.Print "=== TestLogWriting End ==="
    
    Debug.Print "TestLogWriting: OK - イミディエイトウィンドウで出力を確認してください"
    Exit Sub
    
TestFail:
    Debug.Print "TestLogWriting: Failed - " & Err.Description
End Sub

Public Sub TestDifferentLogLevels()
    On Error GoTo TestFail
    
    ' ロガーの初期化
    mConsoleLogger.Initialize mPerformanceMonitor, True
    
    ' 異なるログレベルでの書き込み
    Debug.Print "=== TestDifferentLogLevels Start ==="
    mConsoleLogger.Log "INFO", "Information message", "", 0
    mConsoleLogger.Log "WARNING", "Warning message", "", 4002
    mConsoleLogger.Log "ERROR", "Error message", "Error stack trace", 4003
    Debug.Print "=== TestDifferentLogLevels End ==="
    
    Debug.Print "TestDifferentLogLevels: OK - イミディエイトウィンドウで出力を確認してください"
    Exit Sub
    
TestFail:
    Debug.Print "TestDifferentLogLevels: Failed - " & Err.Description
End Sub

Public Sub TestPerformanceMonitoring()
    On Error GoTo TestFail
    
    ' ロガーの初期化
    mConsoleLogger.Initialize mPerformanceMonitor, True
    
    ' パフォーマンス計測付きのログ出力
    Debug.Print "=== TestPerformanceMonitoring Start ==="
    Dim i As Long
    For i = 1 To 100
        mConsoleLogger.Log "INFO", "Performance test message " & i, "", i
    Next i
    Debug.Print "=== TestPerformanceMonitoring End ==="
    
    ' パフォーマンス情報の確認
    Dim measurements As Collection
    Set measurements = mPerformanceMonitor.GetMeasurements("ConsoleLogger_Log")
    Debug.Assert Not measurements Is Nothing
    Debug.Assert measurements.Count > 0
    
    Debug.Print "TestPerformanceMonitoring: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestPerformanceMonitoring: Failed - " & Err.Description
End Sub

' ======================
' 全テストの実行
' ======================
Public Sub RunAllTests()
    TestInitialization
    TestLogWriting
    TestDifferentLogLevels
    TestPerformanceMonitoring
End Sub

================
File: tests/TestCriticalSectionLock.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "TestCriticalSectionLock"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Private Const MODULE_NAME As String = "TestCriticalSectionLock"
Private testLock As clsCriticalSectionLock

'@TestInitialize
Private Sub TestInitialize()
    Set testLock = New clsCriticalSectionLock
End Sub

'@TestCleanup
Private Sub TestCleanup()
    If Not testLock Is Nothing Then
        testLock.ForceRelease
        Set testLock = Nothing
    End If
End Sub

'@TestMethod("CriticalSectionLock")
Public Sub TestAcquireSuccess()
    On Error GoTo TestFail
    
    'Arrange
    Dim result As Boolean
    
    'Act
    result = testLock.Acquire()
    
    'Assert
    Debug.Assert result = True
    Debug.Assert testLock.ValidateLockState() = True
    Debug.Assert testLock.IsInitialized() = True
    
    Exit Sub
TestFail:
    Debug.Print "TestAcquireSuccess failed: " & Err.Description
End Sub

'@TestMethod("CriticalSectionLock")
Public Sub TestAcquireWithTimeout()
    On Error GoTo TestFail
    
    'Arrange
    Dim result As Boolean
    Dim timeout As Long
    timeout = 1000 ' 1秒
    
    'Act
    result = testLock.Acquire(timeout)
    
    'Assert
    Debug.Assert result = True
    Debug.Assert testLock.ValidateLockState() = True
    
    Exit Sub
TestFail:
    Debug.Print "TestAcquireWithTimeout failed: " & Err.Description
End Sub

'@TestMethod("CriticalSectionLock")
Public Sub TestReleaseSuccess()
    On Error GoTo TestFail
    
    'Arrange
    testLock.Acquire
    
    'Act
    testLock.Release
    
    'Assert
    Debug.Assert testLock.ValidateLockState() = False
    
    Exit Sub
TestFail:
    Debug.Print "TestReleaseSuccess failed: " & Err.Description
End Sub

'@TestMethod("CriticalSectionLock")
Public Sub TestMultipleAcquire()
    On Error GoTo TestFail
    
    'Arrange
    Dim secondLock As clsCriticalSectionLock
    Set secondLock = New clsCriticalSectionLock
    
    'Act
    testLock.Acquire
    Dim result As Boolean
    result = secondLock.Acquire(100) ' 100msタイムアウト
    
    'Assert
    Debug.Assert result = False ' 2番目のロックは失敗するはず
    
    'Cleanup
    Set secondLock = Nothing
    
    Exit Sub
TestFail:
    Debug.Print "TestMultipleAcquire failed: " & Err.Description
End Sub

'@TestMethod("CriticalSectionLock")
Public Sub TestInitialization()
    On Error GoTo TestFail
    
    'Assert
    Debug.Assert testLock.IsInitialized() = True
    
    Exit Sub
TestFail:
    Debug.Print "TestInitialization failed: " & Err.Description
End Sub

================
File: tests/TestDatabaseLogger.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "TestDatabaseLogger"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "TestDatabaseLogger"

' ======================
' メンバ変数
' ======================
Private mDatabaseLogger As DatabaseLogger
Private mConnectionPool As IConnectionPool
Private mLock As ILock
Private mPerformanceMonitor As IPerformanceMonitor
Private mDatabaseConfig As IDatabaseConfig
Private mTestTableName As String

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    ' テスト対象の初期化
    Set mDatabaseLogger = New DatabaseLogger
    Set mConnectionPool = New ConnectionPool
    Set mLock = New clsLock
    Set mPerformanceMonitor = New clsPerformanceMonitor
    Set mDatabaseConfig = New ConfigImpl
    mTestTableName = "TestLog"
    
    ' テストテーブルの作成
    CreateTestTable
End Sub

Private Sub Class_Terminate()
    ' テストテーブルの削除
    DropTestTable
    
    Set mDatabaseLogger = Nothing
    Set mConnectionPool = Nothing
    Set mLock = Nothing
    Set mPerformanceMonitor = Nothing
    Set mDatabaseConfig = Nothing
End Sub

' ======================
' テストメソッド
' ======================
Public Sub TestInitialization()
    On Error GoTo TestFail
    
    ' 初期化
    mDatabaseLogger.Initialize mConnectionPool, mLock, mPerformanceMonitor, mDatabaseConfig, mTestTableName
    
    Debug.Print "TestInitialization: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestInitialization: Failed - " & Err.Description
End Sub

Public Sub TestLogWriting()
    On Error GoTo TestFail
    
    ' ロガーの初期化
    mDatabaseLogger.Initialize mConnectionPool, mLock, mPerformanceMonitor, mDatabaseConfig, mTestTableName
    
    ' ログの書き込み
    mDatabaseLogger.Log "INFO", "Test database message", "Test stack trace", 2001
    
    ' データベースの内容確認
    Dim conn As Object
    Set conn = mConnectionPool.AcquireConnection()
    
    Dim rs As Object
    Set rs = CreateObject("ADODB.Recordset")
    rs.Open "SELECT * FROM " & mTestTableName & " WHERE Message = 'Test database message'", conn
    
    Debug.Assert Not rs.EOF
    Debug.Assert rs.Fields("LogLevel").value = "INFO"
    Debug.Assert rs.Fields("StackTrace").value = "Test stack trace"
    Debug.Assert rs.Fields("ErrorCode").value = 2001
    
    rs.Close
    mConnectionPool.ReleaseConnection conn
    
    Debug.Print "TestLogWriting: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestLogWriting: Failed - " & Err.Description
End Sub

Public Sub TestConcurrentWriting()
    On Error GoTo TestFail
    
    ' ロガーの初期化
    mDatabaseLogger.Initialize mConnectionPool, mLock, mPerformanceMonitor, mDatabaseConfig, mTestTableName
    
    ' 複数のログメッセージを同時に書き込み
    Dim i As Long
    For i = 1 To 10
        mDatabaseLogger.Log "INFO", "Concurrent DB message " & i, "", i
    Next i
    
    ' データベースの内容確認
    Dim conn As Object
    Set conn = mConnectionPool.AcquireConnection()
    
    Dim rs As Object
    Set rs = CreateObject("ADODB.Recordset")
    rs.Open "SELECT COUNT(*) AS MessageCount FROM " & mTestTableName & _
           " WHERE Message LIKE 'Concurrent DB message%'", conn
    
    Debug.Assert rs.Fields("MessageCount").value = 10
    
    rs.Close
    mConnectionPool.ReleaseConnection conn
    
    Debug.Print "TestConcurrentWriting: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestConcurrentWriting: Failed - " & Err.Description
End Sub

Public Sub TestErrorHandling()
    On Error GoTo TestFail
    
    ' 無効なテーブル名での初期化
    mDatabaseLogger.Initialize mConnectionPool, mLock, mPerformanceMonitor, mDatabaseConfig, "InvalidTable"
    
    ' エラーが発生するはずのログ書き込み
    mDatabaseLogger.Log "ERROR", "Error test message", "", 2002
    
    Debug.Print "TestErrorHandling: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestErrorHandling: Failed - " & Err.Description
End Sub

' ======================
' ヘルパーメソッド
' ======================
Private Sub CreateTestTable()
    On Error Resume Next
    
    Dim conn As Object
    Set conn = mConnectionPool.AcquireConnection()
    
    ' テストテーブルの作成
    conn.Execute "CREATE TABLE " & mTestTableName & " (" & _
                "ID IDENTITY PRIMARY KEY, " & _
                "LogTime DATETIME, " & _
                "LogLevel VARCHAR(50), " & _
                "Message VARCHAR(4000), " & _
                "StackTrace VARCHAR(4000), " & _
                "ErrorCode INT)"
    
    mConnectionPool.ReleaseConnection conn
End Sub

Private Sub DropTestTable()
    On Error Resume Next
    
    Dim conn As Object
    Set conn = mConnectionPool.AcquireConnection()
    
    ' テストテーブルの削除
    conn.Execute "DROP TABLE " & mTestTableName
    
    mConnectionPool.ReleaseConnection conn
End Sub

' ======================
' 全テストの実行
' ======================
Public Sub RunAllTests()
    TestInitialization
    TestLogWriting
    TestConcurrentWriting
    TestErrorHandling
End Sub

================
File: tests/TestDateValidator.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "TestDateValidator"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "TestDateValidator"

' ======================
' プライベート変数
' ======================
Private mValidator As DateValidator
Private mMockError As MockError

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    Set mMockError = New MockError
End Sub

Private Sub Class_Terminate()
    Set mValidator = Nothing
    Set mMockError = Nothing
End Sub

' ======================
' テストメソッド
' ======================
Public Sub TestMinDateValidation()
    ' 準備
    Set mValidator = New DateValidator
    Set mValidator.Error = mMockError
    
    Dim minDateRule As MinDateRule
    Set minDateRule = New MinDateRule
    minDateRule.MinDate = DateSerial(2000, 1, 1)
    mValidator.AddRule minDateRule
    
    ' 実行と検証
    Debug.Assert Not mValidator.Validate(DateSerial(1999, 12, 31)), "最小日付より前の日付は失敗するべき"
    Debug.Assert mValidator.Validate(DateSerial(2000, 1, 1)), "最小日付と同じ日付は成功するべき"
    Debug.Assert mValidator.Validate(DateSerial(2000, 1, 2)), "最小日付より後の日付は成功するべき"
End Sub

Public Sub TestMaxDateValidation()
    ' 準備
    Set mValidator = New DateValidator
    Set mValidator.Error = mMockError
    
    Dim maxDateRule As MaxDateRule
    Set maxDateRule = New MaxDateRule
    maxDateRule.MaxDate = DateSerial(2000, 12, 31)
    mValidator.AddRule maxDateRule
    
    ' 実行と検証
    Debug.Assert mValidator.Validate(DateSerial(2000, 12, 30)), "最大日付より前の日付は成功するべき"
    Debug.Assert mValidator.Validate(DateSerial(2000, 12, 31)), "最大日付と同じ日付は成功するべき"
    Debug.Assert Not mValidator.Validate(DateSerial(2001, 1, 1)), "最大日付より後の日付は失敗するべき"
End Sub

Public Sub TestAllowFutureDateValidation()
    ' 準備
    Set mValidator = New DateValidator
    Set mValidator.Error = mMockError
    
    Dim futureDateRule As AllowFutureDateRule
    Set futureDateRule = New AllowFutureDateRule
    futureDateRule.AllowFutureDate = False
    mValidator.AddRule futureDateRule
    
    ' 実行と検証
    Debug.Assert mValidator.Validate(DateAdd("d", -1, Date)), "過去の日付は成功するべき"
    Debug.Assert mValidator.Validate(Date), "現在の日付は成功するべき"
    Debug.Assert Not mValidator.Validate(DateAdd("d", 1, Date)), "未来の日付は失敗するべき"
End Sub

Public Sub TestAllowPastDateValidation()
    ' 準備
    Set mValidator = New DateValidator
    Set mValidator.Error = mMockError
    
    Dim pastDateRule As AllowPastDateRule
    Set pastDateRule = New AllowPastDateRule
    pastDateRule.AllowPastDate = False
    mValidator.AddRule pastDateRule
    
    ' 実行と検証
    Debug.Assert Not mValidator.Validate(DateAdd("d", -1, Date)), "過去の日付は失敗するべき"
    Debug.Assert mValidator.Validate(Date), "現在の日付は成功するべき"
    Debug.Assert mValidator.Validate(DateAdd("d", 1, Date)), "未来の日付は成功するべき"
End Sub

Public Sub TestBirthDateValidation()
    ' 準備
    Set mValidator = CreateBirthDateValidator(mMockError)
    
    ' 実行と検証
    Debug.Assert Not mValidator.Validate(DateSerial(1899, 12, 31)), "1900年以前の日付は失敗するべき"
    Debug.Assert mValidator.Validate(DateSerial(1900, 1, 1)), "1900年1月1日は成功するべき"
    Debug.Assert mValidator.Validate(DateAdd("d", -1, Date)), "昨日の日付は成功するべき"
    Debug.Assert mValidator.Validate(Date), "今日の日付は成功するべき"
    Debug.Assert Not mValidator.Validate(DateAdd("d", 1, Date)), "未来の日付は失敗するべき"
End Sub

Public Sub TestExpiryDateValidation()
    ' 準備
    Set mValidator = CreateExpiryDateValidator(mMockError)
    
    ' 実行と検証
    Debug.Assert Not mValidator.Validate(DateAdd("d", -1, Date)), "過去の日付は失敗するべき"
    Debug.Assert mValidator.Validate(Date), "今日の日付は成功するべき"
    Debug.Assert mValidator.Validate(DateAdd("yyyy", 50, Date)), "50年後の日付は成功するべき"
    Debug.Assert mValidator.Validate(DateAdd("yyyy", 100, Date)), "100年後の日付は成功するべき"
    Debug.Assert Not mValidator.Validate(DateAdd("yyyy", 101, Date)), "100年より先の日付は失敗するべき"
End Sub

Public Sub TestMultipleRules()
    ' 準備
    Set mValidator = New DateValidator
    Set mValidator.Error = mMockError
    
    Dim minDateRule As MinDateRule
    Set minDateRule = New MinDateRule
    minDateRule.MinDate = DateSerial(2000, 1, 1)
    mValidator.AddRule minDateRule
    
    Dim maxDateRule As MaxDateRule
    Set maxDateRule = New MaxDateRule
    maxDateRule.MaxDate = DateSerial(2100, 12, 31)
    mValidator.AddRule maxDateRule
    
    Dim futureDateRule As AllowFutureDateRule
    Set futureDateRule = New AllowFutureDateRule
    futureDateRule.AllowFutureDate = True
    mValidator.AddRule futureDateRule
    
    Dim pastDateRule As AllowPastDateRule
    Set pastDateRule = New AllowPastDateRule
    pastDateRule.AllowPastDate = True
    mValidator.AddRule pastDateRule
    
    ' 実行と検証
    Debug.Assert Not mValidator.Validate(DateSerial(1999, 12, 31)), "範囲外の過去の日付は失敗するべき"
    Debug.Assert mValidator.Validate(DateSerial(2000, 1, 1)), "範囲内の過去の日付は成功するべき"
    Debug.Assert mValidator.Validate(Date), "現在の日付は成功するべき"
    Debug.Assert mValidator.Validate(DateSerial(2100, 12, 31)), "範囲内の未来の日付は成功するべき"
    Debug.Assert Not mValidator.Validate(DateSerial(2101, 1, 1)), "範囲外の未来の日付は失敗するべき"
End Sub

================
File: tests/TestDefaultMessageFormatter.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "TestDefaultMessageFormatter"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Private Const MODULE_NAME As String = "TestDefaultMessageFormatter"

' テスト対象
Private mFormatter As DefaultMessageFormatter

' ======================
' セットアップ/クリーンアップ
' ======================
Private Sub Class_Initialize()
    Set mFormatter = New DefaultMessageFormatter
End Sub

Private Sub Class_Terminate()
    Set mFormatter = Nothing
End Sub

' ======================
' テストケース
' ======================

''' <summary>
''' 基本的なメッセージフォーマットのテスト
''' </summary>
Public Sub TestBasicFormatting()
    On Error GoTo TestFail
    
    ' テスト用エラー情報の作成
    Dim testError As ErrorInfo
    With testError
        .Code = ErrUnexpected
        .Description = "テストエラー"
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "TestBasicFormatting"
        .StackTrace = ""
    End With
    
    ' メッセージのフォーマット
    Dim result As String
    result = mFormatter.TestFormatMessage("テストメッセージ", testError)
    
    ' 結果の検証
    If InStr(result, "テストメッセージ") > 0 And _
       InStr(result, "テストエラー") > 0 And _
       InStr(result, MODULE_NAME) > 0 Then
        Debug.Print "TestBasicFormatting: OK"
    Else
        Debug.Print "TestBasicFormatting: Failed - Unexpected format"
        Debug.Print "Result: " & result
    End If
    Exit Sub
    
TestFail:
    Debug.Print "TestBasicFormatting: Failed - " & Err.Description
End Sub

''' <summary>
''' スタックトレース付きメッセージのテスト
''' </summary>
Public Sub TestWithStackTrace()
    On Error GoTo TestFail
    
    ' テスト用エラー情報の作成
    Dim testError As ErrorInfo
    With testError
        .Code = ErrUnexpected
        .Description = "テストエラー"
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "TestWithStackTrace"
        .StackTrace = "テストスタックトレース" & vbCrLf & "行1" & vbCrLf & "行2"
    End With
    
    ' メッセージのフォーマット
    Dim result As String
    result = mFormatter.TestFormatMessage("", testError)
    
    ' 結果の検証
    If InStr(result, "スタックトレース") > 0 And _
       InStr(result, "テストスタックトレース") > 0 Then
        Debug.Print "TestWithStackTrace: OK"
    Else
        Debug.Print "TestWithStackTrace: Failed - Stack trace not found"
        Debug.Print "Result: " & result
    End If
    Exit Sub
    
TestFail:
    Debug.Print "TestWithStackTrace: Failed - " & Err.Description
End Sub

''' <summary>
''' 空のメッセージ処理のテスト
''' </summary>
Public Sub TestEmptyMessage()
    On Error GoTo TestFail
    
    ' テスト用エラー情報の作成
    Dim testError As ErrorInfo
    With testError
        .Code = ErrUnexpected
        .Description = "テストエラー"
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "TestEmptyMessage"
    End With
    
    ' メッセージのフォーマット
    Dim result As String
    result = mFormatter.TestFormatMessage("", testError)
    
    ' 結果の検証
    If InStr(result, "エラーが発生しました") > 0 Then
        Debug.Print "TestEmptyMessage: OK"
    Else
        Debug.Print "TestEmptyMessage: Failed - Default message not found"
        Debug.Print "Result: " & result
    End If
    Exit Sub
    
TestFail:
    Debug.Print "TestEmptyMessage: Failed - " & Err.Description
End Sub

''' <summary>
''' エラー処理のテスト
''' </summary>
Public Sub TestErrorHandling()
    On Error Resume Next
    
    ' 不正なエラー情報でテスト
    Dim result As String
    result = mFormatter.TestFormatMessage("テスト", Nothing)
    
    ' エラーが適切に処理されることを確認
    If InStr(result, "エラーメッセージのフォーマットに失敗") > 0 Then
        Debug.Print "TestErrorHandling: OK"
    Else
        Debug.Print "TestErrorHandling: Failed - Error not handled properly"
        Debug.Print "Result: " & result
    End If
    
    On Error GoTo 0
End Sub

' ======================
' テスト実行
' ======================
Public Sub RunAllTests()
    TestBasicFormatting
    TestWithStackTrace
    TestEmptyMessage
    TestErrorHandling
End Sub

================
File: tests/TestEventLogLogger.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "TestEventLogLogger"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "TestEventLogLogger"

' ======================
' メンバ変数
' ======================
Private mEventLogLogger As EventLogLogger
Private mEventLog As IEventLog
Private mLock As ILock
Private mPerformanceMonitor As IPerformanceMonitor
Private mTestEventSource As String

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    ' テスト対象の初期化
    Set mEventLogLogger = New EventLogLogger
    Set mEventLog = New EventLogImpl
    Set mLock = New clsLock
    Set mPerformanceMonitor = New clsPerformanceMonitor
    mTestEventSource = "PDILoggerTest"
    
    ' テストイベントソースの作成
    CreateEventSource
End Sub

Private Sub Class_Terminate()
    ' テストイベントソースの削除
    RemoveEventSource
    
    Set mEventLogLogger = Nothing
    Set mEventLog = Nothing
    Set mLock = Nothing
    Set mPerformanceMonitor = Nothing
End Sub

' ======================
' テストメソッド
' ======================
Public Sub TestInitialization()
    On Error GoTo TestFail
    
    ' 初期化
    mEventLogLogger.Initialize mEventLog, mLock, mPerformanceMonitor, mTestEventSource
    
    Debug.Print "TestInitialization: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestInitialization: Failed - " & Err.Description
End Sub

Public Sub TestLogWriting()
    On Error GoTo TestFail
    
    ' ロガーの初期化
    mEventLogLogger.Initialize mEventLog, mLock, mPerformanceMonitor, mTestEventSource
    
    ' ログの書き込み
    mEventLogLogger.Log "INFO", "Test event log message", "Test stack trace", 3001
    
    ' イベントログの確認は手動で行う必要がある
    Debug.Print "TestLogWriting: OK - イベントビューアーで確認してください"
    Exit Sub
    
TestFail:
    Debug.Print "TestLogWriting: Failed - " & Err.Description
End Sub

Public Sub TestDifferentLogLevels()
    On Error GoTo TestFail
    
    ' ロガーの初期化
    mEventLogLogger.Initialize mEventLog, mLock, mPerformanceMonitor, mTestEventSource
    
    ' 異なるログレベルでの書き込み
    mEventLogLogger.Log "INFO", "Information message", "", 0
    mEventLogLogger.Log "WARNING", "Warning message", "", 3002
    mEventLogLogger.Log "ERROR", "Error message", "Error stack trace", 3003
    
    Debug.Print "TestDifferentLogLevels: OK - イベントビューアーで確認してください"
    Exit Sub
    
TestFail:
    Debug.Print "TestDifferentLogLevels: Failed - " & Err.Description
End Sub

Public Sub TestErrorHandling()
    On Error GoTo TestFail
    
    ' 無効なイベントソースでの初期化
    mEventLogLogger.Initialize mEventLog, mLock, mPerformanceMonitor, "InvalidSource"
    
    ' エラーが発生するはずのログ書き込み
    mEventLogLogger.Log "ERROR", "Error test message", "", 3004
    
    Debug.Print "TestErrorHandling: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestErrorHandling: Failed - " & Err.Description
End Sub

' ======================
' ヘルパーメソッド
' ======================
Private Sub CreateEventSource()
    On Error Resume Next
    
    ' イベントソースの作成
    Dim shell As Object
    Set shell = CreateObject("WScript.Shell")
    
    Dim regPath As String
    regPath = "HKLM\SYSTEM\CurrentControlSet\Services\EventLog\Application\" & mTestEventSource
    
    shell.RegWrite regPath & "\EventMessageFile", "C:\Windows\Microsoft.NET\Framework64\v4.0.30319\EventLogMessages.dll", "REG_SZ"
    shell.RegWrite regPath & "\TypesSupported", 7, "REG_DWORD"
    
    Set shell = Nothing
End Sub

Private Sub RemoveEventSource()
    On Error Resume Next
    
    ' イベントソースの削除
    Dim shell As Object
    Set shell = CreateObject("WScript.Shell")
    
    Dim regPath As String
    regPath = "HKLM\SYSTEM\CurrentControlSet\Services\EventLog\Application\" & mTestEventSource
    
    shell.RegDelete regPath & "\"
    
    Set shell = Nothing
End Sub

' ======================
' 全テストの実行
' ======================
Public Sub RunAllTests()
    TestInitialization
    TestLogWriting
    TestDifferentLogLevels
    TestErrorHandling
End Sub

================
File: tests/TestFileLogger.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "TestFileLogger"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "TestFileLogger"

' ======================
' メンバ変数
' ======================
Private mFileLogger As FileLogger
Private mFileOperations As IFileOperations
Private mLock As ILock
Private mPerformanceMonitor As IPerformanceMonitor
Private mTestFilePath As String

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    ' テスト対象の初期化
    Set mFileLogger = New FileLogger
    Set mFileOperations = New FileSystemOperations
    Set mLock = New clsLock
    Set mPerformanceMonitor = New clsPerformanceMonitor
    mTestFilePath = "test_log.txt"
End Sub

Private Sub Class_Terminate()
    ' テストファイルの削除
    On Error Resume Next
    mFileOperations.DeleteFile mTestFilePath
    On Error GoTo 0
    
    Set mFileLogger = Nothing
    Set mFileOperations = Nothing
    Set mLock = Nothing
    Set mPerformanceMonitor = Nothing
End Sub

' ======================
' テストメソッド
' ======================
Public Sub TestInitialization()
    On Error GoTo TestFail
    
    ' 初期化
    mFileLogger.Initialize mFileOperations, mLock, mPerformanceMonitor, mTestFilePath
    
    Debug.Print "TestInitialization: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestInitialization: Failed - " & Err.Description
End Sub

Public Sub TestLogWriting()
    On Error GoTo TestFail
    
    ' ロガーの初期化
    mFileLogger.Initialize mFileOperations, mLock, mPerformanceMonitor, mTestFilePath
    
    ' ログの書き込み
    mFileLogger.Log "INFO", "Test message", "Test stack trace", 1001
    
    ' ファイルの存在確認
    Debug.Assert mFileOperations.FileExists(mTestFilePath)
    
    ' ファイルの内容確認
    Dim content As String
    content = mFileOperations.ReadAllText(mTestFilePath)
    Debug.Assert InStr(content, "Test message") > 0
    Debug.Assert InStr(content, "Test stack trace") > 0
    Debug.Assert InStr(content, "1001") > 0
    
    Debug.Print "TestLogWriting: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestLogWriting: Failed - " & Err.Description
End Sub

Public Sub TestConcurrentWriting()
    On Error GoTo TestFail
    
    ' ロガーの初期化
    mFileLogger.Initialize mFileOperations, mLock, mPerformanceMonitor, mTestFilePath
    
    ' 複数のログメッセージを同時に書き込み
    Dim i As Long
    For i = 1 To 10
        mFileLogger.Log "INFO", "Concurrent message " & i, "", i
    Next i
    
    ' ファイルの内容確認
    Dim content As String
    content = mFileOperations.ReadAllText(mTestFilePath)
    For i = 1 To 10
        Debug.Assert InStr(content, "Concurrent message " & i) > 0
    Next i
    
    Debug.Print "TestConcurrentWriting: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestConcurrentWriting: Failed - " & Err.Description
End Sub

Public Sub TestErrorHandling()
    On Error GoTo TestFail
    
    ' 無効なファイルパスでの初期化
    mFileLogger.Initialize mFileOperations, mLock, mPerformanceMonitor, "|invalid|path"
    
    ' エラーが発生するはずのログ書き込み
    mFileLogger.Log "ERROR", "Error test message", "", 1002
    
    Debug.Print "TestErrorHandling: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestErrorHandling: Failed - " & Err.Description
End Sub

' ======================
' 全テストの実行
' ======================
Public Sub RunAllTests()
    TestInitialization
    TestLogWriting
    TestConcurrentWriting
    TestErrorHandling
End Sub

================
File: tests/TestFileSystemOperations.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "TestFileSystemOperations"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Private Const MODULE_NAME As String = "TestFileSystemOperations"

' モックオブジェクト
Private mockLock As MockLock
Private mockPerformanceMonitor As MockPerformanceMonitor
Private mockFileIO As MockFileIO
Private fileOps As FileSystemOperations

'@TestInitialize
Private Sub TestInitialize()
    ' モックオブジェクトの初期化
    Set mockLock = New MockLock
    Set mockPerformanceMonitor = New MockPerformanceMonitor
    Set mockFileIO = New MockFileIO
    Set fileOps = New FileSystemOperations
    
    ' 依存性の注入
    fileOps.Initialize mockLock, mockPerformanceMonitor, mockFileIO
End Sub

'@TestCleanup
Private Sub TestCleanup()
    Set mockLock = Nothing
    Set mockPerformanceMonitor = Nothing
    Set mockFileIO = Nothing
    Set fileOps = Nothing
End Sub

'@TestMethod("初期化")
Private Sub TestInitialization()
    On Error GoTo TestFail
    
    ' 未初期化の状態でメソッドを呼び出すとエラーになることを確認
    Dim uninitializedOps As New FileSystemOperations
    Dim success As Boolean
    
    On Error Resume Next
    success = uninitializedOps.FileExists("test.txt")
    
    Debug.Assert Err.Number <> 0, "未初期化状態でのメソッド呼び出しはエラーになるべき"
    On Error GoTo 0
    
    ' 正しく初期化された状態ではエラーにならないことを確認
    On Error Resume Next
    success = fileOps.FileExists("test.txt")
    Debug.Assert Err.Number = 0, "初期化済み状態でのメソッド呼び出しはエラーにならない"
    
    Exit Sub
    
TestFail:
    Debug.Print "TestInitialization failed: " & Err.Description
    Resume Next
End Sub

'@TestMethod("ファイル操作")
Private Sub TestFileOperations()
    On Error GoTo TestFail
    
    ' FileExistsのテスト
    mockFileIO.SetFileExists "test.txt", True
    Debug.Assert fileOps.FileExists("test.txt"), "FileExists should return True"
    
    ' CreateFolderのテスト
    mockFileIO.SetCreateFolderResult "testFolder", True
    Debug.Assert fileOps.CreateFolder("testFolder"), "CreateFolder should return True"
    
    ' パフォーマンスモニタリングの確認
    Debug.Assert mockPerformanceMonitor.WasMeasurementStarted("Create Folder"), _
                 "パフォーマンスモニタリングが開始されていない"
    Debug.Assert mockPerformanceMonitor.WasMeasurementEnded("Create Folder"), _
                 "パフォーマンスモニタリングが終了されていない"
    
    Exit Sub
    
TestFail:
    Debug.Print "TestFileOperations failed: " & Err.Description
    Resume Next
End Sub

'@TestMethod("エラー処理")
Private Sub TestErrorHandling()
    On Error GoTo TestFail
    
    ' ファイル読み込みエラーのテスト
    mockFileIO.SetOpenFileResult "error.txt", Nothing
    Dim content As String
    content = fileOps.ReadTextFile("error.txt")
    Debug.Assert content = vbNullString, "エラー時は空文字列を返すべき"
    
    ' ファイル書き込みエラーのテスト
    mockFileIO.SetOpenFileResult "readonly.txt", Nothing
    Dim writeSuccess As Boolean
    writeSuccess = fileOps.WriteTextFile("readonly.txt", "test")
    Debug.Assert Not writeSuccess, "エラー時はFalseを返すべき"
    
    Exit Sub
    
TestFail:
    Debug.Print "TestErrorHandling failed: " & Err.Description
    Resume Next
End Sub

'@TestMethod("バイナリファイル操作")
Private Sub TestBinaryOperations()
    On Error GoTo TestFail
    
    ' バイナリファイル読み込みのテスト
    Dim testData(0 To 2) As Byte
    testData(0) = 1: testData(1) = 2: testData(2) = 3
    
    mockFileIO.SetBinaryFileContent "test.bin", testData
    Dim readData() As Byte
    readData = fileOps.ReadBinaryFile("test.bin")
    
    Debug.Assert UBound(readData) = UBound(testData), "バイナリデータのサイズが一致しない"
    Debug.Assert readData(0) = testData(0), "バイナリデータの内容が一致しない"
    
    Exit Sub
    
TestFail:
    Debug.Print "TestBinaryOperations failed: " & Err.Description
    Resume Next
End Sub

'@TestMethod("パス操作")
Private Sub TestPathOperations()
    On Error GoTo TestFail
    
    ' 相対パスから絶対パスへの変換テスト
    Dim absolutePath As String
    absolutePath = fileOps.GetAbsolutePath("test.txt", "C:\temp")
    Debug.Assert absolutePath = "C:\temp\test.txt", "絶対パスの解決が正しくない"
    
    Exit Sub
    
TestFail:
    Debug.Print "TestPathOperations failed: " & Err.Description
    Resume Next
End Sub

================
File: tests/TestLogger.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "TestLogger"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "TestLogger"

' ======================
' メンバ変数
' ======================
Private mLogger As clsLogger
Private mSettings As ILoggerSettings
Private mQueue As IQueue
Private mLock As ILock
Private mPerformanceMonitor As IPerformanceMonitor
Private mTestFileLogger As FileLogger
Private mTestDatabaseLogger As DatabaseLogger
Private mTestEventLogLogger As EventLogLogger
Private mTestConsoleLogger As ConsoleLogger

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    ' テスト対象の初期化
    Set mLogger = New clsLogger
    Set mSettings = New DefaultLoggerSettings
    Set mQueue = New QueueImpl
    Set mLock = New clsLock
    Set mPerformanceMonitor = New clsPerformanceMonitor
    
    ' テスト用ロガーの初期化
    Set mTestFileLogger = New FileLogger
    Set mTestDatabaseLogger = New DatabaseLogger
    Set mTestEventLogLogger = New EventLogLogger
    Set mTestConsoleLogger = New ConsoleLogger
End Sub

Private Sub Class_Terminate()
    Set mLogger = Nothing
    Set mSettings = Nothing
    Set mQueue = Nothing
    Set mLock = Nothing
    Set mPerformanceMonitor = Nothing
    Set mTestFileLogger = Nothing
    Set mTestDatabaseLogger = Nothing
    Set mTestEventLogLogger = Nothing
    Set mTestConsoleLogger = Nothing
End Sub

' ======================
' テストメソッド
' ======================
Public Sub TestInitialization()
    On Error GoTo TestFail
    
    ' 初期化前の状態確認
    Debug.Assert mLogger.GetQueueCount() = 0
    
    ' 初期化
    mLogger.Configure mSettings, mQueue, mLock, mPerformanceMonitor
    
    ' 初期化後の状態確認
    Debug.Assert Not mLogger Is Nothing
    Debug.Print "TestInitialization: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestInitialization: Failed - " & Err.Description
End Sub

Public Sub TestLoggerAddition()
    On Error GoTo TestFail
    
    ' ロガーの初期化
    mLogger.Configure mSettings, mQueue, mLock, mPerformanceMonitor
    
    ' ロガーの追加
    mLogger.SetLogger "File", mTestFileLogger
    mLogger.SetLogger "Database", mTestDatabaseLogger
    mLogger.SetLogger "EventLog", mTestEventLogLogger
    mLogger.SetLogger "Console", mTestConsoleLogger
    
    ' 同じ出力先に対する上書き確認
    Dim newFileLogger As New FileLogger
    mLogger.SetLogger "File", newFileLogger
    
    Debug.Print "TestLoggerAddition: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestLoggerAddition: Failed - " & Err.Description
End Sub

Public Sub TestLogMessageQueuing()
    On Error GoTo TestFail
    
    ' ロガーの初期化
    mLogger.Configure mSettings, mQueue, mLock, mPerformanceMonitor
    
    ' ログメッセージの追加
    mLogger.Log "TestModule", "Test message 1", LOG_LEVEL_INFO
    mLogger.Log "TestModule", "Test message 2", LOG_LEVEL_WARNING
    mLogger.Log "TestModule", "Test message 3", LOG_LEVEL_ERROR
    
    ' キューの状態確認
    Debug.Assert mLogger.GetQueueCount() = 3
    
    Debug.Print "TestLogMessageQueuing: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestLogMessageQueuing: Failed - " & Err.Description
End Sub

Public Sub TestAsyncProcessing()
    On Error GoTo TestFail
    
    ' ロガーの初期化
    mLogger.Configure mSettings, mQueue, mLock, mPerformanceMonitor
    
    ' ログメッセージの追加
    mLogger.Log "TestModule", "Async test message", LOG_LEVEL_INFO
    
    ' 非同期処理のシミュレーション
    mLogger.SimulateTimer
    
    ' キューが空になっていることを確認
    Debug.Assert mLogger.GetQueueCount() = 0
    
    Debug.Print "TestAsyncProcessing: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestAsyncProcessing: Failed - " & Err.Description
End Sub

' ======================
' 全テストの実行
' ======================
Public Sub RunAllTests()
    TestInitialization
    TestLoggerAddition
    TestLogMessageQueuing
    TestAsyncProcessing
End Sub

================
File: tests/TestMsgBoxNotifier.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "TestMsgBoxNotifier"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Private Const MODULE_NAME As String = "TestMsgBoxNotifier"

' テスト対象
Private mNotifier As MsgBoxNotifier
Private mMockLock As MockLock
Private mMockMonitor As MockPerformanceMonitor
Private mMockConfig As MockAppConfig
Private mMockFormatter As MockMessageFormatter

' ======================
' セットアップ/クリーンアップ
' ======================
Private Sub Class_Initialize()
    ' モックオブジェクトの初期化
    Set mMockLock = New MockLock
    Set mMockMonitor = New MockPerformanceMonitor
    Set mMockConfig = New MockAppConfig
    Set mMockFormatter = New MockMessageFormatter
    
    ' テスト対象の初期化
    Set mNotifier = New MsgBoxNotifier
    mNotifier.Initialize mMockLock, mMockMonitor, mMockConfig, mMockFormatter
End Sub

Private Sub Class_Terminate()
    Set mNotifier = Nothing
    Set mMockLock = Nothing
    Set mMockMonitor = Nothing
    Set mMockConfig = Nothing
    Set mMockFormatter = Nothing
End Sub

' ======================
' テストケース
' ======================

''' <summary>
''' 初期化テスト - 正常系
''' </summary>
Public Sub TestInitialize()
    On Error GoTo TestFail
    
    ' 新しいインスタンスで初期化テスト
    Dim notifier As New MsgBoxNotifier
    notifier.Initialize mMockLock, mMockMonitor, mMockConfig, mMockFormatter
    
    Debug.Print "TestInitialize: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestInitialize: Failed - " & Err.Description
End Sub

''' <summary>
''' 初期化テスト - 異常系（Nothingを渡す）
''' </summary>
Public Sub TestInitializeWithNothing()
    On Error Resume Next
    
    Dim notifier As New MsgBoxNotifier
    notifier.Initialize Nothing, Nothing, Nothing, Nothing
    
    ' エラーが発生することを確認
    If Err.Number = 5 Then
        Debug.Print "TestInitializeWithNothing: OK"
    Else
        Debug.Print "TestInitializeWithNothing: Failed - Expected error 5, got " & Err.Number
    End If
    
    On Error GoTo 0
End Sub

''' <summary>
''' 通知スタイル設定テスト
''' </summary>
Public Sub TestNotificationStyle()
    On Error GoTo TestFail
    
    ' スタイル設定
    Dim testStyle As VbMsgBoxStyle
    testStyle = vbOKOnly Or vbInformation
    mNotifier.NotificationStyle = testStyle
    
    ' 設定値の取得と検証
    If mNotifier.NotificationStyle = testStyle Then
        Debug.Print "TestNotificationStyle: OK"
    Else
        Debug.Print "TestNotificationStyle: Failed - Style mismatch"
    End If
    Exit Sub
    
TestFail:
    Debug.Print "TestNotificationStyle: Failed - " & Err.Description
End Sub

''' <summary>
''' メッセージフォーマット処理テスト
''' </summary>
Public Sub TestMessageFormatting()
    On Error GoTo TestFail
    
    ' テスト用エラー情報
    Dim testError As ErrorInfo
    With testError
        .Code = ErrUnexpected
        .Description = "テストエラー"
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "TestMessageFormatting"
    End With
    
    ' モックフォーマッタの戻り値を設定
    mMockFormatter.SetReturnValue "テストフォーマット済メッセージ"
    
    ' 通知実行
    mNotifier.Notify testError
    
    ' フォーマッタが呼び出されたことを確認
    If mMockFormatter.WasCalled Then
        Debug.Print "TestMessageFormatting: OK"
    Else
        Debug.Print "TestMessageFormatting: Failed - Formatter not called"
    End If
    Exit Sub
    
TestFail:
    Debug.Print "TestMessageFormatting: Failed - " & Err.Description
End Sub

''' <summary>
''' ロック処理テスト
''' </summary>
Public Sub TestLocking()
    On Error GoTo TestFail
    
    ' テスト用エラー情報
    Dim testError As ErrorInfo
    With testError
        .Code = ErrUnexpected
        .Description = "テストエラー"
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "TestLocking"
    End With
    
    ' 通知実行
    mNotifier.Notify testError
    
    ' ロックの取得と解放が行われたことを確認
    If mMockLock.AcquireCalled And mMockLock.ReleaseCalled Then
        Debug.Print "TestLocking: OK"
    Else
        Debug.Print "TestLocking: Failed - Lock operations not called"
    End If
    Exit Sub
    
TestFail:
    Debug.Print "TestLocking: Failed - " & Err.Description
End Sub

' ======================
' テスト実行
' ======================
Public Sub RunAllTests()
    TestInitialize
    TestInitializeWithNothing
    TestNotificationStyle
    TestMessageFormatting
    TestLocking
End Sub

================
File: tests/TestMutexLock.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "TestMutexLock"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Private Const MODULE_NAME As String = "TestMutexLock"
Private testLock As clsMutexLock

'@TestInitialize
Private Sub TestInitialize()
    Set testLock = New clsMutexLock
End Sub

'@TestCleanup
Private Sub TestCleanup()
    If Not testLock Is Nothing Then
        testLock.ForceRelease
        Set testLock = Nothing
    End If
End Sub

'@TestMethod("MutexLock")
Public Sub TestAcquireSuccess()
    On Error GoTo TestFail
    
    'Arrange
    Dim result As Boolean
    
    'Act
    result = testLock.Acquire()
    
    'Assert
    Debug.Assert result = True
    Debug.Assert testLock.ValidateLockState() = True
    
    Exit Sub
TestFail:
    Debug.Print "TestAcquireSuccess failed: " & Err.Description
End Sub

'@TestMethod("MutexLock")
Public Sub TestAcquireWithTimeout()
    On Error GoTo TestFail
    
    'Arrange
    Dim result As Boolean
    Dim timeout As Long
    timeout = 1000 ' 1秒
    
    'Act
    result = testLock.Acquire(timeout)
    
    'Assert
    Debug.Assert result = True
    Debug.Assert testLock.ValidateLockState() = True
    
    Exit Sub
TestFail:
    Debug.Print "TestAcquireWithTimeout failed: " & Err.Description
End Sub

'@TestMethod("MutexLock")
Public Sub TestReleaseSuccess()
    On Error GoTo TestFail
    
    'Arrange
    testLock.Acquire
    
    'Act
    testLock.Release
    
    'Assert
    Debug.Assert testLock.ValidateLockState() = False
    
    Exit Sub
TestFail:
    Debug.Print "TestReleaseSuccess failed: " & Err.Description
End Sub

'@TestMethod("MutexLock")
Public Sub TestConfigure()
    On Error GoTo TestFail
    
    'Arrange
    Const NEW_MUTEX_NAME As String = "TestMutex"
    
    'Act
    testLock.Configure NEW_MUTEX_NAME
    
    'Assert
    Debug.Assert testLock.MutexName = NEW_MUTEX_NAME
    
    Exit Sub
TestFail:
    Debug.Print "TestConfigure failed: " & Err.Description
End Sub

'@TestMethod("MutexLock")
Public Sub TestMultipleAcquire()
    On Error GoTo TestFail
    
    'Arrange
    Dim secondLock As clsMutexLock
    Set secondLock = New clsMutexLock
    
    'Act
    testLock.Acquire
    Dim result As Boolean
    result = secondLock.Acquire(100) ' 100msタイムアウト
    
    'Assert
    Debug.Assert result = False ' 2番目のロックは失敗するはず
    
    'Cleanup
    Set secondLock = Nothing
    
    Exit Sub
TestFail:
    Debug.Print "TestMultipleAcquire failed: " & Err.Description
End Sub

================
File: tests/TestSemaphoreLock.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "TestSemaphoreLock"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Private Const MODULE_NAME As String = "TestSemaphoreLock"
Private testLock As clsSemaphoreLock

'@TestInitialize
Private Sub TestInitialize()
    Set testLock = New clsSemaphoreLock
End Sub

'@TestCleanup
Private Sub TestCleanup()
    If Not testLock Is Nothing Then
        testLock.ForceRelease
        Set testLock = Nothing
    End If
End Sub

'@TestMethod("SemaphoreLock")
Public Sub TestAcquireSuccess()
    On Error GoTo TestFail
    
    'Arrange
    Dim result As Boolean
    
    'Act
    result = testLock.Acquire()
    
    'Assert
    Debug.Assert result = True
    Debug.Assert testLock.ValidateLockState() = True
    
    Exit Sub
TestFail:
    Debug.Print "TestAcquireSuccess failed: " & Err.Description
End Sub

'@TestMethod("SemaphoreLock")
Public Sub TestAcquireWithTimeout()
    On Error GoTo TestFail
    
    'Arrange
    Dim result As Boolean
    Dim timeout As Long
    timeout = 1000 ' 1秒
    
    'Act
    result = testLock.Acquire(timeout)
    
    'Assert
    Debug.Assert result = True
    Debug.Assert testLock.ValidateLockState() = True
    
    Exit Sub
TestFail:
    Debug.Print "TestAcquireWithTimeout failed: " & Err.Description
End Sub

'@TestMethod("SemaphoreLock")
Public Sub TestReleaseSuccess()
    On Error GoTo TestFail
    
    'Arrange
    testLock.Acquire
    
    'Act
    testLock.Release
    
    'Assert
    Debug.Assert testLock.ValidateLockState() = False
    
    Exit Sub
TestFail:
    Debug.Print "TestReleaseSuccess failed: " & Err.Description
End Sub

'@TestMethod("SemaphoreLock")
Public Sub TestConfigure()
    On Error GoTo TestFail
    
    'Arrange
    Const NEW_SEMAPHORE_NAME As String = "TestSemaphore"
    
    'Act
    testLock.Configure NEW_SEMAPHORE_NAME
    
    'Assert
    Debug.Assert testLock.SemaphoreName = NEW_SEMAPHORE_NAME
    
    Exit Sub
TestFail:
    Debug.Print "TestConfigure failed: " & Err.Description
End Sub

'@TestMethod("SemaphoreLock")
Public Sub TestMultipleAcquire()
    On Error GoTo TestFail
    
    'Arrange
    Dim secondLock As clsSemaphoreLock
    Set secondLock = New clsSemaphoreLock
    
    'Act
    testLock.Acquire
    Dim result As Boolean
    result = secondLock.Acquire(100) ' 100msタイムアウト
    
    'Assert
    Debug.Assert result = False ' 2番目のロックは失敗するはず
    
    'Cleanup
    Set secondLock = Nothing
    
    Exit Sub
TestFail:
    Debug.Print "TestMultipleAcquire failed: " & Err.Description
End Sub

================
File: tests/TestStringValidator.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "TestStringValidator"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "TestStringValidator"

' ======================
' プライベート変数
' ======================
Private mValidator As StringValidator
Private mMockError As MockError

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    Set mMockError = New MockError
End Sub

Private Sub Class_Terminate()
    Set mValidator = Nothing
    Set mMockError = Nothing
End Sub

' ======================
' テストメソッド
' ======================
Public Sub TestMinLengthValidation()
    ' 準備
    Set mValidator = New StringValidator
    Set mValidator.Error = mMockError
    
    Dim minLengthRule As MinLengthRule
    Set minLengthRule = New MinLengthRule
    minLengthRule.MinLength = 5
    mValidator.AddRule minLengthRule
    
    ' 実行と検証
    Debug.Assert Not mValidator.Validate("abc"), "最小長より短い文字列は失敗するべき"
    Debug.Assert mValidator.Validate("abcde"), "最小長と同じ長さの文字列は成功するべき"
    Debug.Assert mValidator.Validate("abcdef"), "最小長より長い文字列は成功するべき"
End Sub

Public Sub TestMaxLengthValidation()
    ' 準備
    Set mValidator = New StringValidator
    Set mValidator.Error = mMockError
    
    Dim maxLengthRule As MaxLengthRule
    Set maxLengthRule = New MaxLengthRule
    maxLengthRule.MaxLength = 5
    mValidator.AddRule maxLengthRule
    
    ' 実行と検証
    Debug.Assert mValidator.Validate("abc"), "最大長より短い文字列は成功するべき"
    Debug.Assert mValidator.Validate("abcde"), "最大長と同じ長さの文字列は成功するべき"
    Debug.Assert Not mValidator.Validate("abcdef"), "最大長より長い文字列は失敗するべき"
End Sub

Public Sub TestPatternValidation()
    ' 準備
    Set mValidator = New StringValidator
    Set mValidator.Error = mMockError
    
    Dim patternRule As PatternRule
    Set patternRule = New PatternRule
    patternRule.Pattern = "^[0-9]+$"
    mValidator.AddRule patternRule
    
    ' 実行と検証
    Debug.Assert mValidator.Validate("12345"), "数字のみの文字列は成功するべき"
    Debug.Assert Not mValidator.Validate("abc"), "数字以外の文字列は失敗するべき"
    Debug.Assert Not mValidator.Validate("123abc"), "数字と文字が混在する文字列は失敗するべき"
End Sub

Public Sub TestEmailValidation()
    ' 準備
    Set mValidator = CreateEmailValidator(mMockError)
    
    ' 実行と検証
    Debug.Assert mValidator.Validate("test@example.com"), "正しい形式のメールアドレスは成功するべき"
    Debug.Assert Not mValidator.Validate("invalid-email"), "@を含まないメールアドレスは失敗するべき"
    Debug.Assert Not mValidator.Validate("test@"), "ドメインがないメールアドレスは失敗するべき"
    Debug.Assert Not mValidator.Validate("@example.com"), "ローカル部がないメールアドレスは失敗するべき"
End Sub

Public Sub TestPhoneValidation()
    ' 準備
    Set mValidator = CreatePhoneValidator(mMockError)
    
    ' 実行と検証
    Debug.Assert mValidator.Validate("03-1234-5678"), "正しい形式の電話番号は成功するべき"
    Debug.Assert mValidator.Validate("0312345678"), "ハイフンなしの電話番号は成功するべき"
    Debug.Assert Not mValidator.Validate("abc-defg-hijk"), "数字以外の文字列は失敗するべき"
    Debug.Assert Not mValidator.Validate("03-1234"), "短すぎる電話番号は失敗するべき"
    Debug.Assert Not mValidator.Validate("03-1234-5678-9012"), "長すぎる電話番号は失敗するべき"
End Sub

Public Sub TestMultipleRules()
    ' 準備
    Set mValidator = New StringValidator
    Set mValidator.Error = mMockError
    
    Dim minLengthRule As MinLengthRule
    Set minLengthRule = New MinLengthRule
    minLengthRule.MinLength = 5
    mValidator.AddRule minLengthRule
    
    Dim maxLengthRule As MaxLengthRule
    Set maxLengthRule = New MaxLengthRule
    maxLengthRule.MaxLength = 10
    mValidator.AddRule maxLengthRule
    
    Dim patternRule As PatternRule
    Set patternRule = New PatternRule
    patternRule.Pattern = "^[a-zA-Z]+$"
    mValidator.AddRule patternRule
    
    ' 実行と検証
    Debug.Assert Not mValidator.Validate("abc"), "短すぎる文字列は失敗するべき"
    Debug.Assert Not mValidator.Validate("abcdefghijk"), "長すぎる文字列は失敗するべき"
    Debug.Assert Not mValidator.Validate("abc123"), "数字を含む文字列は失敗するべき"
    Debug.Assert mValidator.Validate("abcdef"), "すべてのルールを満たす文字列は成功するべき"
End Sub

================
File: utils/clsCallStack.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "clsCallStack"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

'==========================
' モジュール情報
'==========================
Private Const MODULE_NAME As String = "clsCallStack"

'==========================
' メンバ変数
'==========================
Private mStackTrace As IStackTrace
Private mLock As clsLock

'==========================
' 初期化・終了処理
'==========================
Private Sub Class_Initialize()
    Set mStackTrace = New StackTraceImpl
    Set mLock = New clsLock
End Sub

Private Sub Class_Terminate()
    Set mStackTrace = Nothing
    Set mLock = Nothing
End Sub

'==========================
' パブリックメソッド
'==========================

''' <summary>
''' 呼び出し履歴にエントリを追加
''' </summary>
''' <param name="ModuleName">モジュール名</param>
''' <param name="ProcedureName">プロシージャ名</param>
''' <remarks>
''' スタックトレースの最大深さを超えた場合、エラーを発生させずに無視します
''' </remarks>
Public Sub Push(ByVal ModuleName As String, ByVal ProcedureName As String)
    mLock.AcquireLock
    On Error GoTo ErrorHandler
    
    mStackTrace.PushStackEntry ModuleName, ProcedureName
    
    mLock.ReleaseLock
    Exit Sub

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = modErrorCodes.ErrUnexpected
        .Description = "Push操作中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "Push"
        .StackTrace = mStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    mLock.ReleaseLock
    Resume Next
End Sub

''' <summary>
''' 呼び出し履歴から最後のエントリを取得して削除
''' </summary>
''' <returns>最後に追加されたプロシージャの完全修飾名、またはスタックが空の場合は空文字列</returns>
Public Function Pop() As String
    mLock.AcquireLock
    On Error GoTo ErrorHandler
    
    Pop = mStackTrace.PopStackEntry()
    
    mLock.ReleaseLock
    Exit Function

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = modErrorCodes.ErrUnexpected
        .Description = "Pop操作中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "Pop"
        .StackTrace = mStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    mLock.ReleaseLock
    Resume Next
End Function

''' <summary>
''' 現在のスタックトレースを文字列として取得
''' </summary>
''' <returns>スタックトレースの文字列表現</returns>
Public Property Get StackTrace() As String
    mLock.AcquireLock
    On Error GoTo ErrorHandler
    
    StackTrace = mStackTrace.GetStackTrace()
    
    mLock.ReleaseLock
    Exit Property

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = modErrorCodes.ErrUnexpected
        .Description = "スタックトレース取得中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "StackTrace"
        .StackTrace = mStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    mLock.ReleaseLock
    Resume Next
End Property

''' <summary>
''' スタック内のエントリ数を取得
''' </summary>
''' <returns>現在のスタックの深さ</returns>
Public Property Get Count() As Long
    Count = mStackTrace.StackDepth
End Property

'==========================
' テストサポート（開発環境用）
'==========================
#If DEBUG Then
    Public Sub SetStackTrace(ByVal stackTrace As IStackTrace)
        Set mStackTrace = stackTrace
    End Sub
    
    Public Function GetStackTrace() As IStackTrace
        Set GetStackTrace = mStackTrace
    End Function
#End If

================
File: utils/modCommon.bas
================
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "modCommon"

' ======================
' アプリケーション定数
' ======================
Public Const APPLICATION_NAME As String = "MyApp"
Public Const APPLICATION_VERSION As String = "1.0.0"
Public Const DEFAULT_LOG_FILE As String = "app.log"
Public Const DEFAULT_DATE_FORMAT As String = "yyyy/MM/dd"
Public Const DEFAULT_DATETIME_FORMAT As String = "yyyy/MM/dd HH:nn:ss"
Public Const MAX_RETRY_COUNT As Integer = 3

' ======================
' ログ関連の定義
' ======================
Public Enum LogLevel
    LevelDebug
    LevelInfo
    LevelWarning
    LevelError
    LevelFatal
End Enum

Public Enum LogDestination
    DestNone
    DestFile
    DestDatabase
    DestEventLog
    DestConsole
    DestEmail
End Enum

' ======================
' セキュリティレベル
' ======================
Public Enum SecurityLevel
    LevelLow = 1
    LevelMedium = 2
    LevelHigh = 3
    LevelExtreme = 4
End Enum

' ======================
' ファイルアクセスモード
' ======================
Public Enum FileAccessMode
    ModeReadOnly = 1
    ModeReadWrite = 2
    ModeAppend = 3
    ModeExclusive = 4
End Enum

' ======================
' 型定義
' ======================
Public Type ErrorInfo
    Code As ErrorCode
    Category As ErrorCodeCategory
    Description As String
    Source As String
    ProcedureName As String
    StackTrace As String
    OccurredAt As Date
    AdditionalInfo As String
End Type

Public Type FileInfo
    Name As String
    Path As String
    Size As Long
    Created As Date
    LastModified As Date
    FileType As String
    Attributes As Long
End Type

' ======================
' モジュール変数
' ======================
Private mPerformanceMonitor As clsPerformanceMonitor
Private mIsInitialized As Boolean
Private mLock As clsLock

' ======================
' 初期化・終了処理
' ======================
Public Property Get IsInitialized() As Boolean
    IsInitialized = mIsInitialized
End Property

Public Sub InitializeModule()
    If mIsInitialized Then Exit Sub
    
    ' スタックトレースモジュールの初期化
    modStackTrace.InitializeModule
    
    ' パフォーマンスモニターの初期化
    Set mPerformanceMonitor = New clsPerformanceMonitor
    Set mLock = New clsLock
    
    ' 設定の初期化
    modConfig.InitializeModule
    
    mIsInitialized = True
End Sub

Public Sub TerminateModule()
    If Not mIsInitialized Then Exit Sub
    
    ' 設定の終了処理
    modConfig.TerminateModule
    
    ' パフォーマンスモニターの解放
    Set mPerformanceMonitor = Nothing
    Set mLock = Nothing
    
    mIsInitialized = False
End Sub

' ======================
' エラーハンドリング
' ======================
Public Sub HandleError(ByRef errInfo As ErrorInfo)
    If Not mIsInitialized Then InitializeModule
    
    mLock.AcquireLock
    On Error GoTo ErrorHandler
    
    ' パフォーマンスモニタリング開始
    If Not mPerformanceMonitor Is Nothing Then
        mPerformanceMonitor.StartMeasurement "ErrorHandling_" & errInfo.Code
    End If
    
    ' エラー情報の補完
    With errInfo
        If .OccurredAt = #12:00:00 AM# Then .OccurredAt = Now
        If .Category = 0 Then .Category = modErrorCodes.GetErrorCategory(.Code)
        If Len(.StackTrace) = 0 Then .StackTrace = modStackTrace.GetStackTrace()
    End With
    
    ' エラー処理をmodErrorに委譲
    modError.HandleError errInfo
    
    ' パフォーマンスモニタリング終了
    If Not mPerformanceMonitor Is Nothing Then
        mPerformanceMonitor.EndMeasurement "ErrorHandling_" & errInfo.Code
    End If
    
    mLock.ReleaseLock
    Exit Sub

ErrorHandler:
    If Not mLock Is Nothing Then mLock.ReleaseLock
    Err.Raise Err.Number, Err.Source, "HandleError中にエラーが発生しました: " & Err.Description
End Sub

' ======================
' テストサポート機能（開発環境専用）
' 警告: これらのメソッドは開発時のテスト目的でのみ使用し、
' 本番環境では使用しないでください。
' ======================
#If DEBUG Then
    Private Sub ResetModule()
        ' モジュールの状態を初期化（テスト用）
        TerminateModule
        InitializeModule
    End Sub
    
    Private Function GetPerformanceMonitor() As clsPerformanceMonitor
        ' パフォーマンスモニターの参照を取得（テスト用）
        Set GetPerformanceMonitor = mPerformanceMonitor
    End Function
#End If

================
File: utils/modDateUtils.bas
================
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "modDateUtils"

' ======================
' 定数定義
' ======================
Private Const DEFAULT_DATE_FORMAT As String = "yyyy/mm/dd"
Private Const DEFAULT_TIME_FORMAT As String = "hh:nn:ss"
Private Const DEFAULT_DATETIME_FORMAT As String = "yyyy/mm/dd hh:nn:ss"

' ======================
' プライベート変数
' ======================
Private performanceMonitor As clsPerformanceMonitor
Private isInitialized As Boolean

' ======================
' 初期化・終了処理
' ======================
Public Sub InitializeModule()
    If isInitialized Then Exit Sub
    
    Set performanceMonitor = New clsPerformanceMonitor
    isInitialized = True
End Sub

Public Sub TerminateModule()
    If Not isInitialized Then Exit Sub
    
    Set performanceMonitor = Nothing
    isInitialized = False
End Sub

' ======================
' 公開関数
' ======================

''' <summary>
''' 日付の妥当性を確認します
''' </summary>
''' <param name="testDate">確認する日付</param>
''' <returns>有効な日付の場合True</returns>
Public Function IsValidDate(ByVal testDate As Variant) As Boolean
    If Not isInitialized Then InitializeModule
    
    If Not performanceMonitor Is Nothing Then
        performanceMonitor.StartMeasurement "IsValidDate"
    End If
    
    On Error Resume Next
    IsValidDate = IsDate(testDate)
    On Error GoTo 0
    
    If Not performanceMonitor Is Nothing Then
        performanceMonitor.EndMeasurement "IsValidDate"
    End If
End Function

''' <summary>
''' 日付に指定された期間を加算します
''' </summary>
''' <param name="interval">期間の単位</param>
''' <param name="number">加算する数</param>
''' <param name="dateValue">対象の日付</param>
''' <returns>加算後の日付</returns>
Public Function DateAdd(ByVal interval As String, ByVal number As Double, _
                      ByVal dateValue As Date) As Date
    If Not isInitialized Then InitializeModule
    
    If Not performanceMonitor Is Nothing Then
        performanceMonitor.StartMeasurement "DateAdd"
    End If
    
    On Error GoTo ErrorHandler
    
    DateAdd = VBA.DateAdd(interval, number, dateValue)
    
    If Not performanceMonitor Is Nothing Then
        performanceMonitor.EndMeasurement "DateAdd"
    End If
    Exit Function

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "日付の加算中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "DateAdd"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    If Not performanceMonitor Is Nothing Then
        performanceMonitor.EndMeasurement "DateAdd"
    End If
    DateAdd = dateValue
End Function

''' <summary>
''' 2つの日付の差分を計算します
''' </summary>
''' <param name="interval">期間の単位</param>
''' <param name="date1">日付1</param>
''' <param name="date2">日付2</param>
''' <returns>日付の差分</returns>
Public Function DateDiff(ByVal interval As String, ByVal date1 As Date, _
                       ByVal date2 As Date) As Long
    If Not isInitialized Then InitializeModule
    
    If Not performanceMonitor Is Nothing Then
        performanceMonitor.StartMeasurement "DateDiff"
    End If
    
    On Error GoTo ErrorHandler
    
    DateDiff = VBA.DateDiff(interval, date1, date2)
    
    If Not performanceMonitor Is Nothing Then
        performanceMonitor.EndMeasurement "DateDiff"
    End If
    Exit Function

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "日付の差分計算中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "DateDiff"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    If Not performanceMonitor Is Nothing Then
        performanceMonitor.EndMeasurement "DateDiff"
    End If
    DateDiff = 0
End Function

''' <summary>
''' 日付を指定された形式でフォーマットします
''' </summary>
''' <param name="dateValue">対象の日付</param>
''' <param name="format">フォーマット文字列（オプション）</param>
''' <returns>フォーマットされた日付文字列</returns>
Public Function FormatDate(ByVal dateValue As Date, _
                         Optional ByVal format As String = DEFAULT_DATE_FORMAT) As String
    If Not isInitialized Then InitializeModule
    
    If Not performanceMonitor Is Nothing Then
        performanceMonitor.StartMeasurement "FormatDate"
    End If
    
    On Error GoTo ErrorHandler
    
    FormatDate = Format$(dateValue, format)
    
    If Not performanceMonitor Is Nothing Then
        performanceMonitor.EndMeasurement "FormatDate"
    End If
    Exit Function

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "日付のフォーマット中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "FormatDate"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    If Not performanceMonitor Is Nothing Then
        performanceMonitor.EndMeasurement "FormatDate"
    End If
    FormatDate = Format$(dateValue, DEFAULT_DATE_FORMAT)
End Function

''' <summary>
''' 現在の日時を取得します
''' </summary>
''' <returns>現在の日時</returns>
Public Function GetCurrentDateTime() As Date
    If Not isInitialized Then InitializeModule
    GetCurrentDateTime = Now
End Function

''' <summary>
''' 指定された日付が営業日かどうかを確認します
''' </summary>
''' <param name="dateValue">確認する日付</param>
''' <returns>営業日の場合True</returns>
Public Function IsBusinessDay(ByVal dateValue As Date) As Boolean
    If Not isInitialized Then InitializeModule
    
    ' 土曜日(7)または日曜日(1)の場合はFalse
    IsBusinessDay = Not (Weekday(dateValue, vbSunday) = 1 Or _
                        Weekday(dateValue, vbSunday) = 7)
End Function

' ======================
' テストサポート機能
' 警告: これらのメソッドは開発時のテスト目的でのみ使用し、
' 本番環境では使用しないでください。
' ======================
#If DEBUG Then
    ''' <summary>
    ''' モジュールの状態を初期化（テスト用）
    ''' </summary>
    Private Sub ResetModule()
        TerminateModule
        InitializeModule
    End Sub
    
    ''' <summary>
    ''' パフォーマンスモニターの参照を取得（テスト用）
    ''' </summary>
    Private Function GetPerformanceMonitor() As clsPerformanceMonitor
        Set GetPerformanceMonitor = performanceMonitor
    End Function
#End If

================
File: utils/modMathUtils.bas
================
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "modMathUtils"

' ======================
' 定数定義
' ======================
Private Const EPSILON As Double = 0.0000000001 ' 浮動小数点比較用の許容誤差

' ======================
' プライベート変数
' ======================
Private performanceMonitor As clsPerformanceMonitor
Private isInitialized As Boolean

' ======================
' 初期化・終了処理
' ======================
Public Sub InitializeModule()
    If isInitialized Then Exit Sub
    
    Set performanceMonitor = New clsPerformanceMonitor
    isInitialized = True
End Sub

Public Sub TerminateModule()
    If Not isInitialized Then Exit Sub
    
    Set performanceMonitor = Nothing
    isInitialized = False
End Sub

' ======================
' 公開関数
' ======================

''' <summary>
''' 安全な除算を行います
''' </summary>
''' <param name="numerator">分子</param>
''' <param name="denominator">分母</param>
''' <param name="defaultValue">分母が0の場合の戻り値</param>
''' <returns>除算結果、またはデフォルト値</returns>
Public Function SafeDivide(ByVal numerator As Double, ByVal denominator As Double, _
                         Optional ByVal defaultValue As Variant = 0) As Variant
    If Not isInitialized Then InitializeModule
    
    If Not performanceMonitor Is Nothing Then
        performanceMonitor.StartMeasurement "SafeDivide"
    End If
    
    On Error GoTo ErrorHandler
    
    If Abs(denominator) < EPSILON Then
        ' 分母が0の場合の警告を出力
        Dim errDetail As ErrorInfo
        With errDetail
            .Code = ErrDivisionByZero
            .Description = "分母が0のため、デフォルト値" & CStr(defaultValue) & "を返します。(分子: " & CStr(numerator) & ")"
            .Category = ECGeneral
            .Source = MODULE_NAME
            .ProcedureName = "SafeDivide"
            .StackTrace = modStackTrace.GetStackTrace()
            .OccurredAt = Now
        End With
        modError.HandleError errDetail
        
        SafeDivide = defaultValue
    Else
        SafeDivide = numerator / denominator
    End If
    
    If Not performanceMonitor Is Nothing Then
        performanceMonitor.EndMeasurement "SafeDivide"
    End If
    Exit Function

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "除算中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "SafeDivide"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    If Not performanceMonitor Is Nothing Then
        performanceMonitor.EndMeasurement "SafeDivide"
    End If
    SafeDivide = defaultValue
End Function

''' <summary>
''' 数値が指定された範囲内かどうかを確認します
''' </summary>
''' <param name="value">確認する値</param>
''' <param name="minValue">最小値</param>
''' <param name="maxValue">最大値</param>
''' <returns>範囲内の場合True</returns>
Public Function IsInRange(ByVal value As Double, ByVal minValue As Double, _
                        ByVal maxValue As Double) As Boolean
    If Not isInitialized Then InitializeModule
    
    IsInRange = (value >= minValue And value <= maxValue)
End Function

''' <summary>
''' 値を指定された範囲内に収めます
''' </summary>
''' <param name="value">対象の値</param>
''' <param name="minValue">最小値</param>
''' <param name="maxValue">最大値</param>
''' <returns>範囲内に収められた値</returns>
Public Function Clamp(ByVal value As Double, ByVal minValue As Double, _
                     ByVal maxValue As Double) As Double
    If Not isInitialized Then InitializeModule
    
    If value < minValue Then
        Clamp = minValue
    ElseIf value > maxValue Then
        Clamp = maxValue
    Else
        Clamp = value
    End If
End Function

''' <summary>
''' 指定された精度で四捨五入します
''' </summary>
''' <param name="value">対象の値</param>
''' <param name="decimals">小数点以下の桁数</param>
''' <returns>四捨五入された値</returns>
Public Function Round(ByVal value As Double, Optional ByVal decimals As Long = 0) As Double
    If Not isInitialized Then InitializeModule
    
    Dim factor As Double
    factor = 10 ^ decimals
    Round = Fix(value * factor + 0.5) / factor
End Function

' ======================
' テストサポート機能
' 警告: これらのメソッドは開発時のテスト目的でのみ使用し、
' 本番環境では使用しないでください。
' ======================
#If DEBUG Then
    ''' <summary>
    ''' モジュールの状態を初期化（テスト用）
    ''' </summary>
    Private Sub ResetModule()
        TerminateModule
        InitializeModule
    End Sub
    
    ''' <summary>
    ''' パフォーマンスモニターの参照を取得（テスト用）
    ''' </summary>
    Private Function GetPerformanceMonitor() As clsPerformanceMonitor
        Set GetPerformanceMonitor = performanceMonitor
    End Function
#End If

================
File: utils/modStackTrace.bas
================
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "modStackTrace"

' ======================
' 定数定義
' ======================
Private Const MAX_STACK_TRACE_DEPTH As Long = 10 ' スタックトレースの最大深さ

' ======================
' プライベート変数
' ======================
Private stack As Collection
Private isInitialized As Boolean
Private mLock As clsLock

' ======================
' 初期化・終了処理
' ======================
Public Property Get IsInitialized() As Boolean
    IsInitialized = isInitialized
End Property

Public Sub InitializeModule()
    If isInitialized Then Exit Sub
    
    Set stack = New Collection
    Set mLock = New clsLock
    isInitialized = True
End Sub

Public Sub TerminateModule()
    If Not isInitialized Then Exit Sub
    
    Set stack = Nothing
    Set mLock = Nothing
    isInitialized = False
End Sub

' ======================
' パブリックメソッド
' ======================
Public Sub PushStackEntry(ByVal ModuleName As String, ByVal ProcedureName As String)
    If Not isInitialized Then InitializeModule
    
    mLock.AcquireLock
    On Error GoTo ErrorHandler
    
    If stack.Count < MAX_STACK_TRACE_DEPTH Then
        stack.Add ModuleName & "." & ProcedureName
    End If
    
    mLock.ReleaseLock
    Exit Sub

ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = ErrStackTracePushFailed
        .Description = "スタックトレースへのエントリ追加に失敗しました。"
        .Category = ECSystem
        .Source = MODULE_NAME
        .ProcedureName = "PushStackEntry"
        .StackTrace = "モジュール: " & ModuleName & ", プロシージャ: " & ProcedureName
        .OccurredAt = Now
    End With
    If Not mLock Is Nothing Then mLock.ReleaseLock
    modError.HandleError errInfo
End Sub

Public Function PopStackEntry() As String
    If Not isInitialized Then Exit Function
    
    mLock.AcquireLock
    On Error GoTo ErrorHandler
    
    Dim result As String
    If stack.Count > 0 Then
        result = stack(stack.Count)
        stack.Remove stack.Count
        PopStackEntry = result
    End If
    
    mLock.ReleaseLock
    Exit Function

ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = ErrStackTracePopFailed
        .Description = "スタックトレースからのエントリ取得に失敗しました。"
        .Category = ECSystem
        .Source = MODULE_NAME
        .ProcedureName = "PopStackEntry"
        .OccurredAt = Now
    End With
    If Not mLock Is Nothing Then mLock.ReleaseLock
    modError.HandleError errInfo
End Function

Public Function GetStackTrace() As String
    If Not isInitialized Then Exit Function
    
    mLock.AcquireLock
    On Error GoTo ErrorHandler
    
    Dim i As Long
    Dim trace As String
    
    For i = stack.Count To 1 Step -1
        trace = trace & "  " & stack(i) & vbCrLf
    Next i
    
    GetStackTrace = trace
    mLock.ReleaseLock
    Exit Function

ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = ErrStackTraceGetFailed
        .Description = "スタックトレース文字列の生成に失敗しました。"
        .Category = ECSystem
        .Source = MODULE_NAME
        .ProcedureName = "GetStackTrace"
        .OccurredAt = Now
    End With
    If Not mLock Is Nothing Then mLock.ReleaseLock
    modError.HandleError errInfo
    GetStackTrace = "スタックトレースの取得に失敗しました。"
End Function

Public Property Get StackDepth() As Long
    If Not isInitialized Then Exit Property
    mLock.AcquireLock
    StackDepth = stack.Count
    mLock.ReleaseLock
End Property

' ======================
' テストサポート機能（開発環境専用）
' 警告: これらのメソッドは開発時のテスト目的でのみ使用し、
' 本番環境では使用しないでください。
' ======================
#If DEBUG Then
    ''' <summary>
    ''' スタックの内容をクリア（テスト用）
    ''' </summary>
    Private Sub ClearStack()
        If Not isInitialized Then Exit Sub
        mLock.AcquireLock
        Set stack = New Collection
        mLock.ReleaseLock
    End Sub
    
    ''' <summary>
    ''' スタックの状態が有効かどうかを検証（テスト用）
    ''' </summary>
    ''' <returns>スタックの深さが最大値以下の場合True</returns>
    Private Function ValidateStackState() As Boolean
        If Not isInitialized Then Exit Function
        mLock.AcquireLock
        ValidateStackState = (stack.Count <= MAX_STACK_TRACE_DEPTH)
        mLock.ReleaseLock
    End Function
    
    ''' <summary>
    ''' モジュールの状態を初期化（テスト用）
    ''' </summary>
    Private Sub ResetModule()
        TerminateModule
        InitializeModule
    End Sub
#End If

================
File: utils/modStringUtils.bas
================
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "modStringUtils"

' ======================
' プライベート変数
' ======================
Private performanceMonitor As clsPerformanceMonitor
Private isInitialized As Boolean

' ======================
' 初期化・終了処理
' ======================
Public Sub InitializeModule()
    If isInitialized Then Exit Sub
    
    Set performanceMonitor = New clsPerformanceMonitor
    isInitialized = True
End Sub

Public Sub TerminateModule()
    If Not isInitialized Then Exit Sub
    
    Set performanceMonitor = Nothing
    isInitialized = False
End Sub

' ======================
' 公開関数
' ======================

''' <summary>
''' 文字列を左側からパディングします
''' </summary>
''' <param name="baseStr">対象の文字列</param>
''' <param name="totalWidth">目標の長さ</param>
''' <param name="padChar">パディング文字（オプション）</param>
''' <returns>パディングされた文字列</returns>
Public Function PadLeft(ByVal baseStr As String, ByVal totalWidth As Long, _
                      Optional ByVal padChar As String = " ") As String
    If Not isInitialized Then InitializeModule
    
    If Not performanceMonitor Is Nothing Then
        performanceMonitor.StartMeasurement "PadLeft"
    End If
    
    On Error GoTo ErrorHandler
    
    If Len(baseStr) >= totalWidth Then
        PadLeft = baseStr
    Else
        PadLeft = String(totalWidth - Len(baseStr), Left$(padChar, 1)) & baseStr
    End If
    
    If Not performanceMonitor Is Nothing Then
        performanceMonitor.EndMeasurement "PadLeft"
    End If
    Exit Function

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "文字列のパディング中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "PadLeft"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    If Not performanceMonitor Is Nothing Then
        performanceMonitor.EndMeasurement "PadLeft"
    End If
    PadLeft = baseStr
End Function

''' <summary>
''' 文字列を右側からパディングします
''' </summary>
''' <param name="baseStr">対象の文字列</param>
''' <param name="totalWidth">目標の長さ</param>
''' <param name="padChar">パディング文字（オプション）</param>
''' <returns>パディングされた文字列</returns>
Public Function PadRight(ByVal baseStr As String, ByVal totalWidth As Long, _
                       Optional ByVal padChar As String = " ") As String
    If Not isInitialized Then InitializeModule
    
    If Not performanceMonitor Is Nothing Then
        performanceMonitor.StartMeasurement "PadRight"
    End If
    
    On Error GoTo ErrorHandler
    
    If Len(baseStr) >= totalWidth Then
        PadRight = baseStr
    Else
        PadRight = baseStr & String(totalWidth - Len(baseStr), Left$(padChar, 1))
    End If
    
    If Not performanceMonitor Is Nothing Then
        performanceMonitor.EndMeasurement "PadRight"
    End If
    Exit Function

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "文字列のパディング中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "PadRight"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    If Not performanceMonitor Is Nothing Then
        performanceMonitor.EndMeasurement "PadRight"
    End If
    PadRight = baseStr
End Function

''' <summary>
''' 文字列の前後の空白を削除します
''' </summary>
''' <param name="str">対象の文字列</param>
''' <returns>トリムされた文字列</returns>
Public Function TrimString(ByVal str As String) As String
    If Not isInitialized Then InitializeModule
    
    TrimString = Trim$(str)
End Function

''' <summary>
''' 文字列を指定された区切り文字で分割します
''' </summary>
''' <param name="str">対象の文字列</param>
''' <param name="delimiter">区切り文字</param>
''' <returns>分割された文字列の配列</returns>
Public Function SplitString(ByVal str As String, ByVal delimiter As String) As Variant
    If Not isInitialized Then InitializeModule
    
    If Not performanceMonitor Is Nothing Then
        performanceMonitor.StartMeasurement "SplitString"
    End If
    
    On Error GoTo ErrorHandler
    
    SplitString = Split(str, delimiter)
    
    If Not performanceMonitor Is Nothing Then
        performanceMonitor.EndMeasurement "SplitString"
    End If
    Exit Function

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "文字列の分割中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "SplitString"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    If Not performanceMonitor Is Nothing Then
        performanceMonitor.EndMeasurement "SplitString"
    End If
    SplitString = Array()
End Function

''' <summary>
''' 文字列配列を指定された区切り文字で結合します
''' </summary>
''' <param name="arr">文字列配列</param>
''' <param name="delimiter">区切り文字</param>
''' <returns>結合された文字列</returns>
Public Function JoinStrings(ByRef arr As Variant, Optional ByVal delimiter As String = "") As String
    If Not isInitialized Then InitializeModule
    
    If Not performanceMonitor Is Nothing Then
        performanceMonitor.StartMeasurement "JoinStrings"
    End If
    
    On Error GoTo ErrorHandler
    
    JoinStrings = Join(arr, delimiter)
    
    If Not performanceMonitor Is Nothing Then
        performanceMonitor.EndMeasurement "JoinStrings"
    End If
    Exit Function

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "文字列の結合中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "JoinStrings"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    If Not performanceMonitor Is Nothing Then
        performanceMonitor.EndMeasurement "JoinStrings"
    End If
    JoinStrings = ""
End Function

' ======================
' テストサポート機能
' 警告: これらのメソッドは開発時のテスト目的でのみ使用し、
' 本番環境では使用しないでください。
' ======================
#If DEBUG Then
    ''' <summary>
    ''' モジュールの状態を初期化（テスト用）
    ''' </summary>
    Private Sub ResetModule()
        TerminateModule
        InitializeModule
    End Sub
    
    ''' <summary>
    ''' パフォーマンスモニターの参照を取得（テスト用）
    ''' </summary>
    Private Function GetPerformanceMonitor() As clsPerformanceMonitor
        Set GetPerformanceMonitor = performanceMonitor
    End Function
#End If

================
File: utils/modWindowsAPI.bas
================
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "modWindowsAPI"

' ======================
' Windows API宣言（レガシーサポート用）
' ======================
' 従来のAPI宣言は維持しますが、新規コードでは非推奨です。
' 代わりにインターフェースベースの実装を使用してください。
#If LegacySupport Then
    ' --- INIファイル操作 ---
    Public Declare PtrSafe Function GetPrivateProfileString Lib "kernel32" Alias "GetPrivateProfileStringA" ( _
        ByVal lpApplicationName As String, ByVal lpKeyName As Any, _
        ByVal lpDefault As String, ByVal lpReturnedString As String, _
        ByVal nSize As Long, ByVal lpFileName As String) As Long
    ' ... (その他のAPI宣言)
#End If

' ======================
' プライベート変数
' ======================
Private mConverter As ModWindowsAPIConverter
Private mIsInitialized As Boolean

' ======================
' 初期化・終了処理
' ======================
Public Sub InitializeModule()
    If mIsInitialized Then Exit Sub
    
    Set mConverter = New ModWindowsAPIConverter
    mIsInitialized = True
End Sub

Public Sub TerminateModule()
    If Not mIsInitialized Then Exit Sub
    
    Set mConverter = Nothing
    mIsInitialized = False
End Sub

' ======================
' パブリック関数
' ======================

' --- ミューテックス操作 ---
Public Function CreateMutex(ByVal lpMutexAttributes As LongPtr, _
                          ByVal bInitialOwner As Long, _
                          ByVal lpName As String) As LongPtr
    InitializeIfNeeded
    
    Dim mutex As IMutex
    Set mutex = mConverter.Mutex
    
    If mutex.CreateMutex(bInitialOwner <> 0, lpName) Then
        CreateMutex = GetHandleFromMutex(mutex)
    End If
End Function

Public Function ReleaseMutex(ByVal hMutex As LongPtr) As Long
    InitializeIfNeeded
    
    Dim mutex As IMutex
    Set mutex = mConverter.Mutex
    
    ReleaseMutex = IIf(mutex.ReleaseMutex(), 1, 0)
End Function

Public Function WaitForSingleObject(ByVal hHandle As LongPtr, _
                                  ByVal dwMilliseconds As Long) As Long
    InitializeIfNeeded
    
    Dim mutex As IMutex
    Set mutex = mConverter.Mutex
    
    WaitForSingleObject = IIf(mutex.WaitForSingleObject(dwMilliseconds), 0, &HFFFFFFFF)
End Function

' --- 暗号化操作 ---
Public Function CryptAcquireContext(ByRef phProv As LongPtr, _
                                  ByVal pszContainer As String, _
                                  ByVal pszProvider As String, _
                                  ByVal dwProvType As Long, _
                                  ByVal dwFlags As Long) As Long
    InitializeIfNeeded
    
    Dim crypto As ICryptography
    Set crypto = mConverter.Crypto
    
    CryptAcquireContext = IIf(crypto.CryptAcquireContext(pszContainer, pszProvider, dwProvType, dwFlags), 1, 0)
End Function

' ... (他の暗号化関数も同様にインターフェース経由に変更)

' --- INIファイル操作 ---
Public Function GetPrivateProfileString(ByVal lpApplicationName As String, _
                                      ByVal lpKeyName As Any, _
                                      ByVal lpDefault As String, _
                                      ByVal lpReturnedString As String, _
                                      ByVal nSize As Long, _
                                      ByVal lpFileName As String) As Long
    InitializeIfNeeded
    
    Dim iniFile As IIniFile
    Set iniFile = mConverter.IniFile
    
    Dim result As String
    result = iniFile.GetPrivateProfileString(lpApplicationName, lpKeyName, lpDefault, lpFileName)
    
    If Len(result) > 0 Then
        If Len(result) > nSize - 1 Then result = Left$(result, nSize - 1)
        Mid$(lpReturnedString, 1, Len(result)) = result
        GetPrivateProfileString = Len(result)
    End If
End Function

' --- パフォーマンスカウンター ---
Public Function QueryPerformanceCounter(ByRef lpPerformanceCount As Currency) As Long
    InitializeIfNeeded
    
    Dim perfCounter As IPerformanceCounter
    Set perfCounter = mConverter.PerformanceCounter
    
    QueryPerformanceCounter = IIf(perfCounter.QueryPerformanceCounter(lpPerformanceCount), 1, 0)
End Function

Public Function QueryPerformanceFrequency(ByRef lpFrequency As Currency) As Long
    InitializeIfNeeded
    
    Dim perfCounter As IPerformanceCounter
    Set perfCounter = mConverter.PerformanceCounter
    
    QueryPerformanceFrequency = IIf(perfCounter.QueryPerformanceFrequency(lpFrequency), 1, 0)
End Function

' --- スリープ操作 ---
Public Sub Sleep(ByVal dwMilliseconds As Long)
    InitializeIfNeeded
    
    Dim sleeper As ISleep
    Set sleeper = mConverter.Sleep
    
    sleeper.Sleep dwMilliseconds
End Sub

' ======================
' プライベート関数
' ======================
Private Sub InitializeIfNeeded()
    If Not mIsInitialized Then InitializeModule
End Sub

Private Function GetHandleFromMutex(ByVal mutex As IMutex) As LongPtr
    ' 実装クラス固有のハンドル取得
    If TypeOf mutex Is MutexImpl Then
        GetHandleFromMutex = DirectCast(mutex, MutexImpl).GetMutexHandle()
    End If
End Function

' ======================
' エラー処理
' ======================
Public Function MapWindowsErrorToAppError(ByVal windowsError As Long) As ErrorCode
    Select Case windowsError
        Case 2, 3 ' ERROR_FILE_NOT_FOUND, ERROR_PATH_NOT_FOUND
            MapWindowsErrorToAppError = ErrFileNotFound
        Case 5 ' ERROR_ACCESS_DENIED
            MapWindowsErrorToAppError = ErrFileAccessDenied
        Case 32 ' ERROR_SHARING_VIOLATION
            MapWindowsErrorToAppError = ErrFileAccessDenied
        Case 8, 14 ' ERROR_NOT_ENOUGH_MEMORY, ERROR_OUTOFMEMORY
            MapWindowsErrorToAppError = ErrSystemOutOfMemory
        Case Else
            MapWindowsErrorToAppError = ErrUnexpected
    End Select
End Function

' ======================
' テストサポート機能
' ======================
#If DEBUG Then
    Public Function TestAPIAvailability() As Boolean
        InitializeIfNeeded
        
        Dim result As Boolean
        result = True
        
        ' 基本的なAPI機能のテスト
        Dim counter As Currency
        result = result And (QueryPerformanceCounter(counter) <> 0)
        
        ' ファイル操作APIのテスト
        Dim attr As Long
        attr = GetFileAttributes("C:\")
        result = result And (attr <> INVALID_FILE_ATTRIBUTES)
        
        TestAPIAvailability = result
    End Function
    
    Public Sub ResetModule()
        TerminateModule
        InitializeModule
    End Sub
#End If

================
File: utils/ModWindowsAPIConverter.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "ModWindowsAPIConverter"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

''' <summary>
''' modWindowsAPIの関数呼び出しを新しいインターフェースベースの実装に変換するヘルパークラス
''' </summary>
''' <remarks>
''' このクラスは、従来のmodWindowsAPI関数呼び出しを新しいインターフェースベースの
''' 実装に橋渡しする機能を提供します。既存のコードとの互換性を維持しながら、
''' 新しいインターフェースベースの実装への段階的な移行を支援します。
''' </remarks>

Private mMutex As IMutex
Private mCrypto As ICryptography
Private mIniFile As IIniFile
Private mPerformanceCounter As IPerformanceCounter
Private mEventLog As IEventLog
Private mSleep As ISleep

' エラー情報の保持用
Private mLastError As Long
Private mLock As clsLock

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    Set mLock = New clsLock
    
    ' 各インターフェースの実装クラスをインスタンス化
    Set mMutex = New MutexImpl
    Set mCrypto = New CryptographyImpl
    Set mIniFile = New IniFileImpl
    Set mPerformanceCounter = New PerformanceCounterImpl
    Set mEventLog = New EventLogImpl
    Set mSleep = New SleepImpl
End Sub

Private Sub Class_Terminate()
    Set mLock = Nothing
    Set mMutex = Nothing
    Set mCrypto = Nothing
    Set mIniFile = Nothing
    Set mPerformanceCounter = Nothing
    Set mEventLog = Nothing
    Set mSleep = Nothing
End Sub

' ======================
' パブリックメソッド
' ======================

''' <summary>
''' 最後に発生したWin32エラーコードを取得します
''' </summary>
Public Property Get LastError() As Long
    LastError = mLastError
End Property

''' <summary>
''' ミューテックスインターフェースを取得します
''' </summary>
Public Property Get Mutex() As IMutex
    Set Mutex = mMutex
End Property

''' <summary>
''' 暗号化インターフェースを取得します
''' </summary>
Public Property Get Crypto() As ICryptography
    Set Crypto = mCrypto
End Property

''' <summary>
''' INIファイルインターフェースを取得します
''' </summary>
Public Property Get IniFile() As IIniFile
    Set IniFile = mIniFile
End Property

''' <summary>
''' パフォーマンスカウンターインターフェースを取得します
''' </summary>
Public Property Get PerformanceCounter() As IPerformanceCounter
    Set PerformanceCounter = mPerformanceCounter
End Property

''' <summary>
''' イベントログインターフェースを取得します
''' </summary>
Public Property Get EventLog() As IEventLog
    Set EventLog = mEventLog
End Property

''' <summary>
''' スリープインターフェースを取得します
''' </summary>
Public Property Get Sleep() As ISleep
    Set Sleep = mSleep
End Property

' ======================
' エラー処理
' ======================
Private Sub UpdateLastError()
    #If Win64 Then
        mLastError = CLng(CreateObject("WScript.Shell").Environment("PROCESS")("ERROR_CODE"))
    #Else
        mLastError = Err.LastDllError
    #End If
End Sub

' ======================
' テストサポート機能
' ======================
#If DEBUG Then
    Public Sub ResetInterfaces()
        Class_Terminate
        Class_Initialize
    End Sub
    
    Public Function ValidateInterfaces() As Boolean
        ValidateInterfaces = Not (mMutex Is Nothing Or _
                                mCrypto Is Nothing Or _
                                mIniFile Is Nothing Or _
                                mPerformanceCounter Is Nothing Or _
                                mEventLog Is Nothing Or _
                                mSleep Is Nothing)
    End Function
#End If

================
File: utils/MsgBoxNotifier.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "MsgBoxNotifier"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "MsgBoxNotifier"

' ======================
' インターフェース実装
' ======================
Implements IUserNotifier

' ======================
' プライベート変数
' ======================
Private mNotificationStyle As VbMsgBoxStyle
Private mDefaultTitle As String
Private mLock As ILock
Private mPerformanceMonitor As IPerformanceMonitor
Private mAppConfig As IAppConfig
Private mMessageFormatter As IMessageFormatter

' ======================
' 型定義
' ======================
Private Type NotificationContext
    ErrorDetail As ErrorInfo
    Buttons As VbMsgBoxStyle
    Title As String
    Message As String
    Icon As VbMsgBoxStyle
    IsLocked As Boolean
    Result As VbMsgBoxResult
    ExecutionTime As Double
End Type

' ======================
' 初期化・終了処理
' ======================
''' <summary>
''' クラスの初期化を行います。
''' </summary>
''' <param name="lock">排他制御を提供するILockインターフェース</param>
''' <param name="performanceMonitor">パフォーマンス監視を提供するIPerformanceMonitorインターフェース</param>
''' <param name="appConfig">アプリケーション設定を提供するIAppConfigインターフェース</param>
''' <param name="messageFormatter">メッセージフォーマットを提供するIMessageFormatterインターフェース</param>
Public Sub Initialize(ByVal lock As ILock, _
                     ByVal performanceMonitor As IPerformanceMonitor, _
                     ByVal appConfig As IAppConfig, _
                     ByVal messageFormatter As IMessageFormatter)
    If lock Is Nothing Or performanceMonitor Is Nothing Or _
       appConfig Is Nothing Or messageFormatter Is Nothing Then
        Err.Raise 5, MODULE_NAME & ".Initialize", "必要なインターフェースがNothingです。"
    End If
    
    mNotificationStyle = vbOKOnly Or vbInformation
    mDefaultTitle = "エラー"
    Set mLock = lock
    Set mPerformanceMonitor = performanceMonitor
    Set mAppConfig = appConfig
    Set mMessageFormatter = messageFormatter
End Sub

Private Sub Class_Terminate()
    Set mLock = Nothing
    Set mPerformanceMonitor = Nothing
End Sub

' ======================
' IUserNotifier実装
' ======================
Private Function IUserNotifier_Notify(ByRef errorDetail As ErrorInfo, _
                                   Optional ByVal buttons As VbMsgBoxStyle = vbOKOnly, _
                                   Optional ByVal title As String = "エラー") As VbMsgBoxResult
    ' パフォーマンス計測開始
    mPerformanceMonitor.StartMeasurement "Notify"
    
    ' 通知コンテキストの初期化
    Dim context As NotificationContext
    context.ErrorDetail = errorDetail
    context.Buttons = buttons
    context.Title = IIf(title = "", mDefaultTitle, title)

    ' ロック取得
    On Error Resume Next
    mLock.AcquireLock
    context.IsLocked = (Err.Number = 0)
    On Error GoTo 0

    ' 通知処理の実行
    If TryPrepareNotification(context) Then
        context.Result = ShowNotification(context)
    Else
        ' 通知準備に失敗した場合のフォールバック
        context.Result = vbAbort
    End If

    ' クリーンアップ処理
    If context.IsLocked Then
        mLock.ReleaseLock
    End If

    ' パフォーマンス計測終了
    mPerformanceMonitor.EndMeasurement "Notify"
    
    IUserNotifier_Notify = context.Result
End Function

Private Property Let IUserNotifier_NotificationStyle(ByVal style As VbMsgBoxStyle)
    mNotificationStyle = style
End Property

Private Property Get IUserNotifier_NotificationStyle() As VbMsgBoxStyle
    IUserNotifier_NotificationStyle = mNotificationStyle
End Property

Private Property Let IUserNotifier_DefaultTitle(ByVal title As String)
    mDefaultTitle = title
End Property

Private Property Get IUserNotifier_DefaultTitle() As String
    IUserNotifier_DefaultTitle = mDefaultTitle
End Property

' ======================
' プライベートメソッド
' ======================
Private Function TryPrepareNotification(ByRef context As NotificationContext) As Boolean
    On Error GoTo ErrorHandler
    
    mPerformanceMonitor.StartMeasurement "PrepareNotification"
    
    ' アイコンの設定
    context.Icon = GetIconForErrorCategory(context.ErrorDetail.Category)
    
    ' メッセージの組み立て
    context.Message = mMessageFormatter.FormatMessage("", context.ErrorDetail)
    
    mPerformanceMonitor.EndMeasurement "PrepareNotification"
    TryPrepareNotification = True
    Exit Function
    
ErrorHandler:
    ' エラー情報のログ記録
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "通知の準備中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "TryPrepareNotification"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    If Not mPerformanceMonitor Is Nothing Then
        mPerformanceMonitor.EndMeasurement "PrepareNotification"
    End If
    
    TryPrepareNotification = False
End Function

Private Function ShowNotification(ByRef context As NotificationContext) As VbMsgBoxResult
    On Error GoTo ErrorHandler
    
    mPerformanceMonitor.StartMeasurement "ShowNotification"
    
    ' メッセージボックスの表示（NotificationStyleを適用）
    ShowNotification = MsgBox(context.Message, _
                            mNotificationStyle Or context.Buttons Or context.Icon, _
                            context.Title)
    
    mPerformanceMonitor.EndMeasurement "ShowNotification"
    Exit Function
    
ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "メッセージボックスの表示中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "ShowNotification"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    If Not mPerformanceMonitor Is Nothing Then
        mPerformanceMonitor.EndMeasurement "ShowNotification"
    End If
    
    ShowNotification = vbAbort
End Function

Private Function GetIconForErrorCategory(ByVal category As ErrorCodeCategory) As VbMsgBoxStyle
    Select Case category
        Case ECSystem, ECSecurity
            GetIconForErrorCategory = vbCritical
        Case ECDatabase, ECNetwork
            GetIconForErrorCategory = vbExclamation
        Case Else
            GetIconForErrorCategory = vbInformation
    End Select
End Function


' ======================
' テストサポート機能
' ======================
#If DEBUG Then
    ' === 通知テスト ===
    Public Sub TestNotification()
        ' テスト用の依存性を注入
        Dim testLock As New MockLock
        Dim testMonitor As New MockPerformanceMonitor
        Dim testConfig As New MockAppConfig
        Dim testFormatter As New DefaultMessageFormatter
        
        ' 初期化
        Initialize testLock, testMonitor, testConfig, testFormatter
        
        ' テスト用エラー情報の作成
        Dim testError As ErrorInfo
        With testError
            .Code = ErrUnexpected
            .Description = "テスト通知"
            .Category = ECGeneral
            .Source = MODULE_NAME
            .ProcedureName = "TestNotification"
            .StackTrace = "テストスタックトレース"
            .OccurredAt = Now
        End With
        
        ' 各種スタイルでのテスト
        TestNotificationStyle testError, vbOKOnly, "OKのみ"
        TestNotificationStyle testError, vbOKCancel, "OK/キャンセル"
        TestNotificationStyle testError, vbYesNo, "はい/いいえ"
    End Sub
    
    Private Sub TestNotificationStyle(ByRef testError As ErrorInfo, _
                                    ByVal style As VbMsgBoxStyle, _
                                    ByVal description As String)
        mPerformanceMonitor.StartMeasurement "NotificationTest_" & description
        
        Dim result As VbMsgBoxResult
        result = IUserNotifier_Notify(testError, style, "テスト: " & description)
        
        mPerformanceMonitor.EndMeasurement "NotificationTest_" & description
        
        Debug.Print description & " テスト結果:"
        Debug.Print "  - 実行時間: " & _
                   mPerformanceMonitor.GetMeasurement("NotificationTest_" & description)
        Debug.Print "  - ユーザー応答: " & result
    End Sub
    
    ' === リソース管理テスト ===
    Public Sub TestResourceManagement()
        Dim lockCountBefore As Long
        lockCountBefore = GetActiveLockCount()
        
        Dim testError As ErrorInfo
        With testError
            .Code = ErrUnexpected
            .Description = "リソース管理テスト"
            .Category = ECGeneral
            .Source = MODULE_NAME
            .ProcedureName = "TestResourceManagement"
            .StackTrace = ""
            .OccurredAt = Now
        End With
        
        mPerformanceMonitor.StartMeasurement "ResourceTest"
        
        On Error Resume Next
        IUserNotifier_Notify testError, vbOKOnly, "リソーステスト"
        
        mPerformanceMonitor.EndMeasurement "ResourceTest"
        
        Dim lockCountAfter As Long
        lockCountAfter = GetActiveLockCount()
        
        Debug.Print "リソース管理テスト結果:"
        Debug.Print "  - 実行時間: " & _
                   mPerformanceMonitor.GetMeasurement("ResourceTest")
        
        If lockCountBefore <> lockCountAfter Then
            Debug.Print "  警告: リソースリークの可能性があります"
            Debug.Print "  - ロック数 Before: " & lockCountBefore
            Debug.Print "  - ロック数 After: " & lockCountAfter
        End If
    End Sub
    
    ' === パフォーマンスレポート ===
    Public Function GetPerformanceReport() As String
        If Not mPerformanceMonitor Is Nothing Then
            GetPerformanceReport = mPerformanceMonitor.GetAllMeasurements()
        Else
            GetPerformanceReport = "パフォーマンスモニターが初期化されていません。"
        End If
    End Function
    
    ' === 内部状態取得 ===
    Private Function GetActiveLockCount() As Long
        Dim result As Long
        result = 0
        
        If Not mLock Is Nothing Then
            If mLock.IsLocked Then
                result = result + 1
            End If
        End If
        
        GetActiveLockCount = result
    End Function
#End If

================
File: utils/QueueImpl.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "QueueImpl"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements IQueue

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "QueueImpl"

' ======================
' メンバ変数
' ======================
Private mItems As Collection

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    Set mItems = New Collection
End Sub

Private Sub Class_Terminate()
    Set mItems = Nothing
End Sub

' ======================
' IQueue実装
' ======================
Private Sub IQueue_Enqueue(ByVal item As Variant)
    mItems.Add item
End Sub

Private Function IQueue_Dequeue() As Variant
    If mItems.Count = 0 Then
        Err.Raise vbObjectError + 1, MODULE_NAME, "キューが空です"
    End If
    
    If IsObject(mItems(1)) Then
        Set IQueue_Dequeue = mItems(1)
    Else
        IQueue_Dequeue = mItems(1)
    End If
    mItems.Remove 1
End Function

Private Function IQueue_IsEmpty() As Boolean
    IQueue_IsEmpty = (mItems.Count = 0)
End Function

Private Property Get IQueue_Count() As Long
    IQueue_Count = mItems.Count
End Property

Private Function IQueue_Peek() As Variant
    If mItems.Count = 0 Then
        Err.Raise vbObjectError + 1, MODULE_NAME, "キューが空です"
    End If
    
    If IsObject(mItems(1)) Then
        Set IQueue_Peek = mItems(1)
    Else
        IQueue_Peek = mItems(1)
    End If
End Function

Private Sub IQueue_Clear()
    Set mItems = New Collection
End Sub

================
File: utils/repomix-output.txt
================
This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-27T00:46:16.815Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
clsCallStack.cls
modCommon.bas
modDateUtils.bas
modMathUtils.bas
modStackTrace.bas
modStringUtils.bas
modWindowsAPI.bas
ModWindowsAPIConverter.cls
MsgBoxNotifier.cls
QueueImpl.cls
SleepImpl.cls
StackImpl.cls
StackTraceImpl.cls
VBScriptRegexEngine.cls

================================================================
Files
================================================================

================
File: clsCallStack.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "clsCallStack"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

'==========================
' モジュール情報
'==========================
Private Const MODULE_NAME As String = "clsCallStack"

'==========================
' メンバ変数
'==========================
Private mStackTrace As IStackTrace
Private mLock As clsLock

'==========================
' 初期化・終了処理
'==========================
Private Sub Class_Initialize()
    Set mStackTrace = New StackTraceImpl
    Set mLock = New clsLock
End Sub

Private Sub Class_Terminate()
    Set mStackTrace = Nothing
    Set mLock = Nothing
End Sub

'==========================
' パブリックメソッド
'==========================

''' <summary>
''' 呼び出し履歴にエントリを追加
''' </summary>
''' <param name="ModuleName">モジュール名</param>
''' <param name="ProcedureName">プロシージャ名</param>
''' <remarks>
''' スタックトレースの最大深さを超えた場合、エラーを発生させずに無視します
''' </remarks>
Public Sub Push(ByVal ModuleName As String, ByVal ProcedureName As String)
    mLock.AcquireLock
    On Error GoTo ErrorHandler
    
    mStackTrace.PushStackEntry ModuleName, ProcedureName
    
    mLock.ReleaseLock
    Exit Sub

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = modErrorCodes.ErrUnexpected
        .Description = "Push操作中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "Push"
        .StackTrace = mStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    mLock.ReleaseLock
    Resume Next
End Sub

''' <summary>
''' 呼び出し履歴から最後のエントリを取得して削除
''' </summary>
''' <returns>最後に追加されたプロシージャの完全修飾名、またはスタックが空の場合は空文字列</returns>
Public Function Pop() As String
    mLock.AcquireLock
    On Error GoTo ErrorHandler
    
    Pop = mStackTrace.PopStackEntry()
    
    mLock.ReleaseLock
    Exit Function

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = modErrorCodes.ErrUnexpected
        .Description = "Pop操作中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "Pop"
        .StackTrace = mStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    mLock.ReleaseLock
    Resume Next
End Function

''' <summary>
''' 現在のスタックトレースを文字列として取得
''' </summary>
''' <returns>スタックトレースの文字列表現</returns>
Public Property Get StackTrace() As String
    mLock.AcquireLock
    On Error GoTo ErrorHandler
    
    StackTrace = mStackTrace.GetStackTrace()
    
    mLock.ReleaseLock
    Exit Property

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = modErrorCodes.ErrUnexpected
        .Description = "スタックトレース取得中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "StackTrace"
        .StackTrace = mStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    mLock.ReleaseLock
    Resume Next
End Property

''' <summary>
''' スタック内のエントリ数を取得
''' </summary>
''' <returns>現在のスタックの深さ</returns>
Public Property Get Count() As Long
    Count = mStackTrace.StackDepth
End Property

'==========================
' テストサポート（開発環境用）
'==========================
#If DEBUG Then
    Public Sub SetStackTrace(ByVal stackTrace As IStackTrace)
        Set mStackTrace = stackTrace
    End Sub
    
    Public Function GetStackTrace() As IStackTrace
        Set GetStackTrace = mStackTrace
    End Function
#End If

================
File: modCommon.bas
================
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "modCommon"

' ======================
' アプリケーション定数
' ======================
Public Const APPLICATION_NAME As String = "MyApp"
Public Const APPLICATION_VERSION As String = "1.0.0"
Public Const DEFAULT_LOG_FILE As String = "app.log"
Public Const DEFAULT_DATE_FORMAT As String = "yyyy/MM/dd"
Public Const DEFAULT_DATETIME_FORMAT As String = "yyyy/MM/dd HH:nn:ss"
Public Const MAX_RETRY_COUNT As Integer = 3

' ======================
' ログ関連の定義
' ======================
Public Enum LogLevel
    LevelDebug
    LevelInfo
    LevelWarning
    LevelError
    LevelFatal
End Enum

Public Enum LogDestination
    DestNone
    DestFile
    DestDatabase
    DestEventLog
    DestConsole
    DestEmail
End Enum

' ======================
' セキュリティレベル
' ======================
Public Enum SecurityLevel
    LevelLow = 1
    LevelMedium = 2
    LevelHigh = 3
    LevelExtreme = 4
End Enum

' ======================
' ファイルアクセスモード
' ======================
Public Enum FileAccessMode
    ModeReadOnly = 1
    ModeReadWrite = 2
    ModeAppend = 3
    ModeExclusive = 4
End Enum

' ======================
' 型定義
' ======================
Public Type ErrorInfo
    Code As ErrorCode
    Category As ErrorCodeCategory
    Description As String
    Source As String
    ProcedureName As String
    StackTrace As String
    OccurredAt As Date
    AdditionalInfo As String
End Type

Public Type FileInfo
    Name As String
    Path As String
    Size As Long
    Created As Date
    LastModified As Date
    FileType As String
    Attributes As Long
End Type

' ======================
' モジュール変数
' ======================
Private mPerformanceMonitor As clsPerformanceMonitor
Private mIsInitialized As Boolean
Private mLock As clsLock

' ======================
' 初期化・終了処理
' ======================
Public Property Get IsInitialized() As Boolean
    IsInitialized = mIsInitialized
End Property

Public Sub InitializeModule()
    If mIsInitialized Then Exit Sub
    
    ' スタックトレースモジュールの初期化
    modStackTrace.InitializeModule
    
    ' パフォーマンスモニターの初期化
    Set mPerformanceMonitor = New clsPerformanceMonitor
    Set mLock = New clsLock
    
    ' 設定の初期化
    modConfig.InitializeModule
    
    mIsInitialized = True
End Sub

Public Sub TerminateModule()
    If Not mIsInitialized Then Exit Sub
    
    ' 設定の終了処理
    modConfig.TerminateModule
    
    ' パフォーマンスモニターの解放
    Set mPerformanceMonitor = Nothing
    Set mLock = Nothing
    
    mIsInitialized = False
End Sub

' ======================
' エラーハンドリング
' ======================
Public Sub HandleError(ByRef errInfo As ErrorInfo)
    If Not mIsInitialized Then InitializeModule
    
    mLock.AcquireLock
    On Error GoTo ErrorHandler
    
    ' パフォーマンスモニタリング開始
    If Not mPerformanceMonitor Is Nothing Then
        mPerformanceMonitor.StartMeasurement "ErrorHandling_" & errInfo.Code
    End If
    
    ' エラー情報の補完
    With errInfo
        If .OccurredAt = #12:00:00 AM# Then .OccurredAt = Now
        If .Category = 0 Then .Category = modErrorCodes.GetErrorCategory(.Code)
        If Len(.StackTrace) = 0 Then .StackTrace = modStackTrace.GetStackTrace()
    End With
    
    ' エラー処理をmodErrorに委譲
    modError.HandleError errInfo
    
    ' パフォーマンスモニタリング終了
    If Not mPerformanceMonitor Is Nothing Then
        mPerformanceMonitor.EndMeasurement "ErrorHandling_" & errInfo.Code
    End If
    
    mLock.ReleaseLock
    Exit Sub

ErrorHandler:
    If Not mLock Is Nothing Then mLock.ReleaseLock
    Err.Raise Err.Number, Err.Source, "HandleError中にエラーが発生しました: " & Err.Description
End Sub

' ======================
' テストサポート機能（開発環境専用）
' 警告: これらのメソッドは開発時のテスト目的でのみ使用し、
' 本番環境では使用しないでください。
' ======================
#If DEBUG Then
    Private Sub ResetModule()
        ' モジュールの状態を初期化（テスト用）
        TerminateModule
        InitializeModule
    End Sub
    
    Private Function GetPerformanceMonitor() As clsPerformanceMonitor
        ' パフォーマンスモニターの参照を取得（テスト用）
        Set GetPerformanceMonitor = mPerformanceMonitor
    End Function
#End If

================
File: modDateUtils.bas
================
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "modDateUtils"

' ======================
' 定数定義
' ======================
Private Const DEFAULT_DATE_FORMAT As String = "yyyy/mm/dd"
Private Const DEFAULT_TIME_FORMAT As String = "hh:nn:ss"
Private Const DEFAULT_DATETIME_FORMAT As String = "yyyy/mm/dd hh:nn:ss"

' ======================
' プライベート変数
' ======================
Private performanceMonitor As clsPerformanceMonitor
Private isInitialized As Boolean

' ======================
' 初期化・終了処理
' ======================
Public Sub InitializeModule()
    If isInitialized Then Exit Sub
    
    Set performanceMonitor = New clsPerformanceMonitor
    isInitialized = True
End Sub

Public Sub TerminateModule()
    If Not isInitialized Then Exit Sub
    
    Set performanceMonitor = Nothing
    isInitialized = False
End Sub

' ======================
' 公開関数
' ======================

''' <summary>
''' 日付の妥当性を確認します
''' </summary>
''' <param name="testDate">確認する日付</param>
''' <returns>有効な日付の場合True</returns>
Public Function IsValidDate(ByVal testDate As Variant) As Boolean
    If Not isInitialized Then InitializeModule
    
    If Not performanceMonitor Is Nothing Then
        performanceMonitor.StartMeasurement "IsValidDate"
    End If
    
    On Error Resume Next
    IsValidDate = IsDate(testDate)
    On Error GoTo 0
    
    If Not performanceMonitor Is Nothing Then
        performanceMonitor.EndMeasurement "IsValidDate"
    End If
End Function

''' <summary>
''' 日付に指定された期間を加算します
''' </summary>
''' <param name="interval">期間の単位</param>
''' <param name="number">加算する数</param>
''' <param name="dateValue">対象の日付</param>
''' <returns>加算後の日付</returns>
Public Function DateAdd(ByVal interval As String, ByVal number As Double, _
                      ByVal dateValue As Date) As Date
    If Not isInitialized Then InitializeModule
    
    If Not performanceMonitor Is Nothing Then
        performanceMonitor.StartMeasurement "DateAdd"
    End If
    
    On Error GoTo ErrorHandler
    
    DateAdd = VBA.DateAdd(interval, number, dateValue)
    
    If Not performanceMonitor Is Nothing Then
        performanceMonitor.EndMeasurement "DateAdd"
    End If
    Exit Function

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "日付の加算中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "DateAdd"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    If Not performanceMonitor Is Nothing Then
        performanceMonitor.EndMeasurement "DateAdd"
    End If
    DateAdd = dateValue
End Function

''' <summary>
''' 2つの日付の差分を計算します
''' </summary>
''' <param name="interval">期間の単位</param>
''' <param name="date1">日付1</param>
''' <param name="date2">日付2</param>
''' <returns>日付の差分</returns>
Public Function DateDiff(ByVal interval As String, ByVal date1 As Date, _
                       ByVal date2 As Date) As Long
    If Not isInitialized Then InitializeModule
    
    If Not performanceMonitor Is Nothing Then
        performanceMonitor.StartMeasurement "DateDiff"
    End If
    
    On Error GoTo ErrorHandler
    
    DateDiff = VBA.DateDiff(interval, date1, date2)
    
    If Not performanceMonitor Is Nothing Then
        performanceMonitor.EndMeasurement "DateDiff"
    End If
    Exit Function

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "日付の差分計算中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "DateDiff"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    If Not performanceMonitor Is Nothing Then
        performanceMonitor.EndMeasurement "DateDiff"
    End If
    DateDiff = 0
End Function

''' <summary>
''' 日付を指定された形式でフォーマットします
''' </summary>
''' <param name="dateValue">対象の日付</param>
''' <param name="format">フォーマット文字列（オプション）</param>
''' <returns>フォーマットされた日付文字列</returns>
Public Function FormatDate(ByVal dateValue As Date, _
                         Optional ByVal format As String = DEFAULT_DATE_FORMAT) As String
    If Not isInitialized Then InitializeModule
    
    If Not performanceMonitor Is Nothing Then
        performanceMonitor.StartMeasurement "FormatDate"
    End If
    
    On Error GoTo ErrorHandler
    
    FormatDate = Format$(dateValue, format)
    
    If Not performanceMonitor Is Nothing Then
        performanceMonitor.EndMeasurement "FormatDate"
    End If
    Exit Function

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "日付のフォーマット中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "FormatDate"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    If Not performanceMonitor Is Nothing Then
        performanceMonitor.EndMeasurement "FormatDate"
    End If
    FormatDate = Format$(dateValue, DEFAULT_DATE_FORMAT)
End Function

''' <summary>
''' 現在の日時を取得します
''' </summary>
''' <returns>現在の日時</returns>
Public Function GetCurrentDateTime() As Date
    If Not isInitialized Then InitializeModule
    GetCurrentDateTime = Now
End Function

''' <summary>
''' 指定された日付が営業日かどうかを確認します
''' </summary>
''' <param name="dateValue">確認する日付</param>
''' <returns>営業日の場合True</returns>
Public Function IsBusinessDay(ByVal dateValue As Date) As Boolean
    If Not isInitialized Then InitializeModule
    
    ' 土曜日(7)または日曜日(1)の場合はFalse
    IsBusinessDay = Not (Weekday(dateValue, vbSunday) = 1 Or _
                        Weekday(dateValue, vbSunday) = 7)
End Function

' ======================
' テストサポート機能
' 警告: これらのメソッドは開発時のテスト目的でのみ使用し、
' 本番環境では使用しないでください。
' ======================
#If DEBUG Then
    ''' <summary>
    ''' モジュールの状態を初期化（テスト用）
    ''' </summary>
    Private Sub ResetModule()
        TerminateModule
        InitializeModule
    End Sub
    
    ''' <summary>
    ''' パフォーマンスモニターの参照を取得（テスト用）
    ''' </summary>
    Private Function GetPerformanceMonitor() As clsPerformanceMonitor
        Set GetPerformanceMonitor = performanceMonitor
    End Function
#End If

================
File: modMathUtils.bas
================
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "modMathUtils"

' ======================
' 定数定義
' ======================
Private Const EPSILON As Double = 0.0000000001 ' 浮動小数点比較用の許容誤差

' ======================
' プライベート変数
' ======================
Private performanceMonitor As clsPerformanceMonitor
Private isInitialized As Boolean

' ======================
' 初期化・終了処理
' ======================
Public Sub InitializeModule()
    If isInitialized Then Exit Sub
    
    Set performanceMonitor = New clsPerformanceMonitor
    isInitialized = True
End Sub

Public Sub TerminateModule()
    If Not isInitialized Then Exit Sub
    
    Set performanceMonitor = Nothing
    isInitialized = False
End Sub

' ======================
' 公開関数
' ======================

''' <summary>
''' 安全な除算を行います
''' </summary>
''' <param name="numerator">分子</param>
''' <param name="denominator">分母</param>
''' <param name="defaultValue">分母が0の場合の戻り値</param>
''' <returns>除算結果、またはデフォルト値</returns>
Public Function SafeDivide(ByVal numerator As Double, ByVal denominator As Double, _
                         Optional ByVal defaultValue As Variant = 0) As Variant
    If Not isInitialized Then InitializeModule
    
    If Not performanceMonitor Is Nothing Then
        performanceMonitor.StartMeasurement "SafeDivide"
    End If
    
    On Error GoTo ErrorHandler
    
    If Abs(denominator) < EPSILON Then
        ' 分母が0の場合の警告を出力
        Dim errDetail As ErrorInfo
        With errDetail
            .Code = ErrDivisionByZero
            .Description = "分母が0のため、デフォルト値" & CStr(defaultValue) & "を返します。(分子: " & CStr(numerator) & ")"
            .Category = ECGeneral
            .Source = MODULE_NAME
            .ProcedureName = "SafeDivide"
            .StackTrace = modStackTrace.GetStackTrace()
            .OccurredAt = Now
        End With
        modError.HandleError errDetail
        
        SafeDivide = defaultValue
    Else
        SafeDivide = numerator / denominator
    End If
    
    If Not performanceMonitor Is Nothing Then
        performanceMonitor.EndMeasurement "SafeDivide"
    End If
    Exit Function

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "除算中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "SafeDivide"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    If Not performanceMonitor Is Nothing Then
        performanceMonitor.EndMeasurement "SafeDivide"
    End If
    SafeDivide = defaultValue
End Function

''' <summary>
''' 数値が指定された範囲内かどうかを確認します
''' </summary>
''' <param name="value">確認する値</param>
''' <param name="minValue">最小値</param>
''' <param name="maxValue">最大値</param>
''' <returns>範囲内の場合True</returns>
Public Function IsInRange(ByVal value As Double, ByVal minValue As Double, _
                        ByVal maxValue As Double) As Boolean
    If Not isInitialized Then InitializeModule
    
    IsInRange = (value >= minValue And value <= maxValue)
End Function

''' <summary>
''' 値を指定された範囲内に収めます
''' </summary>
''' <param name="value">対象の値</param>
''' <param name="minValue">最小値</param>
''' <param name="maxValue">最大値</param>
''' <returns>範囲内に収められた値</returns>
Public Function Clamp(ByVal value As Double, ByVal minValue As Double, _
                     ByVal maxValue As Double) As Double
    If Not isInitialized Then InitializeModule
    
    If value < minValue Then
        Clamp = minValue
    ElseIf value > maxValue Then
        Clamp = maxValue
    Else
        Clamp = value
    End If
End Function

''' <summary>
''' 指定された精度で四捨五入します
''' </summary>
''' <param name="value">対象の値</param>
''' <param name="decimals">小数点以下の桁数</param>
''' <returns>四捨五入された値</returns>
Public Function Round(ByVal value As Double, Optional ByVal decimals As Long = 0) As Double
    If Not isInitialized Then InitializeModule
    
    Dim factor As Double
    factor = 10 ^ decimals
    Round = Fix(value * factor + 0.5) / factor
End Function

' ======================
' テストサポート機能
' 警告: これらのメソッドは開発時のテスト目的でのみ使用し、
' 本番環境では使用しないでください。
' ======================
#If DEBUG Then
    ''' <summary>
    ''' モジュールの状態を初期化（テスト用）
    ''' </summary>
    Private Sub ResetModule()
        TerminateModule
        InitializeModule
    End Sub
    
    ''' <summary>
    ''' パフォーマンスモニターの参照を取得（テスト用）
    ''' </summary>
    Private Function GetPerformanceMonitor() As clsPerformanceMonitor
        Set GetPerformanceMonitor = performanceMonitor
    End Function
#End If

================
File: modStackTrace.bas
================
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "modStackTrace"

' ======================
' 定数定義
' ======================
Private Const MAX_STACK_TRACE_DEPTH As Long = 10 ' スタックトレースの最大深さ

' ======================
' プライベート変数
' ======================
Private stack As Collection
Private isInitialized As Boolean
Private mLock As clsLock

' ======================
' 初期化・終了処理
' ======================
Public Property Get IsInitialized() As Boolean
    IsInitialized = isInitialized
End Property

Public Sub InitializeModule()
    If isInitialized Then Exit Sub
    
    Set stack = New Collection
    Set mLock = New clsLock
    isInitialized = True
End Sub

Public Sub TerminateModule()
    If Not isInitialized Then Exit Sub
    
    Set stack = Nothing
    Set mLock = Nothing
    isInitialized = False
End Sub

' ======================
' パブリックメソッド
' ======================
Public Sub PushStackEntry(ByVal ModuleName As String, ByVal ProcedureName As String)
    If Not isInitialized Then InitializeModule
    
    mLock.AcquireLock
    On Error GoTo ErrorHandler
    
    If stack.Count < MAX_STACK_TRACE_DEPTH Then
        stack.Add ModuleName & "." & ProcedureName
    End If
    
    mLock.ReleaseLock
    Exit Sub

ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = ErrStackTracePushFailed
        .Description = "スタックトレースへのエントリ追加に失敗しました。"
        .Category = ECSystem
        .Source = MODULE_NAME
        .ProcedureName = "PushStackEntry"
        .StackTrace = "モジュール: " & ModuleName & ", プロシージャ: " & ProcedureName
        .OccurredAt = Now
    End With
    If Not mLock Is Nothing Then mLock.ReleaseLock
    modError.HandleError errInfo
End Sub

Public Function PopStackEntry() As String
    If Not isInitialized Then Exit Function
    
    mLock.AcquireLock
    On Error GoTo ErrorHandler
    
    Dim result As String
    If stack.Count > 0 Then
        result = stack(stack.Count)
        stack.Remove stack.Count
        PopStackEntry = result
    End If
    
    mLock.ReleaseLock
    Exit Function

ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = ErrStackTracePopFailed
        .Description = "スタックトレースからのエントリ取得に失敗しました。"
        .Category = ECSystem
        .Source = MODULE_NAME
        .ProcedureName = "PopStackEntry"
        .OccurredAt = Now
    End With
    If Not mLock Is Nothing Then mLock.ReleaseLock
    modError.HandleError errInfo
End Function

Public Function GetStackTrace() As String
    If Not isInitialized Then Exit Function
    
    mLock.AcquireLock
    On Error GoTo ErrorHandler
    
    Dim i As Long
    Dim trace As String
    
    For i = stack.Count To 1 Step -1
        trace = trace & "  " & stack(i) & vbCrLf
    Next i
    
    GetStackTrace = trace
    mLock.ReleaseLock
    Exit Function

ErrorHandler:
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = ErrStackTraceGetFailed
        .Description = "スタックトレース文字列の生成に失敗しました。"
        .Category = ECSystem
        .Source = MODULE_NAME
        .ProcedureName = "GetStackTrace"
        .OccurredAt = Now
    End With
    If Not mLock Is Nothing Then mLock.ReleaseLock
    modError.HandleError errInfo
    GetStackTrace = "スタックトレースの取得に失敗しました。"
End Function

Public Property Get StackDepth() As Long
    If Not isInitialized Then Exit Property
    mLock.AcquireLock
    StackDepth = stack.Count
    mLock.ReleaseLock
End Property

' ======================
' テストサポート機能（開発環境専用）
' 警告: これらのメソッドは開発時のテスト目的でのみ使用し、
' 本番環境では使用しないでください。
' ======================
#If DEBUG Then
    ''' <summary>
    ''' スタックの内容をクリア（テスト用）
    ''' </summary>
    Private Sub ClearStack()
        If Not isInitialized Then Exit Sub
        mLock.AcquireLock
        Set stack = New Collection
        mLock.ReleaseLock
    End Sub
    
    ''' <summary>
    ''' スタックの状態が有効かどうかを検証（テスト用）
    ''' </summary>
    ''' <returns>スタックの深さが最大値以下の場合True</returns>
    Private Function ValidateStackState() As Boolean
        If Not isInitialized Then Exit Function
        mLock.AcquireLock
        ValidateStackState = (stack.Count <= MAX_STACK_TRACE_DEPTH)
        mLock.ReleaseLock
    End Function
    
    ''' <summary>
    ''' モジュールの状態を初期化（テスト用）
    ''' </summary>
    Private Sub ResetModule()
        TerminateModule
        InitializeModule
    End Sub
#End If

================
File: modStringUtils.bas
================
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "modStringUtils"

' ======================
' プライベート変数
' ======================
Private performanceMonitor As clsPerformanceMonitor
Private isInitialized As Boolean

' ======================
' 初期化・終了処理
' ======================
Public Sub InitializeModule()
    If isInitialized Then Exit Sub
    
    Set performanceMonitor = New clsPerformanceMonitor
    isInitialized = True
End Sub

Public Sub TerminateModule()
    If Not isInitialized Then Exit Sub
    
    Set performanceMonitor = Nothing
    isInitialized = False
End Sub

' ======================
' 公開関数
' ======================

''' <summary>
''' 文字列を左側からパディングします
''' </summary>
''' <param name="baseStr">対象の文字列</param>
''' <param name="totalWidth">目標の長さ</param>
''' <param name="padChar">パディング文字（オプション）</param>
''' <returns>パディングされた文字列</returns>
Public Function PadLeft(ByVal baseStr As String, ByVal totalWidth As Long, _
                      Optional ByVal padChar As String = " ") As String
    If Not isInitialized Then InitializeModule
    
    If Not performanceMonitor Is Nothing Then
        performanceMonitor.StartMeasurement "PadLeft"
    End If
    
    On Error GoTo ErrorHandler
    
    If Len(baseStr) >= totalWidth Then
        PadLeft = baseStr
    Else
        PadLeft = String(totalWidth - Len(baseStr), Left$(padChar, 1)) & baseStr
    End If
    
    If Not performanceMonitor Is Nothing Then
        performanceMonitor.EndMeasurement "PadLeft"
    End If
    Exit Function

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "文字列のパディング中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "PadLeft"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    If Not performanceMonitor Is Nothing Then
        performanceMonitor.EndMeasurement "PadLeft"
    End If
    PadLeft = baseStr
End Function

''' <summary>
''' 文字列を右側からパディングします
''' </summary>
''' <param name="baseStr">対象の文字列</param>
''' <param name="totalWidth">目標の長さ</param>
''' <param name="padChar">パディング文字（オプション）</param>
''' <returns>パディングされた文字列</returns>
Public Function PadRight(ByVal baseStr As String, ByVal totalWidth As Long, _
                       Optional ByVal padChar As String = " ") As String
    If Not isInitialized Then InitializeModule
    
    If Not performanceMonitor Is Nothing Then
        performanceMonitor.StartMeasurement "PadRight"
    End If
    
    On Error GoTo ErrorHandler
    
    If Len(baseStr) >= totalWidth Then
        PadRight = baseStr
    Else
        PadRight = baseStr & String(totalWidth - Len(baseStr), Left$(padChar, 1))
    End If
    
    If Not performanceMonitor Is Nothing Then
        performanceMonitor.EndMeasurement "PadRight"
    End If
    Exit Function

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "文字列のパディング中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "PadRight"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    If Not performanceMonitor Is Nothing Then
        performanceMonitor.EndMeasurement "PadRight"
    End If
    PadRight = baseStr
End Function

''' <summary>
''' 文字列の前後の空白を削除します
''' </summary>
''' <param name="str">対象の文字列</param>
''' <returns>トリムされた文字列</returns>
Public Function TrimString(ByVal str As String) As String
    If Not isInitialized Then InitializeModule
    
    TrimString = Trim$(str)
End Function

''' <summary>
''' 文字列を指定された区切り文字で分割します
''' </summary>
''' <param name="str">対象の文字列</param>
''' <param name="delimiter">区切り文字</param>
''' <returns>分割された文字列の配列</returns>
Public Function SplitString(ByVal str As String, ByVal delimiter As String) As Variant
    If Not isInitialized Then InitializeModule
    
    If Not performanceMonitor Is Nothing Then
        performanceMonitor.StartMeasurement "SplitString"
    End If
    
    On Error GoTo ErrorHandler
    
    SplitString = Split(str, delimiter)
    
    If Not performanceMonitor Is Nothing Then
        performanceMonitor.EndMeasurement "SplitString"
    End If
    Exit Function

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "文字列の分割中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "SplitString"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    If Not performanceMonitor Is Nothing Then
        performanceMonitor.EndMeasurement "SplitString"
    End If
    SplitString = Array()
End Function

''' <summary>
''' 文字列配列を指定された区切り文字で結合します
''' </summary>
''' <param name="arr">文字列配列</param>
''' <param name="delimiter">区切り文字</param>
''' <returns>結合された文字列</returns>
Public Function JoinStrings(ByRef arr As Variant, Optional ByVal delimiter As String = "") As String
    If Not isInitialized Then InitializeModule
    
    If Not performanceMonitor Is Nothing Then
        performanceMonitor.StartMeasurement "JoinStrings"
    End If
    
    On Error GoTo ErrorHandler
    
    JoinStrings = Join(arr, delimiter)
    
    If Not performanceMonitor Is Nothing Then
        performanceMonitor.EndMeasurement "JoinStrings"
    End If
    Exit Function

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "文字列の結合中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "JoinStrings"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    If Not performanceMonitor Is Nothing Then
        performanceMonitor.EndMeasurement "JoinStrings"
    End If
    JoinStrings = ""
End Function

' ======================
' テストサポート機能
' 警告: これらのメソッドは開発時のテスト目的でのみ使用し、
' 本番環境では使用しないでください。
' ======================
#If DEBUG Then
    ''' <summary>
    ''' モジュールの状態を初期化（テスト用）
    ''' </summary>
    Private Sub ResetModule()
        TerminateModule
        InitializeModule
    End Sub
    
    ''' <summary>
    ''' パフォーマンスモニターの参照を取得（テスト用）
    ''' </summary>
    Private Function GetPerformanceMonitor() As clsPerformanceMonitor
        Set GetPerformanceMonitor = performanceMonitor
    End Function
#End If

================
File: modWindowsAPI.bas
================
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "modWindowsAPI"

' ======================
' Windows API宣言（レガシーサポート用）
' ======================
' 従来のAPI宣言は維持しますが、新規コードでは非推奨です。
' 代わりにインターフェースベースの実装を使用してください。
#If LegacySupport Then
    ' --- INIファイル操作 ---
    Public Declare PtrSafe Function GetPrivateProfileString Lib "kernel32" Alias "GetPrivateProfileStringA" ( _
        ByVal lpApplicationName As String, ByVal lpKeyName As Any, _
        ByVal lpDefault As String, ByVal lpReturnedString As String, _
        ByVal nSize As Long, ByVal lpFileName As String) As Long
    ' ... (その他のAPI宣言)
#End If

' ======================
' プライベート変数
' ======================
Private mConverter As ModWindowsAPIConverter
Private mIsInitialized As Boolean

' ======================
' 初期化・終了処理
' ======================
Public Sub InitializeModule()
    If mIsInitialized Then Exit Sub
    
    Set mConverter = New ModWindowsAPIConverter
    mIsInitialized = True
End Sub

Public Sub TerminateModule()
    If Not mIsInitialized Then Exit Sub
    
    Set mConverter = Nothing
    mIsInitialized = False
End Sub

' ======================
' パブリック関数
' ======================

' --- ミューテックス操作 ---
Public Function CreateMutex(ByVal lpMutexAttributes As LongPtr, _
                          ByVal bInitialOwner As Long, _
                          ByVal lpName As String) As LongPtr
    InitializeIfNeeded
    
    Dim mutex As IMutex
    Set mutex = mConverter.Mutex
    
    If mutex.CreateMutex(bInitialOwner <> 0, lpName) Then
        CreateMutex = GetHandleFromMutex(mutex)
    End If
End Function

Public Function ReleaseMutex(ByVal hMutex As LongPtr) As Long
    InitializeIfNeeded
    
    Dim mutex As IMutex
    Set mutex = mConverter.Mutex
    
    ReleaseMutex = IIf(mutex.ReleaseMutex(), 1, 0)
End Function

Public Function WaitForSingleObject(ByVal hHandle As LongPtr, _
                                  ByVal dwMilliseconds As Long) As Long
    InitializeIfNeeded
    
    Dim mutex As IMutex
    Set mutex = mConverter.Mutex
    
    WaitForSingleObject = IIf(mutex.WaitForSingleObject(dwMilliseconds), 0, &HFFFFFFFF)
End Function

' --- 暗号化操作 ---
Public Function CryptAcquireContext(ByRef phProv As LongPtr, _
                                  ByVal pszContainer As String, _
                                  ByVal pszProvider As String, _
                                  ByVal dwProvType As Long, _
                                  ByVal dwFlags As Long) As Long
    InitializeIfNeeded
    
    Dim crypto As ICryptography
    Set crypto = mConverter.Crypto
    
    CryptAcquireContext = IIf(crypto.CryptAcquireContext(pszContainer, pszProvider, dwProvType, dwFlags), 1, 0)
End Function

' ... (他の暗号化関数も同様にインターフェース経由に変更)

' --- INIファイル操作 ---
Public Function GetPrivateProfileString(ByVal lpApplicationName As String, _
                                      ByVal lpKeyName As Any, _
                                      ByVal lpDefault As String, _
                                      ByVal lpReturnedString As String, _
                                      ByVal nSize As Long, _
                                      ByVal lpFileName As String) As Long
    InitializeIfNeeded
    
    Dim iniFile As IIniFile
    Set iniFile = mConverter.IniFile
    
    Dim result As String
    result = iniFile.GetPrivateProfileString(lpApplicationName, lpKeyName, lpDefault, lpFileName)
    
    If Len(result) > 0 Then
        If Len(result) > nSize - 1 Then result = Left$(result, nSize - 1)
        Mid$(lpReturnedString, 1, Len(result)) = result
        GetPrivateProfileString = Len(result)
    End If
End Function

' --- パフォーマンスカウンター ---
Public Function QueryPerformanceCounter(ByRef lpPerformanceCount As Currency) As Long
    InitializeIfNeeded
    
    Dim perfCounter As IPerformanceCounter
    Set perfCounter = mConverter.PerformanceCounter
    
    QueryPerformanceCounter = IIf(perfCounter.QueryPerformanceCounter(lpPerformanceCount), 1, 0)
End Function

Public Function QueryPerformanceFrequency(ByRef lpFrequency As Currency) As Long
    InitializeIfNeeded
    
    Dim perfCounter As IPerformanceCounter
    Set perfCounter = mConverter.PerformanceCounter
    
    QueryPerformanceFrequency = IIf(perfCounter.QueryPerformanceFrequency(lpFrequency), 1, 0)
End Function

' --- スリープ操作 ---
Public Sub Sleep(ByVal dwMilliseconds As Long)
    InitializeIfNeeded
    
    Dim sleeper As ISleep
    Set sleeper = mConverter.Sleep
    
    sleeper.Sleep dwMilliseconds
End Sub

' ======================
' プライベート関数
' ======================
Private Sub InitializeIfNeeded()
    If Not mIsInitialized Then InitializeModule
End Sub

Private Function GetHandleFromMutex(ByVal mutex As IMutex) As LongPtr
    ' 実装クラス固有のハンドル取得
    If TypeOf mutex Is MutexImpl Then
        GetHandleFromMutex = DirectCast(mutex, MutexImpl).GetMutexHandle()
    End If
End Function

' ======================
' エラー処理
' ======================
Public Function MapWindowsErrorToAppError(ByVal windowsError As Long) As ErrorCode
    Select Case windowsError
        Case 2, 3 ' ERROR_FILE_NOT_FOUND, ERROR_PATH_NOT_FOUND
            MapWindowsErrorToAppError = ErrFileNotFound
        Case 5 ' ERROR_ACCESS_DENIED
            MapWindowsErrorToAppError = ErrFileAccessDenied
        Case 32 ' ERROR_SHARING_VIOLATION
            MapWindowsErrorToAppError = ErrFileAccessDenied
        Case 8, 14 ' ERROR_NOT_ENOUGH_MEMORY, ERROR_OUTOFMEMORY
            MapWindowsErrorToAppError = ErrSystemOutOfMemory
        Case Else
            MapWindowsErrorToAppError = ErrUnexpected
    End Select
End Function

' ======================
' テストサポート機能
' ======================
#If DEBUG Then
    Public Function TestAPIAvailability() As Boolean
        InitializeIfNeeded
        
        Dim result As Boolean
        result = True
        
        ' 基本的なAPI機能のテスト
        Dim counter As Currency
        result = result And (QueryPerformanceCounter(counter) <> 0)
        
        ' ファイル操作APIのテスト
        Dim attr As Long
        attr = GetFileAttributes("C:\")
        result = result And (attr <> INVALID_FILE_ATTRIBUTES)
        
        TestAPIAvailability = result
    End Function
    
    Public Sub ResetModule()
        TerminateModule
        InitializeModule
    End Sub
#End If

================
File: ModWindowsAPIConverter.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "ModWindowsAPIConverter"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

''' <summary>
''' modWindowsAPIの関数呼び出しを新しいインターフェースベースの実装に変換するヘルパークラス
''' </summary>
''' <remarks>
''' このクラスは、従来のmodWindowsAPI関数呼び出しを新しいインターフェースベースの
''' 実装に橋渡しする機能を提供します。既存のコードとの互換性を維持しながら、
''' 新しいインターフェースベースの実装への段階的な移行を支援します。
''' </remarks>

Private mMutex As IMutex
Private mCrypto As ICryptography
Private mIniFile As IIniFile
Private mPerformanceCounter As IPerformanceCounter
Private mEventLog As IEventLog
Private mSleep As ISleep

' エラー情報の保持用
Private mLastError As Long
Private mLock As clsLock

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    Set mLock = New clsLock
    
    ' 各インターフェースの実装クラスをインスタンス化
    Set mMutex = New MutexImpl
    Set mCrypto = New CryptographyImpl
    Set mIniFile = New IniFileImpl
    Set mPerformanceCounter = New PerformanceCounterImpl
    Set mEventLog = New EventLogImpl
    Set mSleep = New SleepImpl
End Sub

Private Sub Class_Terminate()
    Set mLock = Nothing
    Set mMutex = Nothing
    Set mCrypto = Nothing
    Set mIniFile = Nothing
    Set mPerformanceCounter = Nothing
    Set mEventLog = Nothing
    Set mSleep = Nothing
End Sub

' ======================
' パブリックメソッド
' ======================

''' <summary>
''' 最後に発生したWin32エラーコードを取得します
''' </summary>
Public Property Get LastError() As Long
    LastError = mLastError
End Property

''' <summary>
''' ミューテックスインターフェースを取得します
''' </summary>
Public Property Get Mutex() As IMutex
    Set Mutex = mMutex
End Property

''' <summary>
''' 暗号化インターフェースを取得します
''' </summary>
Public Property Get Crypto() As ICryptography
    Set Crypto = mCrypto
End Property

''' <summary>
''' INIファイルインターフェースを取得します
''' </summary>
Public Property Get IniFile() As IIniFile
    Set IniFile = mIniFile
End Property

''' <summary>
''' パフォーマンスカウンターインターフェースを取得します
''' </summary>
Public Property Get PerformanceCounter() As IPerformanceCounter
    Set PerformanceCounter = mPerformanceCounter
End Property

''' <summary>
''' イベントログインターフェースを取得します
''' </summary>
Public Property Get EventLog() As IEventLog
    Set EventLog = mEventLog
End Property

''' <summary>
''' スリープインターフェースを取得します
''' </summary>
Public Property Get Sleep() As ISleep
    Set Sleep = mSleep
End Property

' ======================
' エラー処理
' ======================
Private Sub UpdateLastError()
    #If Win64 Then
        mLastError = CLng(CreateObject("WScript.Shell").Environment("PROCESS")("ERROR_CODE"))
    #Else
        mLastError = Err.LastDllError
    #End If
End Sub

' ======================
' テストサポート機能
' ======================
#If DEBUG Then
    Public Sub ResetInterfaces()
        Class_Terminate
        Class_Initialize
    End Sub
    
    Public Function ValidateInterfaces() As Boolean
        ValidateInterfaces = Not (mMutex Is Nothing Or _
                                mCrypto Is Nothing Or _
                                mIniFile Is Nothing Or _
                                mPerformanceCounter Is Nothing Or _
                                mEventLog Is Nothing Or _
                                mSleep Is Nothing)
    End Function
#End If

================
File: MsgBoxNotifier.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "MsgBoxNotifier"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "MsgBoxNotifier"

' ======================
' インターフェース実装
' ======================
Implements IUserNotifier

' ======================
' プライベート変数
' ======================
Private mNotificationStyle As VbMsgBoxStyle
Private mDefaultTitle As String
Private mLock As ILock
Private mPerformanceMonitor As IPerformanceMonitor
Private mAppConfig As IAppConfig
Private mMessageFormatter As IMessageFormatter

' ======================
' 型定義
' ======================
Private Type NotificationContext
    ErrorDetail As ErrorInfo
    Buttons As VbMsgBoxStyle
    Title As String
    Message As String
    Icon As VbMsgBoxStyle
    IsLocked As Boolean
    Result As VbMsgBoxResult
    ExecutionTime As Double
End Type

' ======================
' 初期化・終了処理
' ======================
''' <summary>
''' クラスの初期化を行います。
''' </summary>
''' <param name="lock">排他制御を提供するILockインターフェース</param>
''' <param name="performanceMonitor">パフォーマンス監視を提供するIPerformanceMonitorインターフェース</param>
''' <param name="appConfig">アプリケーション設定を提供するIAppConfigインターフェース</param>
''' <param name="messageFormatter">メッセージフォーマットを提供するIMessageFormatterインターフェース</param>
Public Sub Initialize(ByVal lock As ILock, _
                     ByVal performanceMonitor As IPerformanceMonitor, _
                     ByVal appConfig As IAppConfig, _
                     ByVal messageFormatter As IMessageFormatter)
    If lock Is Nothing Or performanceMonitor Is Nothing Or _
       appConfig Is Nothing Or messageFormatter Is Nothing Then
        Err.Raise 5, MODULE_NAME & ".Initialize", "必要なインターフェースがNothingです。"
    End If
    
    mNotificationStyle = vbOKOnly Or vbInformation
    mDefaultTitle = "エラー"
    Set mLock = lock
    Set mPerformanceMonitor = performanceMonitor
    Set mAppConfig = appConfig
    Set mMessageFormatter = messageFormatter
End Sub

Private Sub Class_Terminate()
    Set mLock = Nothing
    Set mPerformanceMonitor = Nothing
End Sub

' ======================
' IUserNotifier実装
' ======================
Private Function IUserNotifier_Notify(ByRef errorDetail As ErrorInfo, _
                                   Optional ByVal buttons As VbMsgBoxStyle = vbOKOnly, _
                                   Optional ByVal title As String = "エラー") As VbMsgBoxResult
    ' パフォーマンス計測開始
    mPerformanceMonitor.StartMeasurement "Notify"
    
    ' 通知コンテキストの初期化
    Dim context As NotificationContext
    context.ErrorDetail = errorDetail
    context.Buttons = buttons
    context.Title = IIf(title = "", mDefaultTitle, title)

    ' ロック取得
    On Error Resume Next
    mLock.AcquireLock
    context.IsLocked = (Err.Number = 0)
    On Error GoTo 0

    ' 通知処理の実行
    If TryPrepareNotification(context) Then
        context.Result = ShowNotification(context)
    Else
        ' 通知準備に失敗した場合のフォールバック
        context.Result = vbAbort
    End If

    ' クリーンアップ処理
    If context.IsLocked Then
        mLock.ReleaseLock
    End If

    ' パフォーマンス計測終了
    mPerformanceMonitor.EndMeasurement "Notify"
    
    IUserNotifier_Notify = context.Result
End Function

Private Property Let IUserNotifier_NotificationStyle(ByVal style As VbMsgBoxStyle)
    mNotificationStyle = style
End Property

Private Property Get IUserNotifier_NotificationStyle() As VbMsgBoxStyle
    IUserNotifier_NotificationStyle = mNotificationStyle
End Property

Private Property Let IUserNotifier_DefaultTitle(ByVal title As String)
    mDefaultTitle = title
End Property

Private Property Get IUserNotifier_DefaultTitle() As String
    IUserNotifier_DefaultTitle = mDefaultTitle
End Property

' ======================
' プライベートメソッド
' ======================
Private Function TryPrepareNotification(ByRef context As NotificationContext) As Boolean
    On Error GoTo ErrorHandler
    
    mPerformanceMonitor.StartMeasurement "PrepareNotification"
    
    ' アイコンの設定
    context.Icon = GetIconForErrorCategory(context.ErrorDetail.Category)
    
    ' メッセージの組み立て
    context.Message = mMessageFormatter.FormatMessage("", context.ErrorDetail)
    
    mPerformanceMonitor.EndMeasurement "PrepareNotification"
    TryPrepareNotification = True
    Exit Function
    
ErrorHandler:
    ' エラー情報のログ記録
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "通知の準備中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "TryPrepareNotification"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    If Not mPerformanceMonitor Is Nothing Then
        mPerformanceMonitor.EndMeasurement "PrepareNotification"
    End If
    
    TryPrepareNotification = False
End Function

Private Function ShowNotification(ByRef context As NotificationContext) As VbMsgBoxResult
    On Error GoTo ErrorHandler
    
    mPerformanceMonitor.StartMeasurement "ShowNotification"
    
    ' メッセージボックスの表示（NotificationStyleを適用）
    ShowNotification = MsgBox(context.Message, _
                            mNotificationStyle Or context.Buttons Or context.Icon, _
                            context.Title)
    
    mPerformanceMonitor.EndMeasurement "ShowNotification"
    Exit Function
    
ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "メッセージボックスの表示中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "ShowNotification"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    If Not mPerformanceMonitor Is Nothing Then
        mPerformanceMonitor.EndMeasurement "ShowNotification"
    End If
    
    ShowNotification = vbAbort
End Function

Private Function GetIconForErrorCategory(ByVal category As ErrorCodeCategory) As VbMsgBoxStyle
    Select Case category
        Case ECSystem, ECSecurity
            GetIconForErrorCategory = vbCritical
        Case ECDatabase, ECNetwork
            GetIconForErrorCategory = vbExclamation
        Case Else
            GetIconForErrorCategory = vbInformation
    End Select
End Function


' ======================
' テストサポート機能
' ======================
#If DEBUG Then
    ' === 通知テスト ===
    Public Sub TestNotification()
        ' テスト用の依存性を注入
        Dim testLock As New MockLock
        Dim testMonitor As New MockPerformanceMonitor
        Dim testConfig As New MockAppConfig
        Dim testFormatter As New DefaultMessageFormatter
        
        ' 初期化
        Initialize testLock, testMonitor, testConfig, testFormatter
        
        ' テスト用エラー情報の作成
        Dim testError As ErrorInfo
        With testError
            .Code = ErrUnexpected
            .Description = "テスト通知"
            .Category = ECGeneral
            .Source = MODULE_NAME
            .ProcedureName = "TestNotification"
            .StackTrace = "テストスタックトレース"
            .OccurredAt = Now
        End With
        
        ' 各種スタイルでのテスト
        TestNotificationStyle testError, vbOKOnly, "OKのみ"
        TestNotificationStyle testError, vbOKCancel, "OK/キャンセル"
        TestNotificationStyle testError, vbYesNo, "はい/いいえ"
    End Sub
    
    Private Sub TestNotificationStyle(ByRef testError As ErrorInfo, _
                                    ByVal style As VbMsgBoxStyle, _
                                    ByVal description As String)
        mPerformanceMonitor.StartMeasurement "NotificationTest_" & description
        
        Dim result As VbMsgBoxResult
        result = IUserNotifier_Notify(testError, style, "テスト: " & description)
        
        mPerformanceMonitor.EndMeasurement "NotificationTest_" & description
        
        Debug.Print description & " テスト結果:"
        Debug.Print "  - 実行時間: " & _
                   mPerformanceMonitor.GetMeasurement("NotificationTest_" & description)
        Debug.Print "  - ユーザー応答: " & result
    End Sub
    
    ' === リソース管理テスト ===
    Public Sub TestResourceManagement()
        Dim lockCountBefore As Long
        lockCountBefore = GetActiveLockCount()
        
        Dim testError As ErrorInfo
        With testError
            .Code = ErrUnexpected
            .Description = "リソース管理テスト"
            .Category = ECGeneral
            .Source = MODULE_NAME
            .ProcedureName = "TestResourceManagement"
            .StackTrace = ""
            .OccurredAt = Now
        End With
        
        mPerformanceMonitor.StartMeasurement "ResourceTest"
        
        On Error Resume Next
        IUserNotifier_Notify testError, vbOKOnly, "リソーステスト"
        
        mPerformanceMonitor.EndMeasurement "ResourceTest"
        
        Dim lockCountAfter As Long
        lockCountAfter = GetActiveLockCount()
        
        Debug.Print "リソース管理テスト結果:"
        Debug.Print "  - 実行時間: " & _
                   mPerformanceMonitor.GetMeasurement("ResourceTest")
        
        If lockCountBefore <> lockCountAfter Then
            Debug.Print "  警告: リソースリークの可能性があります"
            Debug.Print "  - ロック数 Before: " & lockCountBefore
            Debug.Print "  - ロック数 After: " & lockCountAfter
        End If
    End Sub
    
    ' === パフォーマンスレポート ===
    Public Function GetPerformanceReport() As String
        If Not mPerformanceMonitor Is Nothing Then
            GetPerformanceReport = mPerformanceMonitor.GetAllMeasurements()
        Else
            GetPerformanceReport = "パフォーマンスモニターが初期化されていません。"
        End If
    End Function
    
    ' === 内部状態取得 ===
    Private Function GetActiveLockCount() As Long
        Dim result As Long
        result = 0
        
        If Not mLock Is Nothing Then
            If mLock.IsLocked Then
                result = result + 1
            End If
        End If
        
        GetActiveLockCount = result
    End Function
#End If

================
File: QueueImpl.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "QueueImpl"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements IQueue

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "QueueImpl"

' ======================
' メンバ変数
' ======================
Private mItems As Collection

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    Set mItems = New Collection
End Sub

Private Sub Class_Terminate()
    Set mItems = Nothing
End Sub

' ======================
' IQueue実装
' ======================
Private Sub IQueue_Enqueue(ByVal item As Variant)
    mItems.Add item
End Sub

Private Function IQueue_Dequeue() As Variant
    If mItems.Count = 0 Then
        Err.Raise vbObjectError + 1, MODULE_NAME, "キューが空です"
    End If
    
    If IsObject(mItems(1)) Then
        Set IQueue_Dequeue = mItems(1)
    Else
        IQueue_Dequeue = mItems(1)
    End If
    mItems.Remove 1
End Function

Private Function IQueue_IsEmpty() As Boolean
    IQueue_IsEmpty = (mItems.Count = 0)
End Function

Private Property Get IQueue_Count() As Long
    IQueue_Count = mItems.Count
End Property

Private Function IQueue_Peek() As Variant
    If mItems.Count = 0 Then
        Err.Raise vbObjectError + 1, MODULE_NAME, "キューが空です"
    End If
    
    If IsObject(mItems(1)) Then
        Set IQueue_Peek = mItems(1)
    Else
        IQueue_Peek = mItems(1)
    End If
End Function

Private Sub IQueue_Clear()
    Set mItems = New Collection
End Sub

================
File: SleepImpl.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "SleepImpl"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements ISleep

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "SleepImpl"

' ======================
' メンバ変数
' ======================
Private mIsInitialized As Boolean
Private mPerformanceCounter As IPerformanceCounter
Private mIsHighPrecision As Boolean

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    ' 高精度タイマーが利用可能か確認
    Set mPerformanceCounter = New PerformanceCounterImpl
    mIsHighPrecision = (TypeOf mPerformanceCounter Is PerformanceCounterImpl)
    mIsInitialized = True
End Sub

Private Sub Class_Terminate()
    Set mPerformanceCounter = Nothing
    mIsInitialized = False
End Sub

' ======================
' ISleep実装
' ======================
Private Sub ISleep_Sleep(ByVal milliseconds As Long)
    If Not mIsInitialized Then Exit Sub
    If milliseconds <= 0 Then Exit Sub
    
    On Error GoTo ErrorHandler
    
    If mIsHighPrecision Then
        HighPrecisionSleep milliseconds
    Else
        StandardSleep milliseconds
    End If
    
    Exit Sub

ErrorHandler:
    LogError "スリープ処理中にエラーが発生しました: " & Err.Description
    StandardSleep milliseconds  ' エラー時は標準のSleepにフォールバック
End Sub

' ======================
' プライベートメソッド
' ======================
Private Sub HighPrecisionSleep(ByVal milliseconds As Long)
    Dim startCount As Currency
    Dim currentCount As Currency
    Dim frequency As Currency
    Dim targetCount As Currency
    
    ' 周波数とカウンターの取得
    If Not mPerformanceCounter.QueryPerformanceFrequency(frequency) Then
        StandardSleep milliseconds
        Exit Sub
    End If
    
    If Not mPerformanceCounter.QueryPerformanceCounter(startCount) Then
        StandardSleep milliseconds
        Exit Sub
    End If
    
    ' 目標カウントの計算
    targetCount = startCount + (frequency * milliseconds) / 1000
    
    ' 高精度ウェイト
    Do
        If Not mPerformanceCounter.QueryPerformanceCounter(currentCount) Then
            StandardSleep milliseconds
            Exit Sub
        End If
    Loop While currentCount < targetCount
End Sub

Private Sub StandardSleep(ByVal milliseconds As Long)
    modWindowsAPI.Sleep milliseconds
End Sub

Private Sub LogError(ByVal message As String)
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = ErrUnexpected
        .Description = message
        .Category = ECSystem
        .Source = MODULE_NAME
        .ProcedureName = "Unknown"  ' スタックトレースから取得可能
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errInfo
End Sub

' ======================
' テストサポート機能
' ======================
#If DEBUG Then
    Public Function ValidateState() As Boolean
        ValidateState = mIsInitialized And Not (mPerformanceCounter Is Nothing)
    End Function
    
    Public Function IsHighPrecision() As Boolean
        IsHighPrecision = mIsHighPrecision
    End Function
    
    Public Function TestSleepAccuracy(ByVal milliseconds As Long) As Double
        Dim startTime As Currency
        Dim endTime As Currency
        
        ' 開始時刻を取得
        If Not mPerformanceCounter.QueryPerformanceCounter(startTime) Then
            TestSleepAccuracy = -1
            Exit Function
        End If
        
        ' スリープ実行
        ISleep_Sleep milliseconds
        
        ' 終了時刻を取得
        If Not mPerformanceCounter.QueryPerformanceCounter(endTime) Then
            TestSleepAccuracy = -1
            Exit Function
        End If
        
        ' 実際の経過時間を計算（ミリ秒）
        Dim frequency As Currency
        If Not mPerformanceCounter.QueryPerformanceFrequency(frequency) Then
            TestSleepAccuracy = -1
            Exit Function
        End If
        
        TestSleepAccuracy = (endTime - startTime) * 1000 / frequency
    End Function
#End If

================
File: StackImpl.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "StackImpl"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = True
Option Explicit

Implements IStack

'==========================
' 定数
'==========================
Private Const DEFAULT_CAPACITY As Long = 10
Private Const MODULE_NAME As String = "StackImpl"

'==========================
' メンバ変数
'==========================
Private mItems() As String
Private mCount As Long
Private mMaxSize As Long
Private mLock As clsLock

'==========================
' 初期化・終了処理
'==========================
Private Sub Class_Initialize()
    mMaxSize = DEFAULT_CAPACITY
    ReDim mItems(0 To mMaxSize - 1)
    Set mLock = New clsLock
End Sub

Private Sub Class_Terminate()
    Set mLock = Nothing
End Sub

'==========================
' プロパティ
'==========================
Public Property Let MaxSize(ByVal value As Long)
    If value <= 0 Then
        Err.Raise vbObjectError + 1, MODULE_NAME, "最大サイズは1以上である必要があります。"
    End If
    mMaxSize = value
    ReDim Preserve mItems(0 To mMaxSize - 1)
End Property

'==========================
' IStack実装
'==========================
Private Function IStack_Push(ByVal Item As String) As Boolean
    mLock.AcquireLock
    On Error GoTo ErrorHandler
    
    If mCount >= mMaxSize Then
        IStack_Push = False
        mLock.ReleaseLock
        Exit Function
    End If
    
    mItems(mCount) = Item
    mCount = mCount + 1
    IStack_Push = True
    
    mLock.ReleaseLock
    Exit Function

ErrorHandler:
    mLock.ReleaseLock
    Err.Raise Err.Number, MODULE_NAME, "Push操作でエラーが発生しました: " & Err.Description
End Function

Private Function IStack_Pop() As String
    mLock.AcquireLock
    On Error GoTo ErrorHandler
    
    If mCount = 0 Then
        IStack_Pop = ""
        mLock.ReleaseLock
        Exit Function
    End If
    
    mCount = mCount - 1
    IStack_Pop = mItems(mCount)
    
    mLock.ReleaseLock
    Exit Function

ErrorHandler:
    mLock.ReleaseLock
    Err.Raise Err.Number, MODULE_NAME, "Pop操作でエラーが発生しました: " & Err.Description
End Function

Private Function IStack_Peek() As String
    mLock.AcquireLock
    On Error GoTo ErrorHandler
    
    If mCount = 0 Then
        IStack_Peek = ""
        mLock.ReleaseLock
        Exit Function
    End If
    
    IStack_Peek = mItems(mCount - 1)
    
    mLock.ReleaseLock
    Exit Function

ErrorHandler:
    mLock.ReleaseLock
    Err.Raise Err.Number, MODULE_NAME, "Peek操作でエラーが発生しました: " & Err.Description
End Function

Private Function IStack_IsEmpty() As Boolean
    IStack_IsEmpty = (mCount = 0)
End Function

Private Property Get IStack_Count() As Long
    IStack_Count = mCount
End Property

Private Sub IStack_Clear()
    mLock.AcquireLock
    mCount = 0
    mLock.ReleaseLock
End Sub

'==========================
' テストサポート（開発環境用）
'==========================
#If DEBUG Then
    Public Function ValidateState() As Boolean
        ValidateState = (mCount >= 0 And mCount <= mMaxSize)
    End Function
    
    Public Property Get Capacity() As Long
        Capacity = mMaxSize
    End Property
#End If

================
File: StackTraceImpl.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "StackTraceImpl"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = True
Option Explicit

Implements IStackTrace

'==========================
' 定数
'==========================
Private Const MODULE_NAME As String = "StackTraceImpl"
Private Const CONFIG_KEY_STACK_DEPTH As String = "MaxStackTraceDepth"

'==========================
' メンバ変数
'==========================
Private mStack As IStack
Private mConfig As IAppConfig
Private mLock As clsLock

'==========================
' 初期化・終了処理
'==========================
Private Sub Class_Initialize()
    Set mStack = New StackImpl
    Set mConfig = modConfig.GetAppConfig
    Set mLock = New clsLock
    
    ' スタックの最大サイズを設定から取得
    Dim maxDepth As Long
    maxDepth = mConfig.GetSetting(CONFIG_KEY_STACK_DEPTH, 10)  ' デフォルト値は10
    StackImpl(mStack).MaxSize = maxDepth
End Sub

Private Sub Class_Terminate()
    Set mStack = Nothing
    Set mConfig = Nothing
    Set mLock = Nothing
End Sub

'==========================
' IStackTrace実装
'==========================
Private Function IStackTrace_PushStackEntry(ByVal ClassName As String, ByVal MethodName As String, Optional ByVal Parameters As Variant) As Boolean
    mLock.AcquireLock
    On Error GoTo ErrorHandler
    
    Dim entry As String
    entry = FormatStackEntry(ClassName, MethodName, Parameters)
    IStackTrace_PushStackEntry = mStack.Push(entry)
    
    mLock.ReleaseLock
    Exit Function

ErrorHandler:
    mLock.ReleaseLock
    Err.Raise Err.Number, MODULE_NAME, "PushStackEntry操作でエラーが発生しました: " & Err.Description
End Function

Private Function IStackTrace_PopStackEntry() As String
    mLock.AcquireLock
    On Error GoTo ErrorHandler
    
    IStackTrace_PopStackEntry = mStack.Pop()
    
    mLock.ReleaseLock
    Exit Function

ErrorHandler:
    mLock.ReleaseLock
    Err.Raise Err.Number, MODULE_NAME, "PopStackEntry操作でエラーが発生しました: " & Err.Description
End Function

Private Function IStackTrace_GetStackTrace() As String
    mLock.AcquireLock
    On Error GoTo ErrorHandler
    
    Dim tempStack As New StackImpl
    Dim trace As String
    Dim entry As String
    
    ' オリジナルスタックの内容を保持しながらトレースを生成
    Do While Not mStack.IsEmpty
        entry = mStack.Pop()
        tempStack.Push entry
        trace = entry & vbCrLf & trace
    Loop
    
    ' オリジナルスタックを復元
    Do While Not tempStack.IsEmpty
        mStack.Push tempStack.Pop()
    Loop
    
    IStackTrace_GetStackTrace = trace
    
    mLock.ReleaseLock
    Exit Function

ErrorHandler:
    mLock.ReleaseLock
    Err.Raise Err.Number, MODULE_NAME, "GetStackTrace操作でエラーが発生しました: " & Err.Description
End Function

Private Function IStackTrace_StackDepth() As Long
    IStackTrace_StackDepth = mStack.Count
End Function

Private Sub IStackTrace_ClearStack()
    mLock.AcquireLock
    mStack.Clear
    mLock.ReleaseLock
End Sub

Private Function IStackTrace_IsEmpty() As Boolean
    IStackTrace_IsEmpty = mStack.IsEmpty()
End Function

Private Function IStackTrace_Peek() As String
    mLock.AcquireLock
    On Error GoTo ErrorHandler
    
    IStackTrace_Peek = mStack.Peek()
    
    mLock.ReleaseLock
    Exit Function

ErrorHandler:
    mLock.ReleaseLock
    Err.Raise Err.Number, MODULE_NAME, "Peek操作でエラーが発生しました: " & Err.Description
End Function

'==========================
' プライベートメソッド
'==========================
Private Function FormatStackEntry(ByVal ClassName As String, ByVal MethodName As String, ByVal Parameters As Variant) As String
    Dim result As String
    result = ClassName & "." & MethodName
    
    ' パラメータが指定されている場合は追加
    If Not IsMissing(Parameters) Then
        result = result & "("
        
        If IsArray(Parameters) Then
            Dim i As Long
            For i = LBound(Parameters) To UBound(Parameters)
                If i > LBound(Parameters) Then result = result & ", "
                result = result & CStr(Parameters(i))
            Next i
        Else
            result = result & CStr(Parameters)
        End If
        
        result = result & ")"
    End If
    
    FormatStackEntry = result
End Function

'==========================
' テストサポート（開発環境用）
'==========================
#If DEBUG Then
    Public Function ValidateState() As Boolean
        ValidateState = StackImpl(mStack).ValidateState()
    End Function
    
    Public Property Get MaxStackDepth() As Long
        MaxStackDepth = StackImpl(mStack).Capacity
    End Property
#End If

================
File: VBScriptRegexEngine.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "VBScriptRegexEngine"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "VBScriptRegexEngine"

' ======================
' インターフェース実装
' ======================
Implements IRegexEngine

' ======================
' プライベート変数
' ======================
Private mRegex As Object ' VBScript.RegExp

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    Set mRegex = CreateObject("VBScript.RegExp")
End Sub

Private Sub Class_Terminate()
    Set mRegex = Nothing
End Sub

' ======================
' メソッド
' ======================
Private Function IRegexEngine_Test(ByVal pattern As String, ByVal text As String, Optional ByVal ignoreCase As Boolean = True) As Boolean
    On Error GoTo ErrorHandler
    
    With mRegex
        .Pattern = pattern
        .Global = True
        .IgnoreCase = ignoreCase
        IRegexEngine_Test = .Test(text)
    End With
    Exit Function
    
ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "正規表現のテスト中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "IRegexEngine_Test"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    Err.Raise Err.Number, Err.Source, "正規表現のテスト中にエラーが発生しました: " & Err.Description
End Function

Private Function IRegexEngine_Replace(ByVal pattern As String, ByVal text As String, ByVal replacement As String, Optional ByVal ignoreCase As Boolean = True) As String
    On Error GoTo ErrorHandler
    
    With mRegex
        .Pattern = pattern
        .Global = True
        .IgnoreCase = ignoreCase
        IRegexEngine_Replace = .Replace(text, replacement)
    End With
    Exit Function
    
ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "正規表現による置換中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "IRegexEngine_Replace"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    Err.Raise Err.Number, Err.Source, "正規表現による置換中にエラーが発生しました: " & Err.Description
End Function

Private Function IRegexEngine_Match(ByVal pattern As String, ByVal text As String, Optional ByVal ignoreCase As Boolean = True) As Variant
    On Error GoTo ErrorHandler
    
    With mRegex
        .Pattern = pattern
        .Global = True
        .IgnoreCase = ignoreCase
        
        Dim matches As Object
        Set matches = .Execute(text)
        
        If matches.Count = 0 Then
            IRegexEngine_Match = Array()
            Exit Function
        End If
        
        Dim result() As String
        ReDim result(matches.Count - 1)
        
        Dim i As Long
        For i = 0 To matches.Count - 1
            result(i) = matches(i).Value
        Next i
        
        IRegexEngine_Match = result
    End With
    Exit Function
    
ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "正規表現によるマッチング中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "IRegexEngine_Match"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    Err.Raise Err.Number, Err.Source, "正規表現によるマッチング中にエラーが発生しました: " & Err.Description
End Function

================
File: utils/SleepImpl.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "SleepImpl"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements ISleep

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "SleepImpl"

' ======================
' メンバ変数
' ======================
Private mIsInitialized As Boolean
Private mPerformanceCounter As IPerformanceCounter
Private mIsHighPrecision As Boolean

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    ' 高精度タイマーが利用可能か確認
    Set mPerformanceCounter = New PerformanceCounterImpl
    mIsHighPrecision = (TypeOf mPerformanceCounter Is PerformanceCounterImpl)
    mIsInitialized = True
End Sub

Private Sub Class_Terminate()
    Set mPerformanceCounter = Nothing
    mIsInitialized = False
End Sub

' ======================
' ISleep実装
' ======================
Private Sub ISleep_Sleep(ByVal milliseconds As Long)
    If Not mIsInitialized Then Exit Sub
    If milliseconds <= 0 Then Exit Sub
    
    On Error GoTo ErrorHandler
    
    If mIsHighPrecision Then
        HighPrecisionSleep milliseconds
    Else
        StandardSleep milliseconds
    End If
    
    Exit Sub

ErrorHandler:
    LogError "スリープ処理中にエラーが発生しました: " & Err.Description
    StandardSleep milliseconds  ' エラー時は標準のSleepにフォールバック
End Sub

' ======================
' プライベートメソッド
' ======================
Private Sub HighPrecisionSleep(ByVal milliseconds As Long)
    Dim startCount As Currency
    Dim currentCount As Currency
    Dim frequency As Currency
    Dim targetCount As Currency
    
    ' 周波数とカウンターの取得
    If Not mPerformanceCounter.QueryPerformanceFrequency(frequency) Then
        StandardSleep milliseconds
        Exit Sub
    End If
    
    If Not mPerformanceCounter.QueryPerformanceCounter(startCount) Then
        StandardSleep milliseconds
        Exit Sub
    End If
    
    ' 目標カウントの計算
    targetCount = startCount + (frequency * milliseconds) / 1000
    
    ' 高精度ウェイト
    Do
        If Not mPerformanceCounter.QueryPerformanceCounter(currentCount) Then
            StandardSleep milliseconds
            Exit Sub
        End If
    Loop While currentCount < targetCount
End Sub

Private Sub StandardSleep(ByVal milliseconds As Long)
    modWindowsAPI.Sleep milliseconds
End Sub

Private Sub LogError(ByVal message As String)
    Dim errInfo As ErrorInfo
    With errInfo
        .Code = ErrUnexpected
        .Description = message
        .Category = ECSystem
        .Source = MODULE_NAME
        .ProcedureName = "Unknown"  ' スタックトレースから取得可能
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errInfo
End Sub

' ======================
' テストサポート機能
' ======================
#If DEBUG Then
    Public Function ValidateState() As Boolean
        ValidateState = mIsInitialized And Not (mPerformanceCounter Is Nothing)
    End Function
    
    Public Function IsHighPrecision() As Boolean
        IsHighPrecision = mIsHighPrecision
    End Function
    
    Public Function TestSleepAccuracy(ByVal milliseconds As Long) As Double
        Dim startTime As Currency
        Dim endTime As Currency
        
        ' 開始時刻を取得
        If Not mPerformanceCounter.QueryPerformanceCounter(startTime) Then
            TestSleepAccuracy = -1
            Exit Function
        End If
        
        ' スリープ実行
        ISleep_Sleep milliseconds
        
        ' 終了時刻を取得
        If Not mPerformanceCounter.QueryPerformanceCounter(endTime) Then
            TestSleepAccuracy = -1
            Exit Function
        End If
        
        ' 実際の経過時間を計算（ミリ秒）
        Dim frequency As Currency
        If Not mPerformanceCounter.QueryPerformanceFrequency(frequency) Then
            TestSleepAccuracy = -1
            Exit Function
        End If
        
        TestSleepAccuracy = (endTime - startTime) * 1000 / frequency
    End Function
#End If

================
File: utils/StackImpl.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "StackImpl"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = True
Option Explicit

Implements IStack

'==========================
' 定数
'==========================
Private Const DEFAULT_CAPACITY As Long = 10
Private Const MODULE_NAME As String = "StackImpl"

'==========================
' メンバ変数
'==========================
Private mItems() As String
Private mCount As Long
Private mMaxSize As Long
Private mLock As clsLock

'==========================
' 初期化・終了処理
'==========================
Private Sub Class_Initialize()
    mMaxSize = DEFAULT_CAPACITY
    ReDim mItems(0 To mMaxSize - 1)
    Set mLock = New clsLock
End Sub

Private Sub Class_Terminate()
    Set mLock = Nothing
End Sub

'==========================
' プロパティ
'==========================
Public Property Let MaxSize(ByVal value As Long)
    If value <= 0 Then
        Err.Raise vbObjectError + 1, MODULE_NAME, "最大サイズは1以上である必要があります。"
    End If
    mMaxSize = value
    ReDim Preserve mItems(0 To mMaxSize - 1)
End Property

'==========================
' IStack実装
'==========================
Private Function IStack_Push(ByVal Item As String) As Boolean
    mLock.AcquireLock
    On Error GoTo ErrorHandler
    
    If mCount >= mMaxSize Then
        IStack_Push = False
        mLock.ReleaseLock
        Exit Function
    End If
    
    mItems(mCount) = Item
    mCount = mCount + 1
    IStack_Push = True
    
    mLock.ReleaseLock
    Exit Function

ErrorHandler:
    mLock.ReleaseLock
    Err.Raise Err.Number, MODULE_NAME, "Push操作でエラーが発生しました: " & Err.Description
End Function

Private Function IStack_Pop() As String
    mLock.AcquireLock
    On Error GoTo ErrorHandler
    
    If mCount = 0 Then
        IStack_Pop = ""
        mLock.ReleaseLock
        Exit Function
    End If
    
    mCount = mCount - 1
    IStack_Pop = mItems(mCount)
    
    mLock.ReleaseLock
    Exit Function

ErrorHandler:
    mLock.ReleaseLock
    Err.Raise Err.Number, MODULE_NAME, "Pop操作でエラーが発生しました: " & Err.Description
End Function

Private Function IStack_Peek() As String
    mLock.AcquireLock
    On Error GoTo ErrorHandler
    
    If mCount = 0 Then
        IStack_Peek = ""
        mLock.ReleaseLock
        Exit Function
    End If
    
    IStack_Peek = mItems(mCount - 1)
    
    mLock.ReleaseLock
    Exit Function

ErrorHandler:
    mLock.ReleaseLock
    Err.Raise Err.Number, MODULE_NAME, "Peek操作でエラーが発生しました: " & Err.Description
End Function

Private Function IStack_IsEmpty() As Boolean
    IStack_IsEmpty = (mCount = 0)
End Function

Private Property Get IStack_Count() As Long
    IStack_Count = mCount
End Property

Private Sub IStack_Clear()
    mLock.AcquireLock
    mCount = 0
    mLock.ReleaseLock
End Sub

'==========================
' テストサポート（開発環境用）
'==========================
#If DEBUG Then
    Public Function ValidateState() As Boolean
        ValidateState = (mCount >= 0 And mCount <= mMaxSize)
    End Function
    
    Public Property Get Capacity() As Long
        Capacity = mMaxSize
    End Property
#End If

================
File: utils/StackTraceImpl.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "StackTraceImpl"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = True
Option Explicit

Implements IStackTrace

'==========================
' 定数
'==========================
Private Const MODULE_NAME As String = "StackTraceImpl"
Private Const CONFIG_KEY_STACK_DEPTH As String = "MaxStackTraceDepth"

'==========================
' メンバ変数
'==========================
Private mStack As IStack
Private mConfig As IAppConfig
Private mLock As clsLock

'==========================
' 初期化・終了処理
'==========================
Private Sub Class_Initialize()
    Set mStack = New StackImpl
    Set mConfig = modConfig.GetAppConfig
    Set mLock = New clsLock
    
    ' スタックの最大サイズを設定から取得
    Dim maxDepth As Long
    maxDepth = mConfig.GetSetting(CONFIG_KEY_STACK_DEPTH, 10)  ' デフォルト値は10
    StackImpl(mStack).MaxSize = maxDepth
End Sub

Private Sub Class_Terminate()
    Set mStack = Nothing
    Set mConfig = Nothing
    Set mLock = Nothing
End Sub

'==========================
' IStackTrace実装
'==========================
Private Function IStackTrace_PushStackEntry(ByVal ClassName As String, ByVal MethodName As String, Optional ByVal Parameters As Variant) As Boolean
    mLock.AcquireLock
    On Error GoTo ErrorHandler
    
    Dim entry As String
    entry = FormatStackEntry(ClassName, MethodName, Parameters)
    IStackTrace_PushStackEntry = mStack.Push(entry)
    
    mLock.ReleaseLock
    Exit Function

ErrorHandler:
    mLock.ReleaseLock
    Err.Raise Err.Number, MODULE_NAME, "PushStackEntry操作でエラーが発生しました: " & Err.Description
End Function

Private Function IStackTrace_PopStackEntry() As String
    mLock.AcquireLock
    On Error GoTo ErrorHandler
    
    IStackTrace_PopStackEntry = mStack.Pop()
    
    mLock.ReleaseLock
    Exit Function

ErrorHandler:
    mLock.ReleaseLock
    Err.Raise Err.Number, MODULE_NAME, "PopStackEntry操作でエラーが発生しました: " & Err.Description
End Function

Private Function IStackTrace_GetStackTrace() As String
    mLock.AcquireLock
    On Error GoTo ErrorHandler
    
    Dim tempStack As New StackImpl
    Dim trace As String
    Dim entry As String
    
    ' オリジナルスタックの内容を保持しながらトレースを生成
    Do While Not mStack.IsEmpty
        entry = mStack.Pop()
        tempStack.Push entry
        trace = entry & vbCrLf & trace
    Loop
    
    ' オリジナルスタックを復元
    Do While Not tempStack.IsEmpty
        mStack.Push tempStack.Pop()
    Loop
    
    IStackTrace_GetStackTrace = trace
    
    mLock.ReleaseLock
    Exit Function

ErrorHandler:
    mLock.ReleaseLock
    Err.Raise Err.Number, MODULE_NAME, "GetStackTrace操作でエラーが発生しました: " & Err.Description
End Function

Private Function IStackTrace_StackDepth() As Long
    IStackTrace_StackDepth = mStack.Count
End Function

Private Sub IStackTrace_ClearStack()
    mLock.AcquireLock
    mStack.Clear
    mLock.ReleaseLock
End Sub

Private Function IStackTrace_IsEmpty() As Boolean
    IStackTrace_IsEmpty = mStack.IsEmpty()
End Function

Private Function IStackTrace_Peek() As String
    mLock.AcquireLock
    On Error GoTo ErrorHandler
    
    IStackTrace_Peek = mStack.Peek()
    
    mLock.ReleaseLock
    Exit Function

ErrorHandler:
    mLock.ReleaseLock
    Err.Raise Err.Number, MODULE_NAME, "Peek操作でエラーが発生しました: " & Err.Description
End Function

'==========================
' プライベートメソッド
'==========================
Private Function FormatStackEntry(ByVal ClassName As String, ByVal MethodName As String, ByVal Parameters As Variant) As String
    Dim result As String
    result = ClassName & "." & MethodName
    
    ' パラメータが指定されている場合は追加
    If Not IsMissing(Parameters) Then
        result = result & "("
        
        If IsArray(Parameters) Then
            Dim i As Long
            For i = LBound(Parameters) To UBound(Parameters)
                If i > LBound(Parameters) Then result = result & ", "
                result = result & CStr(Parameters(i))
            Next i
        Else
            result = result & CStr(Parameters)
        End If
        
        result = result & ")"
    End If
    
    FormatStackEntry = result
End Function

'==========================
' テストサポート（開発環境用）
'==========================
#If DEBUG Then
    Public Function ValidateState() As Boolean
        ValidateState = StackImpl(mStack).ValidateState()
    End Function
    
    Public Property Get MaxStackDepth() As Long
        MaxStackDepth = StackImpl(mStack).Capacity
    End Property
#End If

================
File: utils/VBScriptRegexEngine.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "VBScriptRegexEngine"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "VBScriptRegexEngine"

' ======================
' インターフェース実装
' ======================
Implements IRegexEngine

' ======================
' プライベート変数
' ======================
Private mRegex As Object ' VBScript.RegExp

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    Set mRegex = CreateObject("VBScript.RegExp")
End Sub

Private Sub Class_Terminate()
    Set mRegex = Nothing
End Sub

' ======================
' メソッド
' ======================
Private Function IRegexEngine_Test(ByVal pattern As String, ByVal text As String, Optional ByVal ignoreCase As Boolean = True) As Boolean
    On Error GoTo ErrorHandler
    
    With mRegex
        .Pattern = pattern
        .Global = True
        .IgnoreCase = ignoreCase
        IRegexEngine_Test = .Test(text)
    End With
    Exit Function
    
ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "正規表現のテスト中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "IRegexEngine_Test"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    Err.Raise Err.Number, Err.Source, "正規表現のテスト中にエラーが発生しました: " & Err.Description
End Function

Private Function IRegexEngine_Replace(ByVal pattern As String, ByVal text As String, ByVal replacement As String, Optional ByVal ignoreCase As Boolean = True) As String
    On Error GoTo ErrorHandler
    
    With mRegex
        .Pattern = pattern
        .Global = True
        .IgnoreCase = ignoreCase
        IRegexEngine_Replace = .Replace(text, replacement)
    End With
    Exit Function
    
ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "正規表現による置換中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "IRegexEngine_Replace"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    Err.Raise Err.Number, Err.Source, "正規表現による置換中にエラーが発生しました: " & Err.Description
End Function

Private Function IRegexEngine_Match(ByVal pattern As String, ByVal text As String, Optional ByVal ignoreCase As Boolean = True) As Variant
    On Error GoTo ErrorHandler
    
    With mRegex
        .Pattern = pattern
        .Global = True
        .IgnoreCase = ignoreCase
        
        Dim matches As Object
        Set matches = .Execute(text)
        
        If matches.Count = 0 Then
            IRegexEngine_Match = Array()
            Exit Function
        End If
        
        Dim result() As String
        ReDim result(matches.Count - 1)
        
        Dim i As Long
        For i = 0 To matches.Count - 1
            result(i) = matches(i).Value
        Next i
        
        IRegexEngine_Match = result
    End With
    Exit Function
    
ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "正規表現によるマッチング中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "IRegexEngine_Match"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    Err.Raise Err.Number, Err.Source, "正規表現によるマッチング中にエラーが発生しました: " & Err.Description
End Function

================
File: validation/AllowFutureDateRule.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "AllowFutureDateRule"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "AllowFutureDateRule"

' ======================
' インターフェース実装
' ======================
Implements IValidationRule

' ======================
' プライベート変数
' ======================
Private mAllowFutureDate As Boolean
Private mErrorMessage As String

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    mAllowFutureDate = True
    mErrorMessage = ""
End Sub

' ======================
' プロパティ
' ======================
Public Property Let AllowFutureDate(ByVal value As Boolean)
    mAllowFutureDate = value
End Property

Public Property Get AllowFutureDate() As Boolean
    AllowFutureDate = mAllowFutureDate
End Property

Private Property Get IValidationRule_ErrorMessage() As String
    IValidationRule_ErrorMessage = mErrorMessage
End Property

' ======================
' メソッド
' ======================
Private Function IValidationRule_Validate(ByVal value As Variant) As Boolean
    On Error GoTo ErrorHandler
    
    ' 日付型チェック
    If Not IsDate(value) Then
        mErrorMessage = "値は日付である必要があります。"
        IValidationRule_Validate = False
        Exit Function
    End If
    
    Dim dateValue As Date
    dateValue = CDate(value)
    
    ' 未来日付チェック
    If Not mAllowFutureDate And dateValue > Date Then
        mErrorMessage = "未来の日付は指定できません。"
        IValidationRule_Validate = False
        Exit Function
    End If
    
    mErrorMessage = ""
    IValidationRule_Validate = True
    Exit Function

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "未来日付の検証中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "IValidationRule_Validate"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    mErrorMessage = "検証中に予期せぬエラーが発生しました。"
    IValidationRule_Validate = False
End Function

================
File: validation/AllowPastDateRule.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "AllowPastDateRule"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "AllowPastDateRule"

' ======================
' インターフェース実装
' ======================
Implements IValidationRule

' ======================
' プライベート変数
' ======================
Private mAllowPastDate As Boolean
Private mErrorMessage As String

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    mAllowPastDate = True
    mErrorMessage = ""
End Sub

' ======================
' プロパティ
' ======================
Public Property Let AllowPastDate(ByVal value As Boolean)
    mAllowPastDate = value
End Property

Public Property Get AllowPastDate() As Boolean
    AllowPastDate = mAllowPastDate
End Property

Private Property Get IValidationRule_ErrorMessage() As String
    IValidationRule_ErrorMessage = mErrorMessage
End Property

' ======================
' メソッド
' ======================
Private Function IValidationRule_Validate(ByVal value As Variant) As Boolean
    On Error GoTo ErrorHandler
    
    ' 日付型チェック
    If Not IsDate(value) Then
        mErrorMessage = "値は日付である必要があります。"
        IValidationRule_Validate = False
        Exit Function
    End If
    
    Dim dateValue As Date
    dateValue = CDate(value)
    
    ' 過去日付チェック
    If Not mAllowPastDate And dateValue < Date Then
        mErrorMessage = "過去の日付は指定できません。"
        IValidationRule_Validate = False
        Exit Function
    End If
    
    mErrorMessage = ""
    IValidationRule_Validate = True
    Exit Function

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "過去日付の検証中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "IValidationRule_Validate"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    mErrorMessage = "検証中に予期せぬエラーが発生しました。"
    IValidationRule_Validate = False
End Function

================
File: validation/DateValidator.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "DateValidator"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "DateValidator"

' ======================
' インターフェース実装
' ======================
Implements IValidator

' ======================
' プライベート変数
' ======================
Private mRules As Collection
Private mError As IError

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    Set mRules = New Collection
End Sub

Private Sub Class_Terminate()
    Set mRules = Nothing
    Set mError = Nothing
End Sub

' ======================
' プロパティ
' ======================
Public Property Set Error(ByVal value As IError)
    Set mError = value
End Property

Public Property Get Error() As IError
    Set Error = mError
End Property

Private Property Get IValidator_ErrorMessage() As String
    ' エラーメッセージは個別のルールから取得するため、このプロパティは使用しない
    IValidator_ErrorMessage = ""
End Property

' ======================
' メソッド
' ======================
Public Sub AddRule(ByVal rule As IValidationRule)
    If rule Is Nothing Then
        Err.Raise 5, MODULE_NAME, "ルールがNothingです。"
    End If
    mRules.Add rule
End Sub

Public Sub ClearRules()
    Set mRules = New Collection
End Sub

Private Function IValidator_Validate(ByVal value As Variant) As Boolean
    On Error GoTo ErrorHandler
    
    ' エラーハンドラーが設定されていない場合はエラー
    If mError Is Nothing Then
        Err.Raise 5, MODULE_NAME, "エラーハンドラーが設定されていません。"
    End If
    
    ' 日付型チェック
    If Not IsDate(value) Then
        Dim errInfo As ErrorInfo
        With errInfo
            .Code = ErrInvalidInput
            .Description = "値は日付である必要があります。"
            .Category = ECValidation
            .Source = MODULE_NAME
            .ProcedureName = "IValidator_Validate"
            .StackTrace = modStackTrace.GetStackTrace()
            .OccurredAt = Now
        End With
        mError.HandleError errInfo
        IValidator_Validate = False
        Exit Function
    End If
    
    ' 各ルールの検証
    Dim rule As IValidationRule
    For Each rule In mRules
        If Not rule.Validate(value) Then
            Dim errInfo2 As ErrorInfo
            With errInfo2
                .Code = ErrInvalidInput
                .Description = rule.ErrorMessage
                .Category = ECValidation
                .Source = MODULE_NAME
                .ProcedureName = "IValidator_Validate"
                .StackTrace = modStackTrace.GetStackTrace()
                .OccurredAt = Now
            End With
            mError.HandleError errInfo2
            IValidator_Validate = False
            Exit Function
        End If
    Next rule
    
    IValidator_Validate = True
    Exit Function

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "日付の検証中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "IValidator_Validate"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    IValidator_Validate = False
End Function

' ======================
' ファクトリメソッド
' ======================
Public Function CreateBirthDateValidator(ByVal errorHandler As IError) As DateValidator
    Set CreateBirthDateValidator = New DateValidator
    With CreateBirthDateValidator
        Set .Error = errorHandler
        
        Dim minDateRule As MinDateRule
        Set minDateRule = New MinDateRule
        minDateRule.MinDate = DateSerial(1900, 1, 1)
        .AddRule minDateRule
        
        Dim maxDateRule As MaxDateRule
        Set maxDateRule = New MaxDateRule
        maxDateRule.MaxDate = Date
        .AddRule maxDateRule
        
        Dim futureDateRule As AllowFutureDateRule
        Set futureDateRule = New AllowFutureDateRule
        futureDateRule.AllowFutureDate = False
        .AddRule futureDateRule
    End With
End Function

Public Function CreateExpiryDateValidator(ByVal errorHandler As IError) As DateValidator
    Set CreateExpiryDateValidator = New DateValidator
    With CreateExpiryDateValidator
        Set .Error = errorHandler
        
        Dim minDateRule As MinDateRule
        Set minDateRule = New MinDateRule
        minDateRule.MinDate = Date
        .AddRule minDateRule
        
        Dim maxDateRule As MaxDateRule
        Set maxDateRule = New MaxDateRule
        maxDateRule.MaxDate = DateAdd("yyyy", 100, Date)
        .AddRule maxDateRule
        
        Dim pastDateRule As AllowPastDateRule
        Set pastDateRule = New AllowPastDateRule
        pastDateRule.AllowPastDate = False
        .AddRule pastDateRule
    End With
End Function

================
File: validation/MaxDateRule.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "MaxDateRule"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "MaxDateRule"

' ======================
' インターフェース実装
' ======================
Implements IValidationRule

' ======================
' プライベート変数
' ======================
Private mMaxDate As Date
Private mErrorMessage As String

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    mMaxDate = DateSerial(9999, 12, 31)
    mErrorMessage = ""
End Sub

' ======================
' プロパティ
' ======================
Public Property Let MaxDate(ByVal value As Date)
    mMaxDate = value
End Property

Public Property Get MaxDate() As Date
    MaxDate = mMaxDate
End Property

Private Property Get IValidationRule_ErrorMessage() As String
    IValidationRule_ErrorMessage = mErrorMessage
End Property

' ======================
' メソッド
' ======================
Private Function IValidationRule_Validate(ByVal value As Variant) As Boolean
    On Error GoTo ErrorHandler
    
    ' 日付型チェック
    If Not IsDate(value) Then
        mErrorMessage = "値は日付である必要があります。"
        IValidationRule_Validate = False
        Exit Function
    End If
    
    Dim dateValue As Date
    dateValue = CDate(value)
    
    ' 最大日付チェック
    If dateValue > mMaxDate Then
        mErrorMessage = "日付が新しすぎます。" & Format$(mMaxDate, "yyyy/mm/dd") & "以前の日付を指定してください。"
        IValidationRule_Validate = False
        Exit Function
    End If
    
    mErrorMessage = ""
    IValidationRule_Validate = True
    Exit Function

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "最大日付の検証中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "IValidationRule_Validate"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    mErrorMessage = "検証中に予期せぬエラーが発生しました。"
    IValidationRule_Validate = False
End Function

================
File: validation/MaxLengthRule.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "MaxLengthRule"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "MaxLengthRule"

' ======================
' インターフェース実装
' ======================
Implements IValidationRule

' ======================
' プライベート変数
' ======================
Private mMaxLength As Long
Private mErrorMessage As String

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    mMaxLength = 2147483647 ' Long型の最大値
    mErrorMessage = ""
End Sub

' ======================
' プロパティ
' ======================
Public Property Let MaxLength(ByVal value As Long)
    If value < 0 Then
        Err.Raise 5, MODULE_NAME, "最大長は0以上である必要があります。"
    End If
    mMaxLength = value
End Property

Public Property Get MaxLength() As Long
    MaxLength = mMaxLength
End Property

Private Property Get IValidationRule_ErrorMessage() As String
    IValidationRule_ErrorMessage = mErrorMessage
End Property

' ======================
' メソッド
' ======================
Private Function IValidationRule_Validate(ByVal value As Variant) As Boolean
    On Error GoTo ErrorHandler
    
    ' 文字列型チェック
    If VarType(value) <> vbString Then
        mErrorMessage = "値は文字列である必要があります。"
        IValidationRule_Validate = False
        Exit Function
    End If
    
    Dim strValue As String
    strValue = CStr(value)
    
    ' 長さチェック
    If Len(strValue) > mMaxLength Then
        mErrorMessage = "文字列の長さが長すぎます。最大" & mMaxLength & "文字までです。"
        IValidationRule_Validate = False
        Exit Function
    End If
    
    mErrorMessage = ""
    IValidationRule_Validate = True
    Exit Function

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "最大長の検証中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "IValidationRule_Validate"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    mErrorMessage = "検証中に予期せぬエラーが発生しました。"
    IValidationRule_Validate = False
End Function

================
File: validation/MinDateRule.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "MinDateRule"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "MinDateRule"

' ======================
' インターフェース実装
' ======================
Implements IValidationRule

' ======================
' プライベート変数
' ======================
Private mMinDate As Date
Private mErrorMessage As String

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    mMinDate = DateSerial(1900, 1, 1)
    mErrorMessage = ""
End Sub

' ======================
' プロパティ
' ======================
Public Property Let MinDate(ByVal value As Date)
    mMinDate = value
End Property

Public Property Get MinDate() As Date
    MinDate = mMinDate
End Property

Private Property Get IValidationRule_ErrorMessage() As String
    IValidationRule_ErrorMessage = mErrorMessage
End Property

' ======================
' メソッド
' ======================
Private Function IValidationRule_Validate(ByVal value As Variant) As Boolean
    On Error GoTo ErrorHandler
    
    ' 日付型チェック
    If Not IsDate(value) Then
        mErrorMessage = "値は日付である必要があります。"
        IValidationRule_Validate = False
        Exit Function
    End If
    
    Dim dateValue As Date
    dateValue = CDate(value)
    
    ' 最小日付チェック
    If dateValue < mMinDate Then
        mErrorMessage = "日付が古すぎます。" & Format$(mMinDate, "yyyy/mm/dd") & "以降の日付を指定してください。"
        IValidationRule_Validate = False
        Exit Function
    End If
    
    mErrorMessage = ""
    IValidationRule_Validate = True
    Exit Function

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "最小日付の検証中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "IValidationRule_Validate"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    mErrorMessage = "検証中に予期せぬエラーが発生しました。"
    IValidationRule_Validate = False
End Function

================
File: validation/MinLengthRule.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "MinLengthRule"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "MinLengthRule"

' ======================
' インターフェース実装
' ======================
Implements IValidationRule

' ======================
' プライベート変数
' ======================
Private mMinLength As Long
Private mErrorMessage As String

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    mMinLength = 0
    mErrorMessage = ""
End Sub

' ======================
' プロパティ
' ======================
Public Property Let MinLength(ByVal value As Long)
    If value < 0 Then
        Err.Raise 5, MODULE_NAME, "最小長は0以上である必要があります。"
    End If
    mMinLength = value
End Property

Public Property Get MinLength() As Long
    MinLength = mMinLength
End Property

Private Property Get IValidationRule_ErrorMessage() As String
    IValidationRule_ErrorMessage = mErrorMessage
End Property

' ======================
' メソッド
' ======================
Private Function IValidationRule_Validate(ByVal value As Variant) As Boolean
    On Error GoTo ErrorHandler
    
    ' 文字列型チェック
    If VarType(value) <> vbString Then
        mErrorMessage = "値は文字列である必要があります。"
        IValidationRule_Validate = False
        Exit Function
    End If
    
    Dim strValue As String
    strValue = CStr(value)
    
    ' 長さチェック
    If Len(strValue) < mMinLength Then
        mErrorMessage = "文字列の長さが短すぎます。最小" & mMinLength & "文字必要です。"
        IValidationRule_Validate = False
        Exit Function
    End If
    
    mErrorMessage = ""
    IValidationRule_Validate = True
    Exit Function

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "最小長の検証中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "IValidationRule_Validate"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    mErrorMessage = "検証中に予期せぬエラーが発生しました。"
    IValidationRule_Validate = False
End Function

================
File: validation/PatternRule.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "PatternRule"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "PatternRule"

' ======================
' インターフェース実装
' ======================
Implements IValidationRule

' ======================
' プライベート変数
' ======================
Private mPattern As String
Private mErrorMessage As String
Private mRegexEngine As IRegexEngine

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    mPattern = ""
    mErrorMessage = ""
    Set mRegexEngine = New VBScriptRegexEngine ' デフォルトのエンジン
End Sub

Private Sub Class_Terminate()
    Set mRegexEngine = Nothing
End Sub

' ======================
' プロパティ
' ======================
Public Property Let Pattern(ByVal value As String)
    mPattern = value
End Property

Public Property Get Pattern() As String
    Pattern = mPattern
End Property

Public Property Set RegexEngine(ByVal value As IRegexEngine)
    Set mRegexEngine = value
End Property

Public Property Get RegexEngine() As IRegexEngine
    Set RegexEngine = mRegexEngine
End Property

Private Property Get IValidationRule_ErrorMessage() As String
    IValidationRule_ErrorMessage = mErrorMessage
End Property

' ======================
' メソッド
' ======================
Private Function IValidationRule_Validate(ByVal value As Variant) As Boolean
    On Error GoTo ErrorHandler
    
    ' 文字列型チェック
    If VarType(value) <> vbString Then
        mErrorMessage = "値は文字列である必要があります。"
        IValidationRule_Validate = False
        Exit Function
    End If
    
    ' パターンが設定されていない場合は検証をスキップ
    If mPattern = "" Then
        mErrorMessage = ""
        IValidationRule_Validate = True
        Exit Function
    End If
    
    ' 正規表現エンジンが設定されていない場合はエラー
    If mRegexEngine Is Nothing Then
        Err.Raise 5, MODULE_NAME, "正規表現エンジンが設定されていません。"
    End If
    
    Dim strValue As String
    strValue = CStr(value)
    
    ' パターンチェック
    If Not mRegexEngine.Test(mPattern, strValue) Then
        mErrorMessage = "文字列が指定されたパターンと一致しません。"
        IValidationRule_Validate = False
        Exit Function
    End If
    
    mErrorMessage = ""
    IValidationRule_Validate = True
    Exit Function

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "パターンの検証中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "IValidationRule_Validate"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    mErrorMessage = "検証中に予期せぬエラーが発生しました。"
    IValidationRule_Validate = False
End Function

' ======================
' ファクトリメソッド
' ======================
Public Function CreateEmailRule() As PatternRule
    Set CreateEmailRule = New PatternRule
    With CreateEmailRule
        .Pattern = "^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$"
    End With
End Function

Public Function CreatePhoneRule() As PatternRule
    Set CreatePhoneRule = New PatternRule
    With CreatePhoneRule
        .Pattern = "^[0-9\-\(\)]+$"
    End With
End Function

================
File: validation/repomix-output.txt
================
This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-27T00:46:28.570Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
AllowFutureDateRule.cls
AllowPastDateRule.cls
DateValidator.cls
MaxDateRule.cls
MaxLengthRule.cls
MinDateRule.cls
MinLengthRule.cls
PatternRule.cls
StringValidator.cls

================================================================
Files
================================================================

================
File: AllowFutureDateRule.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "AllowFutureDateRule"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "AllowFutureDateRule"

' ======================
' インターフェース実装
' ======================
Implements IValidationRule

' ======================
' プライベート変数
' ======================
Private mAllowFutureDate As Boolean
Private mErrorMessage As String

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    mAllowFutureDate = True
    mErrorMessage = ""
End Sub

' ======================
' プロパティ
' ======================
Public Property Let AllowFutureDate(ByVal value As Boolean)
    mAllowFutureDate = value
End Property

Public Property Get AllowFutureDate() As Boolean
    AllowFutureDate = mAllowFutureDate
End Property

Private Property Get IValidationRule_ErrorMessage() As String
    IValidationRule_ErrorMessage = mErrorMessage
End Property

' ======================
' メソッド
' ======================
Private Function IValidationRule_Validate(ByVal value As Variant) As Boolean
    On Error GoTo ErrorHandler
    
    ' 日付型チェック
    If Not IsDate(value) Then
        mErrorMessage = "値は日付である必要があります。"
        IValidationRule_Validate = False
        Exit Function
    End If
    
    Dim dateValue As Date
    dateValue = CDate(value)
    
    ' 未来日付チェック
    If Not mAllowFutureDate And dateValue > Date Then
        mErrorMessage = "未来の日付は指定できません。"
        IValidationRule_Validate = False
        Exit Function
    End If
    
    mErrorMessage = ""
    IValidationRule_Validate = True
    Exit Function

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "未来日付の検証中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "IValidationRule_Validate"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    mErrorMessage = "検証中に予期せぬエラーが発生しました。"
    IValidationRule_Validate = False
End Function

================
File: AllowPastDateRule.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "AllowPastDateRule"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "AllowPastDateRule"

' ======================
' インターフェース実装
' ======================
Implements IValidationRule

' ======================
' プライベート変数
' ======================
Private mAllowPastDate As Boolean
Private mErrorMessage As String

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    mAllowPastDate = True
    mErrorMessage = ""
End Sub

' ======================
' プロパティ
' ======================
Public Property Let AllowPastDate(ByVal value As Boolean)
    mAllowPastDate = value
End Property

Public Property Get AllowPastDate() As Boolean
    AllowPastDate = mAllowPastDate
End Property

Private Property Get IValidationRule_ErrorMessage() As String
    IValidationRule_ErrorMessage = mErrorMessage
End Property

' ======================
' メソッド
' ======================
Private Function IValidationRule_Validate(ByVal value As Variant) As Boolean
    On Error GoTo ErrorHandler
    
    ' 日付型チェック
    If Not IsDate(value) Then
        mErrorMessage = "値は日付である必要があります。"
        IValidationRule_Validate = False
        Exit Function
    End If
    
    Dim dateValue As Date
    dateValue = CDate(value)
    
    ' 過去日付チェック
    If Not mAllowPastDate And dateValue < Date Then
        mErrorMessage = "過去の日付は指定できません。"
        IValidationRule_Validate = False
        Exit Function
    End If
    
    mErrorMessage = ""
    IValidationRule_Validate = True
    Exit Function

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "過去日付の検証中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "IValidationRule_Validate"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    mErrorMessage = "検証中に予期せぬエラーが発生しました。"
    IValidationRule_Validate = False
End Function

================
File: DateValidator.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "DateValidator"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "DateValidator"

' ======================
' インターフェース実装
' ======================
Implements IValidator

' ======================
' プライベート変数
' ======================
Private mRules As Collection
Private mError As IError

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    Set mRules = New Collection
End Sub

Private Sub Class_Terminate()
    Set mRules = Nothing
    Set mError = Nothing
End Sub

' ======================
' プロパティ
' ======================
Public Property Set Error(ByVal value As IError)
    Set mError = value
End Property

Public Property Get Error() As IError
    Set Error = mError
End Property

Private Property Get IValidator_ErrorMessage() As String
    ' エラーメッセージは個別のルールから取得するため、このプロパティは使用しない
    IValidator_ErrorMessage = ""
End Property

' ======================
' メソッド
' ======================
Public Sub AddRule(ByVal rule As IValidationRule)
    If rule Is Nothing Then
        Err.Raise 5, MODULE_NAME, "ルールがNothingです。"
    End If
    mRules.Add rule
End Sub

Public Sub ClearRules()
    Set mRules = New Collection
End Sub

Private Function IValidator_Validate(ByVal value As Variant) As Boolean
    On Error GoTo ErrorHandler
    
    ' エラーハンドラーが設定されていない場合はエラー
    If mError Is Nothing Then
        Err.Raise 5, MODULE_NAME, "エラーハンドラーが設定されていません。"
    End If
    
    ' 日付型チェック
    If Not IsDate(value) Then
        Dim errInfo As ErrorInfo
        With errInfo
            .Code = ErrInvalidInput
            .Description = "値は日付である必要があります。"
            .Category = ECValidation
            .Source = MODULE_NAME
            .ProcedureName = "IValidator_Validate"
            .StackTrace = modStackTrace.GetStackTrace()
            .OccurredAt = Now
        End With
        mError.HandleError errInfo
        IValidator_Validate = False
        Exit Function
    End If
    
    ' 各ルールの検証
    Dim rule As IValidationRule
    For Each rule In mRules
        If Not rule.Validate(value) Then
            Dim errInfo2 As ErrorInfo
            With errInfo2
                .Code = ErrInvalidInput
                .Description = rule.ErrorMessage
                .Category = ECValidation
                .Source = MODULE_NAME
                .ProcedureName = "IValidator_Validate"
                .StackTrace = modStackTrace.GetStackTrace()
                .OccurredAt = Now
            End With
            mError.HandleError errInfo2
            IValidator_Validate = False
            Exit Function
        End If
    Next rule
    
    IValidator_Validate = True
    Exit Function

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "日付の検証中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "IValidator_Validate"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    IValidator_Validate = False
End Function

' ======================
' ファクトリメソッド
' ======================
Public Function CreateBirthDateValidator(ByVal errorHandler As IError) As DateValidator
    Set CreateBirthDateValidator = New DateValidator
    With CreateBirthDateValidator
        Set .Error = errorHandler
        
        Dim minDateRule As MinDateRule
        Set minDateRule = New MinDateRule
        minDateRule.MinDate = DateSerial(1900, 1, 1)
        .AddRule minDateRule
        
        Dim maxDateRule As MaxDateRule
        Set maxDateRule = New MaxDateRule
        maxDateRule.MaxDate = Date
        .AddRule maxDateRule
        
        Dim futureDateRule As AllowFutureDateRule
        Set futureDateRule = New AllowFutureDateRule
        futureDateRule.AllowFutureDate = False
        .AddRule futureDateRule
    End With
End Function

Public Function CreateExpiryDateValidator(ByVal errorHandler As IError) As DateValidator
    Set CreateExpiryDateValidator = New DateValidator
    With CreateExpiryDateValidator
        Set .Error = errorHandler
        
        Dim minDateRule As MinDateRule
        Set minDateRule = New MinDateRule
        minDateRule.MinDate = Date
        .AddRule minDateRule
        
        Dim maxDateRule As MaxDateRule
        Set maxDateRule = New MaxDateRule
        maxDateRule.MaxDate = DateAdd("yyyy", 100, Date)
        .AddRule maxDateRule
        
        Dim pastDateRule As AllowPastDateRule
        Set pastDateRule = New AllowPastDateRule
        pastDateRule.AllowPastDate = False
        .AddRule pastDateRule
    End With
End Function

================
File: MaxDateRule.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "MaxDateRule"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "MaxDateRule"

' ======================
' インターフェース実装
' ======================
Implements IValidationRule

' ======================
' プライベート変数
' ======================
Private mMaxDate As Date
Private mErrorMessage As String

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    mMaxDate = DateSerial(9999, 12, 31)
    mErrorMessage = ""
End Sub

' ======================
' プロパティ
' ======================
Public Property Let MaxDate(ByVal value As Date)
    mMaxDate = value
End Property

Public Property Get MaxDate() As Date
    MaxDate = mMaxDate
End Property

Private Property Get IValidationRule_ErrorMessage() As String
    IValidationRule_ErrorMessage = mErrorMessage
End Property

' ======================
' メソッド
' ======================
Private Function IValidationRule_Validate(ByVal value As Variant) As Boolean
    On Error GoTo ErrorHandler
    
    ' 日付型チェック
    If Not IsDate(value) Then
        mErrorMessage = "値は日付である必要があります。"
        IValidationRule_Validate = False
        Exit Function
    End If
    
    Dim dateValue As Date
    dateValue = CDate(value)
    
    ' 最大日付チェック
    If dateValue > mMaxDate Then
        mErrorMessage = "日付が新しすぎます。" & Format$(mMaxDate, "yyyy/mm/dd") & "以前の日付を指定してください。"
        IValidationRule_Validate = False
        Exit Function
    End If
    
    mErrorMessage = ""
    IValidationRule_Validate = True
    Exit Function

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "最大日付の検証中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "IValidationRule_Validate"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    mErrorMessage = "検証中に予期せぬエラーが発生しました。"
    IValidationRule_Validate = False
End Function

================
File: MaxLengthRule.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "MaxLengthRule"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "MaxLengthRule"

' ======================
' インターフェース実装
' ======================
Implements IValidationRule

' ======================
' プライベート変数
' ======================
Private mMaxLength As Long
Private mErrorMessage As String

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    mMaxLength = 2147483647 ' Long型の最大値
    mErrorMessage = ""
End Sub

' ======================
' プロパティ
' ======================
Public Property Let MaxLength(ByVal value As Long)
    If value < 0 Then
        Err.Raise 5, MODULE_NAME, "最大長は0以上である必要があります。"
    End If
    mMaxLength = value
End Property

Public Property Get MaxLength() As Long
    MaxLength = mMaxLength
End Property

Private Property Get IValidationRule_ErrorMessage() As String
    IValidationRule_ErrorMessage = mErrorMessage
End Property

' ======================
' メソッド
' ======================
Private Function IValidationRule_Validate(ByVal value As Variant) As Boolean
    On Error GoTo ErrorHandler
    
    ' 文字列型チェック
    If VarType(value) <> vbString Then
        mErrorMessage = "値は文字列である必要があります。"
        IValidationRule_Validate = False
        Exit Function
    End If
    
    Dim strValue As String
    strValue = CStr(value)
    
    ' 長さチェック
    If Len(strValue) > mMaxLength Then
        mErrorMessage = "文字列の長さが長すぎます。最大" & mMaxLength & "文字までです。"
        IValidationRule_Validate = False
        Exit Function
    End If
    
    mErrorMessage = ""
    IValidationRule_Validate = True
    Exit Function

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "最大長の検証中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "IValidationRule_Validate"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    mErrorMessage = "検証中に予期せぬエラーが発生しました。"
    IValidationRule_Validate = False
End Function

================
File: MinDateRule.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "MinDateRule"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "MinDateRule"

' ======================
' インターフェース実装
' ======================
Implements IValidationRule

' ======================
' プライベート変数
' ======================
Private mMinDate As Date
Private mErrorMessage As String

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    mMinDate = DateSerial(1900, 1, 1)
    mErrorMessage = ""
End Sub

' ======================
' プロパティ
' ======================
Public Property Let MinDate(ByVal value As Date)
    mMinDate = value
End Property

Public Property Get MinDate() As Date
    MinDate = mMinDate
End Property

Private Property Get IValidationRule_ErrorMessage() As String
    IValidationRule_ErrorMessage = mErrorMessage
End Property

' ======================
' メソッド
' ======================
Private Function IValidationRule_Validate(ByVal value As Variant) As Boolean
    On Error GoTo ErrorHandler
    
    ' 日付型チェック
    If Not IsDate(value) Then
        mErrorMessage = "値は日付である必要があります。"
        IValidationRule_Validate = False
        Exit Function
    End If
    
    Dim dateValue As Date
    dateValue = CDate(value)
    
    ' 最小日付チェック
    If dateValue < mMinDate Then
        mErrorMessage = "日付が古すぎます。" & Format$(mMinDate, "yyyy/mm/dd") & "以降の日付を指定してください。"
        IValidationRule_Validate = False
        Exit Function
    End If
    
    mErrorMessage = ""
    IValidationRule_Validate = True
    Exit Function

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "最小日付の検証中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "IValidationRule_Validate"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    mErrorMessage = "検証中に予期せぬエラーが発生しました。"
    IValidationRule_Validate = False
End Function

================
File: MinLengthRule.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "MinLengthRule"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "MinLengthRule"

' ======================
' インターフェース実装
' ======================
Implements IValidationRule

' ======================
' プライベート変数
' ======================
Private mMinLength As Long
Private mErrorMessage As String

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    mMinLength = 0
    mErrorMessage = ""
End Sub

' ======================
' プロパティ
' ======================
Public Property Let MinLength(ByVal value As Long)
    If value < 0 Then
        Err.Raise 5, MODULE_NAME, "最小長は0以上である必要があります。"
    End If
    mMinLength = value
End Property

Public Property Get MinLength() As Long
    MinLength = mMinLength
End Property

Private Property Get IValidationRule_ErrorMessage() As String
    IValidationRule_ErrorMessage = mErrorMessage
End Property

' ======================
' メソッド
' ======================
Private Function IValidationRule_Validate(ByVal value As Variant) As Boolean
    On Error GoTo ErrorHandler
    
    ' 文字列型チェック
    If VarType(value) <> vbString Then
        mErrorMessage = "値は文字列である必要があります。"
        IValidationRule_Validate = False
        Exit Function
    End If
    
    Dim strValue As String
    strValue = CStr(value)
    
    ' 長さチェック
    If Len(strValue) < mMinLength Then
        mErrorMessage = "文字列の長さが短すぎます。最小" & mMinLength & "文字必要です。"
        IValidationRule_Validate = False
        Exit Function
    End If
    
    mErrorMessage = ""
    IValidationRule_Validate = True
    Exit Function

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "最小長の検証中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "IValidationRule_Validate"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    mErrorMessage = "検証中に予期せぬエラーが発生しました。"
    IValidationRule_Validate = False
End Function

================
File: PatternRule.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "PatternRule"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "PatternRule"

' ======================
' インターフェース実装
' ======================
Implements IValidationRule

' ======================
' プライベート変数
' ======================
Private mPattern As String
Private mErrorMessage As String
Private mRegexEngine As IRegexEngine

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    mPattern = ""
    mErrorMessage = ""
    Set mRegexEngine = New VBScriptRegexEngine ' デフォルトのエンジン
End Sub

Private Sub Class_Terminate()
    Set mRegexEngine = Nothing
End Sub

' ======================
' プロパティ
' ======================
Public Property Let Pattern(ByVal value As String)
    mPattern = value
End Property

Public Property Get Pattern() As String
    Pattern = mPattern
End Property

Public Property Set RegexEngine(ByVal value As IRegexEngine)
    Set mRegexEngine = value
End Property

Public Property Get RegexEngine() As IRegexEngine
    Set RegexEngine = mRegexEngine
End Property

Private Property Get IValidationRule_ErrorMessage() As String
    IValidationRule_ErrorMessage = mErrorMessage
End Property

' ======================
' メソッド
' ======================
Private Function IValidationRule_Validate(ByVal value As Variant) As Boolean
    On Error GoTo ErrorHandler
    
    ' 文字列型チェック
    If VarType(value) <> vbString Then
        mErrorMessage = "値は文字列である必要があります。"
        IValidationRule_Validate = False
        Exit Function
    End If
    
    ' パターンが設定されていない場合は検証をスキップ
    If mPattern = "" Then
        mErrorMessage = ""
        IValidationRule_Validate = True
        Exit Function
    End If
    
    ' 正規表現エンジンが設定されていない場合はエラー
    If mRegexEngine Is Nothing Then
        Err.Raise 5, MODULE_NAME, "正規表現エンジンが設定されていません。"
    End If
    
    Dim strValue As String
    strValue = CStr(value)
    
    ' パターンチェック
    If Not mRegexEngine.Test(mPattern, strValue) Then
        mErrorMessage = "文字列が指定されたパターンと一致しません。"
        IValidationRule_Validate = False
        Exit Function
    End If
    
    mErrorMessage = ""
    IValidationRule_Validate = True
    Exit Function

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "パターンの検証中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "IValidationRule_Validate"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    mErrorMessage = "検証中に予期せぬエラーが発生しました。"
    IValidationRule_Validate = False
End Function

' ======================
' ファクトリメソッド
' ======================
Public Function CreateEmailRule() As PatternRule
    Set CreateEmailRule = New PatternRule
    With CreateEmailRule
        .Pattern = "^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$"
    End With
End Function

Public Function CreatePhoneRule() As PatternRule
    Set CreatePhoneRule = New PatternRule
    With CreatePhoneRule
        .Pattern = "^[0-9\-\(\)]+$"
    End With
End Function

================
File: StringValidator.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "StringValidator"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "StringValidator"

' ======================
' インターフェース実装
' ======================
Implements IValidator

' ======================
' プライベート変数
' ======================
Private mRules As Collection
Private mError As IError

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    Set mRules = New Collection
End Sub

Private Sub Class_Terminate()
    Set mRules = Nothing
    Set mError = Nothing
End Sub

' ======================
' プロパティ
' ======================
Public Property Set Error(ByVal value As IError)
    Set mError = value
End Property

Public Property Get Error() As IError
    Set Error = mError
End Property

Private Property Get IValidator_ErrorMessage() As String
    ' エラーメッセージは個別のルールから取得するため、このプロパティは使用しない
    IValidator_ErrorMessage = ""
End Property

' ======================
' メソッド
' ======================
Public Sub AddRule(ByVal rule As IValidationRule)
    If rule Is Nothing Then
        Err.Raise 5, MODULE_NAME, "ルールがNothingです。"
    End If
    mRules.Add rule
End Sub

Public Sub ClearRules()
    Set mRules = New Collection
End Sub

Private Function IValidator_Validate(ByVal value As Variant) As Boolean
    On Error GoTo ErrorHandler
    
    ' エラーハンドラーが設定されていない場合はエラー
    If mError Is Nothing Then
        Err.Raise 5, MODULE_NAME, "エラーハンドラーが設定されていません。"
    End If
    
    ' 文字列型チェック
    If VarType(value) <> vbString Then
        Dim errInfo As ErrorInfo
        With errInfo
            .Code = ErrInvalidInput
            .Description = "値は文字列である必要があります。"
            .Category = ECValidation
            .Source = MODULE_NAME
            .ProcedureName = "IValidator_Validate"
            .StackTrace = modStackTrace.GetStackTrace()
            .OccurredAt = Now
        End With
        mError.HandleError errInfo
        IValidator_Validate = False
        Exit Function
    End If
    
    ' 各ルールの検証
    Dim rule As IValidationRule
    For Each rule In mRules
        If Not rule.Validate(value) Then
            Dim errInfo2 As ErrorInfo
            With errInfo2
                .Code = ErrInvalidInput
                .Description = rule.ErrorMessage
                .Category = ECValidation
                .Source = MODULE_NAME
                .ProcedureName = "IValidator_Validate"
                .StackTrace = modStackTrace.GetStackTrace()
                .OccurredAt = Now
            End With
            mError.HandleError errInfo2
            IValidator_Validate = False
            Exit Function
        End If
    Next rule
    
    IValidator_Validate = True
    Exit Function

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "文字列の検証中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "IValidator_Validate"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    IValidator_Validate = False
End Function

' ======================
' ファクトリメソッド
' ======================
Public Function CreateEmailValidator(ByVal errorHandler As IError) As StringValidator
    Set CreateEmailValidator = New StringValidator
    With CreateEmailValidator
        Set .Error = errorHandler
        
        Dim patternRule As PatternRule
        Set patternRule = New PatternRule
        patternRule.Pattern = "^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$"
        .AddRule patternRule
    End With
End Function

Public Function CreatePhoneValidator(ByVal errorHandler As IError) As StringValidator
    Set CreatePhoneValidator = New StringValidator
    With CreatePhoneValidator
        Set .Error = errorHandler
        
        Dim patternRule As PatternRule
        Set patternRule = New PatternRule
        patternRule.Pattern = "^[0-9\-\(\)]+$"
        .AddRule patternRule
        
        Dim minLengthRule As MinLengthRule
        Set minLengthRule = New MinLengthRule
        minLengthRule.MinLength = 10
        .AddRule minLengthRule
        
        Dim maxLengthRule As MaxLengthRule
        Set maxLengthRule = New MaxLengthRule
        maxLengthRule.MaxLength = 15
        .AddRule maxLengthRule
    End With
End Function

================
File: validation/StringValidator.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "StringValidator"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "StringValidator"

' ======================
' インターフェース実装
' ======================
Implements IValidator

' ======================
' プライベート変数
' ======================
Private mRules As Collection
Private mError As IError

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    Set mRules = New Collection
End Sub

Private Sub Class_Terminate()
    Set mRules = Nothing
    Set mError = Nothing
End Sub

' ======================
' プロパティ
' ======================
Public Property Set Error(ByVal value As IError)
    Set mError = value
End Property

Public Property Get Error() As IError
    Set Error = mError
End Property

Private Property Get IValidator_ErrorMessage() As String
    ' エラーメッセージは個別のルールから取得するため、このプロパティは使用しない
    IValidator_ErrorMessage = ""
End Property

' ======================
' メソッド
' ======================
Public Sub AddRule(ByVal rule As IValidationRule)
    If rule Is Nothing Then
        Err.Raise 5, MODULE_NAME, "ルールがNothingです。"
    End If
    mRules.Add rule
End Sub

Public Sub ClearRules()
    Set mRules = New Collection
End Sub

Private Function IValidator_Validate(ByVal value As Variant) As Boolean
    On Error GoTo ErrorHandler
    
    ' エラーハンドラーが設定されていない場合はエラー
    If mError Is Nothing Then
        Err.Raise 5, MODULE_NAME, "エラーハンドラーが設定されていません。"
    End If
    
    ' 文字列型チェック
    If VarType(value) <> vbString Then
        Dim errInfo As ErrorInfo
        With errInfo
            .Code = ErrInvalidInput
            .Description = "値は文字列である必要があります。"
            .Category = ECValidation
            .Source = MODULE_NAME
            .ProcedureName = "IValidator_Validate"
            .StackTrace = modStackTrace.GetStackTrace()
            .OccurredAt = Now
        End With
        mError.HandleError errInfo
        IValidator_Validate = False
        Exit Function
    End If
    
    ' 各ルールの検証
    Dim rule As IValidationRule
    For Each rule In mRules
        If Not rule.Validate(value) Then
            Dim errInfo2 As ErrorInfo
            With errInfo2
                .Code = ErrInvalidInput
                .Description = rule.ErrorMessage
                .Category = ECValidation
                .Source = MODULE_NAME
                .ProcedureName = "IValidator_Validate"
                .StackTrace = modStackTrace.GetStackTrace()
                .OccurredAt = Now
            End With
            mError.HandleError errInfo2
            IValidator_Validate = False
            Exit Function
        End If
    Next rule
    
    IValidator_Validate = True
    Exit Function

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "文字列の検証中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "IValidator_Validate"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    IValidator_Validate = False
End Function

' ======================
' ファクトリメソッド
' ======================
Public Function CreateEmailValidator(ByVal errorHandler As IError) As StringValidator
    Set CreateEmailValidator = New StringValidator
    With CreateEmailValidator
        Set .Error = errorHandler
        
        Dim patternRule As PatternRule
        Set patternRule = New PatternRule
        patternRule.Pattern = "^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$"
        .AddRule patternRule
    End With
End Function

Public Function CreatePhoneValidator(ByVal errorHandler As IError) As StringValidator
    Set CreatePhoneValidator = New StringValidator
    With CreatePhoneValidator
        Set .Error = errorHandler
        
        Dim patternRule As PatternRule
        Set patternRule = New PatternRule
        patternRule.Pattern = "^[0-9\-\(\)]+$"
        .AddRule patternRule
        
        Dim minLengthRule As MinLengthRule
        Set minLengthRule = New MinLengthRule
        minLengthRule.MinLength = 10
        .AddRule minLengthRule
        
        Dim maxLengthRule As MaxLengthRule
        Set maxLengthRule = New MaxLengthRule
        maxLengthRule.MaxLength = 15
        .AddRule maxLengthRule
    End With
End Function

================
File: モジュール概要.txt
================
モジュール名	概要	依存関係	機能
AllowFutureDateRule.cls	日付が未来の日付であることを許可するかどうかを検証するルール	IValidationRule, ErrorInfo, modStackTrace, modError, modErrorCodes	- 未来日付の許可/不許可を設定 <br> - 日付の妥当性を検証 <br> - エラーメッセージを返す
AllowPastDateRule.cls	日付が過去の日付であることを許可するかどうかを検証するルール	IValidationRule, ErrorInfo, modStackTrace, modError	- 過去日付の許可/不許可を設定 <br> - 日付の妥当性を検証 <br> - エラーメッセージを返す
clsCallStack.cls	スレッドセーフなコールスタックの実装	IStackTrace, StackTraceImpl, clsLock, modErrorCodes, modError, ErrorInfo	- 呼び出し履歴のエントリを追加/削除 <br> - スタックトレースを取得 <br> - スタックの深さを取得
clsCriticalSectionLock.cls	クリティカルセクションを用いたスレッドセーフなロック機構の実装	ILock, modStackTrace, modError, ErrorInfo	- ロックの取得/解放 <br> - タイムアウト付きロック取得 <br> - ロック状態の検証（テスト用）
clsCrypto.cls	暗号化操作を提供するクラス	IPerformanceMonitor, ILock, ICryptography, IKeyDerivationStrategy, modWindowsAPI, modError, ErrorInfo	- 文字列の暗号化/復号化 <br> - ハッシュの生成 <br> - AESキーの導出 <br> - Base64エンコード/デコード
clsLock.cls	Mutexを用いたスレッドセーフなロック機構の実装	modWindowsAPI, modError, ErrorInfo, modStackTrace	- ロックの取得/解放 <br> - ロック状態の検証（テスト用）
clsLogger.cls	ログ出力機能を提供するクラス	ILogger, ILoggerSettings, IQueue, ILock, IPerformanceMonitor, FileLogger, DatabaseLogger, EventLogLogger, ConsoleLogger, QueueImpl, ErrorInfo, modStackTrace, modError	- ログメッセージのキューイング <br> - ログ出力先の管理 <br> - ログレベルによるフィルタリング <br> - タイマーによる非同期ログ処理 <br> - ログイベントの発行
clsMutexLock.cls	ミューテックスを使用したロック機構を提供するクラス	ILock, IMutex, IAppConfig, modConfig, modStackTrace, modError, ErrorInfo	- ロックの取得と解放 <br> - タイムアウト付きロック取得 <br> - 設定ファイルからのミューテックス名読み込み <br> - エラーログ出力
clsPerformanceMonitor.cls	パフォーマンス監視機能を提供するレガシークラス	IPerformanceMonitor, PerformanceMonitorImpl	- 計測の開始/終了 <br> - 計測結果の取得/クリア <br> - パフォーマンス監視の有効/無効設定
clsSemaphoreLock.cls	セマフォを用いたスレッドセーフなロック機構の実装	ILock, IAppConfig, modError, ErrorInfo, modStackTrace	- ロックの取得/解放 <br> - タイムアウト付きロック取得 <br> - ロック状態の検証（テスト用）
ConfigImpl.cls	アプリケーション設定とデータベース設定を管理するクラス	IAppConfig, IDatabaseConfig, IIniFile, IniFileImpl, clsLock, ODBCConnectionStringBuilder, OLEDBConnectionStringBuilder	- 設定の読み込み/保存 <br> - データベース接続文字列の生成 <br> - データベース設定の取得
ConnectionPool.cls	データベース接続プールを管理するクラス	IConnectionPool, IDatabaseConfig, IPerformanceMonitor, ILock, ILogger, modError, ErrorInfo, modStackTrace	- 接続の取得/返却 <br> - アクティブな接続数の取得 <br> - 最大接続数の取得/設定 <br> - 接続タイムアウトの取得/設定 <br> - 新しい接続の作成 <br> - 接続の有効性検証
ConsoleLogger.cls	コンソールへのログ出力を行うクラス	ILogger, IPerformanceMonitor, ErrorInfo, modError, modStackTrace	- コンソールへのログ出力 <br> - ログレベルに応じた色付け <br> - ログメッセージの組み立て
CryptographyImpl.cls	暗号化操作の実装クラス	ICryptography, modWindowsAPI, clsPerformanceMonitor, clsLock, ErrorInfo	- 暗号化プロバイダの取得/解放 <br> - ハッシュの作成/破棄 <br> - データのハッシュ化 <br> - 鍵の導出/破棄 <br> - データの暗号化/復号化
DatabaseConnectionErrorHandler.cls	データベース接続エラーを処理するクラス	IErrorHandler, ILock, ILogger, IEmergencyLogger, IDatabaseConfig, IUserNotifier, ErrorInfo, modStackTrace, modError, modWindowsAPI	- データベース接続エラーのハンドリング <br> - リトライ処理 <br> - エラーログ出力 <br> - ユーザーへの通知
DatabaseLogger.cls	データベースへのログ出力を行うクラス	ILogger, IConnectionPool, ILock, IPerformanceMonitor, IDatabaseConfig, ErrorInfo, modError	- データベースへのログ出力 <br> - 接続プールの利用 <br> - リトライ処理
DateValidator.cls	日付の妥当性検証を行うクラス	IValidator, IValidationRule, IError, ErrorInfo, modStackTrace, modError, MinDateRule, MaxDateRule, AllowFutureDateRule	- 日付検証ルールの追加/クリア <br> - 日付の妥当性検証 <br> - エラーハンドラーの設定 <br> - 生年月日バリデーターの作成 <br> - 有効期限バリデーターの作成
DefaultLoggerSettings.cls	ロガー設定のデフォルト実装を提供するクラス	ILoggerSettings, IAppConfig, IFileOperations, IConnectionPool, IEventLog, IDatabaseConfig	- ログレベルの取得/設定 <br> - ログ出力先の取得 <br> - ログファイルパスの取得 <br> - ログテーブル名の取得 <br> - ログイベントソースの取得 <br> - タイマー間隔の取得 <br> - 依存オブジェクトの取得 <br> - ログ出力要否の判定 <br> - ログメッセージのフォーマット
DefaultMessageFormatter.cls	デフォルトのエラーメッセージフォーマットを提供するクラス	IMessageFormatter, ErrorInfo, modStackTrace, modError	- エラーメッセージのフォーマット <br> - スタックトレースの追加
EmergencyLogger.cls	緊急エラーログ出力を行うクラス	IEmergencyLogger, clsLock, modWindowsAPI	- 緊急エラーログの出力 <br> - イベントログへの出力 <br> - ファイルへの出力
ErrorHandlerManager.cls	エラーハンドラーを管理するクラス	IErrorHandler, DatabaseConnectionErrorHandler, FileNotFoundErrorHandler, InvalidInputErrorHandler, modErrorCodes	- エラーハンドラーの登録/解除 <br> - エラーコードに対応するハンドラーの取得 <br> - デフォルトハンドラーの登録
ErrorImpl.cls	エラー処理を実装するクラス	IError, ErrorHandlerManager, IEmergencyLogger, EmergencyLogger, ErrorInfo, modErrorCodes, modStackTrace, clsLock, clsPerformanceMonitor	- エラー処理の実行 <br> - エラーハンドラーの登録/解除 <br> - エラー回数のカウント <br> - エラー回数の閾値チェック <br> - エラー情報の補完
ErrorInfo.cls	エラー詳細情報を格納するクラス		- エラーコード <br> - 説明 <br> - カテゴリ <br> - 発生元 <br> - プロシージャ名 <br> - スタックトレース <br> - 発生日時 <br> - 重要度 <br> - 内部エラー <br> - リカバリ試行/成功 <br> - 追加情報 <br> - 文字列化
EventLogImpl.cls	Windowsイベントログへの書き込みを行うクラス	IEventLog, clsLock, clsPerformanceMonitor, ErrorInfo, modError	- イベントログへの書き込み <br> - イベントソースの存在確認 <br> - エラーログ出力
EventLogLogger.cls	イベントログへのログ出力を行うクラス	ILogger, IEventLog, ILock, IPerformanceMonitor, ErrorInfo, modError	- イベントログへのログ出力 <br> - リトライ処理 <br> - メッセージの組み立て
FileIOImpl.cls	ファイルI/O操作の具象クラス	IFileIO, ErrorInfo, modError	- ファイル/フォルダの存在確認 <br> - フォルダの作成 <br> - ファイルの削除/コピー/移動 <br> - ファイルのオープン/クローズ
FileLogger.cls	ファイルへのログ出力を行うクラス	ILogger, IFileOperations, ILock, IPerformanceMonitor, ErrorInfo, modError	- ファイルへのログ出力 <br> - リトライ処理 <br> - ログメッセージの組み立て
FileNotFoundErrorHandler.cls	ファイル不在エラーを処理するクラス	IErrorHandler, ILock, ILogger, IEmergencyLogger, IUserNotifier, IFileOperations, ErrorInfo, modStackTrace, modError	- ファイル不在エラーのハンドリング <br> - 代替ファイルパスの確認 <br> - バックアップファイルの確認 <br> - エラーログ出力 <br> - ユーザーへの通知
FileSystemOperations.cls	ファイルシステム操作を提供するクラス	IFileOperations, ILock, IPerformanceMonitor, IFileIO, ErrorInfo, modError	- テキストファイルの読み書き <br> - バイナリファイルの読み書き <br> - ファイル/フォルダの存在確認 <br> - フォルダの作成/削除 <br> - ファイルの削除/コピー/移動 <br> - 絶対パスの取得
IAppConfig.cls	アプリケーション設定インターフェース		- 設定の取得/設定 <br> - 設定の読み込み/保存 <br> - 各種設定プロパティ
IConnectionPool.cls	データベース接続プールインターフェース		- 接続の取得/返却 <br> - アクティブな接続数の取得 <br> - 最大接続数の取得/設定 <br> - 接続タイムアウトの取得/設定
IConnectionStringBuilder.cls	データベース接続文字列ビルダーインターフェース		- 接続文字列の生成 <br> - 各種接続パラメータの設定
ICryptography.cls	暗号化操作インターフェース		- 暗号化コンテキストの取得 <br> - ハッシュオブジェクトの作成 <br> - データのハッシュ化 <br> - 鍵の導出 <br> - データの暗号化/復号化 <br> - 鍵/ハッシュオブジェクトの破棄 <br> - 暗号化コンテキストの解放
IDatabaseConfig.cls	データベース設定インターフェース		- 接続文字列の取得 <br> - データベース固有設定の取得 <br> - 各種設定プロパティ
IEmergencyLogger.cls	緊急エラーログ出力インターフェース		- 緊急エラーログの出力
IError.cls	エラー処理インターフェース		- エラー処理 <br> - エラーハンドラーの登録/解除 <br> - エラー回数のカウント/チェック
IErrorHandler.cls	エラーハンドラーインターフェース		- エラー処理の実装
IEventLog.cls	Windowsイベントログ操作インターフェース		- イベントログへのメッセージ書き込み <br> - イベントソースの存在確認
IFileIO.cls	ファイルI/O操作インターフェース		- ファイル/フォルダの存在確認 <br> - フォルダの作成 <br> - ファイルの削除/コピー/移動 <br> - ファイルのオープン/クローズ
IFileOperations.cls	ファイル操作インターフェース		- テキストファイル/バイナリファイルの読み書き <br> - ファイル/フォルダの存在確認 <br> - フォルダの作成/削除 <br> - ファイルの削除/コピー/移動 <br> - 絶対パスの取得
IIniFile.cls	INIファイル操作インターフェース		- INIファイルからの値の読み取り <br> - INIファイルへの値の書き込み
IKeyDerivationStrategy.cls	鍵導出戦略インターフェース		- パスワードからのキー導出
ILock.cls	ロック操作インターフェース		- ロックの取得/解放
ILogger.cls	ロガーインターフェース		- ログの記録 <br> - ログレベルの設定/取得 <br> - ログ出力先の設定/取得
ILoggerSettings.cls	ロガー設定インターフェース		- ログレベルの取得 <br> - ログ出力先の取得 <br> - ログファイルパスの取得 <br> - ログテーブル名の取得 <br> - ログイベントソースの取得 <br> - タイマー間隔の取得 <br> - データベース接続文字列の取得 <br> - ログ出力要否の判定 <br> - ログメッセージのフォーマット
IMessageFormatter.cls	エラーメッセージフォーマッターインターフェース		- エラーメッセージのフォーマット
IMutex.cls	ミューテックス操作インターフェース		- ミューテックスの作成/解放 <br> - ミューテックス所有権の取得
IniFileImpl.cls	INIファイル操作の具象クラス	IIniFile, clsPerformanceMonitor, clsLock, modWindowsAPI, ErrorInfo, modStackTrace, modError	- INIファイルからの値の読み取り <br> - INIファイルへの値の書き込み <br> - エラーログ出力
InvalidInputErrorHandler.cls	無効な入力エラーを処理するクラス	IErrorHandler, ILock, ILogger, IEmergencyLogger, IUserNotifier, IValidator, ErrorInfo, modError	- 無効な入力エラーのハンドリング <br> - 入力値の自動補正 <br> - エラーログ出力 <br> - ユーザーへの通知
IPerformanceCounter.cls	パフォーマンスカウンター操作インターフェース		- カウンター値の取得 <br> - 周波数の取得
IPerformanceMonitor.cls	パフォーマンス監視インターフェース		- 計測の開始/終了 <br> - 計測結果の取得/クリア <br> - パフォーマンス監視の有効/無効設定
IQueue.cls	キューインターフェース		- キューへのアイテム追加/取り出し <br> - キューが空かどうかの確認 <br> - キュー内のアイテム数の取得 <br> - 先頭アイテムの参照 <br> - キューのクリア
IRegexEngine.cls	正規表現エンジンインターフェース		- 正規表現による検証/置換/抽出
ISleep.cls	スリープ操作インターフェース		- 指定時間実行を停止
IStack.cls	スタックインターフェース		- スタックへの要素追加/削除 <br> - スタックの最後の要素取得 <br> - スタックが空かどうかの確認 <br> - スタック内の要素数取得 <br> - スタックのクリア
IStackTrace.cls	スタックトレースインターフェース		- スタックにエントリを追加/削除 <br> - スタックトレースの取得 <br> - スタックの深さ取得 <br> - スタックのクリア/確認 <br> - スタックの最後の要素取得
IUserNotifier.cls	ユーザー通知インターフェース		- ユーザーへのエラー通知 <br> - 通知スタイルの設定/取得 <br> - デフォルトタイトルの設定/取得
IValidationRule.cls	バリデーションルールインターフェース		- 値の妥当性検証 <br> - エラーメッセージの取得
IValidator.cls	バリデーターインターフェース		- 値の妥当性検証 <br> - エラーメッセージの取得 <br> - 検証ルールの追加/クリア <br> - 検証の詳細結果取得
MaxDateRule.cls	最大日付を検証するルール	IValidationRule, ErrorInfo, modStackTrace, modError	- 最大日付の設定/取得 <br> - 日付の妥当性検証 <br> - エラーメッセージを返す
MaxLengthRule.cls	最大長を検証するルール	IValidationRule, ErrorInfo, modStackTrace, modError	- 最大長の設定/取得 <br> - 文字列長の妥当性検証 <br> - エラーメッセージを返す
MinDateRule.cls	最小日付を検証するルール	IValidationRule, ErrorInfo, modStackTrace, modError	- 最小日付の設定/取得 <br> - 日付の妥当性検証 <br> - エラーメッセージを返す
MinLengthRule.cls	最小長を検証するルール	IValidationRule, ErrorInfo, modStackTrace, modError	- 最小長の設定/取得 <br> - 文字列長の妥当性検証 <br> - エラーメッセージを返す
MockDatabaseConfig.cls	データベース設定のモック	IDatabaseConfig	- 接続文字列の設定/取得 <br> - 最大プールサイズの設定/取得 <br> - リトライ回数の設定/取得 <br> - リトライ間隔の設定/取得 <br> - 接続タイムアウトの設定/取得 <br> - メソッド呼び出し回数のカウント <br> - カウンターのリセット
MockError.cls	エラー処理のモック	IError	- エラーの発生をシミュレート <br> - 発生したエラーの保持 <br> - エラーのクリア <br> - エラー数の取得 <br> - 特定
modAppInitializer.bas	アプリケーションの初期化を行う	modConfig, DefaultLoggerSettings, clsLogger, modDatabaseUtils, ConnectionPool, DatabaseConnectionErrorHandler	- 設定の初期化 <br> - ロギングシステムの初期化 <br> - データベース関連の初期化 <br> - エラーハンドラーの初期化
modCommon.bas	アプリケーション全体で使用する共通の定数、型、変数、関数を定義	modStackTrace, modErrorCodes, modConfig, modError, clsPerformanceMonitor, clsLock	- アプリケーション定数の定義 <br> - ログ関連の定義 <br> - セキュリティレベルの定義 <br> - ファイルアクセスモードの定義 <br> - エラー情報型の定義 <br> - ファイル情報型の定義 <br> - モジュールの初期化/終了処理 <br> - エラーハンドリング
modConfig.bas	アプリケーションの設定を管理する	modWindowsAPI, modStackTrace, modError, clsCallStack, IDatabaseConfig	- 設定の読み込み/保存 <br> - デフォルト設定の適用 <br> - 設定値の取得/設定 <br> - データベース接続文字列の取得 <br> - 自動保存の制御
modDatabaseUtils.bas	データベース操作に関するユーティリティ関数を提供	clsPerformanceMonitor, modErrorCodes, modStackTrace, modError, IDatabaseConfig, ConnectionPool	- データベース接続文字列の取得 <br> - データベース接続の取得/切断 <br> - 接続テスト <br> - SQLクエリの実行 <br> - パラメータの型判定 <br> - パラメータのバリデーション <br> - 警告のログ出力
modDateUtils.bas	日付操作に関するユーティリティ関数を提供	clsPerformanceMonitor, modStackTrace, modError	- 日付の妥当性確認 <br> - 日付の加算/減算 <br> - 日付の差分計算 <br> - 日付のフォーマット <br> - 現在の日時取得 <br> - 営業日判定
modError.bas	アプリケーション全体のエラー処理を定義	ErrorInfo, modErrorCodes, DatabaseConnectionErrorHandler, FileNotFoundErrorHandler, InvalidInputErrorHandler, modStackTrace, clsPerformanceMonitor, clsLock, IErrorHandler	- エラー処理の実行 <br> - エラーハンドラーの登録/解除 <br> - デフォルトエラーハンドラーの登録 <br> - エラーコードに対応するハンドラーの取得 <br> - エラーカテゴリに対応するデフォルトハンドラーの取得 <br> - エラー情報の補完 <br> - 緊急エラーログの出力
modErrorCodes.bas	アプリケーション全体で使用するエラーコードを定義		- エラーコードの定義 <br> - エラーカテゴリの定義 <br> - エラーコードからカテゴリの取得
modFileIO.bas	ファイル入出力に関するユーティリティ関数を提供	clsPerformanceMonitor, modErrorCodes, modStackTrace, modError, IFileIO	- テキストファイルの読み込み/書き込み <br> - バイナリファイルの読み込み/書き込み <br> - ファイル/フォルダの存在確認 <br> - フォルダの作成/削除 <br> - ファイルの削除 <br> - 絶対パスの取得 <br> - エラーコードのマッピング
modMathUtils.bas	数学関連のユーティリティ関数を提供	clsPerformanceMonitor, modStackTrace, modError	- 安全な除算 <br> - 値の範囲チェック <br> - 値のクランプ <br> - 四捨五入
modStackTrace.bas	スタックトレースの管理を行う	clsLock, ErrorInfo, modError	- スタックトレースへのエントリ追加/削除 <br> - スタックトレースの取得 <br> - スタックの深さ取得 <br> - スタックのクリア <br> - スタックの状態確認
modStringUtils.bas	文字列操作に関するユーティリティ関数を提供	clsPerformanceMonitor, modStackTrace, modError	- 文字列の左/右パディング <br> - 文字列の前後の空白削除 <br> - 文字列の分割/結合
modTestRunner.bas	テストの実行を管理する	modTestUtility, Test_ErrorHandlers, Test_Loggers, Test_FileOperations, Test_Validators, Test_MathUtils, Test_StringUtils, Test_DateUtils, Test_DatabaseUtils, Test_ConnectionPool, Test_Crypto, Test_PerformanceMonitor, Test_Lock, Test_CallStack, ErrorInfo, modStackTrace, modError	- すべてのテストの実行 <br> - エラーハンドリングテストの実行 <br> - ロギングテストの実行 <br> - ファイル操作テストの実行 <br> - バリデーションテストの実行 <br> - ユーティリティテストの実行 <br> - データベーステストの実行 <br> - セキュリティテストの実行 <br> - パフォーマンステストの実行 <br> - テストレポートの出力
modTestUtility.bas	テストの実行を支援するユーティリティ関数を提供	clsLogger, DefaultLoggerSettings, clsPerformanceMonitor, TestCase, TestResult, ErrorInfo, modStackTrace, modError	- テストの開始/終了 <br> - アサーション関数の提供 <br> - テストレポートの生成 <br> - テストイベントのログ出力 <br> - テスト実行時間の取得 <br> - テストモジュールの初期化/クリーンアップ
modWindowsAPI.bas	Windows APIの呼び出しとインターフェースベースの実装への変換を行う	ModWindowsAPIConverter, IMutex, ICryptography, IIniFile, IPerformanceCounter, ISleep, MutexImpl, ErrorInfo	- Mutex操作 <br> - 暗号化操作 <br> - INIファイル操作 <br> - パフォーマンスカウンター操作 <br> - スリープ操作 <br> - Windowsエラーコードからアプリケーションエラーコードへのマッピング
ModWindowsAPIConverter.cls	Windows APIの呼び出しを新しいインターフェースベースの実装に変換するヘルパークラス	IMutex, ICryptography, IIniFile, IPerformanceCounter, IEventLog, ISleep, clsLock, MutexImpl, CryptographyImpl, IniFileImpl, PerformanceCounterImpl, EventLogImpl, SleepImpl	- 各インターフェースの実装クラスのインスタンス化 <br> - 最終エラーコードの取得 <br> - 各インターフェースの取得
MsgBoxNotifier.cls	メッセージボックスを使用してユーザーに通知を行うクラス	IUserNotifier, ILock, IPerformanceMonitor, IAppConfig, IMessageFormatter, ErrorInfo, modStackTrace, modError, DefaultMessageFormatter	- ユーザーへのエラー通知 <br> - 通知スタイルの設定/取得 <br> - デフォルトタイトルの設定/取得 <br> - 通知メッセージのフォーマット <br> - エラーカテゴリに応じたアイコン設定
MutexImpl.cls	ミューテックス操作の具象クラス	IMutex, clsPerformanceMonitor, ErrorInfo, modStackTrace, modError	- ミューテックスの作成/解放 <br> - ミューテックス所有権の待機 <br> - エラーログ出力
MutexLock.cls	ミューテックスを使用したロック機構を提供するクラス（MutexLockとの違いに注意）	ILock, IMutex, IAppConfig, modConfig, modStackTrace, modError, ErrorInfo	- ロックの取得と解放 <br> - タイムアウト付きロック取得 <br> - 設定ファイルからのミューテックス名読み込み <br> - エラーログ出力
ODBCConnectionStringBuilder.cls	ODBC接続文字列を生成するクラス	IConnectionStringBuilder	- ODBC接続文字列の生成 <br> - サーバー名の設定/取得 <br> - データベース名の設定/取得 <br> - ユーザー名の設定/取得 <br> - パスワードの設定/取得 <br> - 追加パラメータの設定/取得
OLEDBConnectionStringBuilder.cls	OLEDB接続文字列を生成するクラス	IConnectionStringBuilder	- OLEDB接続文字列の生成 <br> - サーバー名の設定/取得 <br> - データベース名の設定/取得 <br> - ユーザー名の設定/取得 <br> - パスワードの設定/取得 <br> - 追加パラメータの設定/取得
PatternRule.cls	正規表現パターンによる検証ルール	IValidationRule, IRegexEngine, VBScriptRegexEngine, ErrorInfo, modStackTrace, modError	- 正規表現パターンの設定/取得 <br> - 正規表現エンジンの設定/取得 <br> - 文字列のパターンマッチングによる妥当性検証 <br> - メールアドレス検証ルールの作成 <br> - 電話番号検証ルールの作成
PBKDF2KeyDerivationStrategy.cls	PBKDF2アルゴリズムによるキー導出戦略を実装するクラス	IKeyDerivationStrategy, modWindowsAPI, ErrorInfo, modStackTrace, modError	- パスワードとソルトを用いたキー導出 <br> - ハッシュオブジェクトの作成 <br> - ハッシュ値の計算 <br> - エラー処理
PerformanceCounterImpl.cls	パフォーマンスカウンター操作の具象クラス	IPerformanceCounter, clsLock, modWindowsAPI, ErrorInfo, modStackTrace, modError	- パフォーマンスカウンターの値取得 <br> - パフォーマンスカウンターの周波数取得 <br> - 高分解能タイマーのサポート確認 <br> - エラーログ出力 <br> - 分解能の取得
PerformanceMonitorImpl.cls	パフォーマンス監視機能の具象クラス	IPerformanceMonitor, modWindowsAPI, clsLock, IAppConfig, modConfig, ErrorInfo, modStackTrace, modError	- パフォーマンス計測の開始/終了 <br> - パフォーマンス測定データ（時間、メモリ使用量）の収集 <br> - パフォーマンス計測結果の取得 <br> - パフォーマンス計測結果の詳細取得 <br> - パフォーマンス監視の有効化/無効化
QueueImpl.cls	キューの具象クラス	IQueue	- キューへのアイテム追加 <br> - キューからのアイテム取り出し <br> - キューが空かどうかの確認 <br> - キュー内のアイテム数の取得 <br> - 先頭アイテムの参照 <br> - キューのクリア
SleepImpl.cls	スリープ処理の具象クラス	ISleep, IPerformanceCounter, ErrorInfo, modStackTrace, modError, PerformanceCounterImpl, modWindowsAPI	- 高精度スリープ <br> - 標準スリープ <br> - エラーログ出力
StackImpl.cls	スタックの具象クラス	IStack, clsLock	- スタックへの要素追加/削除 <br> - スタックの最後の要素取得 <br> - スタックが空かどうかの確認 <br> - スタック内の要素数取得 <br> - スタックのクリア <br> - 最大サイズの取得/設定
StackTraceImpl.cls	スタックトレースの実装を提供するクラス	IStackTrace, IStack, StackImpl, IAppConfig, modConfig, clsLock	- スタックエントリのプッシュ/ポップ <br> - スタックトレースの取得 <br> - スタック深さの取得 <br> - スタックのクリア <br> - スタックの空確認 <br> - スタックのピーク <br> - スタックエントリのフォーマット
StringValidator.cls	文字列の妥当性検証を行うクラス	IValidator, IValidationRule, IError, ErrorInfo, modStackTrace, modError, PatternRule, MinLengthRule, MaxLengthRule	- 文字列検証ルールの追加/クリア <br> - 文字列の妥当性検証 <br> - エラーハンドラーの設定 <br> - メールアドレスバリデーターの作成 <br> - 電話番号バリデーターの作成
TestClsCrypto.cls	clsCryptoクラステスト	clsCrypto, MockPerformanceMonitor, MockLock, ICryptography, IKeyDerivationStrategy, CryptographyImpl, PBKDF2KeyDerivationStrategy	- 暗号化と復号化のテスト <br> - パフォーマンスモニタリングのテスト <br> - 排他制御のテスト <br> - エラー処理のテスト
TestConnectionPool.cls	ConnectionPoolクラステスト	MockDatabaseConfig, MockPerformanceMonitor, MockLock, MockLogger, ConnectionPool	- 初期化時の依存オブジェクト設定テスト <br> - 不正接続文字列のテスト <br> - 接続リトライ処理のテスト <br> - プールサイズ制限のテスト <br> - 接続再利用のテスト
TestConsoleLogger.cls	ConsoleLoggerクラステスト	ConsoleLogger, clsPerformanceMonitor	- 初期化のテスト <br> - ログ書き込みのテスト <br> - 異なるログレベルでの書き込みテスト <br> - パフォーマンスモニタリングのテスト
TestCriticalSectionLock.cls	CriticalSectionLockクラステスト	clsCriticalSectionLock	- ロック取得成功のテスト <br> - タイムアウト付きロック取得のテスト <br> - ロック解放成功のテスト <br> - 複数回ロック取得のテスト <br> - 初期化のテスト
TestDatabaseLogger.cls	DatabaseLoggerクラステスト	DatabaseLogger, ConnectionPool, clsLock, clsPerformanceMonitor, ConfigImpl	- 初期化のテスト <br> - ログ書き込みのテスト <br> - 同時書き込みのテスト <br> - エラー処理のテスト <br> - テストテーブルの作成/削除
TestDateValidator.cls	DateValidatorクラステスト	DateValidator, MockError, MinDateRule, MaxDateRule, AllowFutureDateRule, AllowPastDateRule	- 最小日付検証のテスト <br> - 最大日付検証のテスト <br> - 未来日付許可検証のテスト <br> - 過去日付許可検証のテスト <br> - 生年月日バリデーターのテスト <br> - 有効期限バリデーターのテスト <br> - 複数ルール検証のテスト
TestDefaultMessageFormatter.cls	DefaultMessageFormatterクラステスト	DefaultMessageFormatter, ErrorInfo	- 基本メッセージフォーマットのテスト <br> - スタックトレース付きメッセージのテスト <br> - 空メッセージ処理のテスト <br> - エラー処理のテスト
TestEventLogLogger.cls	EventLogLoggerクラステスト	EventLogLogger, EventLogImpl, clsLock, clsPerformanceMonitor	- 初期化のテスト <br> - ログ書き込みのテスト <br> - 異なるログレベルでの書き込みテスト <br> - エラー処理のテスト <br> - テスト用イベントソースの作成/削除
TestFileLogger.cls	FileLoggerクラステスト	FileLogger, FileSystemOperations, clsLock, clsPerformanceMonitor	- 初期化のテスト <br> - ログ書き込みのテスト <br> - 同時書き込みのテスト <br> - エラー処理のテスト
TestFileSystemOperations.cls	FileSystemOperationsクラステスト	MockLock, MockPerformanceMonitor, MockFileIO, FileSystemOperations	- 未初期化状態でのメソッド呼び出しテスト <br> - 初期化済み状態でのメソッド呼び出しテスト <br> - ファイル操作テスト <br> - エラー処理テスト <br> - バイナリファイル操作テスト <br> - パス操作テスト
TestLogger.cls	Loggerクラステスト	clsLogger, DefaultLoggerSettings, QueueImpl, clsLock, clsPerformanceMonitor, FileLogger, DatabaseLogger, EventLogLogger, ConsoleLogger	- 初期化のテスト <br> - ロガー追加のテスト <br> - ログメッセージキューイングのテスト <br> - 非同期処理のテスト
TestMsgBoxNotifier.cls	MsgBoxNotifierクラステスト	MockLock, MockPerformanceMonitor, MockAppConfig, DefaultMessageFormatter, MsgBoxNotifier, ErrorInfo	- 初期化テスト（正常系/異常系） <br> - 通知スタイル設定テスト <br> - メッセージフォーマット処理テスト <br> - ロック処理テスト <br> - 各種スタイルでの通知テスト <br> - リソース管理テスト
TestMutexLock.cls	MutexLockクラステスト	clsMutexLock	- ロック取得成功のテスト <br> - タイムアウト付きロック取得のテスト <br> - ロック解放成功のテスト <br> - ミューテックス名設定のテスト <br> - 複数回ロック取得のテスト
TestSemaphoreLock.cls	SemaphoreLockクラステスト	clsSemaphoreLock	- ロック取得成功のテスト <br> - タイムアウト付きロック取得のテスト <br> - ロック解放成功のテスト <br> - セマフォ名設定のテスト <br> - 複数回ロック取得のテスト
TestStringValidator.cls	StringValidatorクラステスト	StringValidator, MockError, MinLengthRule, MaxLengthRule, PatternRule	- 最小長検証のテスト <br> - 最大長検証のテスト <br> - パターン検証のテスト <br> - メールアドレス検証のテスト <br> - 電話番号検証のテスト <br> - 複数ルール検証のテスト
VBScriptRegexEngine.cls	VBScriptの正規表現エンジンを使用するクラス	IRegexEngine, ErrorInfo, modStackTrace, modError	- 正規表現によるテスト <br> - 正規表現による置換 <br> - 正規表現によるマッチング
