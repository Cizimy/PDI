This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-27T00:46:07.782Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
MockDatabaseConfig.cls
MockError.cls
MockFileIO.cls
MockLock.cls
MockLogger.cls
MockMessageFormatter.cls
MockPerformanceMonitor.cls
modTestRunner.bas
modTestUtility.bas
TestClsCrypto.cls
TestConnectionPool.cls
TestConsoleLogger.cls
TestCriticalSectionLock.cls
TestDatabaseLogger.cls
TestDateValidator.cls
TestDefaultMessageFormatter.cls
TestEventLogLogger.cls
TestFileLogger.cls
TestFileSystemOperations.cls
TestLogger.cls
TestMsgBoxNotifier.cls
TestMutexLock.cls
TestSemaphoreLock.cls
TestStringValidator.cls

================================================================
Files
================================================================

================
File: MockDatabaseConfig.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "MockDatabaseConfig"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements IDatabaseConfig

' モック用の内部状態
Private mConnectionString As String
Private mMaxPoolSize As Long
Private mRetryCount As Long
Private mRetryInterval As Long
Private mConnectionTimeout As Long

' メソッド呼び出し回数のカウンター
Private mGetConnectionStringCallCount As Long
Private mGetMaxPoolSizeCallCount As Long
Private mGetRetryCountCallCount As Long
Private mGetRetryIntervalCallCount As Long
Private mGetConnectionTimeoutCallCount As Long

'*******************************************************************************
' 初期化
'*******************************************************************************
Private Sub Class_Initialize()
    ' デフォルト値の設定
    mConnectionString = "Provider=SQLOLEDB;Data Source=TestServer;"
    mMaxPoolSize = 5
    mRetryCount = 3
    mRetryInterval = 1000
    mConnectionTimeout = 30000
    
    ' カウンターの初期化
    mGetConnectionStringCallCount = 0
    mGetMaxPoolSizeCallCount = 0
    mGetRetryCountCallCount = 0
    mGetRetryIntervalCallCount = 0
    mGetConnectionTimeoutCallCount = 0
End Sub

'*******************************************************************************
' IDatabaseConfig インターフェースの実装
'*******************************************************************************
Private Function IDatabaseConfig_GetConnectionString() As String
    mGetConnectionStringCallCount = mGetConnectionStringCallCount + 1
    IDatabaseConfig_GetConnectionString = mConnectionString
End Function

Private Function IDatabaseConfig_GetMaxPoolSize() As Long
    mGetMaxPoolSizeCallCount = mGetMaxPoolSizeCallCount + 1
    IDatabaseConfig_GetMaxPoolSize = mMaxPoolSize
End Function

Private Function IDatabaseConfig_GetRetryCount() As Long
    mGetRetryCountCallCount = mGetRetryCountCallCount + 1
    IDatabaseConfig_GetRetryCount = mRetryCount
End Function

Private Function IDatabaseConfig_GetRetryInterval() As Long
    mGetRetryIntervalCallCount = mGetRetryIntervalCallCount + 1
    IDatabaseConfig_GetRetryInterval = mRetryInterval
End Function

Private Function IDatabaseConfig_GetConnectionTimeout() As Long
    mGetConnectionTimeoutCallCount = mGetConnectionTimeoutCallCount + 1
    IDatabaseConfig_GetConnectionTimeout = mConnectionTimeout
End Function

'*******************************************************************************
' モック用のセッターメソッド
'*******************************************************************************
Public Sub SetConnectionString(ByVal value As String)
    mConnectionString = value
End Sub

Public Sub SetMaxPoolSize(ByVal value As Long)
    mMaxPoolSize = value
End Sub

Public Sub SetRetryCount(ByVal value As Long)
    mRetryCount = value
End Sub

Public Sub SetRetryInterval(ByVal value As Long)
    mRetryInterval = value
End Sub

Public Sub SetConnectionTimeout(ByVal value As Long)
    mConnectionTimeout = value
End Sub

'*******************************************************************************
' 呼び出し回数の取得メソッド
'*******************************************************************************
Public Property Get GetConnectionStringCallCount() As Long
    GetConnectionStringCallCount = mGetConnectionStringCallCount
End Property

Public Property Get GetMaxPoolSizeCallCount() As Long
    GetMaxPoolSizeCallCount = mGetMaxPoolSizeCallCount
End Property

Public Property Get GetRetryCountCallCount() As Long
    GetRetryCountCallCount = mGetRetryCountCallCount
End Property

Public Property Get GetRetryIntervalCallCount() As Long
    GetRetryIntervalCallCount = mGetRetryIntervalCallCount
End Property

Public Property Get GetConnectionTimeoutCallCount() As Long
    GetConnectionTimeoutCallCount = mGetConnectionTimeoutCallCount
End Property

'*******************************************************************************
' カウンターのリセット
'*******************************************************************************
Public Sub ResetCallCounts()
    mGetConnectionStringCallCount = 0
    mGetMaxPoolSizeCallCount = 0
    mGetRetryCountCallCount = 0
    mGetRetryIntervalCallCount = 0
    mGetConnectionTimeoutCallCount = 0
End Sub

================
File: MockError.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "MockError"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "MockError"

' ======================
' インターフェース実装
' ======================
Implements IError

' ======================
' プライベート変数
' ======================
Private mErrors As Collection
Private mLastError As ErrorInfo

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    Set mErrors = New Collection
End Sub

Private Sub Class_Terminate()
    Set mErrors = Nothing
    Set mLastError = Nothing
End Sub

' ======================
' プロパティ
' ======================
Public Property Get Errors() As Collection
    Set Errors = mErrors
End Property

Public Property Get LastError() As ErrorInfo
    Set LastError = mLastError
End Property

' ======================
' メソッド
' ======================
Private Sub IError_HandleError(ByVal errorInfo As ErrorInfo)
    Set mLastError = errorInfo
    mErrors.Add errorInfo
End Sub

Public Sub ClearErrors()
    Set mErrors = New Collection
    Set mLastError = Nothing
End Sub

Public Function GetErrorCount() As Long
    GetErrorCount = mErrors.Count
End Function

Public Function GetErrorAt(ByVal index As Long) As ErrorInfo
    If index <= 0 Or index > mErrors.Count Then
        Err.Raise 9, MODULE_NAME, "インデックスが範囲外です。"
    End If
    Set GetErrorAt = mErrors(index)
End Function

Public Function ContainsError(ByVal errorCode As Long) As Boolean
    Dim err As ErrorInfo
    For Each err In mErrors
        If err.Code = errorCode Then
            ContainsError = True
            Exit Function
        End If
    Next err
    ContainsError = False
End Function

Public Function ContainsErrorMessage(ByVal message As String) As Boolean
    Dim err As ErrorInfo
    For Each err In mErrors
        If InStr(1, err.Description, message, vbTextCompare) > 0 Then
            ContainsErrorMessage = True
            Exit Function
        End If
    Next err
    ContainsErrorMessage = False
End Function

================
File: MockFileIO.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "MockFileIO"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' インターフェース実装
' ======================
Implements IFileIO

' ======================
' プライベート変数
' ======================
Private Type FileExistsEntry
    FilePath As String
    Exists As Boolean
End Type

Private Type CreateFolderEntry
    FolderPath As String
    Success As Boolean
End Type

Private Type OpenFileEntry
    FilePath As String
    Result As Object
End Type

Private Type BinaryFileEntry
    FilePath As String
    Content() As Byte
End Type

Private mFileExistsEntries As Collection
Private mFolderExistsEntries As Collection
Private mCreateFolderEntries As Collection
Private mDeleteFileEntries As Collection
Private mDeleteFolderEntries As Collection
Private mOpenFileEntries As Collection
Private mBinaryFileEntries As Collection

Private mMethodCalls As Collection

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    Set mFileExistsEntries = New Collection
    Set mFolderExistsEntries = New Collection
    Set mCreateFolderEntries = New Collection
    Set mDeleteFileEntries = New Collection
    Set mDeleteFolderEntries = New Collection
    Set mOpenFileEntries = New Collection
    Set mBinaryFileEntries = New Collection
    Set mMethodCalls = New Collection
End Sub

' ======================
' モック設定メソッド
' ======================
Public Sub SetFileExists(ByVal filePath As String, ByVal exists As Boolean)
    Dim entry As FileExistsEntry
    entry.FilePath = filePath
    entry.Exists = exists
    AddToCollection mFileExistsEntries, entry, filePath
End Sub

Public Sub SetFolderExists(ByVal folderPath As String, ByVal exists As Boolean)
    Dim entry As FileExistsEntry
    entry.FilePath = folderPath
    entry.Exists = exists
    AddToCollection mFolderExistsEntries, entry, folderPath
End Sub

Public Sub SetCreateFolderResult(ByVal folderPath As String, ByVal success As Boolean)
    Dim entry As CreateFolderEntry
    entry.FolderPath = folderPath
    entry.Success = success
    AddToCollection mCreateFolderEntries, entry, folderPath
End Sub

Public Sub SetOpenFileResult(ByVal filePath As String, ByVal result As Object)
    Dim entry As OpenFileEntry
    entry.FilePath = filePath
    Set entry.Result = result
    AddToCollection mOpenFileEntries, entry, filePath
End Sub

Public Sub SetBinaryFileContent(ByVal filePath As String, ByRef content() As Byte)
    Dim entry As BinaryFileEntry
    entry.FilePath = filePath
    ReDim entry.Content(LBound(content) To UBound(content))
    Dim i As Long
    For i = LBound(content) To UBound(content)
        entry.Content(i) = content(i)
    Next i
    AddToCollection mBinaryFileEntries, entry, filePath
End Sub

' ======================
' 検証メソッド
' ======================
Public Function WasMethodCalled(ByVal methodName As String) As Boolean
    Dim call As Variant
    For Each call In mMethodCalls
        If call = methodName Then
            WasMethodCalled = True
            Exit Function
        End If
    Next call
    WasMethodCalled = False
End Function

Public Function GetMethodCallCount(ByVal methodName As String) As Long
    Dim count As Long
    Dim call As Variant
    For Each call In mMethodCalls
        If call = methodName Then count = count + 1
    Next call
    GetMethodCallCount = count
End Function

' ======================
' IFileIO実装
' ======================
Private Function IFileIO_FileExists(ByVal filePath As String) As Boolean
    mMethodCalls.Add "FileExists"
    
    Dim entry As FileExistsEntry
    Dim var As Variant
    For Each var In mFileExistsEntries
        entry = var
        If entry.FilePath = filePath Then
            IFileIO_FileExists = entry.Exists
            Exit Function
        End If
    Next var
    IFileIO_FileExists = False
End Function

Private Function IFileIO_FolderExists(ByVal folderPath As String) As Boolean
    mMethodCalls.Add "FolderExists"
    
    Dim entry As FileExistsEntry
    Dim var As Variant
    For Each var In mFolderExistsEntries
        entry = var
        If entry.FilePath = folderPath Then
            IFileIO_FolderExists = entry.Exists
            Exit Function
        End If
    Next var
    IFileIO_FolderExists = False
End Function

Private Function IFileIO_CreateFolder(ByVal folderPath As String) As Boolean
    mMethodCalls.Add "CreateFolder"
    
    Dim entry As CreateFolderEntry
    Dim var As Variant
    For Each var In mCreateFolderEntries
        entry = var
        If entry.FolderPath = folderPath Then
            IFileIO_CreateFolder = entry.Success
            Exit Function
        End If
    Next var
    IFileIO_CreateFolder = False
End Function

Private Function IFileIO_DeleteFile(ByVal filePath As String) As Boolean
    mMethodCalls.Add "DeleteFile"
    IFileIO_DeleteFile = True ' デフォルトで成功を返す
End Function

Private Function IFileIO_CopyFile(ByVal sourceFilePath As String, ByVal destinationFilePath As String) As Boolean
    mMethodCalls.Add "CopyFile"
    IFileIO_CopyFile = True ' デフォルトで成功を返す
End Function

Private Function IFileIO_MoveFile(ByVal sourceFilePath As String, ByVal destinationFilePath As String) As Boolean
    mMethodCalls.Add "MoveFile"
    IFileIO_MoveFile = True ' デフォルトで成功を返す
End Function

Private Function IFileIO_OpenFile(ByVal filePath As String, ByVal mode As String) As Object
    mMethodCalls.Add "OpenFile"
    
    Dim entry As OpenFileEntry
    Dim var As Variant
    For Each var In mOpenFileEntries
        entry = var
        If entry.FilePath = filePath Then
            Set IFileIO_OpenFile = entry.Result
            Exit Function
        End If
    Next var
    Set IFileIO_OpenFile = Nothing
End Function

Private Function IFileIO_CloseFile(ByVal file As Object) As Boolean
    mMethodCalls.Add "CloseFile"
    IFileIO_CloseFile = True ' デフォルトで成功を返す
End Function

' ======================
' プライベートヘルパーメソッド
' ======================
Private Sub AddToCollection(ByVal col As Collection, ByRef entry As Variant, ByVal key As String)
    On Error Resume Next
    col.Remove key
    On Error GoTo 0
    col.Add entry, key
End Sub

================
File: MockLock.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "MockLock"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements ILock

' モック用の内部状態
Private mIsLocked As Boolean
Private mAcquireLockCallCount As Long
Private mReleaseLockCallCount As Long
Private mShouldFailAcquire As Boolean
Private mShouldFailRelease As Boolean

'*******************************************************************************
' 初期化
'*******************************************************************************
Private Sub Class_Initialize()
    mIsLocked = False
    mAcquireLockCallCount = 0
    mReleaseLockCallCount = 0
    mShouldFailAcquire = False
    mShouldFailRelease = False
End Sub

'*******************************************************************************
' ILock インターフェースの実装
'*******************************************************************************
Private Sub ILock_AcquireLock()
    mAcquireLockCallCount = mAcquireLockCallCount + 1
    
    If mShouldFailAcquire Then
        Err.Raise vbObjectError + 1001, "MockLock", "ロックの取得に失敗しました"
    End If
    
    If mIsLocked Then
        Err.Raise vbObjectError + 1002, "MockLock", "既にロックされています"
    End If
    
    mIsLocked = True
End Sub

Private Sub ILock_ReleaseLock()
    mReleaseLockCallCount = mReleaseLockCallCount + 1
    
    If mShouldFailRelease Then
        Err.Raise vbObjectError + 1003, "MockLock", "ロックの解放に失敗しました"
    End If
    
    If Not mIsLocked Then
        Err.Raise vbObjectError + 1004, "MockLock", "ロックされていません"
    End If
    
    mIsLocked = False
End Sub

'*******************************************************************************
' モック用のヘルパーメソッド
'*******************************************************************************
Public Property Get IsLocked() As Boolean
    IsLocked = mIsLocked
End Property

Public Property Get AcquireLockCallCount() As Long
    AcquireLockCallCount = mAcquireLockCallCount
End Property

Public Property Get ReleaseLockCallCount() As Long
    ReleaseLockCallCount = mReleaseLockCallCount
End Property

Public Sub SetShouldFailAcquire(ByVal value As Boolean)
    mShouldFailAcquire = value
End Sub

Public Sub SetShouldFailRelease(ByVal value As Boolean)
    mShouldFailRelease = value
End Sub

Public Sub ResetCallCounts()
    mAcquireLockCallCount = 0
    mReleaseLockCallCount = 0
End Sub

Public Sub Reset()
    mIsLocked = False
    ResetCallCounts
    mShouldFailAcquire = False
    mShouldFailRelease = False
End Sub

'*******************************************************************************
' テスト用のヘルパーメソッド
'*******************************************************************************
Public Function IsLockBalanced() As Boolean
    IsLockBalanced = (mAcquireLockCallCount = mReleaseLockCallCount) And (Not mIsLocked)
End Function

Public Function GetUnbalancedLockCount() As Long
    GetUnbalancedLockCount = mAcquireLockCallCount - mReleaseLockCallCount
End Function

================
File: MockLogger.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "MockLogger"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements ILogger

' ログエントリの構造体
Private Type LogEntry
    Level As String
    Module As String
    Procedure As String
    Message As String
    Timestamp As Date
End Type

' モック用の内部状態
Private mLogEntries() As LogEntry
Private mLogCount As Long
Private mMaxEntries As Long

' カウンター
Private mDebugLogCount As Long
Private mInfoLogCount As Long
Private mWarnLogCount As Long
Private mErrorLogCount As Long

'*******************************************************************************
' 初期化
'*******************************************************************************
Private Sub Class_Initialize()
    mMaxEntries = 1000
    ReDim mLogEntries(1 To mMaxEntries)
    mLogCount = 0
    ResetCounters
End Sub

'*******************************************************************************
' ILogger インターフェースの実装
'*******************************************************************************
Private Sub ILogger_LogDebug(ByVal Module As String, ByVal Procedure As String, ByVal Message As String)
    AddLogEntry "DEBUG", Module, Procedure, Message
    mDebugLogCount = mDebugLogCount + 1
End Sub

Private Sub ILogger_LogInfo(ByVal Module As String, ByVal Procedure As String, ByVal Message As String)
    AddLogEntry "INFO", Module, Procedure, Message
    mInfoLogCount = mInfoLogCount + 1
End Sub

Private Sub ILogger_LogWarning(ByVal Module As String, ByVal Procedure As String, ByVal Message As String)
    AddLogEntry "WARN", Module, Procedure, Message
    mWarnLogCount = mWarnLogCount + 1
End Sub

Private Sub ILogger_LogError(ByVal Module As String, ByVal Procedure As String, ByVal Message As String)
    AddLogEntry "ERROR", Module, Procedure, Message
    mErrorLogCount = mErrorLogCount + 1
End Sub

'*******************************************************************************
' プライベートメソッド
'*******************************************************************************
Private Sub AddLogEntry(ByVal Level As String, ByVal Module As String, ByVal Procedure As String, ByVal Message As String)
    If mLogCount >= mMaxEntries Then Exit Sub
    
    mLogCount = mLogCount + 1
    With mLogEntries(mLogCount)
        .Level = Level
        .Module = Module
        .Procedure = Procedure
        .Message = Message
        .Timestamp = Now
    End With
End Sub

'*******************************************************************************
' モック用のヘルパーメソッド
'*******************************************************************************
Public Property Get LogCount() As Long
    LogCount = mLogCount
End Property

Public Property Get DebugLogCount() As Long
    DebugLogCount = mDebugLogCount
End Property

Public Property Get InfoLogCount() As Long
    InfoLogCount = mInfoLogCount
End Property

Public Property Get WarnLogCount() As Long
    WarnLogCount = mWarnLogCount
End Property

Public Property Get ErrorLogCount() As Long
    ErrorLogCount = mErrorLogCount
End Property

Public Function GetLogEntry(ByVal index As Long) As String
    If index < 1 Or index > mLogCount Then
        GetLogEntry = ""
        Exit Function
    End If
    
    With mLogEntries(index)
        GetLogEntry = .Level & "|" & .Module & "|" & .Procedure & "|" & .Message
    End With
End Function

Public Function ContainsMessage(ByVal searchText As String) As Boolean
    Dim i As Long
    For i = 1 To mLogCount
        If InStr(1, mLogEntries(i).Message, searchText, vbTextCompare) > 0 Then
            ContainsMessage = True
            Exit Function
        End If
    Next i
    ContainsMessage = False
End Function

Public Sub ClearLogs()
    mLogCount = 0
    ResetCounters
End Sub

Private Sub ResetCounters()
    mDebugLogCount = 0
    mInfoLogCount = 0
    mWarnLogCount = 0
    mErrorLogCount = 0
End Sub

'*******************************************************************************
' テスト用のヘルパーメソッド
'*******************************************************************************
Public Function GetLastLogEntry() As String
    If mLogCount = 0 Then
        GetLastLogEntry = ""
    Else
        GetLastLogEntry = GetLogEntry(mLogCount)
    End If
End Function

Public Function GetLogEntriesByLevel(ByVal Level As String) As Long
    Dim count As Long
    Dim i As Long
    For i = 1 To mLogCount
        If mLogEntries(i).Level = Level Then count = count + 1
    Next i
    GetLogEntriesByLevel = count
End Function

================
File: MockMessageFormatter.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "MockMessageFormatter"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' インターフェース実装
' ======================
Implements IMessageFormatter

' ======================
' プライベート変数
' ======================
Private mWasCalled As Boolean
Private mReturnValue As String
Private mLastMessage As String
Private mLastErrorInfo As ErrorInfo

' ======================
' プロパティ
' ======================
Public Property Get WasCalled() As Boolean
    WasCalled = mWasCalled
End Property

Public Property Get LastMessage() As String
    LastMessage = mLastMessage
End Property

Public Property Get LastErrorInfo() As ErrorInfo
    LastErrorInfo = mLastErrorInfo
End Property

' ======================
' パブリックメソッド
' ======================
Public Sub SetReturnValue(ByVal value As String)
    mReturnValue = value
End Sub

Public Sub Reset()
    mWasCalled = False
    mReturnValue = ""
    mLastMessage = ""
    Set mLastErrorInfo = Nothing
End Sub

' ======================
' IMessageFormatter実装
' ======================
Private Function IMessageFormatter_FormatMessage(ByVal message As String, ByRef errorInfo As ErrorInfo) As String
    mWasCalled = True
    mLastMessage = message
    Set mLastErrorInfo = errorInfo
    IMessageFormatter_FormatMessage = mReturnValue
End Function

================
File: MockPerformanceMonitor.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "MockPerformanceMonitor"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Implements IPerformanceMonitor

' モック用の内部状態
Private Type MeasurementInfo
    StartTime As Date
    EndTime As Date
    Category As String
End Type

Private mMeasurements() As MeasurementInfo
Private mMeasurementCount As Long
Private mMaxMeasurements As Long

'*******************************************************************************
' 初期化
'*******************************************************************************
Private Sub Class_Initialize()
    mMaxMeasurements = 100
    ReDim mMeasurements(1 To mMaxMeasurements)
    mMeasurementCount = 0
End Sub

'*******************************************************************************
' IPerformanceMonitor インターフェースの実装
'*******************************************************************************
Private Sub IPerformanceMonitor_StartMeasurement(ByVal category As String)
    If mMeasurementCount >= mMaxMeasurements Then Exit Sub
    
    mMeasurementCount = mMeasurementCount + 1
    With mMeasurements(mMeasurementCount)
        .StartTime = Now
        .Category = category
    End With
End Sub

Private Sub IPerformanceMonitor_EndMeasurement(ByVal category As String)
    Dim i As Long
    For i = mMeasurementCount To 1 Step -1
        If mMeasurements(i).Category = category Then
            mMeasurements(i).EndTime = Now
            Exit Sub
        End If
    Next i
End Sub

'*******************************************************************************
' モック用のヘルパーメソッド
'*******************************************************************************
Public Function GetMeasurementCount() As Long
    GetMeasurementCount = mMeasurementCount
End Function

Public Function GetMeasurementDuration(ByVal index As Long) As Double
    If index < 1 Or index > mMeasurementCount Then
        GetMeasurementDuration = 0
        Exit Function
    End If
    
    With mMeasurements(index)
        If .EndTime = #12:00:00 AM# Then
            GetMeasurementDuration = 0
        Else
            GetMeasurementDuration = DateDiff("s", .StartTime, .EndTime)
        End If
    End With
End Function

Public Function GetMeasurementCategory(ByVal index As Long) As String
    If index < 1 Or index > mMeasurementCount Then
        GetMeasurementCategory = ""
        Exit Function
    End If
    
    GetMeasurementCategory = mMeasurements(index).Category
End Function

Public Sub ResetMeasurements()
    mMeasurementCount = 0
End Sub

'*******************************************************************************
' テスト用のヘルパーメソッド
'*******************************************************************************
Public Function HasMeasurement(ByVal category As String) As Boolean
    Dim i As Long
    For i = 1 To mMeasurementCount
        If mMeasurements(i).Category = category Then
            HasMeasurement = True
            Exit Function
        End If
    Next i
    HasMeasurement = False
End Function

Public Function GetCompletedMeasurementCount() As Long
    Dim count As Long
    Dim i As Long
    For i = 1 To mMeasurementCount
        If mMeasurements(i).EndTime <> #12:00:00 AM# Then
            count = count + 1
        End If
    Next i
    GetCompletedMeasurementCount = count
End Function

================
File: modTestRunner.bas
================
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "modTestRunner"

' ======================
' テスト実行モジュール
' ======================
Public Sub RunAllTests()
    On Error GoTo ErrorHandler
    
    modTestUtility.InitializeTestModule

    ' エラーハンドリング関連のテスト
    RunErrorHandlingTests
    
    ' ロギング関連のテスト
    RunLoggingTests
    
    ' ファイル操作関連のテスト
    RunFileOperationsTests
    
    ' バリデーション関連のテスト
    RunValidationTests
    
    ' ユーティリティ関連のテスト
    RunUtilityTests
    
    ' データベース関連のテスト
    RunDatabaseTests
    
    ' セキュリティ関連のテスト
    RunSecurityTests
    
    ' パフォーマンス関連のテスト
    RunPerformanceTests
    
    ' テストレポートの出力
    Debug.Print modTestUtility.GenerateTestReport
    modTestUtility.CleanupTestModule
    Exit Sub

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "テスト実行中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "RunAllTests"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
End Sub

' ======================
' エラーハンドリングテスト
' ======================
Private Sub RunErrorHandlingTests()
    On Error GoTo ErrorHandler
    
    modTestUtility.StartTest "Test_ErrorHandlers", "エラーハンドラーのテスト"
    Test_ErrorHandlers
    modTestUtility.EndTest modTestUtility.ResultPass
    
    Exit Sub

ErrorHandler:
    modTestUtility.EndTest modTestUtility.ResultFail, "エラーハンドリングテストでエラー発生: " & Err.Description
End Sub

' ======================
' ロギングテスト
' ======================
Private Sub RunLoggingTests()
    On Error GoTo ErrorHandler
    
    modTestUtility.StartTest "Test_Loggers", "ロガーのテスト"
    Test_Loggers
    modTestUtility.EndTest modTestUtility.ResultPass
    
    Exit Sub

ErrorHandler:
    modTestUtility.EndTest modTestUtility.ResultFail, "ロギングテストでエラー発生: " & Err.Description
End Sub

' ======================
' ファイル操作テスト
' ======================
Private Sub RunFileOperationsTests()
    On Error GoTo ErrorHandler
    
    modTestUtility.StartTest "Test_FileOperations", "ファイル操作のテスト"
    Test_FileOperations
    modTestUtility.EndTest modTestUtility.ResultPass
    
    Exit Sub

ErrorHandler:
    modTestUtility.EndTest modTestUtility.ResultFail, "ファイル操作テストでエラー発生: " & Err.Description
End Sub

' ======================
' バリデーションテスト
' ======================
Private Sub RunValidationTests()
    On Error GoTo ErrorHandler
    
    modTestUtility.StartTest "Test_Validators", "バリデーターのテスト"
    Test_Validators
    modTestUtility.EndTest modTestUtility.ResultPass
    
    Exit Sub

ErrorHandler:
    modTestUtility.EndTest modTestUtility.ResultFail, "バリデーションテストでエラー発生: " & Err.Description
End Sub

' ======================
' ユーティリティテスト
' ======================
Private Sub RunUtilityTests()
    On Error GoTo ErrorHandler
    
    modTestUtility.StartTest "Test_MathUtils", "数学ユーティリティのテスト"
    Test_MathUtils
    modTestUtility.EndTest modTestUtility.ResultPass
    
    modTestUtility.StartTest "Test_StringUtils", "文字列ユーティリティのテスト"
    Test_StringUtils
    modTestUtility.EndTest modTestUtility.ResultPass
    
    modTestUtility.StartTest "Test_DateUtils", "日付ユーティリティのテスト"
    Test_DateUtils
    modTestUtility.EndTest modTestUtility.ResultPass
    
    Exit Sub

ErrorHandler:
    modTestUtility.EndTest modTestUtility.ResultFail, "ユーティリティテストでエラー発生: " & Err.Description
End Sub

' ======================
' データベーステスト
' ======================
Private Sub RunDatabaseTests()
    On Error GoTo ErrorHandler
    
    modTestUtility.StartTest "Test_DatabaseUtils", "データベースユーティリティのテスト"
    Test_DatabaseUtils
    modTestUtility.EndTest modTestUtility.ResultPass
    
    modTestUtility.StartTest "Test_ConnectionPool", "接続プールのテスト"
    Test_ConnectionPool
    modTestUtility.EndTest modTestUtility.ResultPass
    
    Exit Sub

ErrorHandler:
    modTestUtility.EndTest modTestUtility.ResultFail, "データベーステストでエラー発生: " & Err.Description
End Sub

' ======================
' セキュリティテスト
' ======================
Private Sub RunSecurityTests()
    On Error GoTo ErrorHandler
    
    modTestUtility.StartTest "Test_Crypto", "暗号化のテスト"
    Test_Crypto
    modTestUtility.EndTest modTestUtility.ResultPass
    
    Exit Sub

ErrorHandler:
    modTestUtility.EndTest modTestUtility.ResultFail, "セキュリティテストでエラー発生: " & Err.Description
End Sub

' ======================
' パフォーマンステスト
' ======================
Private Sub RunPerformanceTests()
    On Error GoTo ErrorHandler
    
    modTestUtility.StartTest "Test_PerformanceMonitor", "パフォーマンスモニターのテスト"
    Test_PerformanceMonitor
    modTestUtility.EndTest modTestUtility.ResultPass
    
    modTestUtility.StartTest "Test_Lock", "ロック機能のテスト"
    Test_Lock
    modTestUtility.EndTest modTestUtility.ResultPass
    
    modTestUtility.StartTest "Test_CallStack", "コールスタックのテスト"
    Test_CallStack
    modTestUtility.EndTest modTestUtility.ResultPass
    
    Exit Sub

ErrorHandler:
    modTestUtility.EndTest modTestUtility.ResultFail, "パフォーマンステストでエラー発生: " & Err.Description
End Sub

#If DEBUG Then
    ' ======================
    ' エラーハンドリングテストケース
    ' ======================
    Private Sub Test_ErrorHandlers()
        ' DatabaseConnectionErrorHandlerのテスト
        Dim dbErrorHandler As New DatabaseConnectionErrorHandler
        modTestUtility.AssertTrue TypeOf dbErrorHandler Is IErrorHandler, "DatabaseConnectionErrorHandlerがIErrorHandlerを実装していることを確認"
        
        ' FileNotFoundErrorHandlerのテスト
        Dim fileNotFoundHandler As New FileNotFoundErrorHandler
        modTestUtility.AssertTrue TypeOf fileNotFoundHandler Is IErrorHandler, "FileNotFoundErrorHandlerがIErrorHandlerを実装していることを確認"
        
        ' InvalidInputErrorHandlerのテスト
        Dim invalidInputHandler As New InvalidInputErrorHandler
        modTestUtility.AssertTrue TypeOf invalidInputHandler Is IErrorHandler, "InvalidInputErrorHandlerがIErrorHandlerを実装していることを確認"
        
        ' エラーコードの検証
        Dim errInfo As New ErrorInfo
        modTestUtility.AssertTrue dbErrorHandler.HandleError(errInfo) <> 0, "エラーハンドリングの結果確認"
    End Sub
    
    ' ======================
    ' ロギングテストケース
    ' ======================
    Private Sub Test_Loggers()
        ' FileLoggerのテスト
        Dim fileLogger As New FileLogger
        modTestUtility.AssertTrue TypeOf fileLogger Is ILogger, "FileLoggerがILoggerを実装していることを確認"
        
        ' MockLoggerのテスト
        Dim mockLogger As New MockLogger
        modTestUtility.AssertTrue TypeOf mockLogger Is ILogger, "MockLoggerがILoggerを実装していることを確認"
        
        ' clsLoggerのテスト
        Dim logger As New clsLogger
        modTestUtility.AssertTrue TypeOf logger Is ILogger, "clsLoggerがILoggerを実装していることを確認"
        
        ' DefaultLoggerSettingsのテスト
        Dim settings As New DefaultLoggerSettings
        modTestUtility.AssertTrue TypeOf settings Is ILoggerSettings, "DefaultLoggerSettingsがILoggerSettingsを実装していることを確認"
        
        ' ログ出力のテスト
        fileLogger.LogMessage "テストメッセージ", LogLevel.Info
        mockLogger.LogMessage "テストメッセージ", LogLevel.Info
        logger.LogMessage "テストメッセージ", LogLevel.Info
    End Sub
    
    ' ======================
    ' ファイル操作テストケース
    ' ======================
    Private Sub Test_FileOperations()
        ' FileSystemOperationsのテスト
        Dim fileOps As New FileSystemOperations
        modTestUtility.AssertTrue TypeOf fileOps Is IFileOperations, "FileSystemOperationsがIFileOperationsを実装していることを確認"
        
        ' modFileIOのテスト
        Dim testPath As String
        testPath = "test.txt"
        
        modFileIO.WriteTextFile testPath, "テストデータ"
        modTestUtility.AssertTrue modFileIO.FileExists(testPath), "ファイル作成の確認"
        
        Dim content As String
        content = modFileIO.ReadTextFile(testPath)
        modTestUtility.AssertEqual "テストデータ", content, "ファイル内容の確認"
        
        modFileIO.DeleteFile testPath
        modTestUtility.AssertFalse modFileIO.FileExists(testPath), "ファイル削除の確認"
    End Sub
    
    ' ======================
    ' バリデーションテストケース
    ' ======================
    Private Sub Test_Validators()
        ' StringValidatorのテスト
        Dim strValidator As New StringValidator
        modTestUtility.AssertTrue TypeOf strValidator Is IValidator, "StringValidatorがIValidatorを実装していることを確認"
        modTestUtility.AssertTrue strValidator.Validate("テスト"), "有効な文字列の検証"
        modTestUtility.AssertFalse strValidator.Validate(""), "空文字列の検証"
        
        ' DateValidatorのテスト
        Dim dateValidator As New DateValidator
        modTestUtility.AssertTrue TypeOf dateValidator Is IValidator, "DateValidatorがIValidatorを実装していることを確認"
        modTestUtility.AssertTrue dateValidator.Validate(Date), "有効な日付の検証"
        modTestUtility.AssertFalse dateValidator.Validate(Empty), "無効な日付の検証"
    End Sub
    
    ' ======================
    ' ユーティリティテストケース
    ' ======================
    Private Sub Test_MathUtils()
        modTestUtility.AssertEqual 10, modMathUtils.Add(7, 3), "加算のテスト"
        modTestUtility.AssertEqual 4, modMathUtils.Subtract(7, 3), "減算のテスト"
        modTestUtility.AssertEqual 21, modMathUtils.Multiply(7, 3), "乗算のテスト"
    End Sub
    
    Private Sub Test_StringUtils()
        modTestUtility.AssertEqual "HELLO", modStringUtils.ToUpper("hello"), "大文字変換のテスト"
        modTestUtility.AssertEqual "hello", modStringUtils.ToLower("HELLO"), "小文字変換のテスト"
        modTestUtility.AssertTrue modStringUtils.IsEmpty(""), "空文字チェックのテスト"
    End Sub
    
    Private Sub Test_DateUtils()
        Dim testDate As Date
        testDate = DateSerial(2025, 1, 1)
        
        modTestUtility.AssertEqual 2025, modDateUtils.GetYear(testDate), "年の取得テスト"
        modTestUtility.AssertEqual 1, modDateUtils.GetMonth(testDate), "月の取得テスト"
        modTestUtility.AssertEqual 1, modDateUtils.GetDay(testDate), "日の取得テスト"
    End Sub
    
    ' ======================
    ' データベーステストケース
    ' ======================
    Private Sub Test_DatabaseUtils()
        ' 接続文字列の生成テスト
        Dim connStr As String
        connStr = modDatabaseUtils.BuildConnectionString("Server", "Database", "User", "Pass")
        modTestUtility.AssertTrue Len(connStr) > 0, "接続文字列生成のテスト"
    End Sub
    
    Private Sub Test_ConnectionPool()
        Dim pool As New ConnectionPool
        
        ' プール設定のテスト
        pool.MaxPoolSize = 10
        modTestUtility.AssertEqual 10, pool.MaxPoolSize, "最大プールサイズの設定テスト"
        
        ' 接続管理のテスト
        modTestUtility.AssertEqual 0, pool.ActiveConnections, "初期接続数のテスト"
    End Sub
    
    ' ======================
    ' セキュリティテストケース
    ' ======================
    Private Sub Test_Crypto()
        Dim crypto As New clsCrypto
        
        ' プロバイダーの検証
        modTestUtility.AssertTrue crypto.ValidateProvider(), "ValidateProviderのテスト"
        
        ' 暗号化/復号化のテスト
        Const testString As String = "テスト文字列"
        Const testKey As String = "テストキー"
        
        Dim encrypted As String
        encrypted = crypto.EncryptString(testString, testKey)
        modTestUtility.AssertTrue Len(encrypted) > 0, "暗号化テスト"
        
        Dim decrypted As String
        decrypted = crypto.DecryptString(encrypted, testKey)
        modTestUtility.AssertEqual testString, decrypted, "復号化テスト"
    End Sub
    
    ' ======================
    ' パフォーマンステストケース
    ' ======================
    Private Sub Test_PerformanceMonitor()
        Dim monitor As New clsPerformanceMonitor
        
        monitor.StartMeasurement "TestOperation"
        ' 何らかの処理
        monitor.EndMeasurement "TestOperation"
        
        Dim result As String
        result = monitor.GetMeasurement("TestOperation")
        modTestUtility.AssertTrue Len(result) > 0, "パフォーマンス計測結果の確認"
    End Sub
    
    Private Sub Test_Lock()
        Dim lock As New clsLock
        
        modTestUtility.AssertTrue lock.TryAcquire(), "ロック取得のテスト"
        lock.Release
        modTestUtility.AssertTrue lock.TryAcquire(), "ロック解放後の再取得テスト"
    End Sub
    
    Private Sub Test_CallStack()
        Dim callStack As New clsCallStack
        
        ' Push/Popのテスト
        callStack.Push "Module1", "Proc1"
        callStack.Push "Module2", "Proc2"
        
        modTestUtility.AssertEqual "Module2.Proc2", callStack.Pop(), "Pop()のテスト1"
        modTestUtility.AssertEqual "Module1.Proc1", callStack.Pop(), "Pop()のテスト2"
        
        ' スタックの状態検証
        modTestUtility.AssertTrue callStack.ValidateStackState(), "ValidateStackStateのテスト"
    End Sub
#End If

================
File: modTestUtility.bas
================
Option Explicit

' ======================
' テスト関連の定数
' ======================
Private Const MODULE_NAME As String = "modTestUtility"
Private Const TEST_RESULTS_FILE As String = "TestResults.log"

' テスト結果の状態
Public Enum TestResult
    ResultPass = 1
    ResultFail = 2
    ResultSkip = 3
    ResultError = 4
End Enum

' テストケース情報
Private Type TestCase
    Name As String
    Description As String
    Category As String
    Priority As Integer
    Result As TestResult
    ErrorMessage As String
    ExecutionTime As Double
End Type

' ======================
' プライベート変数
' ======================
Private testCases As Collection
Private performanceMonitor As clsPerformanceMonitor
Private currentTestCase As TestCase
Private isInitialized As Boolean

' ======================
' 初期化処理
' ======================
Public Sub InitializeTestModule()
    If isInitialized Then Exit Sub
    
    On Error GoTo ErrorHandler
    
    Set testCases = New Collection
    Set performanceMonitor = New clsPerformanceMonitor
    isInitialized = True
    Exit Sub

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "テストモジュールの初期化中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "InitializeTestModule"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    ' 初期化失敗時は例外を再スロー
    Err.Raise errDetail.Code, errDetail.Source, errDetail.Description
End Sub

' ======================
' テスト実行関連
' ======================
Public Sub StartTest(ByVal testName As String, ByVal description As String, _
                    Optional ByVal category As String = "General", _
                    Optional ByVal priority As Integer = 1)
                    
    If Not isInitialized Then InitializeTestModule
    On Error GoTo ErrorHandler
    
    ' 新しいテストケースを初期化
    With currentTestCase
        .Name = testName
        .Description = description
        .Category = category
        .Priority = priority
        .Result = ResultSkip
        .ErrorMessage = ""
    End With
    
    ' パフォーマンス計測開始
    performanceMonitor.StartMeasurement testName
    
    ' ログにテスト開始を記録
    LogTestEvent "テスト開始: " & testName & " (" & description & ")"
    Exit Sub

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "テスト開始処理中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "StartTest"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    ' エラー発生時は現在のテストのパフォーマンス計測を終了
    If Not performanceMonitor Is Nothing Then
        performanceMonitor.EndMeasurement testName
    End If
    ' エラー発生時はテストをエラー状態で終了
    EndTest ResultError, "テスト開始処理中にエラーが発生: " & Err.Description
End Sub

Public Sub EndTest(ByVal result As TestResult, Optional ByVal errorMessage As String = "")
    If Not isInitialized Then Exit Sub
    On Error GoTo ErrorHandler
    
    Dim originalResult As TestResult
    originalResult = result
    
    ' パフォーマンス計測終了
    performanceMonitor.EndMeasurement currentTestCase.Name
    
    ' テスト結果を設定
    With currentTestCase
        .Result = result
        .ErrorMessage = errorMessage
        .ExecutionTime = GetTestExecutionTime(.Name)
    End With
    
    ' テストケースをコレクションに追加
    testCases.Add currentTestCase, currentTestCase.Name
    
    ' ログにテスト終了を記録
    LogTestEvent "テスト終了: " & currentTestCase.Name & " - " & GetResultText(result)
    If errorMessage <> "" Then
        LogTestEvent "エラー詳細: " & errorMessage
    End If
    Exit Sub

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "テスト終了処理中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "EndTest"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    ' エラー発生時は元のテスト結果を保持しつつ、エラーメッセージを追加
    With currentTestCase
        .Result = originalResult
        .ErrorMessage = .ErrorMessage & vbCrLf & "テスト終了処理中にエラーが発生: " & Err.Description
    End With
End Sub

' ======================
' アサーション関数
' ======================
Public Sub AssertEqual(ByVal expected As Variant, ByVal actual As Variant, _
                      Optional ByVal message As String = "")
    If Not isInitialized Then InitializeTestModule
    On Error GoTo ErrorHandler
    
    If expected <> actual Then
        Dim errorMsg As String
        errorMsg = "AssertEqual失敗: " & vbCrLf & _
                  "期待値: " & CStr(expected) & vbCrLf & _
                  "実際値: " & CStr(actual)
        If message <> "" Then
            errorMsg = errorMsg & vbCrLf & "メッセージ: " & message
        End If
        
        EndTest ResultFail, errorMsg
        Exit Sub
    End If
    Exit Sub

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "AssertEqual実行中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "AssertEqual"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    ' アサーション実行中のエラーはテストを失敗として扱う
    EndTest ResultFail, "アサーション実行中にエラーが発生: " & Err.Description
End Sub

Public Sub AssertTrue(ByVal condition As Boolean, Optional ByVal message As String = "")
    If Not isInitialized Then InitializeTestModule
    On Error GoTo ErrorHandler
    
    If Not condition Then
        Dim errorMsg As String
        errorMsg = "AssertTrue失敗"
        If message <> "" Then
            errorMsg = errorMsg & ": " & message
        End If
        
        EndTest ResultFail, errorMsg
        Exit Sub
    End If
    Exit Sub

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "AssertTrue実行中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "AssertTrue"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    ' アサーション実行中のエラーはテストを失敗として扱う
    EndTest ResultFail, "アサーション実行中にエラーが発生: " & Err.Description
End Sub

Public Sub AssertFalse(ByVal condition As Boolean, Optional ByVal message As String = "")
    If Not isInitialized Then InitializeTestModule
    On Error GoTo ErrorHandler
    
    If condition Then
        Dim errorMsg As String
        errorMsg = "AssertFalse失敗"
        If message <> "" Then
            errorMsg = errorMsg & ": " & message
        End If
        
        EndTest ResultFail, errorMsg
        Exit Sub
    End If
    Exit Sub

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "AssertFalse実行中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "AssertFalse"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    ' アサーション実行中のエラーはテストを失敗として扱う
    EndTest ResultFail, "アサーション実行中にエラーが発生: " & Err.Description
End Sub

' ======================
' テスト結果レポート
' ======================
Public Function GenerateTestReport() As String
    If Not isInitialized Then InitializeTestModule
    On Error GoTo ErrorHandler
    
    Dim report As String
    Dim testCase As TestCase
    Dim i As Long
    Dim totalTests As Long
    Dim passedTests As Long
    Dim failedTests As Long
    Dim skippedTests As Long
    Dim errorTests As Long
    
    report = "テスト実行レポート" & vbCrLf & _
            "=================" & vbCrLf & _
            "実行日時: " & Now & vbCrLf & vbCrLf
    
    ' カテゴリ別の結果集計
    Dim categories As Collection
    Set categories = New Collection
    
    For i = 1 To testCases.Count
        testCase = testCases(i)
        
        ' カテゴリの追加
        On Error Resume Next
        categories.Add testCase.Category, testCase.Category
        On Error GoTo ErrorHandler
        
        ' 全体の集計
        totalTests = totalTests + 1
        Select Case testCase.Result
            Case ResultPass: passedTests = passedTests + 1
            Case ResultFail: failedTests = failedTests + 1
            Case ResultSkip: skippedTests = skippedTests + 1
            Case ResultError: errorTests = errorTests + 1
        End Select
    Next i
    
    ' 概要の追加
    report = report & "概要:" & vbCrLf & _
            "- 総テスト数: " & totalTests & vbCrLf & _
            "- 成功: " & passedTests & vbCrLf & _
            "- 失敗: " & failedTests & vbCrLf & _
            "- スキップ: " & skippedTests & vbCrLf & _
            "- エラー: " & errorTests & vbCrLf & vbCrLf
    
    ' カテゴリ別の詳細
    report = report & "カテゴリ別詳細:" & vbCrLf & _
            "=================" & vbCrLf
    
    Dim category As Variant
    For Each category In categories
        report = report & vbCrLf & "カテゴリ: " & category & vbCrLf
        
        For i = 1 To testCases.Count
            testCase = testCases(i)
            If testCase.Category = category Then
                report = report & _
                        "  - " & testCase.Name & vbCrLf & _
                        "    結果: " & GetResultText(testCase.Result) & vbCrLf & _
                        "    実行時間: " & Format$(testCase.ExecutionTime, "0.000") & " ms" & vbCrLf
                If testCase.ErrorMessage <> "" Then
                    report = report & "    エラー: " & testCase.ErrorMessage & vbCrLf
                End If
            End If
        Next i
    Next category
    
    GenerateTestReport = report
    Exit Function

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "テストレポート生成中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "GenerateTestReport"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    ' レポート生成エラー時は基本情報のみ返す
    GenerateTestReport = "テストレポート生成中にエラーが発生しました。" & vbCrLf & _
                        "エラー詳細: " & Err.Description & vbCrLf & _
                        "実行日時: " & Now
End Function

' ======================
' ユーティリティ関数
' ======================
Private Function GetResultText(ByVal result As TestResult) As String
    Select Case result
        Case ResultPass: GetResultText = "成功"
        Case ResultFail: GetResultText = "失敗"
        Case ResultSkip: GetResultText = "スキップ"
        Case ResultError: GetResultText = "エラー"
        Case Else: GetResultText = "不明"
    End Select
End Function

Private Function GetTestExecutionTime(ByVal testName As String) As Double
    On Error GoTo ErrorHandler
    
    Dim perfData As String
    perfData = performanceMonitor.GetMeasurement(testName)
    
    ' 実行時間を抽出（パフォーマンスモニターの出力形式に依存）
    Dim pos As Long
    pos = InStr(perfData, "Elapsed Time: ")
    If pos > 0 Then
        GetTestExecutionTime = Val(Mid$(perfData, pos + 14))
    End If
    Exit Function

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "テスト実行時間の取得中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "GetTestExecutionTime"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    ' エラー時は0を返す
    GetTestExecutionTime = 0
End Function

Private Sub LogTestEvent(ByVal message As String)
    On Error Resume Next
    
    ' clsLoggerを使用してログを出力
    With New clsLogger
        Dim settings As New DefaultLoggerSettings
        settings.LogFilePath = TEST_RESULTS_FILE
        settings.LogDestination = LOG_DESTINATION_FILE
        .Configure settings
        .Log MODULE_NAME, message, 0
   eEnd With
    
    If Err.Number <> 0 Then
        Debug.Print "ログ出力エラー: " & Err.Description
        Err.Clear
    End If
End Sub

' ======================
' クリーンアップ
' ======================
Public Sub CleanupTestModule()
    If Not isInitialized Then Exit Sub
    
    On Error Resume Next
    Set testCases = Nothing
    Set performanceMonitor = Nothing
    isInitialized = False
    
    If Err.Number <> 0 Then
        Debug.Print "クリーンアップ中にエラーが発生: " & Err.Description
        Err.Clear
    End If
End Sub

================
File: TestClsCrypto.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "TestClsCrypto"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Private mCrypto As clsCrypto
Private mPerformanceMonitor As MockPerformanceMonitor
Private mLock As MockLock
Private mCryptography As ICryptography
Private mKeyDerivation As IKeyDerivationStrategy

Private Sub Class_Initialize()
    ' モックオブジェクトの初期化
    Set mPerformanceMonitor = New MockPerformanceMonitor
    Set mLock = New MockLock
    Set mCryptography = New CryptographyImpl
    Set mKeyDerivation = New PBKDF2KeyDerivationStrategy
    
    ' テスト対象の初期化
    Set mCrypto = New clsCrypto
    mCrypto.Initialize mPerformanceMonitor, mLock, mCryptography, mKeyDerivation
End Sub

Private Sub Class_Terminate()
    Set mCrypto = Nothing
    Set mPerformanceMonitor = Nothing
    Set mLock = Nothing
    Set mCryptography = Nothing
    Set mKeyDerivation = Nothing
End Sub

''' <summary>
''' 暗号化と復号化のテスト
''' </summary>
Public Sub TestEncryptionAndDecryption()
    On Error GoTo TestFail
    
    ' テストデータ
    Const TEST_KEY As String = "TestKey123"
    Const TEST_DATA As String = "Hello, World!"
    
    ' 暗号化
    Dim encrypted As String
    encrypted = mCrypto.EncryptString(TEST_DATA, TEST_KEY)
    
    ' 暗号化されたデータの検証
    Debug.Assert Len(encrypted) > 0, "暗号化データが空です"
    Debug.Assert encrypted <> TEST_DATA, "データが暗号化されていません"
    
    ' 復号化
    Dim decrypted As String
    decrypted = mCrypto.DecryptString(encrypted, TEST_KEY)
    
    ' 復号化されたデータの検証
    Debug.Assert decrypted = TEST_DATA, "復号化されたデータが元のデータと一致しません"
    
    Exit Sub
    
TestFail:
    Debug.Print "TestEncryptionAndDecryption failed: " & Err.Description
    Resume Next
End Sub

''' <summary>
''' パフォーマンスモニタリングのテスト
''' </summary>
Public Sub TestPerformanceMonitoring()
    On Error GoTo TestFail
    
    ' テストデータ
    Const TEST_KEY As String = "TestKey123"
    Const TEST_DATA As String = "Hello, World!"
    
    ' 暗号化処理の実行
    Dim encrypted As String
    encrypted = mCrypto.EncryptString(TEST_DATA, TEST_KEY)
    
    ' パフォーマンスモニタリングの検証
    Debug.Assert mPerformanceMonitor.WasMeasurementStarted("String Encryption"), _
                "暗号化のパフォーマンス計測が開始されていません"
    Debug.Assert mPerformanceMonitor.WasMeasurementEnded("String Encryption"), _
                "暗号化のパフォーマンス計測が終了されていません"
    
    Exit Sub
    
TestFail:
    Debug.Print "TestPerformanceMonitoring failed: " & Err.Description
    Resume Next
End Sub

''' <summary>
''' 排他制御のテスト
''' </summary>
Public Sub TestLocking()
    On Error GoTo TestFail
    
    ' テストデータ
    Const TEST_KEY As String = "TestKey123"
    Const TEST_DATA As String = "Hello, World!"
    
    ' 暗号化処理の実行
    Dim encrypted As String
    encrypted = mCrypto.EncryptString(TEST_DATA, TEST_KEY)
    
    ' ロック制御の検証
    Debug.Assert mLock.WasLockAcquired, "ロックが取得されていません"
    Debug.Assert mLock.WasLockReleased, "ロックが解放されていません"
    
    Exit Sub
    
TestFail:
    Debug.Print "TestLocking failed: " & Err.Description
    Resume Next
End Sub

''' <summary>
''' エラー処理のテスト
''' </summary>
Public Sub TestErrorHandling()
    On Error GoTo TestFail
    
    ' 無効なキーでのテスト
    Dim result As String
    result = mCrypto.EncryptString("Test", "")
    
    ' エラー処理の検証
    Debug.Assert result = "", "空のキーでエラーが発生しませんでした"
    
    Exit Sub
    
TestFail:
    Debug.Print "TestErrorHandling failed: " & Err.Description
    Resume Next
End Sub

''' <summary>
''' すべてのテストを実行
''' </summary>
Public Sub RunAllTests()
    TestEncryptionAndDecryption
    TestPerformanceMonitoring
    TestLocking
    TestErrorHandling
    Debug.Print "All tests completed successfully"
End Sub

================
File: TestConnectionPool.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "TestConnectionPool"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Private Const MODULE_NAME As String = "TestConnectionPool"

' モックオブジェクト
Private mMockConfig As MockDatabaseConfig
Private mMockPerformanceMonitor As MockPerformanceMonitor
Private mMockLock As MockLock
Private mMockLogger As MockLogger

' テスト対象
Private mConnectionPool As ConnectionPool

'*******************************************************************************
' テスト初期化
'*******************************************************************************
Private Sub Class_Initialize()
    ' モックオブジェクトの初期化
    Set mMockConfig = New MockDatabaseConfig
    Set mMockPerformanceMonitor = New MockPerformanceMonitor
    Set mMockLock = New MockLock
    Set mMockLogger = New MockLogger
    
    ' テスト対象の初期化
    Set mConnectionPool = New ConnectionPool
End Sub

'*******************************************************************************
' テストクリーンアップ
'*******************************************************************************
Private Sub Class_Terminate()
    Set mConnectionPool = Nothing
    Set mMockLogger = Nothing
    Set mMockLock = Nothing
    Set mMockPerformanceMonitor = Nothing
    Set mMockConfig = Nothing
End Sub

'*******************************************************************************
' テストケース：初期化時に依存オブジェクトが正しく設定されること
'*******************************************************************************
Public Sub TestInitialize()
    On Error GoTo TestFail
    
    ' 準備
    mMockConfig.SetConnectionString "Provider=SQLOLEDB;Data Source=TestServer;"
    mMockConfig.SetMaxPoolSize 5
    mMockConfig.SetRetryCount 3
    mMockConfig.SetRetryInterval 1000
    
    ' 実行
    mConnectionPool.Initialize mMockConfig, mMockPerformanceMonitor, mMockLock, mMockLogger
    
    ' 検証
    Debug.Assert mMockConfig.GetConnectionStringCallCount > 0
    Debug.Print "TestInitialize: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestInitialize: Failed - " & Err.Description
End Sub

'*******************************************************************************
' テストケース：不正な接続文字列の場合、エラーログが出力されること
'*******************************************************************************
Public Sub TestInvalidConnectionString()
    On Error GoTo TestFail
    
    ' 準備
    mMockConfig.SetConnectionString "Invalid Connection String"
    mConnectionPool.Initialize mMockConfig, mMockPerformanceMonitor, mMockLock, mMockLogger
    
    ' 実行
    Dim conn As Object
    Set conn = mConnectionPool.AcquireConnection
    
    ' 検証
    Debug.Assert mMockLogger.ErrorLogCount > 0
    Debug.Assert conn Is Nothing
    Debug.Print "TestInvalidConnectionString: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestInvalidConnectionString: Failed - " & Err.Description
End Sub

'*******************************************************************************
' テストケース：接続失敗時にリトライ処理が行われること
'*******************************************************************************
Public Sub TestConnectionRetry()
    On Error GoTo TestFail
    
    ' 準備
    mMockConfig.SetConnectionString "Provider=SQLOLEDB;Data Source=TestServer;"
    mMockConfig.SetRetryCount 3
    mMockConfig.SetRetryInterval 100
    mConnectionPool.Initialize mMockConfig, mMockPerformanceMonitor, mMockLock, mMockLogger
    
    ' 実行
    Dim conn As Object
    Set conn = mConnectionPool.AcquireConnection
    
    ' 検証
    Debug.Assert mMockConfig.GetRetryCountCallCount > 0
    Debug.Assert mMockConfig.GetRetryIntervalCallCount > 0
    Debug.Print "TestConnectionRetry: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestConnectionRetry: Failed - " & Err.Description
End Sub

'*******************************************************************************
' テストケース：プールサイズが設定値を超えないこと
'*******************************************************************************
Public Sub TestPoolSizeLimit()
    On Error GoTo TestFail
    
    ' 準備
    mMockConfig.SetConnectionString "Provider=SQLOLEDB;Data Source=TestServer;"
    mMockConfig.SetMaxPoolSize 2
    mConnectionPool.Initialize mMockConfig, mMockPerformanceMonitor, mMockLock, mMockLogger
    
    ' 実行
    Dim conn1 As Object, conn2 As Object, conn3 As Object
    Set conn1 = mConnectionPool.AcquireConnection
    Set conn2 = mConnectionPool.AcquireConnection
    Set conn3 = mConnectionPool.AcquireConnection ' これは失敗するはず
    
    ' 検証
    Debug.Assert Not conn1 Is Nothing
    Debug.Assert Not conn2 Is Nothing
    Debug.Assert conn3 Is Nothing
    Debug.Assert mConnectionPool.ActiveConnections = 2
    Debug.Print "TestPoolSizeLimit: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestPoolSizeLimit: Failed - " & Err.Description
End Sub

'*******************************************************************************
' テストケース：解放された接続が再利用可能になること
'*******************************************************************************
Public Sub TestConnectionReuse()
    On Error GoTo TestFail
    
    ' 準備
    mMockConfig.SetConnectionString "Provider=SQLOLEDB;Data Source=TestServer;"
    mMockConfig.SetMaxPoolSize 1
    mConnectionPool.Initialize mMockConfig, mMockPerformanceMonitor, mMockLock, mMockLogger
    
    ' 実行
    Dim conn1 As Object, conn2 As Object
    Set conn1 = mConnectionPool.AcquireConnection
    mConnectionPool.ReleaseConnection conn1
    Set conn2 = mConnectionPool.AcquireConnection
    
    ' 検証
    Debug.Assert Not conn2 Is Nothing
    Debug.Assert mConnectionPool.ActiveConnections = 1
    Debug.Print "TestConnectionReuse: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestConnectionReuse: Failed - " & Err.Description
End Sub

'*******************************************************************************
' 全テストの実行
'*******************************************************************************
Public Sub RunAllTests()
    TestInitialize
    TestInvalidConnectionString
    TestConnectionRetry
    TestPoolSizeLimit
    TestConnectionReuse
End Sub

================
File: TestConsoleLogger.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "TestConsoleLogger"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "TestConsoleLogger"

' ======================
' メンバ変数
' ======================
Private mConsoleLogger As ConsoleLogger
Private mPerformanceMonitor As IPerformanceMonitor

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    ' テスト対象の初期化
    Set mConsoleLogger = New ConsoleLogger
    Set mPerformanceMonitor = New clsPerformanceMonitor
End Sub

Private Sub Class_Terminate()
    Set mConsoleLogger = Nothing
    Set mPerformanceMonitor = Nothing
End Sub

' ======================
' テストメソッド
' ======================
Public Sub TestInitialization()
    On Error GoTo TestFail
    
    ' 初期化
    mConsoleLogger.Initialize mPerformanceMonitor, True
    
    Debug.Print "TestInitialization: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestInitialization: Failed - " & Err.Description
End Sub

Public Sub TestLogWriting()
    On Error GoTo TestFail
    
    ' ロガーの初期化
    mConsoleLogger.Initialize mPerformanceMonitor, True
    
    ' ログの書き込み
    Debug.Print "=== TestLogWriting Start ==="
    mConsoleLogger.Log "INFO", "Test console message", "Test stack trace", 4001
    Debug.Print "=== TestLogWriting End ==="
    
    Debug.Print "TestLogWriting: OK - イミディエイトウィンドウで出力を確認してください"
    Exit Sub
    
TestFail:
    Debug.Print "TestLogWriting: Failed - " & Err.Description
End Sub

Public Sub TestDifferentLogLevels()
    On Error GoTo TestFail
    
    ' ロガーの初期化
    mConsoleLogger.Initialize mPerformanceMonitor, True
    
    ' 異なるログレベルでの書き込み
    Debug.Print "=== TestDifferentLogLevels Start ==="
    mConsoleLogger.Log "INFO", "Information message", "", 0
    mConsoleLogger.Log "WARNING", "Warning message", "", 4002
    mConsoleLogger.Log "ERROR", "Error message", "Error stack trace", 4003
    Debug.Print "=== TestDifferentLogLevels End ==="
    
    Debug.Print "TestDifferentLogLevels: OK - イミディエイトウィンドウで出力を確認してください"
    Exit Sub
    
TestFail:
    Debug.Print "TestDifferentLogLevels: Failed - " & Err.Description
End Sub

Public Sub TestPerformanceMonitoring()
    On Error GoTo TestFail
    
    ' ロガーの初期化
    mConsoleLogger.Initialize mPerformanceMonitor, True
    
    ' パフォーマンス計測付きのログ出力
    Debug.Print "=== TestPerformanceMonitoring Start ==="
    Dim i As Long
    For i = 1 To 100
        mConsoleLogger.Log "INFO", "Performance test message " & i, "", i
    Next i
    Debug.Print "=== TestPerformanceMonitoring End ==="
    
    ' パフォーマンス情報の確認
    Dim measurements As Collection
    Set measurements = mPerformanceMonitor.GetMeasurements("ConsoleLogger_Log")
    Debug.Assert Not measurements Is Nothing
    Debug.Assert measurements.Count > 0
    
    Debug.Print "TestPerformanceMonitoring: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestPerformanceMonitoring: Failed - " & Err.Description
End Sub

' ======================
' 全テストの実行
' ======================
Public Sub RunAllTests()
    TestInitialization
    TestLogWriting
    TestDifferentLogLevels
    TestPerformanceMonitoring
End Sub

================
File: TestCriticalSectionLock.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "TestCriticalSectionLock"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Private Const MODULE_NAME As String = "TestCriticalSectionLock"
Private testLock As clsCriticalSectionLock

'@TestInitialize
Private Sub TestInitialize()
    Set testLock = New clsCriticalSectionLock
End Sub

'@TestCleanup
Private Sub TestCleanup()
    If Not testLock Is Nothing Then
        testLock.ForceRelease
        Set testLock = Nothing
    End If
End Sub

'@TestMethod("CriticalSectionLock")
Public Sub TestAcquireSuccess()
    On Error GoTo TestFail
    
    'Arrange
    Dim result As Boolean
    
    'Act
    result = testLock.Acquire()
    
    'Assert
    Debug.Assert result = True
    Debug.Assert testLock.ValidateLockState() = True
    Debug.Assert testLock.IsInitialized() = True
    
    Exit Sub
TestFail:
    Debug.Print "TestAcquireSuccess failed: " & Err.Description
End Sub

'@TestMethod("CriticalSectionLock")
Public Sub TestAcquireWithTimeout()
    On Error GoTo TestFail
    
    'Arrange
    Dim result As Boolean
    Dim timeout As Long
    timeout = 1000 ' 1秒
    
    'Act
    result = testLock.Acquire(timeout)
    
    'Assert
    Debug.Assert result = True
    Debug.Assert testLock.ValidateLockState() = True
    
    Exit Sub
TestFail:
    Debug.Print "TestAcquireWithTimeout failed: " & Err.Description
End Sub

'@TestMethod("CriticalSectionLock")
Public Sub TestReleaseSuccess()
    On Error GoTo TestFail
    
    'Arrange
    testLock.Acquire
    
    'Act
    testLock.Release
    
    'Assert
    Debug.Assert testLock.ValidateLockState() = False
    
    Exit Sub
TestFail:
    Debug.Print "TestReleaseSuccess failed: " & Err.Description
End Sub

'@TestMethod("CriticalSectionLock")
Public Sub TestMultipleAcquire()
    On Error GoTo TestFail
    
    'Arrange
    Dim secondLock As clsCriticalSectionLock
    Set secondLock = New clsCriticalSectionLock
    
    'Act
    testLock.Acquire
    Dim result As Boolean
    result = secondLock.Acquire(100) ' 100msタイムアウト
    
    'Assert
    Debug.Assert result = False ' 2番目のロックは失敗するはず
    
    'Cleanup
    Set secondLock = Nothing
    
    Exit Sub
TestFail:
    Debug.Print "TestMultipleAcquire failed: " & Err.Description
End Sub

'@TestMethod("CriticalSectionLock")
Public Sub TestInitialization()
    On Error GoTo TestFail
    
    'Assert
    Debug.Assert testLock.IsInitialized() = True
    
    Exit Sub
TestFail:
    Debug.Print "TestInitialization failed: " & Err.Description
End Sub

================
File: TestDatabaseLogger.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "TestDatabaseLogger"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "TestDatabaseLogger"

' ======================
' メンバ変数
' ======================
Private mDatabaseLogger As DatabaseLogger
Private mConnectionPool As IConnectionPool
Private mLock As ILock
Private mPerformanceMonitor As IPerformanceMonitor
Private mDatabaseConfig As IDatabaseConfig
Private mTestTableName As String

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    ' テスト対象の初期化
    Set mDatabaseLogger = New DatabaseLogger
    Set mConnectionPool = New ConnectionPool
    Set mLock = New clsLock
    Set mPerformanceMonitor = New clsPerformanceMonitor
    Set mDatabaseConfig = New ConfigImpl
    mTestTableName = "TestLog"
    
    ' テストテーブルの作成
    CreateTestTable
End Sub

Private Sub Class_Terminate()
    ' テストテーブルの削除
    DropTestTable
    
    Set mDatabaseLogger = Nothing
    Set mConnectionPool = Nothing
    Set mLock = Nothing
    Set mPerformanceMonitor = Nothing
    Set mDatabaseConfig = Nothing
End Sub

' ======================
' テストメソッド
' ======================
Public Sub TestInitialization()
    On Error GoTo TestFail
    
    ' 初期化
    mDatabaseLogger.Initialize mConnectionPool, mLock, mPerformanceMonitor, mDatabaseConfig, mTestTableName
    
    Debug.Print "TestInitialization: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestInitialization: Failed - " & Err.Description
End Sub

Public Sub TestLogWriting()
    On Error GoTo TestFail
    
    ' ロガーの初期化
    mDatabaseLogger.Initialize mConnectionPool, mLock, mPerformanceMonitor, mDatabaseConfig, mTestTableName
    
    ' ログの書き込み
    mDatabaseLogger.Log "INFO", "Test database message", "Test stack trace", 2001
    
    ' データベースの内容確認
    Dim conn As Object
    Set conn = mConnectionPool.AcquireConnection()
    
    Dim rs As Object
    Set rs = CreateObject("ADODB.Recordset")
    rs.Open "SELECT * FROM " & mTestTableName & " WHERE Message = 'Test database message'", conn
    
    Debug.Assert Not rs.EOF
    Debug.Assert rs.Fields("LogLevel").value = "INFO"
    Debug.Assert rs.Fields("StackTrace").value = "Test stack trace"
    Debug.Assert rs.Fields("ErrorCode").value = 2001
    
    rs.Close
    mConnectionPool.ReleaseConnection conn
    
    Debug.Print "TestLogWriting: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestLogWriting: Failed - " & Err.Description
End Sub

Public Sub TestConcurrentWriting()
    On Error GoTo TestFail
    
    ' ロガーの初期化
    mDatabaseLogger.Initialize mConnectionPool, mLock, mPerformanceMonitor, mDatabaseConfig, mTestTableName
    
    ' 複数のログメッセージを同時に書き込み
    Dim i As Long
    For i = 1 To 10
        mDatabaseLogger.Log "INFO", "Concurrent DB message " & i, "", i
    Next i
    
    ' データベースの内容確認
    Dim conn As Object
    Set conn = mConnectionPool.AcquireConnection()
    
    Dim rs As Object
    Set rs = CreateObject("ADODB.Recordset")
    rs.Open "SELECT COUNT(*) AS MessageCount FROM " & mTestTableName & _
           " WHERE Message LIKE 'Concurrent DB message%'", conn
    
    Debug.Assert rs.Fields("MessageCount").value = 10
    
    rs.Close
    mConnectionPool.ReleaseConnection conn
    
    Debug.Print "TestConcurrentWriting: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestConcurrentWriting: Failed - " & Err.Description
End Sub

Public Sub TestErrorHandling()
    On Error GoTo TestFail
    
    ' 無効なテーブル名での初期化
    mDatabaseLogger.Initialize mConnectionPool, mLock, mPerformanceMonitor, mDatabaseConfig, "InvalidTable"
    
    ' エラーが発生するはずのログ書き込み
    mDatabaseLogger.Log "ERROR", "Error test message", "", 2002
    
    Debug.Print "TestErrorHandling: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestErrorHandling: Failed - " & Err.Description
End Sub

' ======================
' ヘルパーメソッド
' ======================
Private Sub CreateTestTable()
    On Error Resume Next
    
    Dim conn As Object
    Set conn = mConnectionPool.AcquireConnection()
    
    ' テストテーブルの作成
    conn.Execute "CREATE TABLE " & mTestTableName & " (" & _
                "ID IDENTITY PRIMARY KEY, " & _
                "LogTime DATETIME, " & _
                "LogLevel VARCHAR(50), " & _
                "Message VARCHAR(4000), " & _
                "StackTrace VARCHAR(4000), " & _
                "ErrorCode INT)"
    
    mConnectionPool.ReleaseConnection conn
End Sub

Private Sub DropTestTable()
    On Error Resume Next
    
    Dim conn As Object
    Set conn = mConnectionPool.AcquireConnection()
    
    ' テストテーブルの削除
    conn.Execute "DROP TABLE " & mTestTableName
    
    mConnectionPool.ReleaseConnection conn
End Sub

' ======================
' 全テストの実行
' ======================
Public Sub RunAllTests()
    TestInitialization
    TestLogWriting
    TestConcurrentWriting
    TestErrorHandling
End Sub

================
File: TestDateValidator.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "TestDateValidator"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "TestDateValidator"

' ======================
' プライベート変数
' ======================
Private mValidator As DateValidator
Private mMockError As MockError

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    Set mMockError = New MockError
End Sub

Private Sub Class_Terminate()
    Set mValidator = Nothing
    Set mMockError = Nothing
End Sub

' ======================
' テストメソッド
' ======================
Public Sub TestMinDateValidation()
    ' 準備
    Set mValidator = New DateValidator
    Set mValidator.Error = mMockError
    
    Dim minDateRule As MinDateRule
    Set minDateRule = New MinDateRule
    minDateRule.MinDate = DateSerial(2000, 1, 1)
    mValidator.AddRule minDateRule
    
    ' 実行と検証
    Debug.Assert Not mValidator.Validate(DateSerial(1999, 12, 31)), "最小日付より前の日付は失敗するべき"
    Debug.Assert mValidator.Validate(DateSerial(2000, 1, 1)), "最小日付と同じ日付は成功するべき"
    Debug.Assert mValidator.Validate(DateSerial(2000, 1, 2)), "最小日付より後の日付は成功するべき"
End Sub

Public Sub TestMaxDateValidation()
    ' 準備
    Set mValidator = New DateValidator
    Set mValidator.Error = mMockError
    
    Dim maxDateRule As MaxDateRule
    Set maxDateRule = New MaxDateRule
    maxDateRule.MaxDate = DateSerial(2000, 12, 31)
    mValidator.AddRule maxDateRule
    
    ' 実行と検証
    Debug.Assert mValidator.Validate(DateSerial(2000, 12, 30)), "最大日付より前の日付は成功するべき"
    Debug.Assert mValidator.Validate(DateSerial(2000, 12, 31)), "最大日付と同じ日付は成功するべき"
    Debug.Assert Not mValidator.Validate(DateSerial(2001, 1, 1)), "最大日付より後の日付は失敗するべき"
End Sub

Public Sub TestAllowFutureDateValidation()
    ' 準備
    Set mValidator = New DateValidator
    Set mValidator.Error = mMockError
    
    Dim futureDateRule As AllowFutureDateRule
    Set futureDateRule = New AllowFutureDateRule
    futureDateRule.AllowFutureDate = False
    mValidator.AddRule futureDateRule
    
    ' 実行と検証
    Debug.Assert mValidator.Validate(DateAdd("d", -1, Date)), "過去の日付は成功するべき"
    Debug.Assert mValidator.Validate(Date), "現在の日付は成功するべき"
    Debug.Assert Not mValidator.Validate(DateAdd("d", 1, Date)), "未来の日付は失敗するべき"
End Sub

Public Sub TestAllowPastDateValidation()
    ' 準備
    Set mValidator = New DateValidator
    Set mValidator.Error = mMockError
    
    Dim pastDateRule As AllowPastDateRule
    Set pastDateRule = New AllowPastDateRule
    pastDateRule.AllowPastDate = False
    mValidator.AddRule pastDateRule
    
    ' 実行と検証
    Debug.Assert Not mValidator.Validate(DateAdd("d", -1, Date)), "過去の日付は失敗するべき"
    Debug.Assert mValidator.Validate(Date), "現在の日付は成功するべき"
    Debug.Assert mValidator.Validate(DateAdd("d", 1, Date)), "未来の日付は成功するべき"
End Sub

Public Sub TestBirthDateValidation()
    ' 準備
    Set mValidator = CreateBirthDateValidator(mMockError)
    
    ' 実行と検証
    Debug.Assert Not mValidator.Validate(DateSerial(1899, 12, 31)), "1900年以前の日付は失敗するべき"
    Debug.Assert mValidator.Validate(DateSerial(1900, 1, 1)), "1900年1月1日は成功するべき"
    Debug.Assert mValidator.Validate(DateAdd("d", -1, Date)), "昨日の日付は成功するべき"
    Debug.Assert mValidator.Validate(Date), "今日の日付は成功するべき"
    Debug.Assert Not mValidator.Validate(DateAdd("d", 1, Date)), "未来の日付は失敗するべき"
End Sub

Public Sub TestExpiryDateValidation()
    ' 準備
    Set mValidator = CreateExpiryDateValidator(mMockError)
    
    ' 実行と検証
    Debug.Assert Not mValidator.Validate(DateAdd("d", -1, Date)), "過去の日付は失敗するべき"
    Debug.Assert mValidator.Validate(Date), "今日の日付は成功するべき"
    Debug.Assert mValidator.Validate(DateAdd("yyyy", 50, Date)), "50年後の日付は成功するべき"
    Debug.Assert mValidator.Validate(DateAdd("yyyy", 100, Date)), "100年後の日付は成功するべき"
    Debug.Assert Not mValidator.Validate(DateAdd("yyyy", 101, Date)), "100年より先の日付は失敗するべき"
End Sub

Public Sub TestMultipleRules()
    ' 準備
    Set mValidator = New DateValidator
    Set mValidator.Error = mMockError
    
    Dim minDateRule As MinDateRule
    Set minDateRule = New MinDateRule
    minDateRule.MinDate = DateSerial(2000, 1, 1)
    mValidator.AddRule minDateRule
    
    Dim maxDateRule As MaxDateRule
    Set maxDateRule = New MaxDateRule
    maxDateRule.MaxDate = DateSerial(2100, 12, 31)
    mValidator.AddRule maxDateRule
    
    Dim futureDateRule As AllowFutureDateRule
    Set futureDateRule = New AllowFutureDateRule
    futureDateRule.AllowFutureDate = True
    mValidator.AddRule futureDateRule
    
    Dim pastDateRule As AllowPastDateRule
    Set pastDateRule = New AllowPastDateRule
    pastDateRule.AllowPastDate = True
    mValidator.AddRule pastDateRule
    
    ' 実行と検証
    Debug.Assert Not mValidator.Validate(DateSerial(1999, 12, 31)), "範囲外の過去の日付は失敗するべき"
    Debug.Assert mValidator.Validate(DateSerial(2000, 1, 1)), "範囲内の過去の日付は成功するべき"
    Debug.Assert mValidator.Validate(Date), "現在の日付は成功するべき"
    Debug.Assert mValidator.Validate(DateSerial(2100, 12, 31)), "範囲内の未来の日付は成功するべき"
    Debug.Assert Not mValidator.Validate(DateSerial(2101, 1, 1)), "範囲外の未来の日付は失敗するべき"
End Sub

================
File: TestDefaultMessageFormatter.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "TestDefaultMessageFormatter"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Private Const MODULE_NAME As String = "TestDefaultMessageFormatter"

' テスト対象
Private mFormatter As DefaultMessageFormatter

' ======================
' セットアップ/クリーンアップ
' ======================
Private Sub Class_Initialize()
    Set mFormatter = New DefaultMessageFormatter
End Sub

Private Sub Class_Terminate()
    Set mFormatter = Nothing
End Sub

' ======================
' テストケース
' ======================

''' <summary>
''' 基本的なメッセージフォーマットのテスト
''' </summary>
Public Sub TestBasicFormatting()
    On Error GoTo TestFail
    
    ' テスト用エラー情報の作成
    Dim testError As ErrorInfo
    With testError
        .Code = ErrUnexpected
        .Description = "テストエラー"
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "TestBasicFormatting"
        .StackTrace = ""
    End With
    
    ' メッセージのフォーマット
    Dim result As String
    result = mFormatter.TestFormatMessage("テストメッセージ", testError)
    
    ' 結果の検証
    If InStr(result, "テストメッセージ") > 0 And _
       InStr(result, "テストエラー") > 0 And _
       InStr(result, MODULE_NAME) > 0 Then
        Debug.Print "TestBasicFormatting: OK"
    Else
        Debug.Print "TestBasicFormatting: Failed - Unexpected format"
        Debug.Print "Result: " & result
    End If
    Exit Sub
    
TestFail:
    Debug.Print "TestBasicFormatting: Failed - " & Err.Description
End Sub

''' <summary>
''' スタックトレース付きメッセージのテスト
''' </summary>
Public Sub TestWithStackTrace()
    On Error GoTo TestFail
    
    ' テスト用エラー情報の作成
    Dim testError As ErrorInfo
    With testError
        .Code = ErrUnexpected
        .Description = "テストエラー"
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "TestWithStackTrace"
        .StackTrace = "テストスタックトレース" & vbCrLf & "行1" & vbCrLf & "行2"
    End With
    
    ' メッセージのフォーマット
    Dim result As String
    result = mFormatter.TestFormatMessage("", testError)
    
    ' 結果の検証
    If InStr(result, "スタックトレース") > 0 And _
       InStr(result, "テストスタックトレース") > 0 Then
        Debug.Print "TestWithStackTrace: OK"
    Else
        Debug.Print "TestWithStackTrace: Failed - Stack trace not found"
        Debug.Print "Result: " & result
    End If
    Exit Sub
    
TestFail:
    Debug.Print "TestWithStackTrace: Failed - " & Err.Description
End Sub

''' <summary>
''' 空のメッセージ処理のテスト
''' </summary>
Public Sub TestEmptyMessage()
    On Error GoTo TestFail
    
    ' テスト用エラー情報の作成
    Dim testError As ErrorInfo
    With testError
        .Code = ErrUnexpected
        .Description = "テストエラー"
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "TestEmptyMessage"
    End With
    
    ' メッセージのフォーマット
    Dim result As String
    result = mFormatter.TestFormatMessage("", testError)
    
    ' 結果の検証
    If InStr(result, "エラーが発生しました") > 0 Then
        Debug.Print "TestEmptyMessage: OK"
    Else
        Debug.Print "TestEmptyMessage: Failed - Default message not found"
        Debug.Print "Result: " & result
    End If
    Exit Sub
    
TestFail:
    Debug.Print "TestEmptyMessage: Failed - " & Err.Description
End Sub

''' <summary>
''' エラー処理のテスト
''' </summary>
Public Sub TestErrorHandling()
    On Error Resume Next
    
    ' 不正なエラー情報でテスト
    Dim result As String
    result = mFormatter.TestFormatMessage("テスト", Nothing)
    
    ' エラーが適切に処理されることを確認
    If InStr(result, "エラーメッセージのフォーマットに失敗") > 0 Then
        Debug.Print "TestErrorHandling: OK"
    Else
        Debug.Print "TestErrorHandling: Failed - Error not handled properly"
        Debug.Print "Result: " & result
    End If
    
    On Error GoTo 0
End Sub

' ======================
' テスト実行
' ======================
Public Sub RunAllTests()
    TestBasicFormatting
    TestWithStackTrace
    TestEmptyMessage
    TestErrorHandling
End Sub

================
File: TestEventLogLogger.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "TestEventLogLogger"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "TestEventLogLogger"

' ======================
' メンバ変数
' ======================
Private mEventLogLogger As EventLogLogger
Private mEventLog As IEventLog
Private mLock As ILock
Private mPerformanceMonitor As IPerformanceMonitor
Private mTestEventSource As String

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    ' テスト対象の初期化
    Set mEventLogLogger = New EventLogLogger
    Set mEventLog = New EventLogImpl
    Set mLock = New clsLock
    Set mPerformanceMonitor = New clsPerformanceMonitor
    mTestEventSource = "PDILoggerTest"
    
    ' テストイベントソースの作成
    CreateEventSource
End Sub

Private Sub Class_Terminate()
    ' テストイベントソースの削除
    RemoveEventSource
    
    Set mEventLogLogger = Nothing
    Set mEventLog = Nothing
    Set mLock = Nothing
    Set mPerformanceMonitor = Nothing
End Sub

' ======================
' テストメソッド
' ======================
Public Sub TestInitialization()
    On Error GoTo TestFail
    
    ' 初期化
    mEventLogLogger.Initialize mEventLog, mLock, mPerformanceMonitor, mTestEventSource
    
    Debug.Print "TestInitialization: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestInitialization: Failed - " & Err.Description
End Sub

Public Sub TestLogWriting()
    On Error GoTo TestFail
    
    ' ロガーの初期化
    mEventLogLogger.Initialize mEventLog, mLock, mPerformanceMonitor, mTestEventSource
    
    ' ログの書き込み
    mEventLogLogger.Log "INFO", "Test event log message", "Test stack trace", 3001
    
    ' イベントログの確認は手動で行う必要がある
    Debug.Print "TestLogWriting: OK - イベントビューアーで確認してください"
    Exit Sub
    
TestFail:
    Debug.Print "TestLogWriting: Failed - " & Err.Description
End Sub

Public Sub TestDifferentLogLevels()
    On Error GoTo TestFail
    
    ' ロガーの初期化
    mEventLogLogger.Initialize mEventLog, mLock, mPerformanceMonitor, mTestEventSource
    
    ' 異なるログレベルでの書き込み
    mEventLogLogger.Log "INFO", "Information message", "", 0
    mEventLogLogger.Log "WARNING", "Warning message", "", 3002
    mEventLogLogger.Log "ERROR", "Error message", "Error stack trace", 3003
    
    Debug.Print "TestDifferentLogLevels: OK - イベントビューアーで確認してください"
    Exit Sub
    
TestFail:
    Debug.Print "TestDifferentLogLevels: Failed - " & Err.Description
End Sub

Public Sub TestErrorHandling()
    On Error GoTo TestFail
    
    ' 無効なイベントソースでの初期化
    mEventLogLogger.Initialize mEventLog, mLock, mPerformanceMonitor, "InvalidSource"
    
    ' エラーが発生するはずのログ書き込み
    mEventLogLogger.Log "ERROR", "Error test message", "", 3004
    
    Debug.Print "TestErrorHandling: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestErrorHandling: Failed - " & Err.Description
End Sub

' ======================
' ヘルパーメソッド
' ======================
Private Sub CreateEventSource()
    On Error Resume Next
    
    ' イベントソースの作成
    Dim shell As Object
    Set shell = CreateObject("WScript.Shell")
    
    Dim regPath As String
    regPath = "HKLM\SYSTEM\CurrentControlSet\Services\EventLog\Application\" & mTestEventSource
    
    shell.RegWrite regPath & "\EventMessageFile", "C:\Windows\Microsoft.NET\Framework64\v4.0.30319\EventLogMessages.dll", "REG_SZ"
    shell.RegWrite regPath & "\TypesSupported", 7, "REG_DWORD"
    
    Set shell = Nothing
End Sub

Private Sub RemoveEventSource()
    On Error Resume Next
    
    ' イベントソースの削除
    Dim shell As Object
    Set shell = CreateObject("WScript.Shell")
    
    Dim regPath As String
    regPath = "HKLM\SYSTEM\CurrentControlSet\Services\EventLog\Application\" & mTestEventSource
    
    shell.RegDelete regPath & "\"
    
    Set shell = Nothing
End Sub

' ======================
' 全テストの実行
' ======================
Public Sub RunAllTests()
    TestInitialization
    TestLogWriting
    TestDifferentLogLevels
    TestErrorHandling
End Sub

================
File: TestFileLogger.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "TestFileLogger"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "TestFileLogger"

' ======================
' メンバ変数
' ======================
Private mFileLogger As FileLogger
Private mFileOperations As IFileOperations
Private mLock As ILock
Private mPerformanceMonitor As IPerformanceMonitor
Private mTestFilePath As String

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    ' テスト対象の初期化
    Set mFileLogger = New FileLogger
    Set mFileOperations = New FileSystemOperations
    Set mLock = New clsLock
    Set mPerformanceMonitor = New clsPerformanceMonitor
    mTestFilePath = "test_log.txt"
End Sub

Private Sub Class_Terminate()
    ' テストファイルの削除
    On Error Resume Next
    mFileOperations.DeleteFile mTestFilePath
    On Error GoTo 0
    
    Set mFileLogger = Nothing
    Set mFileOperations = Nothing
    Set mLock = Nothing
    Set mPerformanceMonitor = Nothing
End Sub

' ======================
' テストメソッド
' ======================
Public Sub TestInitialization()
    On Error GoTo TestFail
    
    ' 初期化
    mFileLogger.Initialize mFileOperations, mLock, mPerformanceMonitor, mTestFilePath
    
    Debug.Print "TestInitialization: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestInitialization: Failed - " & Err.Description
End Sub

Public Sub TestLogWriting()
    On Error GoTo TestFail
    
    ' ロガーの初期化
    mFileLogger.Initialize mFileOperations, mLock, mPerformanceMonitor, mTestFilePath
    
    ' ログの書き込み
    mFileLogger.Log "INFO", "Test message", "Test stack trace", 1001
    
    ' ファイルの存在確認
    Debug.Assert mFileOperations.FileExists(mTestFilePath)
    
    ' ファイルの内容確認
    Dim content As String
    content = mFileOperations.ReadAllText(mTestFilePath)
    Debug.Assert InStr(content, "Test message") > 0
    Debug.Assert InStr(content, "Test stack trace") > 0
    Debug.Assert InStr(content, "1001") > 0
    
    Debug.Print "TestLogWriting: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestLogWriting: Failed - " & Err.Description
End Sub

Public Sub TestConcurrentWriting()
    On Error GoTo TestFail
    
    ' ロガーの初期化
    mFileLogger.Initialize mFileOperations, mLock, mPerformanceMonitor, mTestFilePath
    
    ' 複数のログメッセージを同時に書き込み
    Dim i As Long
    For i = 1 To 10
        mFileLogger.Log "INFO", "Concurrent message " & i, "", i
    Next i
    
    ' ファイルの内容確認
    Dim content As String
    content = mFileOperations.ReadAllText(mTestFilePath)
    For i = 1 To 10
        Debug.Assert InStr(content, "Concurrent message " & i) > 0
    Next i
    
    Debug.Print "TestConcurrentWriting: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestConcurrentWriting: Failed - " & Err.Description
End Sub

Public Sub TestErrorHandling()
    On Error GoTo TestFail
    
    ' 無効なファイルパスでの初期化
    mFileLogger.Initialize mFileOperations, mLock, mPerformanceMonitor, "|invalid|path"
    
    ' エラーが発生するはずのログ書き込み
    mFileLogger.Log "ERROR", "Error test message", "", 1002
    
    Debug.Print "TestErrorHandling: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestErrorHandling: Failed - " & Err.Description
End Sub

' ======================
' 全テストの実行
' ======================
Public Sub RunAllTests()
    TestInitialization
    TestLogWriting
    TestConcurrentWriting
    TestErrorHandling
End Sub

================
File: TestFileSystemOperations.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "TestFileSystemOperations"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Private Const MODULE_NAME As String = "TestFileSystemOperations"

' モックオブジェクト
Private mockLock As MockLock
Private mockPerformanceMonitor As MockPerformanceMonitor
Private mockFileIO As MockFileIO
Private fileOps As FileSystemOperations

'@TestInitialize
Private Sub TestInitialize()
    ' モックオブジェクトの初期化
    Set mockLock = New MockLock
    Set mockPerformanceMonitor = New MockPerformanceMonitor
    Set mockFileIO = New MockFileIO
    Set fileOps = New FileSystemOperations
    
    ' 依存性の注入
    fileOps.Initialize mockLock, mockPerformanceMonitor, mockFileIO
End Sub

'@TestCleanup
Private Sub TestCleanup()
    Set mockLock = Nothing
    Set mockPerformanceMonitor = Nothing
    Set mockFileIO = Nothing
    Set fileOps = Nothing
End Sub

'@TestMethod("初期化")
Private Sub TestInitialization()
    On Error GoTo TestFail
    
    ' 未初期化の状態でメソッドを呼び出すとエラーになることを確認
    Dim uninitializedOps As New FileSystemOperations
    Dim success As Boolean
    
    On Error Resume Next
    success = uninitializedOps.FileExists("test.txt")
    
    Debug.Assert Err.Number <> 0, "未初期化状態でのメソッド呼び出しはエラーになるべき"
    On Error GoTo 0
    
    ' 正しく初期化された状態ではエラーにならないことを確認
    On Error Resume Next
    success = fileOps.FileExists("test.txt")
    Debug.Assert Err.Number = 0, "初期化済み状態でのメソッド呼び出しはエラーにならない"
    
    Exit Sub
    
TestFail:
    Debug.Print "TestInitialization failed: " & Err.Description
    Resume Next
End Sub

'@TestMethod("ファイル操作")
Private Sub TestFileOperations()
    On Error GoTo TestFail
    
    ' FileExistsのテスト
    mockFileIO.SetFileExists "test.txt", True
    Debug.Assert fileOps.FileExists("test.txt"), "FileExists should return True"
    
    ' CreateFolderのテスト
    mockFileIO.SetCreateFolderResult "testFolder", True
    Debug.Assert fileOps.CreateFolder("testFolder"), "CreateFolder should return True"
    
    ' パフォーマンスモニタリングの確認
    Debug.Assert mockPerformanceMonitor.WasMeasurementStarted("Create Folder"), _
                 "パフォーマンスモニタリングが開始されていない"
    Debug.Assert mockPerformanceMonitor.WasMeasurementEnded("Create Folder"), _
                 "パフォーマンスモニタリングが終了されていない"
    
    Exit Sub
    
TestFail:
    Debug.Print "TestFileOperations failed: " & Err.Description
    Resume Next
End Sub

'@TestMethod("エラー処理")
Private Sub TestErrorHandling()
    On Error GoTo TestFail
    
    ' ファイル読み込みエラーのテスト
    mockFileIO.SetOpenFileResult "error.txt", Nothing
    Dim content As String
    content = fileOps.ReadTextFile("error.txt")
    Debug.Assert content = vbNullString, "エラー時は空文字列を返すべき"
    
    ' ファイル書き込みエラーのテスト
    mockFileIO.SetOpenFileResult "readonly.txt", Nothing
    Dim writeSuccess As Boolean
    writeSuccess = fileOps.WriteTextFile("readonly.txt", "test")
    Debug.Assert Not writeSuccess, "エラー時はFalseを返すべき"
    
    Exit Sub
    
TestFail:
    Debug.Print "TestErrorHandling failed: " & Err.Description
    Resume Next
End Sub

'@TestMethod("バイナリファイル操作")
Private Sub TestBinaryOperations()
    On Error GoTo TestFail
    
    ' バイナリファイル読み込みのテスト
    Dim testData(0 To 2) As Byte
    testData(0) = 1: testData(1) = 2: testData(2) = 3
    
    mockFileIO.SetBinaryFileContent "test.bin", testData
    Dim readData() As Byte
    readData = fileOps.ReadBinaryFile("test.bin")
    
    Debug.Assert UBound(readData) = UBound(testData), "バイナリデータのサイズが一致しない"
    Debug.Assert readData(0) = testData(0), "バイナリデータの内容が一致しない"
    
    Exit Sub
    
TestFail:
    Debug.Print "TestBinaryOperations failed: " & Err.Description
    Resume Next
End Sub

'@TestMethod("パス操作")
Private Sub TestPathOperations()
    On Error GoTo TestFail
    
    ' 相対パスから絶対パスへの変換テスト
    Dim absolutePath As String
    absolutePath = fileOps.GetAbsolutePath("test.txt", "C:\temp")
    Debug.Assert absolutePath = "C:\temp\test.txt", "絶対パスの解決が正しくない"
    
    Exit Sub
    
TestFail:
    Debug.Print "TestPathOperations failed: " & Err.Description
    Resume Next
End Sub

================
File: TestLogger.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "TestLogger"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "TestLogger"

' ======================
' メンバ変数
' ======================
Private mLogger As clsLogger
Private mSettings As ILoggerSettings
Private mQueue As IQueue
Private mLock As ILock
Private mPerformanceMonitor As IPerformanceMonitor
Private mTestFileLogger As FileLogger
Private mTestDatabaseLogger As DatabaseLogger
Private mTestEventLogLogger As EventLogLogger
Private mTestConsoleLogger As ConsoleLogger

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    ' テスト対象の初期化
    Set mLogger = New clsLogger
    Set mSettings = New DefaultLoggerSettings
    Set mQueue = New QueueImpl
    Set mLock = New clsLock
    Set mPerformanceMonitor = New clsPerformanceMonitor
    
    ' テスト用ロガーの初期化
    Set mTestFileLogger = New FileLogger
    Set mTestDatabaseLogger = New DatabaseLogger
    Set mTestEventLogLogger = New EventLogLogger
    Set mTestConsoleLogger = New ConsoleLogger
End Sub

Private Sub Class_Terminate()
    Set mLogger = Nothing
    Set mSettings = Nothing
    Set mQueue = Nothing
    Set mLock = Nothing
    Set mPerformanceMonitor = Nothing
    Set mTestFileLogger = Nothing
    Set mTestDatabaseLogger = Nothing
    Set mTestEventLogLogger = Nothing
    Set mTestConsoleLogger = Nothing
End Sub

' ======================
' テストメソッド
' ======================
Public Sub TestInitialization()
    On Error GoTo TestFail
    
    ' 初期化前の状態確認
    Debug.Assert mLogger.GetQueueCount() = 0
    
    ' 初期化
    mLogger.Configure mSettings, mQueue, mLock, mPerformanceMonitor
    
    ' 初期化後の状態確認
    Debug.Assert Not mLogger Is Nothing
    Debug.Print "TestInitialization: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestInitialization: Failed - " & Err.Description
End Sub

Public Sub TestLoggerAddition()
    On Error GoTo TestFail
    
    ' ロガーの初期化
    mLogger.Configure mSettings, mQueue, mLock, mPerformanceMonitor
    
    ' ロガーの追加
    mLogger.SetLogger "File", mTestFileLogger
    mLogger.SetLogger "Database", mTestDatabaseLogger
    mLogger.SetLogger "EventLog", mTestEventLogLogger
    mLogger.SetLogger "Console", mTestConsoleLogger
    
    ' 同じ出力先に対する上書き確認
    Dim newFileLogger As New FileLogger
    mLogger.SetLogger "File", newFileLogger
    
    Debug.Print "TestLoggerAddition: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestLoggerAddition: Failed - " & Err.Description
End Sub

Public Sub TestLogMessageQueuing()
    On Error GoTo TestFail
    
    ' ロガーの初期化
    mLogger.Configure mSettings, mQueue, mLock, mPerformanceMonitor
    
    ' ログメッセージの追加
    mLogger.Log "TestModule", "Test message 1", LOG_LEVEL_INFO
    mLogger.Log "TestModule", "Test message 2", LOG_LEVEL_WARNING
    mLogger.Log "TestModule", "Test message 3", LOG_LEVEL_ERROR
    
    ' キューの状態確認
    Debug.Assert mLogger.GetQueueCount() = 3
    
    Debug.Print "TestLogMessageQueuing: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestLogMessageQueuing: Failed - " & Err.Description
End Sub

Public Sub TestAsyncProcessing()
    On Error GoTo TestFail
    
    ' ロガーの初期化
    mLogger.Configure mSettings, mQueue, mLock, mPerformanceMonitor
    
    ' ログメッセージの追加
    mLogger.Log "TestModule", "Async test message", LOG_LEVEL_INFO
    
    ' 非同期処理のシミュレーション
    mLogger.SimulateTimer
    
    ' キューが空になっていることを確認
    Debug.Assert mLogger.GetQueueCount() = 0
    
    Debug.Print "TestAsyncProcessing: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestAsyncProcessing: Failed - " & Err.Description
End Sub

' ======================
' 全テストの実行
' ======================
Public Sub RunAllTests()
    TestInitialization
    TestLoggerAddition
    TestLogMessageQueuing
    TestAsyncProcessing
End Sub

================
File: TestMsgBoxNotifier.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "TestMsgBoxNotifier"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Private Const MODULE_NAME As String = "TestMsgBoxNotifier"

' テスト対象
Private mNotifier As MsgBoxNotifier
Private mMockLock As MockLock
Private mMockMonitor As MockPerformanceMonitor
Private mMockConfig As MockAppConfig
Private mMockFormatter As MockMessageFormatter

' ======================
' セットアップ/クリーンアップ
' ======================
Private Sub Class_Initialize()
    ' モックオブジェクトの初期化
    Set mMockLock = New MockLock
    Set mMockMonitor = New MockPerformanceMonitor
    Set mMockConfig = New MockAppConfig
    Set mMockFormatter = New MockMessageFormatter
    
    ' テスト対象の初期化
    Set mNotifier = New MsgBoxNotifier
    mNotifier.Initialize mMockLock, mMockMonitor, mMockConfig, mMockFormatter
End Sub

Private Sub Class_Terminate()
    Set mNotifier = Nothing
    Set mMockLock = Nothing
    Set mMockMonitor = Nothing
    Set mMockConfig = Nothing
    Set mMockFormatter = Nothing
End Sub

' ======================
' テストケース
' ======================

''' <summary>
''' 初期化テスト - 正常系
''' </summary>
Public Sub TestInitialize()
    On Error GoTo TestFail
    
    ' 新しいインスタンスで初期化テスト
    Dim notifier As New MsgBoxNotifier
    notifier.Initialize mMockLock, mMockMonitor, mMockConfig, mMockFormatter
    
    Debug.Print "TestInitialize: OK"
    Exit Sub
    
TestFail:
    Debug.Print "TestInitialize: Failed - " & Err.Description
End Sub

''' <summary>
''' 初期化テスト - 異常系（Nothingを渡す）
''' </summary>
Public Sub TestInitializeWithNothing()
    On Error Resume Next
    
    Dim notifier As New MsgBoxNotifier
    notifier.Initialize Nothing, Nothing, Nothing, Nothing
    
    ' エラーが発生することを確認
    If Err.Number = 5 Then
        Debug.Print "TestInitializeWithNothing: OK"
    Else
        Debug.Print "TestInitializeWithNothing: Failed - Expected error 5, got " & Err.Number
    End If
    
    On Error GoTo 0
End Sub

''' <summary>
''' 通知スタイル設定テスト
''' </summary>
Public Sub TestNotificationStyle()
    On Error GoTo TestFail
    
    ' スタイル設定
    Dim testStyle As VbMsgBoxStyle
    testStyle = vbOKOnly Or vbInformation
    mNotifier.NotificationStyle = testStyle
    
    ' 設定値の取得と検証
    If mNotifier.NotificationStyle = testStyle Then
        Debug.Print "TestNotificationStyle: OK"
    Else
        Debug.Print "TestNotificationStyle: Failed - Style mismatch"
    End If
    Exit Sub
    
TestFail:
    Debug.Print "TestNotificationStyle: Failed - " & Err.Description
End Sub

''' <summary>
''' メッセージフォーマット処理テスト
''' </summary>
Public Sub TestMessageFormatting()
    On Error GoTo TestFail
    
    ' テスト用エラー情報
    Dim testError As ErrorInfo
    With testError
        .Code = ErrUnexpected
        .Description = "テストエラー"
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "TestMessageFormatting"
    End With
    
    ' モックフォーマッタの戻り値を設定
    mMockFormatter.SetReturnValue "テストフォーマット済メッセージ"
    
    ' 通知実行
    mNotifier.Notify testError
    
    ' フォーマッタが呼び出されたことを確認
    If mMockFormatter.WasCalled Then
        Debug.Print "TestMessageFormatting: OK"
    Else
        Debug.Print "TestMessageFormatting: Failed - Formatter not called"
    End If
    Exit Sub
    
TestFail:
    Debug.Print "TestMessageFormatting: Failed - " & Err.Description
End Sub

''' <summary>
''' ロック処理テスト
''' </summary>
Public Sub TestLocking()
    On Error GoTo TestFail
    
    ' テスト用エラー情報
    Dim testError As ErrorInfo
    With testError
        .Code = ErrUnexpected
        .Description = "テストエラー"
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "TestLocking"
    End With
    
    ' 通知実行
    mNotifier.Notify testError
    
    ' ロックの取得と解放が行われたことを確認
    If mMockLock.AcquireCalled And mMockLock.ReleaseCalled Then
        Debug.Print "TestLocking: OK"
    Else
        Debug.Print "TestLocking: Failed - Lock operations not called"
    End If
    Exit Sub
    
TestFail:
    Debug.Print "TestLocking: Failed - " & Err.Description
End Sub

' ======================
' テスト実行
' ======================
Public Sub RunAllTests()
    TestInitialize
    TestInitializeWithNothing
    TestNotificationStyle
    TestMessageFormatting
    TestLocking
End Sub

================
File: TestMutexLock.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "TestMutexLock"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Private Const MODULE_NAME As String = "TestMutexLock"
Private testLock As clsMutexLock

'@TestInitialize
Private Sub TestInitialize()
    Set testLock = New clsMutexLock
End Sub

'@TestCleanup
Private Sub TestCleanup()
    If Not testLock Is Nothing Then
        testLock.ForceRelease
        Set testLock = Nothing
    End If
End Sub

'@TestMethod("MutexLock")
Public Sub TestAcquireSuccess()
    On Error GoTo TestFail
    
    'Arrange
    Dim result As Boolean
    
    'Act
    result = testLock.Acquire()
    
    'Assert
    Debug.Assert result = True
    Debug.Assert testLock.ValidateLockState() = True
    
    Exit Sub
TestFail:
    Debug.Print "TestAcquireSuccess failed: " & Err.Description
End Sub

'@TestMethod("MutexLock")
Public Sub TestAcquireWithTimeout()
    On Error GoTo TestFail
    
    'Arrange
    Dim result As Boolean
    Dim timeout As Long
    timeout = 1000 ' 1秒
    
    'Act
    result = testLock.Acquire(timeout)
    
    'Assert
    Debug.Assert result = True
    Debug.Assert testLock.ValidateLockState() = True
    
    Exit Sub
TestFail:
    Debug.Print "TestAcquireWithTimeout failed: " & Err.Description
End Sub

'@TestMethod("MutexLock")
Public Sub TestReleaseSuccess()
    On Error GoTo TestFail
    
    'Arrange
    testLock.Acquire
    
    'Act
    testLock.Release
    
    'Assert
    Debug.Assert testLock.ValidateLockState() = False
    
    Exit Sub
TestFail:
    Debug.Print "TestReleaseSuccess failed: " & Err.Description
End Sub

'@TestMethod("MutexLock")
Public Sub TestConfigure()
    On Error GoTo TestFail
    
    'Arrange
    Const NEW_MUTEX_NAME As String = "TestMutex"
    
    'Act
    testLock.Configure NEW_MUTEX_NAME
    
    'Assert
    Debug.Assert testLock.MutexName = NEW_MUTEX_NAME
    
    Exit Sub
TestFail:
    Debug.Print "TestConfigure failed: " & Err.Description
End Sub

'@TestMethod("MutexLock")
Public Sub TestMultipleAcquire()
    On Error GoTo TestFail
    
    'Arrange
    Dim secondLock As clsMutexLock
    Set secondLock = New clsMutexLock
    
    'Act
    testLock.Acquire
    Dim result As Boolean
    result = secondLock.Acquire(100) ' 100msタイムアウト
    
    'Assert
    Debug.Assert result = False ' 2番目のロックは失敗するはず
    
    'Cleanup
    Set secondLock = Nothing
    
    Exit Sub
TestFail:
    Debug.Print "TestMultipleAcquire failed: " & Err.Description
End Sub

================
File: TestSemaphoreLock.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "TestSemaphoreLock"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

Private Const MODULE_NAME As String = "TestSemaphoreLock"
Private testLock As clsSemaphoreLock

'@TestInitialize
Private Sub TestInitialize()
    Set testLock = New clsSemaphoreLock
End Sub

'@TestCleanup
Private Sub TestCleanup()
    If Not testLock Is Nothing Then
        testLock.ForceRelease
        Set testLock = Nothing
    End If
End Sub

'@TestMethod("SemaphoreLock")
Public Sub TestAcquireSuccess()
    On Error GoTo TestFail
    
    'Arrange
    Dim result As Boolean
    
    'Act
    result = testLock.Acquire()
    
    'Assert
    Debug.Assert result = True
    Debug.Assert testLock.ValidateLockState() = True
    
    Exit Sub
TestFail:
    Debug.Print "TestAcquireSuccess failed: " & Err.Description
End Sub

'@TestMethod("SemaphoreLock")
Public Sub TestAcquireWithTimeout()
    On Error GoTo TestFail
    
    'Arrange
    Dim result As Boolean
    Dim timeout As Long
    timeout = 1000 ' 1秒
    
    'Act
    result = testLock.Acquire(timeout)
    
    'Assert
    Debug.Assert result = True
    Debug.Assert testLock.ValidateLockState() = True
    
    Exit Sub
TestFail:
    Debug.Print "TestAcquireWithTimeout failed: " & Err.Description
End Sub

'@TestMethod("SemaphoreLock")
Public Sub TestReleaseSuccess()
    On Error GoTo TestFail
    
    'Arrange
    testLock.Acquire
    
    'Act
    testLock.Release
    
    'Assert
    Debug.Assert testLock.ValidateLockState() = False
    
    Exit Sub
TestFail:
    Debug.Print "TestReleaseSuccess failed: " & Err.Description
End Sub

'@TestMethod("SemaphoreLock")
Public Sub TestConfigure()
    On Error GoTo TestFail
    
    'Arrange
    Const NEW_SEMAPHORE_NAME As String = "TestSemaphore"
    
    'Act
    testLock.Configure NEW_SEMAPHORE_NAME
    
    'Assert
    Debug.Assert testLock.SemaphoreName = NEW_SEMAPHORE_NAME
    
    Exit Sub
TestFail:
    Debug.Print "TestConfigure failed: " & Err.Description
End Sub

'@TestMethod("SemaphoreLock")
Public Sub TestMultipleAcquire()
    On Error GoTo TestFail
    
    'Arrange
    Dim secondLock As clsSemaphoreLock
    Set secondLock = New clsSemaphoreLock
    
    'Act
    testLock.Acquire
    Dim result As Boolean
    result = secondLock.Acquire(100) ' 100msタイムアウト
    
    'Assert
    Debug.Assert result = False ' 2番目のロックは失敗するはず
    
    'Cleanup
    Set secondLock = Nothing
    
    Exit Sub
TestFail:
    Debug.Print "TestMultipleAcquire failed: " & Err.Description
End Sub

================
File: TestStringValidator.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "TestStringValidator"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "TestStringValidator"

' ======================
' プライベート変数
' ======================
Private mValidator As StringValidator
Private mMockError As MockError

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    Set mMockError = New MockError
End Sub

Private Sub Class_Terminate()
    Set mValidator = Nothing
    Set mMockError = Nothing
End Sub

' ======================
' テストメソッド
' ======================
Public Sub TestMinLengthValidation()
    ' 準備
    Set mValidator = New StringValidator
    Set mValidator.Error = mMockError
    
    Dim minLengthRule As MinLengthRule
    Set minLengthRule = New MinLengthRule
    minLengthRule.MinLength = 5
    mValidator.AddRule minLengthRule
    
    ' 実行と検証
    Debug.Assert Not mValidator.Validate("abc"), "最小長より短い文字列は失敗するべき"
    Debug.Assert mValidator.Validate("abcde"), "最小長と同じ長さの文字列は成功するべき"
    Debug.Assert mValidator.Validate("abcdef"), "最小長より長い文字列は成功するべき"
End Sub

Public Sub TestMaxLengthValidation()
    ' 準備
    Set mValidator = New StringValidator
    Set mValidator.Error = mMockError
    
    Dim maxLengthRule As MaxLengthRule
    Set maxLengthRule = New MaxLengthRule
    maxLengthRule.MaxLength = 5
    mValidator.AddRule maxLengthRule
    
    ' 実行と検証
    Debug.Assert mValidator.Validate("abc"), "最大長より短い文字列は成功するべき"
    Debug.Assert mValidator.Validate("abcde"), "最大長と同じ長さの文字列は成功するべき"
    Debug.Assert Not mValidator.Validate("abcdef"), "最大長より長い文字列は失敗するべき"
End Sub

Public Sub TestPatternValidation()
    ' 準備
    Set mValidator = New StringValidator
    Set mValidator.Error = mMockError
    
    Dim patternRule As PatternRule
    Set patternRule = New PatternRule
    patternRule.Pattern = "^[0-9]+$"
    mValidator.AddRule patternRule
    
    ' 実行と検証
    Debug.Assert mValidator.Validate("12345"), "数字のみの文字列は成功するべき"
    Debug.Assert Not mValidator.Validate("abc"), "数字以外の文字列は失敗するべき"
    Debug.Assert Not mValidator.Validate("123abc"), "数字と文字が混在する文字列は失敗するべき"
End Sub

Public Sub TestEmailValidation()
    ' 準備
    Set mValidator = CreateEmailValidator(mMockError)
    
    ' 実行と検証
    Debug.Assert mValidator.Validate("test@example.com"), "正しい形式のメールアドレスは成功するべき"
    Debug.Assert Not mValidator.Validate("invalid-email"), "@を含まないメールアドレスは失敗するべき"
    Debug.Assert Not mValidator.Validate("test@"), "ドメインがないメールアドレスは失敗するべき"
    Debug.Assert Not mValidator.Validate("@example.com"), "ローカル部がないメールアドレスは失敗するべき"
End Sub

Public Sub TestPhoneValidation()
    ' 準備
    Set mValidator = CreatePhoneValidator(mMockError)
    
    ' 実行と検証
    Debug.Assert mValidator.Validate("03-1234-5678"), "正しい形式の電話番号は成功するべき"
    Debug.Assert mValidator.Validate("0312345678"), "ハイフンなしの電話番号は成功するべき"
    Debug.Assert Not mValidator.Validate("abc-defg-hijk"), "数字以外の文字列は失敗するべき"
    Debug.Assert Not mValidator.Validate("03-1234"), "短すぎる電話番号は失敗するべき"
    Debug.Assert Not mValidator.Validate("03-1234-5678-9012"), "長すぎる電話番号は失敗するべき"
End Sub

Public Sub TestMultipleRules()
    ' 準備
    Set mValidator = New StringValidator
    Set mValidator.Error = mMockError
    
    Dim minLengthRule As MinLengthRule
    Set minLengthRule = New MinLengthRule
    minLengthRule.MinLength = 5
    mValidator.AddRule minLengthRule
    
    Dim maxLengthRule As MaxLengthRule
    Set maxLengthRule = New MaxLengthRule
    maxLengthRule.MaxLength = 10
    mValidator.AddRule maxLengthRule
    
    Dim patternRule As PatternRule
    Set patternRule = New PatternRule
    patternRule.Pattern = "^[a-zA-Z]+$"
    mValidator.AddRule patternRule
    
    ' 実行と検証
    Debug.Assert Not mValidator.Validate("abc"), "短すぎる文字列は失敗するべき"
    Debug.Assert Not mValidator.Validate("abcdefghijk"), "長すぎる文字列は失敗するべき"
    Debug.Assert Not mValidator.Validate("abc123"), "数字を含む文字列は失敗するべき"
    Debug.Assert mValidator.Validate("abcdef"), "すべてのルールを満たす文字列は成功するべき"
End Sub
