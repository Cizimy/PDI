This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-27T00:46:28.570Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
AllowFutureDateRule.cls
AllowPastDateRule.cls
DateValidator.cls
MaxDateRule.cls
MaxLengthRule.cls
MinDateRule.cls
MinLengthRule.cls
PatternRule.cls
StringValidator.cls

================================================================
Files
================================================================

================
File: AllowFutureDateRule.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "AllowFutureDateRule"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "AllowFutureDateRule"

' ======================
' インターフェース実装
' ======================
Implements IValidationRule

' ======================
' プライベート変数
' ======================
Private mAllowFutureDate As Boolean
Private mErrorMessage As String

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    mAllowFutureDate = True
    mErrorMessage = ""
End Sub

' ======================
' プロパティ
' ======================
Public Property Let AllowFutureDate(ByVal value As Boolean)
    mAllowFutureDate = value
End Property

Public Property Get AllowFutureDate() As Boolean
    AllowFutureDate = mAllowFutureDate
End Property

Private Property Get IValidationRule_ErrorMessage() As String
    IValidationRule_ErrorMessage = mErrorMessage
End Property

' ======================
' メソッド
' ======================
Private Function IValidationRule_Validate(ByVal value As Variant) As Boolean
    On Error GoTo ErrorHandler
    
    ' 日付型チェック
    If Not IsDate(value) Then
        mErrorMessage = "値は日付である必要があります。"
        IValidationRule_Validate = False
        Exit Function
    End If
    
    Dim dateValue As Date
    dateValue = CDate(value)
    
    ' 未来日付チェック
    If Not mAllowFutureDate And dateValue > Date Then
        mErrorMessage = "未来の日付は指定できません。"
        IValidationRule_Validate = False
        Exit Function
    End If
    
    mErrorMessage = ""
    IValidationRule_Validate = True
    Exit Function

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "未来日付の検証中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "IValidationRule_Validate"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    mErrorMessage = "検証中に予期せぬエラーが発生しました。"
    IValidationRule_Validate = False
End Function

================
File: AllowPastDateRule.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "AllowPastDateRule"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "AllowPastDateRule"

' ======================
' インターフェース実装
' ======================
Implements IValidationRule

' ======================
' プライベート変数
' ======================
Private mAllowPastDate As Boolean
Private mErrorMessage As String

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    mAllowPastDate = True
    mErrorMessage = ""
End Sub

' ======================
' プロパティ
' ======================
Public Property Let AllowPastDate(ByVal value As Boolean)
    mAllowPastDate = value
End Property

Public Property Get AllowPastDate() As Boolean
    AllowPastDate = mAllowPastDate
End Property

Private Property Get IValidationRule_ErrorMessage() As String
    IValidationRule_ErrorMessage = mErrorMessage
End Property

' ======================
' メソッド
' ======================
Private Function IValidationRule_Validate(ByVal value As Variant) As Boolean
    On Error GoTo ErrorHandler
    
    ' 日付型チェック
    If Not IsDate(value) Then
        mErrorMessage = "値は日付である必要があります。"
        IValidationRule_Validate = False
        Exit Function
    End If
    
    Dim dateValue As Date
    dateValue = CDate(value)
    
    ' 過去日付チェック
    If Not mAllowPastDate And dateValue < Date Then
        mErrorMessage = "過去の日付は指定できません。"
        IValidationRule_Validate = False
        Exit Function
    End If
    
    mErrorMessage = ""
    IValidationRule_Validate = True
    Exit Function

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "過去日付の検証中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "IValidationRule_Validate"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    mErrorMessage = "検証中に予期せぬエラーが発生しました。"
    IValidationRule_Validate = False
End Function

================
File: DateValidator.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "DateValidator"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "DateValidator"

' ======================
' インターフェース実装
' ======================
Implements IValidator

' ======================
' プライベート変数
' ======================
Private mRules As Collection
Private mError As IError

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    Set mRules = New Collection
End Sub

Private Sub Class_Terminate()
    Set mRules = Nothing
    Set mError = Nothing
End Sub

' ======================
' プロパティ
' ======================
Public Property Set Error(ByVal value As IError)
    Set mError = value
End Property

Public Property Get Error() As IError
    Set Error = mError
End Property

Private Property Get IValidator_ErrorMessage() As String
    ' エラーメッセージは個別のルールから取得するため、このプロパティは使用しない
    IValidator_ErrorMessage = ""
End Property

' ======================
' メソッド
' ======================
Public Sub AddRule(ByVal rule As IValidationRule)
    If rule Is Nothing Then
        Err.Raise 5, MODULE_NAME, "ルールがNothingです。"
    End If
    mRules.Add rule
End Sub

Public Sub ClearRules()
    Set mRules = New Collection
End Sub

Private Function IValidator_Validate(ByVal value As Variant) As Boolean
    On Error GoTo ErrorHandler
    
    ' エラーハンドラーが設定されていない場合はエラー
    If mError Is Nothing Then
        Err.Raise 5, MODULE_NAME, "エラーハンドラーが設定されていません。"
    End If
    
    ' 日付型チェック
    If Not IsDate(value) Then
        Dim errInfo As ErrorInfo
        With errInfo
            .Code = ErrInvalidInput
            .Description = "値は日付である必要があります。"
            .Category = ECValidation
            .Source = MODULE_NAME
            .ProcedureName = "IValidator_Validate"
            .StackTrace = modStackTrace.GetStackTrace()
            .OccurredAt = Now
        End With
        mError.HandleError errInfo
        IValidator_Validate = False
        Exit Function
    End If
    
    ' 各ルールの検証
    Dim rule As IValidationRule
    For Each rule In mRules
        If Not rule.Validate(value) Then
            Dim errInfo2 As ErrorInfo
            With errInfo2
                .Code = ErrInvalidInput
                .Description = rule.ErrorMessage
                .Category = ECValidation
                .Source = MODULE_NAME
                .ProcedureName = "IValidator_Validate"
                .StackTrace = modStackTrace.GetStackTrace()
                .OccurredAt = Now
            End With
            mError.HandleError errInfo2
            IValidator_Validate = False
            Exit Function
        End If
    Next rule
    
    IValidator_Validate = True
    Exit Function

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "日付の検証中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "IValidator_Validate"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    IValidator_Validate = False
End Function

' ======================
' ファクトリメソッド
' ======================
Public Function CreateBirthDateValidator(ByVal errorHandler As IError) As DateValidator
    Set CreateBirthDateValidator = New DateValidator
    With CreateBirthDateValidator
        Set .Error = errorHandler
        
        Dim minDateRule As MinDateRule
        Set minDateRule = New MinDateRule
        minDateRule.MinDate = DateSerial(1900, 1, 1)
        .AddRule minDateRule
        
        Dim maxDateRule As MaxDateRule
        Set maxDateRule = New MaxDateRule
        maxDateRule.MaxDate = Date
        .AddRule maxDateRule
        
        Dim futureDateRule As AllowFutureDateRule
        Set futureDateRule = New AllowFutureDateRule
        futureDateRule.AllowFutureDate = False
        .AddRule futureDateRule
    End With
End Function

Public Function CreateExpiryDateValidator(ByVal errorHandler As IError) As DateValidator
    Set CreateExpiryDateValidator = New DateValidator
    With CreateExpiryDateValidator
        Set .Error = errorHandler
        
        Dim minDateRule As MinDateRule
        Set minDateRule = New MinDateRule
        minDateRule.MinDate = Date
        .AddRule minDateRule
        
        Dim maxDateRule As MaxDateRule
        Set maxDateRule = New MaxDateRule
        maxDateRule.MaxDate = DateAdd("yyyy", 100, Date)
        .AddRule maxDateRule
        
        Dim pastDateRule As AllowPastDateRule
        Set pastDateRule = New AllowPastDateRule
        pastDateRule.AllowPastDate = False
        .AddRule pastDateRule
    End With
End Function

================
File: MaxDateRule.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "MaxDateRule"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "MaxDateRule"

' ======================
' インターフェース実装
' ======================
Implements IValidationRule

' ======================
' プライベート変数
' ======================
Private mMaxDate As Date
Private mErrorMessage As String

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    mMaxDate = DateSerial(9999, 12, 31)
    mErrorMessage = ""
End Sub

' ======================
' プロパティ
' ======================
Public Property Let MaxDate(ByVal value As Date)
    mMaxDate = value
End Property

Public Property Get MaxDate() As Date
    MaxDate = mMaxDate
End Property

Private Property Get IValidationRule_ErrorMessage() As String
    IValidationRule_ErrorMessage = mErrorMessage
End Property

' ======================
' メソッド
' ======================
Private Function IValidationRule_Validate(ByVal value As Variant) As Boolean
    On Error GoTo ErrorHandler
    
    ' 日付型チェック
    If Not IsDate(value) Then
        mErrorMessage = "値は日付である必要があります。"
        IValidationRule_Validate = False
        Exit Function
    End If
    
    Dim dateValue As Date
    dateValue = CDate(value)
    
    ' 最大日付チェック
    If dateValue > mMaxDate Then
        mErrorMessage = "日付が新しすぎます。" & Format$(mMaxDate, "yyyy/mm/dd") & "以前の日付を指定してください。"
        IValidationRule_Validate = False
        Exit Function
    End If
    
    mErrorMessage = ""
    IValidationRule_Validate = True
    Exit Function

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "最大日付の検証中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "IValidationRule_Validate"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    mErrorMessage = "検証中に予期せぬエラーが発生しました。"
    IValidationRule_Validate = False
End Function

================
File: MaxLengthRule.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "MaxLengthRule"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "MaxLengthRule"

' ======================
' インターフェース実装
' ======================
Implements IValidationRule

' ======================
' プライベート変数
' ======================
Private mMaxLength As Long
Private mErrorMessage As String

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    mMaxLength = 2147483647 ' Long型の最大値
    mErrorMessage = ""
End Sub

' ======================
' プロパティ
' ======================
Public Property Let MaxLength(ByVal value As Long)
    If value < 0 Then
        Err.Raise 5, MODULE_NAME, "最大長は0以上である必要があります。"
    End If
    mMaxLength = value
End Property

Public Property Get MaxLength() As Long
    MaxLength = mMaxLength
End Property

Private Property Get IValidationRule_ErrorMessage() As String
    IValidationRule_ErrorMessage = mErrorMessage
End Property

' ======================
' メソッド
' ======================
Private Function IValidationRule_Validate(ByVal value As Variant) As Boolean
    On Error GoTo ErrorHandler
    
    ' 文字列型チェック
    If VarType(value) <> vbString Then
        mErrorMessage = "値は文字列である必要があります。"
        IValidationRule_Validate = False
        Exit Function
    End If
    
    Dim strValue As String
    strValue = CStr(value)
    
    ' 長さチェック
    If Len(strValue) > mMaxLength Then
        mErrorMessage = "文字列の長さが長すぎます。最大" & mMaxLength & "文字までです。"
        IValidationRule_Validate = False
        Exit Function
    End If
    
    mErrorMessage = ""
    IValidationRule_Validate = True
    Exit Function

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "最大長の検証中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "IValidationRule_Validate"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    mErrorMessage = "検証中に予期せぬエラーが発生しました。"
    IValidationRule_Validate = False
End Function

================
File: MinDateRule.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "MinDateRule"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "MinDateRule"

' ======================
' インターフェース実装
' ======================
Implements IValidationRule

' ======================
' プライベート変数
' ======================
Private mMinDate As Date
Private mErrorMessage As String

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    mMinDate = DateSerial(1900, 1, 1)
    mErrorMessage = ""
End Sub

' ======================
' プロパティ
' ======================
Public Property Let MinDate(ByVal value As Date)
    mMinDate = value
End Property

Public Property Get MinDate() As Date
    MinDate = mMinDate
End Property

Private Property Get IValidationRule_ErrorMessage() As String
    IValidationRule_ErrorMessage = mErrorMessage
End Property

' ======================
' メソッド
' ======================
Private Function IValidationRule_Validate(ByVal value As Variant) As Boolean
    On Error GoTo ErrorHandler
    
    ' 日付型チェック
    If Not IsDate(value) Then
        mErrorMessage = "値は日付である必要があります。"
        IValidationRule_Validate = False
        Exit Function
    End If
    
    Dim dateValue As Date
    dateValue = CDate(value)
    
    ' 最小日付チェック
    If dateValue < mMinDate Then
        mErrorMessage = "日付が古すぎます。" & Format$(mMinDate, "yyyy/mm/dd") & "以降の日付を指定してください。"
        IValidationRule_Validate = False
        Exit Function
    End If
    
    mErrorMessage = ""
    IValidationRule_Validate = True
    Exit Function

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "最小日付の検証中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "IValidationRule_Validate"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    mErrorMessage = "検証中に予期せぬエラーが発生しました。"
    IValidationRule_Validate = False
End Function

================
File: MinLengthRule.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "MinLengthRule"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "MinLengthRule"

' ======================
' インターフェース実装
' ======================
Implements IValidationRule

' ======================
' プライベート変数
' ======================
Private mMinLength As Long
Private mErrorMessage As String

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    mMinLength = 0
    mErrorMessage = ""
End Sub

' ======================
' プロパティ
' ======================
Public Property Let MinLength(ByVal value As Long)
    If value < 0 Then
        Err.Raise 5, MODULE_NAME, "最小長は0以上である必要があります。"
    End If
    mMinLength = value
End Property

Public Property Get MinLength() As Long
    MinLength = mMinLength
End Property

Private Property Get IValidationRule_ErrorMessage() As String
    IValidationRule_ErrorMessage = mErrorMessage
End Property

' ======================
' メソッド
' ======================
Private Function IValidationRule_Validate(ByVal value As Variant) As Boolean
    On Error GoTo ErrorHandler
    
    ' 文字列型チェック
    If VarType(value) <> vbString Then
        mErrorMessage = "値は文字列である必要があります。"
        IValidationRule_Validate = False
        Exit Function
    End If
    
    Dim strValue As String
    strValue = CStr(value)
    
    ' 長さチェック
    If Len(strValue) < mMinLength Then
        mErrorMessage = "文字列の長さが短すぎます。最小" & mMinLength & "文字必要です。"
        IValidationRule_Validate = False
        Exit Function
    End If
    
    mErrorMessage = ""
    IValidationRule_Validate = True
    Exit Function

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "最小長の検証中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "IValidationRule_Validate"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    mErrorMessage = "検証中に予期せぬエラーが発生しました。"
    IValidationRule_Validate = False
End Function

================
File: PatternRule.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "PatternRule"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "PatternRule"

' ======================
' インターフェース実装
' ======================
Implements IValidationRule

' ======================
' プライベート変数
' ======================
Private mPattern As String
Private mErrorMessage As String
Private mRegexEngine As IRegexEngine

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    mPattern = ""
    mErrorMessage = ""
    Set mRegexEngine = New VBScriptRegexEngine ' デフォルトのエンジン
End Sub

Private Sub Class_Terminate()
    Set mRegexEngine = Nothing
End Sub

' ======================
' プロパティ
' ======================
Public Property Let Pattern(ByVal value As String)
    mPattern = value
End Property

Public Property Get Pattern() As String
    Pattern = mPattern
End Property

Public Property Set RegexEngine(ByVal value As IRegexEngine)
    Set mRegexEngine = value
End Property

Public Property Get RegexEngine() As IRegexEngine
    Set RegexEngine = mRegexEngine
End Property

Private Property Get IValidationRule_ErrorMessage() As String
    IValidationRule_ErrorMessage = mErrorMessage
End Property

' ======================
' メソッド
' ======================
Private Function IValidationRule_Validate(ByVal value As Variant) As Boolean
    On Error GoTo ErrorHandler
    
    ' 文字列型チェック
    If VarType(value) <> vbString Then
        mErrorMessage = "値は文字列である必要があります。"
        IValidationRule_Validate = False
        Exit Function
    End If
    
    ' パターンが設定されていない場合は検証をスキップ
    If mPattern = "" Then
        mErrorMessage = ""
        IValidationRule_Validate = True
        Exit Function
    End If
    
    ' 正規表現エンジンが設定されていない場合はエラー
    If mRegexEngine Is Nothing Then
        Err.Raise 5, MODULE_NAME, "正規表現エンジンが設定されていません。"
    End If
    
    Dim strValue As String
    strValue = CStr(value)
    
    ' パターンチェック
    If Not mRegexEngine.Test(mPattern, strValue) Then
        mErrorMessage = "文字列が指定されたパターンと一致しません。"
        IValidationRule_Validate = False
        Exit Function
    End If
    
    mErrorMessage = ""
    IValidationRule_Validate = True
    Exit Function

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "パターンの検証中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "IValidationRule_Validate"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    mErrorMessage = "検証中に予期せぬエラーが発生しました。"
    IValidationRule_Validate = False
End Function

' ======================
' ファクトリメソッド
' ======================
Public Function CreateEmailRule() As PatternRule
    Set CreateEmailRule = New PatternRule
    With CreateEmailRule
        .Pattern = "^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$"
    End With
End Function

Public Function CreatePhoneRule() As PatternRule
    Set CreatePhoneRule = New PatternRule
    With CreatePhoneRule
        .Pattern = "^[0-9\-\(\)]+$"
    End With
End Function

================
File: StringValidator.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "StringValidator"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

' ======================
' モジュール情報
' ======================
Private Const MODULE_NAME As String = "StringValidator"

' ======================
' インターフェース実装
' ======================
Implements IValidator

' ======================
' プライベート変数
' ======================
Private mRules As Collection
Private mError As IError

' ======================
' 初期化・終了処理
' ======================
Private Sub Class_Initialize()
    Set mRules = New Collection
End Sub

Private Sub Class_Terminate()
    Set mRules = Nothing
    Set mError = Nothing
End Sub

' ======================
' プロパティ
' ======================
Public Property Set Error(ByVal value As IError)
    Set mError = value
End Property

Public Property Get Error() As IError
    Set Error = mError
End Property

Private Property Get IValidator_ErrorMessage() As String
    ' エラーメッセージは個別のルールから取得するため、このプロパティは使用しない
    IValidator_ErrorMessage = ""
End Property

' ======================
' メソッド
' ======================
Public Sub AddRule(ByVal rule As IValidationRule)
    If rule Is Nothing Then
        Err.Raise 5, MODULE_NAME, "ルールがNothingです。"
    End If
    mRules.Add rule
End Sub

Public Sub ClearRules()
    Set mRules = New Collection
End Sub

Private Function IValidator_Validate(ByVal value As Variant) As Boolean
    On Error GoTo ErrorHandler
    
    ' エラーハンドラーが設定されていない場合はエラー
    If mError Is Nothing Then
        Err.Raise 5, MODULE_NAME, "エラーハンドラーが設定されていません。"
    End If
    
    ' 文字列型チェック
    If VarType(value) <> vbString Then
        Dim errInfo As ErrorInfo
        With errInfo
            .Code = ErrInvalidInput
            .Description = "値は文字列である必要があります。"
            .Category = ECValidation
            .Source = MODULE_NAME
            .ProcedureName = "IValidator_Validate"
            .StackTrace = modStackTrace.GetStackTrace()
            .OccurredAt = Now
        End With
        mError.HandleError errInfo
        IValidator_Validate = False
        Exit Function
    End If
    
    ' 各ルールの検証
    Dim rule As IValidationRule
    For Each rule In mRules
        If Not rule.Validate(value) Then
            Dim errInfo2 As ErrorInfo
            With errInfo2
                .Code = ErrInvalidInput
                .Description = rule.ErrorMessage
                .Category = ECValidation
                .Source = MODULE_NAME
                .ProcedureName = "IValidator_Validate"
                .StackTrace = modStackTrace.GetStackTrace()
                .OccurredAt = Now
            End With
            mError.HandleError errInfo2
            IValidator_Validate = False
            Exit Function
        End If
    Next rule
    
    IValidator_Validate = True
    Exit Function

ErrorHandler:
    Dim errDetail As ErrorInfo
    With errDetail
        .Code = ErrUnexpected
        .Description = "文字列の検証中にエラーが発生しました: " & Err.Description
        .Category = ECGeneral
        .Source = MODULE_NAME
        .ProcedureName = "IValidator_Validate"
        .StackTrace = modStackTrace.GetStackTrace()
        .OccurredAt = Now
    End With
    modError.HandleError errDetail
    
    IValidator_Validate = False
End Function

' ======================
' ファクトリメソッド
' ======================
Public Function CreateEmailValidator(ByVal errorHandler As IError) As StringValidator
    Set CreateEmailValidator = New StringValidator
    With CreateEmailValidator
        Set .Error = errorHandler
        
        Dim patternRule As PatternRule
        Set patternRule = New PatternRule
        patternRule.Pattern = "^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$"
        .AddRule patternRule
    End With
End Function

Public Function CreatePhoneValidator(ByVal errorHandler As IError) As StringValidator
    Set CreatePhoneValidator = New StringValidator
    With CreatePhoneValidator
        Set .Error = errorHandler
        
        Dim patternRule As PatternRule
        Set patternRule = New PatternRule
        patternRule.Pattern = "^[0-9\-\(\)]+$"
        .AddRule patternRule
        
        Dim minLengthRule As MinLengthRule
        Set minLengthRule = New MinLengthRule
        minLengthRule.MinLength = 10
        .AddRule minLengthRule
        
        Dim maxLengthRule As MaxLengthRule
        Set maxLengthRule = New MaxLengthRule
        maxLengthRule.MaxLength = 15
        .AddRule maxLengthRule
    End With
End Function
