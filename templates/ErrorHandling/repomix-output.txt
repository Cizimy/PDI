This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-28T13:25:52.837Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
clsErrorManager.cls
ErrorAnalysisResult.cls
ErrorImpl.cls
ErrorInfo.cls
ErrorMessageResource.cls
ErrorStatistics.cls
ExecutionContext.cls
IError.cls
IErrorHandler.cls
IErrorStrategy.cls
RecoveryChain.cls
RecoveryProgress.cls
SynchronizedErrorManager.cls

================================================================
Files
================================================================

================
File: clsErrorManager.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "clsErrorManager"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredefinedId = False
Attribute VB_Exposed = True
Option Explicit

Implements IError

' プライベート変数
Private mErrorHandlers As Object ' Dictionary of Collections
Private mErrorHistory As Collection
Private mErrorStatistics As ErrorStatistics
Private mLastError As ErrorInfo
Private mIsInitialized As Boolean
Private mMessageResource As ErrorMessageResource
Private mRecoveryStrategies As Collection

' 定数
Private Const MAX_RETRY_ATTEMPTS As Long = 3
Private Const RETRY_DELAY_MS As Long = 1000
Private Const MAX_EMERGENCY_LOG_SIZE As Long = 1000
Private Const EMERGENCY_LOG_FLUSH_INTERVAL As Long = 1000
Private Const MAX_RECOVERY_CHAIN_LENGTH As Long = 5

' イベント定義
Public Event EmergencyLogWritten(ByVal message As String, ByVal severity As EmergencyLevel)
Public Event RecoveryProgressChanged(ByVal errorInfo As ErrorInfo, ByVal progressPercentage As Long)
Public Event RecoveryChainExecuted(ByVal chainId As String, ByVal successCount As Long, ByVal failureCount As Long)

Private Sub Class_Initialize()
    Set mErrorHandlers = CreateObject("Scripting.Dictionary")
    Set mErrorHistory = New Collection
    Set mErrorStatistics = New ErrorStatistics
    Set mMessageResource = New ErrorMessageResource
    Set mRecoveryStrategies = New Collection
    mIsInitialized = True
End Sub

Private Sub Class_Terminate()
    Set mErrorHandlers = Nothing
    Set mErrorHistory = Nothing
    Set mErrorStatistics = Nothing
    Set mLastError = Nothing
End Sub

Private Function IError_HandleError(ByRef errorInfo As ErrorInfo, Optional ByVal options As ErrorHandlingOptions = ehoNone) As HandlingResult
    On Error GoTo ErrorHandler
    
    ' エラー情報の検証
    If errorInfo Is Nothing Then
        Debug.Print "Error: errorInfo is Nothing"
        Exit Function
    End If
    
    ' エラー情報の記録
    Set mLastError = errorInfo
    mErrorHistory.Add errorInfo
    mErrorStatistics.UpdateStatistics errorInfo
    
    ' イベントの発行
    RaiseEvent ErrorOccurred(errorInfo, errorInfo.Severity)
    
    ' オプションに基づいたログ記録
    If (options And ehoLogOnly) = ehoLogOnly Then
        LogError errorInfo
    End If
    
    ' エマージェンシーログへの記録
    If (options And ehoEmergencyLog) = ehoEmergencyLog Then
        LogEmergencyError errorInfo
    End If
    
    ' ハンドラーの呼び出し
    If mErrorHandlers.Exists(errorInfo.ErrorCode) Then
        Dim handler As IErrorHandler
        For Each handler In mErrorHandlers(errorInfo.ErrorCode)
            Dim handlingResult As HandlingResult
            handlingResult = handler.HandleError(errorInfo, options)
            
            Select Case handlingResult
                Case hrSuccess
                    RaiseEvent ErrorHandled(errorInfo, handler, True)
                    IError_HandleError = hrSuccess
                    Exit Function
                    
                Case hrPartialSuccess
                    RaiseEvent ErrorHandled(errorInfo, handler, True)
                    IError_HandleError = hrPartialSuccess
                    Exit Function
                    
                Case hrRetryNeeded
                    ' リトライが必要な場合は次のハンドラーに進む
                    
                Case hrFallbackNeeded
                    ' フォールバックが必要な場合は次のハンドラーに進む
                    
                Case hrFailed, hrUnhandled
                    ' 失敗または未処理の場合は次のハンドラーに進む
            End Select
        Next handler
    End If
    
    ' リトライオプションの処理
    If (options And ehoRetry) = ehoRetry Then
        Dim retryResult As HandlingResult
        retryResult = AttemptRetry(errorInfo)
        
        Select Case retryResult
            Case hrSuccess, hrPartialSuccess
                IError_HandleError = retryResult
                Exit Function
                
            Case hrRetryNeeded, hrFallbackNeeded
                ' リトライまたはフォールバックが必要な場合は回復チェーンを試行
                Dim recoveryChain As Collection
                Set recoveryChain = CreateRecoveryChain(errorInfo)
                
                If recoveryChain.Count > 0 Then
                    If ExecuteRecoveryChain(recoveryChain, errorInfo) Then
                        IError_HandleError = hrSuccess
                        Exit Function
                    End If
                End If
                
                ' 回復チェーンも失敗した場合
                IError_HandleError = hrFailed
                
            Case hrFailed, hrUnhandled
                ' リトライ失敗時は回復チェーンを試行
                Set recoveryChain = CreateRecoveryChain(errorInfo)
                
                If recoveryChain.Count > 0 Then
                    If ExecuteRecoveryChain(recoveryChain, errorInfo) Then
                        IError_HandleError = hrSuccess
                        Exit Function
                    End If
                End If
        End Select
    End If
    
    ' ユーザー通知
    If (options And ehoNotifyUser) = ehoNotifyUser Then
        NotifyUser errorInfo
    End If
    
    IError_HandleError = hrUnhandled
    Exit Function
    
ErrorHandler:
    Debug.Print "Error in HandleError: " & Err.Description
    IError_HandleError = False
End Function

Private Sub IError_RegisterHandler(ByVal errorCode As ErrorCode, ByVal handler As IErrorHandler, Optional ByVal options As HandlerOptions = hoNone)
    On Error GoTo ErrorHandler
    
    If Not mErrorHandlers.Exists(errorCode) Then
        Set mErrorHandlers(errorCode) = New Collection
    End If
    
    If (options And hoReplace) = hoReplace Then
        ' 既存のハンドラーをすべて削除
        Set mErrorHandlers(errorCode) = New Collection
        mErrorHandlers(errorCode).Add handler
    ElseIf (options And hoAppend) = hoAppend Then
        ' ハンドラーをリストの末尾に追加
        mErrorHandlers(errorCode).Add handler
    ElseIf (options And hoHighPriority) = hoHighPriority Then
        ' ハンドラーをリストの先頭に追加
        mErrorHandlers(errorCode).Add handler, Before:=1
    Else
        ' デフォルトではハンドラーをリストの末尾に追加
        mErrorHandlers(errorCode).Add handler
    End If
    
    RaiseEvent HandlerRegistered(errorCode, handler)
    Exit Sub
    
ErrorHandler:
    Debug.Print "Error in RegisterHandler: " & Err.Description
End Sub

Private Sub IError_UnregisterHandler(ByVal errorCode As ErrorCode, Optional ByVal options As UnregisterOptions = uoNone)
    On Error GoTo ErrorHandler
    
    If mErrorHandlers.Exists(errorCode) Then
        If (options And uoAllHandlers) = uoAllHandlers Then
            ' すべてのハンドラーを削除
            mErrorHandlers.Remove errorCode
        Else
            ' 最初のハンドラーを削除
            mErrorHandlers(errorCode).Remove 1
        End If
        
        RaiseEvent HandlerUnregistered(errorCode)
    End If
    Exit Sub
    
ErrorHandler:
    Debug.Print "Error in UnregisterHandler: " & Err.Description
End Sub

Private Sub IError_IncrementErrorCount(ByVal errorCode As ErrorCode, Optional ByVal options As CountOptions = coNone)
    On Error GoTo ErrorHandler
    
    If (options And coIncrement) = coIncrement Then
        mErrorStatistics.IncrementErrorCount errorCode
    ElseIf (options And coReset) = coReset Then
        ' カウントをリセット
        If mErrorStatistics.ErrorCountByCode.Exists(errorCode) Then
            mErrorStatistics.ErrorCountByCode(errorCode) = 0
        End If
    ElseIf (options And coDeduct) = coDeduct Then
        ' カウントを減少
        If mErrorStatistics.ErrorCountByCode.Exists(errorCode) Then
            If mErrorStatistics.ErrorCountByCode(errorCode) > 0 Then
                mErrorStatistics.ErrorCountByCode(errorCode) = mErrorStatistics.ErrorCountByCode(errorCode) - 1
            End If
        End If
    End If
    Exit Sub
    
ErrorHandler:
    Debug.Print "Error in IncrementErrorCount: " & Err.Description
End Sub

Private Function IError_CheckErrorThreshold(ByVal errorCode As ErrorCode, ByVal threshold As Long, Optional ByVal options As ThresholdOptions = toNone) As Boolean
    On Error GoTo ErrorHandler
    
    Dim count As Long
    
    If (options And toCheckSpecific) = toCheckSpecific Then
        ' 特定のエラーコードの閾値をチェック
        If mErrorStatistics.ErrorCountByCode.Exists(errorCode) Then
            count = mErrorStatistics.ErrorCountByCode(errorCode)
        End If
    Else
        ' グローバル閾値をチェック
        count = mErrorStatistics.TotalErrorCount
    End If
    
    If count >= threshold Then
        RaiseEvent ThresholdExceeded(errorCode, count, threshold)
        
        If (options And toResetAfterCheck) = toResetAfterCheck Then
            ' カウントをリセット
            If (options And toCheckSpecific) = toCheckSpecific Then
                If mErrorStatistics.ErrorCountByCode.Exists(errorCode) Then
                    mErrorStatistics.ErrorCountByCode(errorCode) = 0
                End If
            Else
                mErrorStatistics.Reset
            End If
        End If
        
        IError_CheckErrorThreshold = True
    Else
        IError_CheckErrorThreshold = False
    End If
    Exit Function
    
ErrorHandler:
    Debug.Print "Error in CheckErrorThreshold: " & Err.Description
    IError_CheckErrorThreshold = False
End Function

Private Function IError_GetErrorHistory(Optional ByVal options As HistoryOptions = hoNone) As Collection
    On Error GoTo ErrorHandler
    
    Dim result As New Collection
    Dim item As ErrorInfo
    Dim i As Long
    
    ' フィルタリング
    For Each item In mErrorHistory
        If ShouldIncludeInHistory(item, options) Then
            result.Add item
        End If
    Next
    
    ' ソート（必要に応じて実装）
    
    ' 制限
    If (options And hoLimit) = hoLimit Then
        Dim limit As Long
        limit = 100 ' デフォルト制限
        
        If result.Count > limit Then
            Dim temp As New Collection
            For i = 1 To limit
                temp.Add result(i)
            Next i
            Set result = temp
        End If
    End If
    
    Set IError_GetErrorHistory = result
    Exit Function
    
ErrorHandler:
    Debug.Print "Error in GetErrorHistory: " & Err.Description
    Set IError_GetErrorHistory = New Collection
End Function

Private Function IError_AnalyzeErrors(Optional ByVal options As AnalysisOptions = aoNone) As ErrorAnalysisResult
    On Error GoTo ErrorHandler
    
    Dim result As New ErrorAnalysisResult
    result.AnalysisStartTime = Now
    
    ' 基本分析
    If (options And aoBasicAnalysis) = aoBasicAnalysis Then
        PerformBasicAnalysis result
    End If
    
    ' 詳細分析
    If (options And aoDetailedAnalysis) = aoDetailedAnalysis Then
        PerformDetailedAnalysis result
    End If
    
    ' 根本原因分析
    If (options And aoRootCause) = aoRootCause Then
        AnalyzeRootCause result
    End If
    
    ' 影響範囲分析
    If (options And aoImpactAnalysis) = aoImpactAnalysis Then
        AnalyzeImpact result
    End If
    
    ' 推奨対策
    If (options And aoRecommendations) = aoRecommendations Then
        GenerateRecommendations result
    End If
    
    result.AnalysisEndTime = Now
    result.AnalysisDuration = DateDiff("s", result.AnalysisStartTime, result.AnalysisEndTime)
    
    RaiseEvent ErrorAnalysisCompleted(result)
    Set IError_AnalyzeErrors = result
    Exit Function
    
ErrorHandler:
    Debug.Print "Error in AnalyzeErrors: " & Err.Description
    Set IError_AnalyzeErrors = New ErrorAnalysisResult
End Function

Private Function IError_CategorizeError(ByRef errorInfo As ErrorInfo, Optional ByVal options As CategoryOptions = coNone) As ErrorCategory
    On Error GoTo ErrorHandler
    
    ' デフォルトでは自動分類を試みる
    Select Case errorInfo.ErrorCode
        Case ecInvalidInput
            IError_CategorizeError = ecInputError
        Case ecDatabaseError
            IError_CategorizeError = ecDatabaseError
        Case ecNetworkError
            IError_CategorizeError = ecNetworkError
        Case ecFileNotFound, ecFileAccessDenied
            IError_CategorizeError = ecFileIOError
        Case ecSecurityError
            IError_CategorizeError = ecSecurityError
        Case ecConfigurationError
            IError_CategorizeError = ecConfigurationError
        Case Else
            IError_CategorizeError = ecUnknownCategory
    End Select
    Exit Function
    
ErrorHandler:
    Debug.Print "Error in CategorizeError: " & Err.Description
    IError_CategorizeError = ecUnknownCategory
End Function

Private Function IError_GetErrorStatistics(Optional ByVal options As StatisticsOptions = soNone) As ErrorStatistics
    Set IError_GetErrorStatistics = mErrorStatistics
End Function

Private Function IError_GetPerformanceMetrics() As Collection
    Dim metrics As New Collection
    
    ' 基本的なメトリクスを収集
    metrics.Add Array("TotalErrors", mErrorStatistics.TotalErrorCount)
    metrics.Add Array("ErrorRate", mErrorStatistics.ErrorRate)
    metrics.Add Array("AverageHandlingTime", mErrorStatistics.AverageHandlingTime)
    metrics.Add Array("ResolutionRate", mErrorStatistics.ResolutionRate)
    
    Set IError_GetPerformanceMetrics = metrics
End Function

Private Function IError_Validate() As Boolean
    IError_Validate = mIsInitialized
End Function

Private Sub IError_Cleanup()
    Set mErrorHandlers = Nothing
    Set mErrorHistory = Nothing
    Set mErrorStatistics = Nothing
    Set mLastError = Nothing
    mIsInitialized = False
End Sub

' プライベートヘルパーメソッド

Private Sub LogError(ByVal errorInfo As ErrorInfo)
    ' ログ記録の実装
    Debug.Print "Error logged: " & errorInfo.Message
End Sub

Private Sub LogEmergencyError(ByVal errorInfo As ErrorInfo)
    On Error GoTo ErrorHandler
    
    ' 多言語対応メッセージの生成
    Dim message As String
    message = mMessageResource.GetMessage(errorInfo.ErrorCode)
    
    ' エラーメッセージのフォーマット
    Dim formattedMessage As String
    formattedMessage = FormatErrorMessage(message, errorInfo)
    
    ' イベントログへの出力を試みる
    Dim eventLogSuccess As Boolean
    eventLogSuccess = False
    
    On Error Resume Next
    WriteToEventLog formattedMessage
    If Err.Number = 0 Then
        eventLogSuccess = True
    End If
    On Error GoTo ErrorHandler
    
    ' イベントログ書き込み失敗時はファイルへの出力を試みる
    If Not eventLogSuccess Then
        Dim fileSuccess As Boolean
        fileSuccess = False
        
        On Error Resume Next
        WriteToEmergencyFile formattedMessage
        If Err.Number = 0 Then
            fileSuccess = True
        End If
        On Error GoTo ErrorHandler
        
        ' 両方の出力が失敗した場合はエラーを発生させる
        If Not fileSuccess Then
            Err.Raise vbObjectError + 1, "LogEmergencyError", _
                     "Failed to write to both event log and emergency file"
        End If
    End If
    
    ' イベントの発行
    RaiseEvent EmergencyLogWritten(message, errorInfo.Severity)
    
    Exit Sub

ErrorHandler:
    ' エラーを上位に伝播させる
    Err.Raise Err.Number, "LogEmergencyError", _
              "Emergency logging failed: " & Err.Description
End Sub

Private Function FormatErrorMessage(ByVal message As String, ByRef errorInfo As ErrorInfo) As String
    Dim builder As String
    builder = Now & " [EMERGENCY] " & message
    
    With errorInfo
        builder = builder & vbCrLf & _
                 "コード: " & .ErrorCode & vbCrLf & _
                 "重大度: " & .Severity & vbCrLf & _
                 "説明: " & .Description & vbCrLf & _
                 "ソース: " & .SourceModule & "." & .SourceProcedure & vbCrLf & _
                 "発生時刻: " & .OccurredAt & vbCrLf & _
                 "スタックトレース: " & vbCrLf & .StackTrace
    End With
    
    FormatErrorMessage = builder
End Function

Private Sub WriteToEventLog(ByVal message As String)
    On Error Resume Next
    modWindowsAPI.WriteToEventLog "PDI Error", message, EVENTLOG_ERROR_TYPE
End Sub

Private Sub WriteToEmergencyFile(ByVal message As String)
    On Error Resume Next
    
    Dim fso As Object
    Set fso = CreateObject("Scripting.FileSystemObject")
    
    Dim logPath As String
    logPath = GetEmergencyLogPath()
    
    Dim logFile As Object
    Set logFile = fso.OpenTextFile(logPath, 8, True) ' 8: ForAppending, Create if doesn't exist
    logFile.WriteLine message
    logFile.Close
    
    Set logFile = Nothing
    Set fso = Nothing
End Sub

Private Function GetEmergencyLogPath() As String
    ' エマージェンシーログのパスを取得
    GetEmergencyLogPath = App.Path & "\emergency.log"
End Function

Private Function AttemptRetry(ByVal errorInfo As ErrorInfo) As HandlingResult
    On Error GoTo ErrorHandler
    
    Dim attempt As Long
    Dim handler As IErrorHandler
    Dim backoffInterval As Long
    Dim retryCount As Long
    Dim retryInterval As Long
    Dim retryOptions As RetryOptions
    
    ' エラーコードに対応するハンドラーを取得
    If Not mErrorHandlers.Exists(errorInfo.ErrorCode) Then
        AttemptRetry = hrUnhandled
        Exit Function
    End If
    
    ' ハンドラーからリトライ設定を取得
    Set handler = mErrorHandlers(errorInfo.ErrorCode)(1)
    retryCount = handler.MaxRetryCount
    retryInterval = handler.RetryInterval
    
    ' リトライオプションの設定
    Set retryOptions = New RetryOptions
    retryOptions.UseExponentialBackoff = True
    retryOptions.MaxAttempts = retryCount
    retryOptions.BaseInterval = retryInterval
    
    For attempt = 1 To retryCount
        ' 指数バックオフの計算
        backoffInterval = CalculateBackoffInterval(attempt, retryInterval)
        Sleep backoffInterval
        
        ' 進捗の通知
        RaiseEvent RecoveryProgressChanged(errorInfo, (attempt / retryCount) * 100)
        
        ' 各ハンドラーでリトライを試行
        For Each handler In mErrorHandlers(errorInfo.ErrorCode)
            ' リトライ操作の作成
            Dim operation As IRetryableOperation
            Set operation = CreateRetryOperation(errorInfo, handler)
            
            ' リトライの実行
            Dim result As OperationResult
            Set result = handler.RetryOperation(operation, retryOptions)
            
            ' リトライ試行のイベント発行（バックオフ間隔を含む）
            RaiseEvent RetryAttempted(errorInfo, attempt, backoffInterval, IIf(result.Success, hrSuccess, hrFailed))
            
            If result.Success Then
                ' 統計情報の更新
                mErrorStatistics.IncrementRetrySuccess
                AttemptRetry = hrSuccess
                Exit Function
            End If
        Next handler
        
        ' 統計情報の更新
        errorInfo.RetryCount = attempt
        errorInfo.LastRetryTimestamp = Now
        
        ' エラーキューの処理（必要な場合のみ）
        If ShouldProcessQueue(errorInfo) Then
            ProcessErrorQueue errorInfo
            ' キュー処理後も失敗している場合はフォールバックが必要
            AttemptRetry = hrFallbackNeeded
            Exit Function
        End If
    Next attempt
    
    ' すべてのリトライが失敗した場合
    AttemptRetry = hrFailed
    Exit Function
    
ErrorHandler:
    Debug.Print "Error in AttemptRetry: " & Err.Description
    AttemptRetry = hrFailed
End Function

Private Function CalculateBackoffInterval(ByVal attempt As Long, ByVal baseInterval As Long) As Long
    ' 指数バックオフの計算
    Dim interval As Long
    interval = baseInterval * (2 ^ (attempt - 1))
    
    ' 最大値を制限
    If interval > MAX_BACKOFF_INTERVAL Then
        interval = MAX_BACKOFF_INTERVAL
    End If
    
    CalculateBackoffInterval = interval
End Function

Private Function CreateRetryOperation(ByVal errorInfo As ErrorInfo, ByVal handler As IErrorHandler) As IRetryableOperation
    ' リトライ可能な操作を作成
    Dim operation As New RetryableOperation
    operation.Initialize errorInfo, handler
    Set CreateRetryOperation = operation
End Function

Private Function ShouldProcessQueue(ByVal errorInfo As ErrorInfo) As Boolean
    ' キュー処理の必要性を判断
    
    ' 以下の条件でキューを処理する：
    ' 1. リトライ回数が一定回数（MAX_RETRY_ATTEMPTS/2）を超えた場合
    ' 2. エラーの重大度が高い（Critical以上）場合
    ' 3. 同じエラーが短時間に複数回発生している場合
    
    ' リトライ回数による判断
    If errorInfo.RetryCount > MAX_RETRY_ATTEMPTS \ 2 Then
        ShouldProcessQueue = True
        Exit Function
    End If
    
    ' エラーの重大度による判断
    If errorInfo.Severity >= esCritical Then
        ShouldProcessQueue = True
        Exit Function
    End If
    
    ' エラーの発生頻度による判断
    Dim errorCount As Long
    If mErrorStatistics.ErrorCountByCode.Exists(errorInfo.ErrorCode) Then
        errorCount = mErrorStatistics.ErrorCountByCode(errorInfo.ErrorCode)
        
        ' 直近のエラー発生時刻との間隔を確認
        If errorCount > 0 And Not errorInfo.LastRetryTimestamp = #12:00:00 AM# Then
            Dim timeSinceLastError As Long
            timeSinceLastError = DateDiff("s", errorInfo.LastRetryTimestamp, Now)
            
            ' 5分以内に3回以上発生している場合
            If timeSinceLastError <= 300 And errorCount >= 3 Then
                ShouldProcessQueue = True
                Exit Function
            End If
        End If
    End If
    
    ShouldProcessQueue = False
End Function

Private Sub ProcessErrorQueue(ByRef errorInfo As ErrorInfo)
    On Error GoTo ErrorHandler
    
    ' エラーキューの処理をIErrorStrategyに委譲
    Dim strategy As IErrorStrategy
    For Each strategy In mRecoveryStrategies
        If strategy.SupportsErrorCode(errorInfo.ErrorCode) Then
            ' RecoverFromErrorメソッドを使用してエラー回復を試みる
            If strategy.RecoverFromError(errorInfo) Then
                ' 回復成功時の処理
                mErrorStatistics.IncrementRecoverySuccess
                Exit Sub
            End If
        End If
    Next strategy
    Exit Sub
    
ErrorHandler:
    Debug.Print "Error in ProcessErrorQueue: " & Err.Description
End Sub

Private Sub NotifyUser(ByVal errorInfo As ErrorInfo)
    ' ユーザー通知の実装
    MsgBox errorInfo.Message, vbExclamation, "エラー"
End Sub

Private Function ShouldIncludeInHistory(ByVal errorInfo As ErrorInfo, ByVal options As HistoryOptions) As Boolean
    ' フィルタリング条件の実装
    ShouldIncludeInHistory = True
End Function

Private Sub PerformBasicAnalysis(ByRef result As ErrorAnalysisResult)
    ' 基本分析の実装
End Sub

Private Sub PerformDetailedAnalysis(ByRef result As ErrorAnalysisResult)
    ' 詳細分析の実装
End Sub

Private Sub AnalyzeRootCause(ByRef result As ErrorAnalysisResult)
    ' 根本原因分析の実装
End Sub

Private Sub AnalyzeImpact(ByRef result As ErrorAnalysisResult)
    ' 影響範囲分析の実装
End Sub

Private Sub GenerateRecommendations(ByRef result As ErrorAnalysisResult)
    ' 推奨対策の生成
End Sub

'#Region "Recovery Chain Management"

Private Function CreateRecoveryChain(ByVal errorInfo As ErrorInfo) As RecoveryChain
    On Error GoTo ErrorHandler
    
    Dim chain As New RecoveryChain
    Dim strategy As IErrorStrategy
    Dim metadata As New Dictionary
    
    ' チェーンのメタデータを設定
    metadata.Add "ErrorCode", errorInfo.ErrorCode
    metadata.Add "Severity", errorInfo.Severity
    metadata.Add "CreatedAt", Now
    metadata.Add "MaxLength", MAX_RECOVERY_CHAIN_LENGTH
    
    chain.Initialize metadata
    
    ' エラーコードに基づいて適切な回復戦略を選択
    For Each strategy In mRecoveryStrategies
        If strategy.SupportsErrorCode(errorInfo.ErrorCode) Then
            ' 戦略の詳細情報を追加（必要最小限の情報のみ）
            Dim strategyInfo As New Dictionary
            strategyInfo.Add "Priority", strategy.Priority
            strategyInfo.Add "Description", strategy.GetDescription()
            
            ' 戦略をチェーンに追加（プロパティは直接アクセス）
            chain.AddStrategy strategy, strategyInfo
        End If
        
        ' チェーンの長さを制限
        If chain.StrategyCount >= MAX_RECOVERY_CHAIN_LENGTH Then
            Exit For
        End If
    Next strategy
    
    ' 優先度でソート
    chain.SortByPriority
    
    ' チェーンの検証
    If Not chain.Validate Then
        Err.Raise vbObjectError + 1, "CreateRecoveryChain", "Invalid recovery chain"
    End If
    
    Set CreateRecoveryChain = chain
    Exit Function
    
ErrorHandler:
    Debug.Print "Error in CreateRecoveryChain: " & Err.Description
    Set CreateRecoveryChain = New RecoveryChain
End Function

Private Sub SortRecoveryChain(ByRef chain As Collection)
    ' 優先度に基づいてチェーンをソート
    Dim i As Long, j As Long
    Dim tempStrategy As IErrorStrategy
    
    For i = 1 To chain.Count - 1
        For j = i + 1 To chain.Count
            If chain(i).Priority < chain(j).Priority Then
                Set tempStrategy = chain(i)
                Set chain(i) = chain(j)
                Set chain(j) = tempStrategy
            End If
        Next j
    Next i
End Sub

Private Function ExecuteRecoveryChain(ByVal chain As RecoveryChain, ByRef errorInfo As ErrorInfo) As Boolean
    On Error GoTo ErrorHandler
    
    Dim strategy As IErrorStrategy
    Dim strategyInfo As Dictionary
    Dim executionContext As New ExecutionContext
    Dim progress As Long
    
    ' 実行コンテキストの初期化
    executionContext.Initialize chain.ChainId, errorInfo
    
    ' チェーンの実行前検証
    On Error Resume Next
    Dim isValid As Boolean
    isValid = chain.Validate
    If Err.Number <> 0 Then
        ' Validateメソッドでエラーが発生した場合
        Dim validateError As Long
        validateError = Err.Number
        Dim validateDesc As String
        validateDesc = Err.Description
        On Error GoTo ErrorHandler
        Err.Raise validateError, "ExecuteRecoveryChain", _
                "Chain validation failed: " & validateDesc
    End If
    On Error GoTo ErrorHandler
    
    ' 検証結果の確認
    If Not isValid Then
        Err.Raise vbObjectError + 1, "ExecuteRecoveryChain", _
                "Recovery chain validation failed: Chain is in invalid state"
    End If
    
    ' 各戦略を実行
    For Each strategy In chain.Strategies
        ' 戦略の情報を取得
        Set strategyInfo = chain.GetStrategyInfo(strategy)
        
        ' 進捗状況の更新と通知
        progress = chain.CalculateProgress()
        RaiseEvent RecoveryProgressChanged(errorInfo, progress)
        
        ' 実行コンテキストの更新
        executionContext.CurrentStrategy = strategyInfo("Description")
        executionContext.CurrentPriority = CLng(strategyInfo("Priority"))
        
        ' トランザクションのサポートを確認
        If strategyInfo("SupportsTransactions") Then
            ' トランザクション内で実行
            If ExecuteStrategyWithTransaction(strategy, errorInfo, executionContext) Then
                chain.IncrementSuccess
                ExecuteRecoveryChain = True
                Exit For
            End If
        Else
            ' 通常実行
            If strategy.RecoverFromError(errorInfo) Then
                chain.IncrementSuccess
                ExecuteRecoveryChain = True
                Exit For
            End If
        End If
        
        ' 失敗をカウント
        chain.IncrementFailure
        
        ' フォールバック戦略の確認と実行
        If strategy.FallbackStrategy IsNot Nothing Then
            executionContext.UsingFallback = True
            If ExecuteStrategyWithFallback(strategy.FallbackStrategy, errorInfo, executionContext) Then
                chain.IncrementSuccessCount
                ExecuteRecoveryChain = True
                Exit For
            End If
        End If
    Next strategy
    
    ' 実行結果の記録
    executionContext.UpdateDuration
    chain.RecordExecution executionContext.ToDictionary
    
    ' チェーン実行結果の通知
    RaiseEvent RecoveryChainExecuted(chain.ChainId, chain.SuccessCount, chain.FailureCount)
    Exit Function
    
ErrorHandler:
    Debug.Print "Error in ExecuteRecoveryChain: " & Err.Description
    If Not chain Is Nothing Then
        chain.RecordError Err.Description
    End If
    ExecuteRecoveryChain = False
End Function

Private Function ExecuteStrategyWithTransaction(ByVal strategy As IErrorStrategy, ByRef errorInfo As ErrorInfo, ByVal context As Dictionary) As Boolean
    On Error GoTo ErrorHandler
    
    ' トランザクションの開始
    BeginTransaction
    
    If strategy.RecoverFromError(errorInfo) Then
        CommitTransaction
        ExecuteStrategyWithTransaction = True
    Else
        RollbackTransaction
        ExecuteStrategyWithTransaction = False
    End If
    Exit Function
    
ErrorHandler:
    If IsInTransaction Then
        RollbackTransaction
    End If
    ' エラーを上位に伝播
    Err.Raise Err.Number, "ExecuteStrategyWithTransaction", _
              "Transaction execution failed: " & Err.Description
End Function

Private Function ExecuteStrategyWithFallback(ByVal fallbackStrategy As IErrorStrategy, ByRef errorInfo As ErrorInfo, ByVal context As ExecutionContext) As Boolean
    On Error GoTo ErrorHandler
    
    ' フォールバック実行前の状態を保存
    Dim originalContext As ExecutionContext
    Set originalContext = context.Clone
    
    If fallbackStrategy.RecoverFromError(errorInfo) Then
        ExecuteStrategyWithFallback = True
    Else
        ' 状態を復元
        RestoreContext context, originalState
        ExecuteStrategyWithFallback = False
    End If
    Exit Function
    
ErrorHandler:
    ' エラーを上位に伝播
    Err.Raise Err.Number, "ExecuteStrategyWithFallback", _
              "Fallback strategy execution failed: " & Err.Description
End Function

Private Function CopyDictionary(ByVal source As Dictionary) As Dictionary
    Dim result As New Dictionary
    Dim key As Variant
    
    For Each key In source.Keys
        result.Add key, source(key)
    Next
    
    Set CopyDictionary = result
End Function

Private Sub RestoreContext(ByRef target As Dictionary, ByVal source As Dictionary)
    Dim key As Variant
    
    target.RemoveAll
    For Each key In source.Keys
        target.Add key, source(key)
    Next
End Sub

'#End Region

Private Sub Sleep(ByVal milliseconds As Long)
    ' スリープ処理の実装
    Application.Wait Now + TimeSerial(0, 0, milliseconds / 1000)
End Sub

================
File: ErrorAnalysisResult.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "ErrorAnalysisResult"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredefinedId = False
Attribute VB_Exposed = True
Option Explicit

'@Description("エラー分析結果を格納するクラス")

'@Description("分析されたエラーの根本原因")
Public RootCause As String

'@Description("エラーの影響範囲")
Public ImpactArea As String

'@Description("エラーの推奨される対策")
Public RemediationSteps As String

'@Description("関連するエラー情報")
Public RelatedErrors As Collection

'@Description("分析の信頼度")
Public ConfidenceLevel As Double ' 0.0 - 1.0

'@Description("分析の実行時間")
Public AnalysisDuration As Double ' in seconds

'@Description("分析に使用されたデータソース")
Public DataSources As Collection

'@Description("エラーパターン")
Public ErrorPatterns As Collection

'@Description("重大度の分布")
Public SeverityDistribution As Object ' Dictionary

'@Description("カテゴリの分布")
Public CategoryDistribution As Object ' Dictionary

'@Description("時間帯別の発生頻度")
Public TimeDistribution As Object ' Dictionary

'@Description("分析の開始時刻")
Public AnalysisStartTime As Date

'@Description("分析の終了時刻")
Public AnalysisEndTime As Date

'@Description("分析に使用したルール")
Public AppliedRules As Collection

'@Description("検出された異常")
Public DetectedAnomalies As Collection

Private Sub Class_Initialize()
    Set RelatedErrors = New Collection
    Set DataSources = New Collection
    Set ErrorPatterns = New Collection
    Set SeverityDistribution = CreateObject("Scripting.Dictionary")
    Set CategoryDistribution = CreateObject("Scripting.Dictionary")
    Set TimeDistribution = CreateObject("Scripting.Dictionary")
    Set AppliedRules = New Collection
    Set DetectedAnomalies = New Collection
    ConfidenceLevel = 0
    AnalysisDuration = 0
    AnalysisStartTime = Now
End Sub

Private Sub Class_Terminate()
    Set RelatedErrors = Nothing
    Set DataSources = Nothing
    Set ErrorPatterns = Nothing
    Set SeverityDistribution = Nothing
    Set CategoryDistribution = Nothing
    Set TimeDistribution = Nothing
    Set AppliedRules = Nothing
    Set DetectedAnomalies = Nothing
End Sub

'@Description("分析結果を文字列形式で取得します")
Public Function ToString() As String
    Dim result As String
    
    result = "Error Analysis Result:" & vbCrLf & _
             "--------------------" & vbCrLf & _
             "Root Cause: " & RootCause & vbCrLf & _
             "Impact Area: " & ImpactArea & vbCrLf & _
             "Remediation Steps: " & RemediationSteps & vbCrLf & _
             "Confidence Level: " & Format(ConfidenceLevel, "0.00") & vbCrLf & _
             "Analysis Duration: " & Format(AnalysisDuration, "0.000") & " seconds" & vbCrLf & _
             "Related Errors: " & RelatedErrors.Count & vbCrLf & _
             "Data Sources: " & DataSources.Count & vbCrLf & _
             "Error Patterns: " & ErrorPatterns.Count & vbCrLf & _
             "Detected Anomalies: " & DetectedAnomalies.Count & vbCrLf & _
             "Analysis Period: " & Format(AnalysisStartTime, "yyyy/mm/dd hh:nn:ss") & " - " & _
                                Format(AnalysisEndTime, "yyyy/mm/dd hh:nn:ss")
    
    ToString = result
End Function

'@Description("分析結果を検証します")
Public Function Validate() As Boolean
    ' 必須フィールドの検証
    If Len(RootCause) = 0 Then Exit Function
    If Len(ImpactArea) = 0 Then Exit Function
    If Len(RemediationSteps) = 0 Then Exit Function
    If RelatedErrors.Count = 0 Then Exit Function
    If DataSources.Count = 0 Then Exit Function
    
    ' 値の範囲チェック
    If ConfidenceLevel < 0 Or ConfidenceLevel > 1 Then Exit Function
    If AnalysisDuration < 0 Then Exit Function
    
    ' 時刻の整合性チェック
    If AnalysisEndTime < AnalysisStartTime Then Exit Function
    
    Validate = True
End Function

'@Description("分析結果をマージします")
Public Sub MergeWith(ByVal other As ErrorAnalysisResult)
    If other Is Nothing Then Exit Sub
    
    ' 空の場合のみ更新
    If Len(Me.RootCause) = 0 Then Me.RootCause = other.RootCause
    If Len(Me.ImpactArea) = 0 Then Me.ImpactArea = other.ImpactArea
    If Len(Me.RemediationSteps) = 0 Then Me.RemediationSteps = other.RemediationSteps
    
    ' コレクションのマージ
    MergeCollection Me.RelatedErrors, other.RelatedErrors
    MergeCollection Me.DataSources, other.DataSources
    MergeCollection Me.ErrorPatterns, other.ErrorPatterns
    MergeCollection Me.AppliedRules, other.AppliedRules
    MergeCollection Me.DetectedAnomalies, other.DetectedAnomalies
    
    ' ディクショナリのマージ
    MergeDictionary Me.SeverityDistribution, other.SeverityDistribution
    MergeDictionary Me.CategoryDistribution, other.CategoryDistribution
    MergeDictionary Me.TimeDistribution, other.TimeDistribution
    
    ' 数値の更新
    Me.ConfidenceLevel = (Me.ConfidenceLevel + other.ConfidenceLevel) / 2
    Me.AnalysisDuration = Me.AnalysisDuration + other.AnalysisDuration
    
    ' 時刻の更新
    If other.AnalysisStartTime < Me.AnalysisStartTime Then
        Me.AnalysisStartTime = other.AnalysisStartTime
    End If
    If other.AnalysisEndTime > Me.AnalysisEndTime Then
        Me.AnalysisEndTime = other.AnalysisEndTime
    End If
End Sub

'@Description("コレクションをマージします")
Private Sub MergeCollection(ByVal target As Collection, ByVal source As Collection)
    Dim item As Variant
    For Each item In source
        If Not Contains(target, item) Then
            target.Add item
        End If
    Next
End Sub

'@Description("ディクショナリをマージします")
Private Sub MergeDictionary(ByVal target As Object, ByVal source As Object)
    Dim key As Variant
    For Each key In source.Keys
        If target.Exists(key) Then
            target(key) = target(key) + source(key)
        Else
            target.Add key, source(key)
        End If
    Next
End Sub

'@Description("コレクションに要素が含まれているかチェックします")
Private Function Contains(ByVal col As Collection, ByVal item As Variant) As Boolean
    Dim existing As Variant
    For Each existing In col
        If existing = item Then
            Contains = True
            Exit Function
        End If
    Next
    Contains = False
End Function

================
File: ErrorImpl.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "ErrorImpl"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredefinedId = False
Attribute VB_Exposed = True
Option Explicit

'@Description("エラー関連の列挙型と定数を定義するクラス")

'@Description("システムで発生する可能性のあるエラーコードを定義する列挙型")
Public Enum ErrorCode
    ecNoError = 0
    ecInvalidInput = 1      ' 不正な入力
    ecDatabaseError = 2     ' データベースエラー
    ecNetworkError = 3      ' ネットワークエラー
    ecFileNotFound = 4      ' ファイルが見つからない
    ecFileAccessDenied = 5  ' ファイルアクセス拒否
    ecOutOfMemory = 6      ' メモリ不足
    ecTimeout = 7          ' タイムアウト
    ecDivisionByZero = 8   ' ゼロ除算
    ecInvalidOperation = 9  ' 不正な操作
    ecNotImplemented = 10   ' 未実装
    ecNotSupported = 11     ' サポートされていない
    ecInvalidState = 12     ' 不正な状態
    ecValidationError = 13  ' 検証エラー
    ecConfigurationError = 14 ' 設定エラー
    ecSecurityError = 15    ' セキュリティエラー
    ecSystemError = 16      ' システムエラー
    ecBusinessError = 17    ' ビジネスロジックエラー
    ecCommunicationError = 18 ' 通信エラー
    ecResourceError = 19    ' リソースエラー
    ecUnknownError = 999    ' 不明なエラー
End Enum

'@Description("エラーの重大度を定義する列挙型")
Public Enum ErrorSeverity
    esInfo = 0      ' 情報
    esWarning = 1   ' 警告
    esError = 2     ' エラー
    esCritical = 3  ' 重大
    esFatal = 4     ' 致命的
End Enum

'@Description("エラーの状態を定義する列挙型")
Public Enum ErrorStatus
    esNew = 0           ' 新規
    esPending = 1       ' 保留中
    esInProgress = 2    ' 処理中
    esRetrying = 3      ' リトライ中
    esResolved = 4      ' 解決済み
    esFailed = 5        ' 失敗
    esIgnored = 6       ' 無視
    esCancelled = 7     ' キャンセル
End Enum

'@Description("エラーの分類を定義する列挙型")
Public Enum ErrorCategory
    ecInputError = 0         ' 入力エラー
    ecSystemError = 1        ' システムエラー
    ecDatabaseError = 2      ' データベースエラー
    ecNetworkError = 3       ' ネットワークエラー
    ecFileIOError = 4        ' ファイル入出力エラー
    ecLogicError = 5         ' ロジックエラー
    ecSecurityError = 6      ' セキュリティエラー
    ecUserInterfaceError = 7 ' ユーザーインターフェースエラー
    ecConfigurationError = 8  ' 設定エラー
    ecExternalSystemError = 9 ' 外部システムエラー
    ecUnknownCategory = 999  ' 不明なカテゴリ
End Enum

'@Description("エラーコードの説明を取得します")
Public Function GetErrorCodeDescription(ByVal errorCode As ErrorCode) As String
    Select Case errorCode
        Case ecNoError: GetErrorCodeDescription = "エラーなし"
        Case ecInvalidInput: GetErrorCodeDescription = "不正な入力"
        Case ecDatabaseError: GetErrorCodeDescription = "データベースエラー"
        Case ecNetworkError: GetErrorCodeDescription = "ネットワークエラー"
        Case ecFileNotFound: GetErrorCodeDescription = "ファイルが見つからない"
        Case ecFileAccessDenied: GetErrorCodeDescription = "ファイルアクセス拒否"
        Case ecOutOfMemory: GetErrorCodeDescription = "メモリ不足"
        Case ecTimeout: GetErrorCodeDescription = "タイムアウト"
        Case ecDivisionByZero: GetErrorCodeDescription = "ゼロ除算"
        Case ecInvalidOperation: GetErrorCodeDescription = "不正な操作"
        Case ecNotImplemented: GetErrorCodeDescription = "未実装"
        Case ecNotSupported: GetErrorCodeDescription = "サポートされていない"
        Case ecInvalidState: GetErrorCodeDescription = "不正な状態"
        Case ecValidationError: GetErrorCodeDescription = "検証エラー"
        Case ecConfigurationError: GetErrorCodeDescription = "設定エラー"
        Case ecSecurityError: GetErrorCodeDescription = "セキュリティエラー"
        Case ecSystemError: GetErrorCodeDescription = "システムエラー"
        Case ecBusinessError: GetErrorCodeDescription = "ビジネスロジックエラー"
        Case ecCommunicationError: GetErrorCodeDescription = "通信エラー"
        Case ecResourceError: GetErrorCodeDescription = "リソースエラー"
        Case ecUnknownError: GetErrorCodeDescription = "不明なエラー"
        Case Else: GetErrorCodeDescription = "未定義のエラー"
    End Select
End Function

'@Description("エラーの重大度の説明を取得します")
Public Function GetSeverityDescription(ByVal severity As ErrorSeverity) As String
    Select Case severity
        Case esInfo: GetSeverityDescription = "情報"
        Case esWarning: GetSeverityDescription = "警告"
        Case esError: GetSeverityDescription = "エラー"
        Case esCritical: GetSeverityDescription = "重大"
        Case esFatal: GetSeverityDescription = "致命的"
        Case Else: GetSeverityDescription = "不明な重大度"
    End Select
End Function

'@Description("エラーの状態の説明を取得します")
Public Function GetStatusDescription(ByVal status As ErrorStatus) As String
    Select Case status
        Case esNew: GetStatusDescription = "新規"
        Case esPending: GetStatusDescription = "保留中"
        Case esInProgress: GetStatusDescription = "処理中"
        Case esRetrying: GetStatusDescription = "リトライ中"
        Case esResolved: GetStatusDescription = "解決済み"
        Case esFailed: GetStatusDescription = "失敗"
        Case esIgnored: GetStatusDescription = "無視"
        Case esCancelled: GetStatusDescription = "キャンセル"
        Case Else: GetStatusDescription = "不明な状態"
    End Select
End Function

'@Description("エラーのカテゴリの説明を取得します")
Public Function GetCategoryDescription(ByVal category As ErrorCategory) As String
    Select Case category
        Case ecInputError: GetCategoryDescription = "入力エラー"
        Case ecSystemError: GetCategoryDescription = "システムエラー"
        Case ecDatabaseError: GetCategoryDescription = "データベースエラー"
        Case ecNetworkError: GetCategoryDescription = "ネットワークエラー"
        Case ecFileIOError: GetCategoryDescription = "ファイル入出力エラー"
        Case ecLogicError: GetCategoryDescription = "ロジックエラー"
        Case ecSecurityError: GetCategoryDescription = "セキュリティエラー"
        Case ecUserInterfaceError: GetCategoryDescription = "ユーザーインターフェースエラー"
        Case ecConfigurationError: GetCategoryDescription = "設定エラー"
        Case ecExternalSystemError: GetCategoryDescription = "外部システムエラー"
        Case ecUnknownCategory: GetCategoryDescription = "不明なカテゴリ"
        Case Else: GetCategoryDescription = "未定義のカテゴリ"
    End Select
End Function

================
File: ErrorInfo.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "ErrorInfo"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredefinedId = False
Attribute VB_Exposed = True
Option Explicit

'@Description("エラー情報を格納するクラス")

'@Description("エラーコード")
Public ErrorCode As ErrorCode

'@Description("エラーメッセージ")
Public Message As String

'@Description("エラー発生時刻")
Public Timestamp As Date

'@Description("エラー発生モジュール")
Public SourceModule As String

'@Description("エラー発生プロシージャ")
Public SourceProcedure As String

'@Description("エラー発生時のライン番号")
Public SourceLine As Long

'@Description("追加のエラー情報")
Public AdditionalInfo As Variant

'@Description("エラーの根本原因")
Public RootCause As String

'@Description("エラーの影響範囲")
Public ImpactArea As String

'@Description("エラーの推奨される対策")
Public RemediationSteps As String

'@Description("エラー発生時のスタックトレース")
Public StackTrace As String

'@Description("エラーの重大度")
Public Severity As ErrorSeverity

'@Description("エラーのカテゴリ")
Public Category As ErrorCategory

'@Description("エラーの状態")
Public Status As ErrorStatus

'@Description("エラーの処理試行回数")
Public RetryCount As Long

'@Description("最後の処理試行時刻")
Public LastRetryTimestamp As Date

'@Description("エラーに関連するリソース")
Public RelatedResources As Collection

'@Description("エラーのタグ")
Public Tags As Collection

Private Sub Class_Initialize()
    Set RelatedResources = New Collection
    Set Tags = New Collection
    Timestamp = Now
    Status = esNew
    RetryCount = 0
End Sub

Private Sub Class_Terminate()
    Set RelatedResources = Nothing
    Set Tags = Nothing
End Sub

'@Description("エラー情報を文字列形式で取得します")
Public Function ToString() As String
    Dim result As String
    
    result = "Error Information:" & vbCrLf & _
             "----------------" & vbCrLf & _
             "Code: " & ErrorCode & vbCrLf & _
             "Message: " & Message & vbCrLf & _
             "Time: " & Format(Timestamp, "yyyy/mm/dd hh:nn:ss") & vbCrLf & _
             "Module: " & SourceModule & vbCrLf & _
             "Procedure: " & SourceProcedure & vbCrLf & _
             "Line: " & SourceLine & vbCrLf & _
             "Severity: " & Severity & vbCrLf & _
             "Category: " & Category & vbCrLf & _
             "Status: " & Status & vbCrLf & _
             "Root Cause: " & RootCause & vbCrLf & _
             "Impact Area: " & ImpactArea & vbCrLf & _
             "Retry Count: " & RetryCount
    
    ToString = result
End Function

'@Description("エラー情報をクローンします")
Public Function Clone() As ErrorInfo
    Dim newInfo As ErrorInfo
    Set newInfo = New ErrorInfo
    
    With newInfo
        .ErrorCode = Me.ErrorCode
        .Message = Me.Message
        .Timestamp = Me.Timestamp
        .SourceModule = Me.SourceModule
        .SourceProcedure = Me.SourceProcedure
        .SourceLine = Me.SourceLine
        .AdditionalInfo = Me.AdditionalInfo
        .RootCause = Me.RootCause
        .ImpactArea = Me.ImpactArea
        .RemediationSteps = Me.RemediationSteps
        .StackTrace = Me.StackTrace
        .Severity = Me.Severity
        .Category = Me.Category
        .Status = Me.Status
        .RetryCount = Me.RetryCount
        .LastRetryTimestamp = Me.LastRetryTimestamp
        
        ' コレクションのコピー
        Dim item As Variant
        For Each item In Me.RelatedResources
            .RelatedResources.Add item
        Next
        
        For Each item In Me.Tags
            .Tags.Add item
        Next
    End With
    
    Set Clone = newInfo
End Function

'@Description("エラー情報を検証します")
Public Function Validate() As Boolean
    ' 必須フィールドの検証
    If ErrorCode = 0 Then Exit Function
    If Len(Message) = 0 Then Exit Function
    If Len(SourceModule) = 0 Then Exit Function
    If Len(SourceProcedure) = 0 Then Exit Function
    
    Validate = True
End Function

'@Description("エラー情報をマージします")
Public Sub MergeWith(ByVal other As ErrorInfo)
    If other Is Nothing Then Exit Sub
    
    ' 空の場合のみ更新
    If Len(Me.RootCause) = 0 Then Me.RootCause = other.RootCause
    If Len(Me.ImpactArea) = 0 Then Me.ImpactArea = other.ImpactArea
    If Len(Me.RemediationSteps) = 0 Then Me.RemediationSteps = other.RemediationSteps
    
    ' コレクションのマージ
    Dim item As Variant
    For Each item In other.RelatedResources
        If Not Contains(Me.RelatedResources, item) Then
            Me.RelatedResources.Add item
        End If
    Next
    
    For Each item In other.Tags
        If Not Contains(Me.Tags, item) Then
            Me.Tags.Add item
        End If
    Next
End Sub

'@Description("コレクションに要素が含まれているかチェックします")
Private Function Contains(ByVal col As Collection, ByVal item As Variant) As Boolean
    Dim existing As Variant
    For Each existing In col
        If existing = item Then
            Contains = True
            Exit Function
        End If
    Next
    Contains = False
End Function

================
File: ErrorMessageResource.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "ErrorMessageResource"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredefinedId = False
Attribute VB_Exposed = True
Option Explicit

'@Description("エラーメッセージの国際化リソースを管理するクラス")

' プライベート変数
Private mMessages As Object ' Dictionary
Private mCurrentLocale As String
Private mDefaultLocale As String

Private Sub Class_Initialize()
    Set mMessages = CreateObject("Scripting.Dictionary")
    mDefaultLocale = "ja-JP"
    mCurrentLocale = mDefaultLocale
    InitializeMessages
End Sub

Private Sub Class_Terminate()
    Set mMessages = Nothing
End Sub

'@Description("メッセージリソースを初期化します")
Private Sub InitializeMessages()
    ' 日本語メッセージ
    Dim jaMessages As Object
    Set jaMessages = CreateObject("Scripting.Dictionary")
    
    With jaMessages
        .Add ecInvalidInput, "不正な入力です"
        .Add ecDatabaseError, "データベースエラーが発生しました"
        .Add ecNetworkError, "ネットワークエラーが発生しました"
        .Add ecFileNotFound, "ファイルが見つかりません"
        .Add ecFileAccessDenied, "ファイルアクセスが拒否されました"
        .Add ecOutOfMemory, "メモリが不足しています"
        .Add ecTimeout, "タイムアウトが発生しました"
        .Add ecDivisionByZero, "ゼロ除算が発生しました"
        .Add ecUnknownError, "不明なエラーが発生しました"
    End With
    mMessages.Add "ja-JP", jaMessages
    
    ' 英語メッセージ
    Dim enMessages As Object
    Set enMessages = CreateObject("Scripting.Dictionary")
    
    With enMessages
        .Add ecInvalidInput, "Invalid input"
        .Add ecDatabaseError, "Database error occurred"
        .Add ecNetworkError, "Network error occurred"
        .Add ecFileNotFound, "File not found"
        .Add ecFileAccessDenied, "File access denied"
        .Add ecOutOfMemory, "Out of memory"
        .Add ecTimeout, "Timeout occurred"
        .Add ecDivisionByZero, "Division by zero occurred"
        .Add ecUnknownError, "Unknown error occurred"
    End With
    mMessages.Add "en-US", enMessages
End Sub

'@Description("現在のロケールを設定します")
Public Property Let CurrentLocale(ByVal locale As String)
    If mMessages.Exists(locale) Then
        mCurrentLocale = locale
    Else
        mCurrentLocale = mDefaultLocale
    End If
End Property

'@Description("現在のロケールを取得します")
Public Property Get CurrentLocale() As String
    CurrentLocale = mCurrentLocale
End Property

'@Description("エラーメッセージを取得します")
Public Function GetMessage(ByVal errorCode As ErrorCode, Optional ByVal locale As String = "") As String
    On Error GoTo ErrorHandler
    
    Dim targetLocale As String
    targetLocale = IIf(locale = "", mCurrentLocale, locale)
    
    If Not mMessages.Exists(targetLocale) Then
        targetLocale = mDefaultLocale
    End If
    
    If mMessages(targetLocale).Exists(errorCode) Then
        GetMessage = mMessages(targetLocale)(errorCode)
    Else
        GetMessage = mMessages(mDefaultLocale)(ecUnknownError)
    End If
    Exit Function
    
ErrorHandler:
    GetMessage = "エラーメッセージの取得に失敗しました"
End Function

'@Description("新しいロケールとメッセージを追加します")
Public Sub AddLocale(ByVal locale As String, ByVal messages As Object)
    If Not mMessages.Exists(locale) Then
        mMessages.Add locale, messages
    End If
End Sub

'@Description("指定したロケールのメッセージを更新します")
Public Sub UpdateMessage(ByVal locale As String, ByVal errorCode As ErrorCode, ByVal message As String)
    If mMessages.Exists(locale) Then
        If mMessages(locale).Exists(errorCode) Then
            mMessages(locale)(errorCode) = message
        Else
            mMessages(locale).Add errorCode, message
        End If
    End If
End Sub

================
File: ErrorStatistics.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "ErrorStatistics"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredefinedId = False
Attribute VB_Exposed = True
Option Explicit

'@Description("エラー統計情報を格納するクラス")

'@Description("エラーコード別の発生回数")
Public ErrorCountByCode As Object ' Dictionary

'@Description("重大度別のエラー発生回数")
Public ErrorCountBySeverity As Object ' Dictionary

'@Description("カテゴリ別のエラー発生回数")
Public ErrorCountByCategory As Object ' Dictionary

'@Description("時間帯別のエラー発生回数")
Public ErrorCountByTimeSlot As Object ' Dictionary

'@Description("エラーの総数")
Public TotalErrorCount As Long

'@Description("最初のエラー発生時刻")
Public FirstErrorTimestamp As Date

'@Description("最後のエラー発生時刻")
Public LastErrorTimestamp As Date

'@Description("平均エラー処理時間")
Public AverageHandlingTime As Double ' in seconds

'@Description("エラー発生率")
Public ErrorRate As Double ' errors per hour

'@Description("エラー解決率")
Public ResolutionRate As Double ' resolved errors / total errors

'@Description("平均解決時間")
Public AverageResolutionTime As Double ' in seconds

'@Description("リトライ成功率")
Public RetrySuccessRate As Double ' successful retries / total retries

'@Description("エラー傾向情報")
Public TrendData As Collection ' Collection of TrendInfo

Private Sub Class_Initialize()
    Set ErrorCountByCode = CreateObject("Scripting.Dictionary")
    Set ErrorCountBySeverity = CreateObject("Scripting.Dictionary")
    Set ErrorCountByCategory = CreateObject("Scripting.Dictionary")
    Set ErrorCountByTimeSlot = CreateObject("Scripting.Dictionary")
    Set TrendData = New Collection
    
    TotalErrorCount = 0
    FirstErrorTimestamp = Now
    LastErrorTimestamp = Now
    AverageHandlingTime = 0
    ErrorRate = 0
    ResolutionRate = 0
    AverageResolutionTime = 0
    RetrySuccessRate = 0
End Sub

Private Sub Class_Terminate()
    Set ErrorCountByCode = Nothing
    Set ErrorCountBySeverity = Nothing
    Set ErrorCountByCategory = Nothing
    Set ErrorCountByTimeSlot = Nothing
    Set TrendData = Nothing
End Sub

'@Description("エラーコード別のエラー発生回数を更新します")
Public Sub IncrementErrorCount(ByVal errorCode As ErrorCode)
    If ErrorCountByCode.Exists(errorCode) Then
        ErrorCountByCode(errorCode) = ErrorCountByCode(errorCode) + 1
    Else
        ErrorCountByCode.Add errorCode, 1
    End If
    TotalErrorCount = TotalErrorCount + 1
    LastErrorTimestamp = Now
End Sub

'@Description("重大度別のエラー発生回数を更新します")
Public Sub IncrementSeverityCount(ByVal severity As ErrorSeverity)
    If ErrorCountBySeverity.Exists(severity) Then
        ErrorCountBySeverity(severity) = ErrorCountBySeverity(severity) + 1
    Else
        ErrorCountBySeverity.Add severity, 1
    End If
End Sub

'@Description("カテゴリ別のエラー発生回数を更新します")
Public Sub IncrementCategoryCount(ByVal category As ErrorCategory)
    If ErrorCountByCategory.Exists(category) Then
        ErrorCountByCategory(category) = ErrorCountByCategory(category) + 1
    Else
        ErrorCountByCategory.Add category, 1
    End If
End Sub

'@Description("時間帯別のエラー発生回数を更新します")
Public Sub IncrementTimeSlotCount(ByVal timeSlot As String)
    If ErrorCountByTimeSlot.Exists(timeSlot) Then
        ErrorCountByTimeSlot(timeSlot) = ErrorCountByTimeSlot(timeSlot) + 1
    Else
        ErrorCountByTimeSlot.Add timeSlot, 1
    End If
End Sub

'@Description("エラー統計情報を文字列形式で取得します")
Public Function ToString() As String
    Dim result As String
    
    result = "Error Statistics:" & vbCrLf & _
             "----------------" & vbCrLf & _
             "Total Errors: " & TotalErrorCount & vbCrLf & _
             "First Error: " & Format(FirstErrorTimestamp, "yyyy/mm/dd hh:nn:ss") & vbCrLf & _
             "Last Error: " & Format(LastErrorTimestamp, "yyyy/mm/dd hh:nn:ss") & vbCrLf & _
             "Average Handling Time: " & Format(AverageHandlingTime, "0.000") & " seconds" & vbCrLf & _
             "Error Rate: " & Format(ErrorRate, "0.00") & " errors/hour" & vbCrLf & _
             "Resolution Rate: " & Format(ResolutionRate * 100, "0.00") & "%" & vbCrLf & _
             "Average Resolution Time: " & Format(AverageResolutionTime, "0.000") & " seconds" & vbCrLf & _
             "Retry Success Rate: " & Format(RetrySuccessRate * 100, "0.00") & "%"
    
    ToString = result
End Function

'@Description("エラー統計情報を更新します")
Public Sub UpdateStatistics(ByVal errorInfo As ErrorInfo)
    If errorInfo Is Nothing Then Exit Sub
    
    ' カウンターの更新
    IncrementErrorCount errorInfo.ErrorCode
    IncrementSeverityCount errorInfo.Severity
    IncrementCategoryCount errorInfo.Category
    IncrementTimeSlotCount Format(errorInfo.Timestamp, "hh:00")
    
    ' 時刻の更新
    If errorInfo.Timestamp < FirstErrorTimestamp Then
        FirstErrorTimestamp = errorInfo.Timestamp
    End If
    LastErrorTimestamp = errorInfo.Timestamp
    
    ' レート計算の更新
    UpdateRates
End Sub

'@Description("レート計算を更新します")
Private Sub UpdateRates()
    ' エラー発生率の計算
    Dim timeSpan As Double
    timeSpan = DateDiff("h", FirstErrorTimestamp, LastErrorTimestamp)
    If timeSpan > 0 Then
        ErrorRate = TotalErrorCount / timeSpan
    End If
End Sub

'@Description("統計情報をリセットします")
Public Sub Reset()
    Set ErrorCountByCode = CreateObject("Scripting.Dictionary")
    Set ErrorCountBySeverity = CreateObject("Scripting.Dictionary")
    Set ErrorCountByCategory = CreateObject("Scripting.Dictionary")
    Set ErrorCountByTimeSlot = CreateObject("Scripting.Dictionary")
    Set TrendData = New Collection
    
    TotalErrorCount = 0
    FirstErrorTimestamp = Now
    LastErrorTimestamp = Now
    AverageHandlingTime = 0
    ErrorRate = 0
    ResolutionRate = 0
    AverageResolutionTime = 0
    RetrySuccessRate = 0
End Sub

'@Description("統計情報をマージします")
Public Sub MergeWith(ByVal other As ErrorStatistics)
    If other Is Nothing Then Exit Sub
    
    ' ディクショナリのマージ
    MergeDictionary ErrorCountByCode, other.ErrorCountByCode
    MergeDictionary ErrorCountBySeverity, other.ErrorCountBySeverity
    MergeDictionary ErrorCountByCategory, other.ErrorCountByCategory
    MergeDictionary ErrorCountByTimeSlot, other.ErrorCountByTimeSlot
    
    ' 数値の更新
    TotalErrorCount = TotalErrorCount + other.TotalErrorCount
    
    ' 時刻の更新
    If other.FirstErrorTimestamp < FirstErrorTimestamp Then
        FirstErrorTimestamp = other.FirstErrorTimestamp
    End If
    If other.LastErrorTimestamp > LastErrorTimestamp Then
        LastErrorTimestamp = other.LastErrorTimestamp
    End If
    
    ' 平均値の更新
    AverageHandlingTime = (AverageHandlingTime + other.AverageHandlingTime) / 2
    AverageResolutionTime = (AverageResolutionTime + other.AverageResolutionTime) / 2
    
    ' レートの更新
    UpdateRates
End Sub

'@Description("ディクショナリをマージします")
Private Sub MergeDictionary(ByVal target As Object, ByVal source As Object)
    Dim key As Variant
    For Each key In source.Keys
        If target.Exists(key) Then
            target(key) = target(key) + source(key)
        Else
            target.Add key, source(key)
        End If
    Next
End Sub

================
File: ExecutionContext.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "ExecutionContext"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredefinedId = False
Attribute VB_Exposed = True
Option Explicit

' プライベート変数
Private mStartTime As Date
Private mEndTime As Date
Private mChainId As String
Private mErrorInfo As ErrorInfo
Private mCurrentStrategy As String
Private mCurrentPriority As Long
Private mUsingFallback As Boolean
Private mDuration As Long

' プロパティ
Public Property Get StartTime() As Date
    StartTime = mStartTime
End Property

Public Property Let StartTime(ByVal value As Date)
    mStartTime = value
End Property

Public Property Get EndTime() As Date
    EndTime = mEndTime
End Property

Public Property Let EndTime(ByVal value As Date)
    mEndTime = value
End Property

Public Property Get ChainId() As String
    ChainId = mChainId
End Property

Public Property Let ChainId(ByVal value As String)
    mChainId = value
End Property

Public Property Get ErrorInfo() As ErrorInfo
    Set ErrorInfo = mErrorInfo
End Property

Public Property Set ErrorInfo(ByVal value As ErrorInfo)
    Set mErrorInfo = value
End Property

Public Property Get CurrentStrategy() As String
    CurrentStrategy = mCurrentStrategy
End Property

Public Property Let CurrentStrategy(ByVal value As String)
    mCurrentStrategy = value
End Property

Public Property Get CurrentPriority() As Long
    CurrentPriority = mCurrentPriority
End Property

Public Property Let CurrentPriority(ByVal value As Long)
    mCurrentPriority = value
End Property

Public Property Get UsingFallback() As Boolean
    UsingFallback = mUsingFallback
End Property

Public Property Let UsingFallback(ByVal value As Boolean)
    mUsingFallback = value
End Property

Public Property Get Duration() As Long
    Duration = mDuration
End Property

Public Property Let Duration(ByVal value As Long)
    mDuration = value
End Property

' メソッド
Public Sub Initialize(ByVal chainId As String, ByRef errorInfo As ErrorInfo)
    mStartTime = Now
    mChainId = chainId
    Set mErrorInfo = errorInfo
    mUsingFallback = False
End Sub

Public Sub UpdateDuration()
    mEndTime = Now
    mDuration = DateDiff("s", mStartTime, mEndTime)
End Sub

Public Function Clone() As ExecutionContext
    Dim result As New ExecutionContext
    
    With result
        .StartTime = Me.StartTime
        .EndTime = Me.EndTime
        .ChainId = Me.ChainId
        Set .ErrorInfo = Me.ErrorInfo
        .CurrentStrategy = Me.CurrentStrategy
        .CurrentPriority = Me.CurrentPriority
        .UsingFallback = Me.UsingFallback
        .Duration = Me.Duration
    End With
    
    Set Clone = result
End Function

Public Function ToDictionary() As Dictionary
    Dim result As New Dictionary
    
    With result
        .Add "StartTime", mStartTime
        .Add "EndTime", mEndTime
        .Add "ChainId", mChainId
        .Add "ErrorInfo", mErrorInfo
        .Add "CurrentStrategy", mCurrentStrategy
        .Add "CurrentPriority", mCurrentPriority
        .Add "UsingFallback", mUsingFallback
        .Add "Duration", mDuration
    End With
    
    Set ToDictionary = result
End Function

================
File: IError.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IError"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredefinedId = False
Attribute VB_Exposed = True
Option Explicit

'@Description("エラー処理と分析の基本機能を提供するインターフェース")

' 定数定義
Private Const MAX_ERROR_HISTORY As Long = 1000     ' エラー履歴の最大数
Private Const MAX_HANDLERS As Long = 100           ' ハンドラーの最大数
Private Const DEFAULT_THRESHOLD As Long = 10       ' デフォルトの閾値
Private Const CACHE_DURATION_MS As Long = 300000   ' キャッシュの有効期間（5分）
Private Const MAX_RETRY_COUNT As Long = 3          ' 最大リトライ回数
Private Const CLEANUP_INTERVAL_MS As Long = 3600000 ' クリーンアップ間隔（1時間）
Private Const MAX_ERROR_MESSAGE_LENGTH As Long = 8192 ' エラーメッセージの最大長

' イベント定義
Public Event ErrorOccurred(ByVal errorInfo As ErrorInfo, ByVal severity As ErrorSeverity)
Public Event ErrorHandled(ByVal errorInfo As ErrorInfo, ByVal handler As IErrorHandler, ByVal success As Boolean)
Public Event ThresholdExceeded(ByVal errorCode As ErrorCode, ByVal count As Long, ByVal threshold As Long)
Public Event HandlerRegistered(ByVal errorCode As ErrorCode, ByVal handler As IErrorHandler)
Public Event HandlerUnregistered(ByVal errorCode As ErrorCode)
Public Event ErrorAnalysisCompleted(ByVal analysisResult As ErrorAnalysisResult)
Public Event PerformanceAlert(ByVal metricType As String, ByVal currentValue As Double, ByVal threshold As Double)

'@Description("エラー処理オプションを定義する列挙型")
Public Enum ErrorHandlingOptions
    ehoNone = 0             ' オプションなし
    ehoRetry = 1            ' エラー発生時にリトライを試みる
    ehoLogOnly = 2          ' エラーをログに記録するのみで処理は続行
    ehoNotifyUser = 4       ' エラーをユーザーに通知する
    ehoRollback = 8         ' エラー発生時にトランザクションをロールバック
    ehoIgnore = 16          ' エラーを無視する（非推奨）
    ehoEmergencyLog = 32    ' エマージェンシーロガーに記録
End Enum

'@Description("エラーハンドラー登録オプションを定義する列挙型")
Public Enum HandlerOptions
    hoNone = 0             ' オプションなし
    hoReplace = 1          ' 既存のハンドラーを置き換える
    hoAppend = 2           ' 既存のハンドラーリストに追加する
    hoHighPriority = 4     ' 高優先度のハンドラーとして登録
    hoLowPriority = 8      ' 低優先度のハンドラーとして登録
End Enum

'@Description("エラーハンドラー登録解除オプションを定義する列挙型")
Public Enum UnregisterOptions
    uoNone = 0             ' オプションなし
    uoSpecificHandler = 1   ' 特定のハンドラーのみを解除
    uoAllHandlers = 2       ' エラーコードに関連付けられたすべてのハンドラーを解除
End Enum

'@Description("エラーカウントオプションを定義する列挙型")
Public Enum CountOptions
    coNone = 0             ' オプションなし
    coIncrement = 1        ' エラーカウントをインクリメント
    coReset = 2            ' エラーカウントをリセット
    coDeduct = 4           ' エラーカウントをデクリメント
End Enum

'@Description("エラー閾値チェックオプションを定義する列挙型")
Public Enum ThresholdOptions
    toNone = 0             ' オプションなし
    toCheckGlobal = 1      ' グローバル閾値をチェック
    toCheckSpecific = 2    ' 特定のエラーコードの閾値をチェック
    toResetAfterCheck = 4  ' チェック後に閾値カウントをリセット
End Enum

'@Description("エラー履歴取得オプションを定義する列挙型")
Public Enum HistoryOptions
    hoNone = 0             ' オプションなし
    hoLimit = 1            ' 取得する履歴の数を制限
    hoSortAscending = 2    ' 昇順でソート
    hoSortDescending = 4   ' 降順でソート
    hoFilterByCode = 8     ' エラーコードでフィルタリング
    hoFilterBySeverity = 16 ' 重大度でフィルタリング
    hoFilterByTime = 32    ' 発生時刻でフィルタリング
End Enum

'@Description("エラー分析オプションを定義する列挙型")
Public Enum AnalysisOptions
    aoNone = 0              ' オプションなし
    aoBasicAnalysis = 1     ' 基本的な分析を実行
    aoDetailedAnalysis = 2  ' 詳細な分析を実行
    aoRootCause = 4         ' 根本原因分析を含む
    aoImpactAnalysis = 8    ' 影響範囲分析を含む
    aoRecommendations = 16  ' 推奨対策を含む
End Enum

'@Description("エラー分類オプションを定義する列挙型")
Public Enum CategoryOptions
    coNone = 0             ' オプションなし
    coManual = 1           ' 手動で分類
    coAutomatic = 2        ' 自動で分類
    coUseDefault = 4       ' デフォルトの分類を使用
End Enum

'@Description("エラー統計情報取得オプションを定義する列挙型")
Public Enum StatisticsOptions
    soNone = 0             ' オプションなし
    soByErrorCode = 1      ' エラーコード別の統計
    soBySeverity = 2       ' 重大度別の統計
    soByTimePeriod = 4     ' 期間別の統計
    soIncludeDetails = 8   ' 詳細情報を含む
End Enum

''' <summary>
''' エラーを処理します
''' </summary>
''' <param name="errorInfo">エラー詳細情報</param>
''' <param name="options">処理オプション（オプション）</param>
''' <returns>処理を継続する場合はTrue、中断する場合はFalse</returns>
''' <remarks>
''' エラー処理要件：
''' - エラー情報の検証
''' - ハンドラーの選択
''' - リトライ処理
''' - ログ記録
''' - メトリクス収集
''' </remarks>
Public Function HandleError(ByRef errorInfo As ErrorInfo, _
                          Optional ByVal options As ErrorHandlingOptions = ehoNone) As Boolean
End Function

''' <summary>
''' エラーコードに対応するエラーハンドラーを登録します
''' </summary>
''' <param name="errorCode">エラーコード</param>
''' <param name="handler">エラーハンドラー</param>
''' <param name="options">登録オプション（オプション）</param>
Public Sub RegisterHandler(ByVal errorCode As ErrorCode, _
                         ByVal handler As IErrorHandler, _
                         Optional ByVal options As HandlerOptions = hoNone)
End Sub

''' <summary>
''' エラーコードに対応するエラーハンドラーの登録を解除します
''' </summary>
''' <param name="errorCode">エラーコード</param>
''' <param name="options">解除オプション（オプション）</param>
Public Sub UnregisterHandler(ByVal errorCode As ErrorCode, _
                           Optional ByVal options As UnregisterOptions = uoNone)
End Sub

''' <summary>
''' エラーコードごとの発生回数をカウントアップします
''' </summary>
''' <param name="errorCode">エラーコード</param>
''' <param name="options">カウントオプション（オプション）</param>
Public Sub IncrementErrorCount(ByVal errorCode As ErrorCode, _
                             Optional ByVal options As CountOptions = coNone)
End Sub

''' <summary>
''' エラーコードの発生回数が閾値を超えているかチェックします
''' </summary>
''' <param name="errorCode">エラーコード</param>
''' <param name="threshold">閾値</param>
''' <param name="options">チェックオプション（オプション）</param>
''' <returns>閾値を超えている場合はTrue</returns>
Public Function CheckErrorThreshold(ByVal errorCode As ErrorCode, _
                                  ByVal threshold As Long, _
                                  Optional ByVal options As ThresholdOptions = toNone) As Boolean
End Function

''' <summary>
''' エラー履歴を取得します
''' </summary>
''' <param name="options">履歴オプション（オプション）</param>
''' <returns>エラー履歴のコレクション</returns>
Public Function GetErrorHistory(Optional ByVal options As HistoryOptions = hoNone) As Collection
End Function

''' <summary>
''' エラーを分析します
''' </summary>
''' <param name="options">分析オプション（オプション）</param>
''' <returns>分析結果</returns>
Public Function AnalyzeErrors(Optional ByVal options As AnalysisOptions = aoNone) As ErrorAnalysisResult
End Function

''' <summary>
''' エラーを分類します
''' </summary>
''' <param name="errorInfo">エラー情報</param>
''' <param name="options">分類オプション（オプション）</param>
''' <returns>エラー分類結果</returns>
Public Function CategorizeError(ByRef errorInfo As ErrorInfo, _
                              Optional ByVal options As CategoryOptions = coNone) As ErrorCategory
End Function

''' <summary>
''' エラー処理の統計情報を取得します
''' </summary>
''' <param name="options">統計オプション（オプション）</param>
''' <returns>統計情報</returns>
Public Function GetErrorStatistics(Optional ByVal options As StatisticsOptions = soNone) As ErrorStatistics
End Function

''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
''' <returns>パフォーマンス情報のコレクション</returns>
Public Function GetPerformanceMetrics() As Collection
End Function

''' <summary>
''' エラー処理の状態を検証します
''' </summary>
''' <returns>有効な場合True</returns>
Public Function Validate() As Boolean
End Function

''' <summary>
''' リソースを解放します
''' </summary>
Public Sub Cleanup()
End Sub

================
File: IErrorHandler.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IErrorHandler"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredefinedId = False
Attribute VB_Exposed = False
Option Explicit

'@Description("エラー処理とリカバリを提供するインターフェース")

' 定数定義
Private Const DEFAULT_MAX_RETRY_COUNT As Long = 3    ' デフォルトの最大リトライ回数
Private Const DEFAULT_RETRY_INTERVAL As Long = 1000  ' デフォルトのリトライ間隔（1秒）
Private Const MIN_RETRY_INTERVAL As Long = 100       ' 最小リトライ間隔（100ミリ秒）
Private Const MAX_RETRY_INTERVAL As Long = 30000     ' 最大リトライ間隔（30秒）
Private Const DEFAULT_TIMEOUT_MS As Long = 30000     ' デフォルトタイムアウト（30秒）
Private Const MAX_RECOVERY_ATTEMPTS As Long = 5      ' 最大回復試行回数
Private Const CLEANUP_INTERVAL_MS As Long = 300000   ' クリーンアップ間隔（5分）

' リトライ設定用の列挙型
Public Enum RetryBehavior
    rbLinear = 0        ' 線形バックオフ
    rbExponential = 1   ' 指数バックオフ
    rbFibonacci = 2     ' フィボナッチバックオフ
    rbCustom = 3        ' カスタムバックオフ
End Enum

' エラー処理結果を示す列挙型
Public Enum HandlingResult
    hrSuccess = 0           ' 処理成功
    hrPartialSuccess = 1    ' 一部成功
    hrRetryNeeded = 2       ' リトライが必要
    hrFallbackNeeded = 3    ' フォールバックが必要
    hrFailed = 4           ' 処理失敗
    hrUnhandled = 5        ' 未処理
End Enum

' イベント定義
Public Event ErrorHandlingStarted(ByVal errorInfo As ErrorInfo, ByVal priority As ErrorPriority)
Public Event ErrorHandlingCompleted(ByVal errorInfo As ErrorInfo, ByVal result As HandlingResult)
Public Event RetryAttempted(ByVal errorInfo As ErrorInfo, ByVal attempt As Long, ByVal backoffInterval As Long, ByVal result As HandlingResult)
Public Event ResourceReleased(ByVal resourceType As String, ByVal success As Boolean)

''' <summary>
''' エラーを処理します
''' </summary>
''' <param name="errorInfo">エラー詳細情報</param>
''' <param name="options">処理オプション（オプション）</param>
''' <returns>処理結果を示すHandlingResult列挙値</returns>
''' <remarks>
''' エラー処理要件：
''' - エラー情報の検証
''' - 優先度の判定
''' - リカバリ処理
''' - リソース解放
''' - ログ記録
''' - メトリクス収集
''' </remarks>
Public Function HandleError(ByRef errorInfo As ErrorInfo, _
                         Optional ByVal options As HandlingOptions) As HandlingResult
End Function

''' <summary>
''' リトライ処理を実行します
''' </summary>
''' <param name="operation">実行する操作</param>
''' <param name="options">リトライオプション（オプション）</param>
''' <returns>実行結果</returns>
''' <remarks>
''' - リトライ回数と間隔は構成済みの設定を使用
''' - 指数バックオフを適用
''' - リトライ結果は統計情報に自動的に記録
''' </remarks>
Public Function RetryOperation(ByVal operation As IRetryableOperation, _
                            Optional ByVal options As RetryOptions) As OperationResult
End Function

''' <summary>
''' エラーの優先度を設定します
''' </summary>
''' <param name="errorCode">エラーコード</param>
''' <param name="priority">優先度</param>
Public Sub SetErrorPriority(ByVal errorCode As ErrorCode, ByVal priority As ErrorPriority)
End Sub

''' <summary>
''' エラー処理戦略を設定します
''' </summary>
''' <param name="errorCode">エラーコード</param>
''' <param name="strategy">処理戦略</param>
Public Sub SetHandlingStrategy(ByVal errorCode As ErrorCode, ByVal strategy As IErrorStrategy)
End Sub

''' <summary>
''' リソースを解放します
''' </summary>
''' <param name="resource">解放するリソース</param>
''' <param name="options">解放オプション（オプション）</param>
''' <returns>解放成功時True</returns>
Public Function ReleaseResource(ByVal resource As Object, _
                             Optional ByVal options As ReleaseOptions) As Boolean
End Function

''' <summary>
''' リトライ設定を構成します
''' </summary>
''' <param name="maxRetryCount">最大リトライ回数</param>
''' <param name="retryInterval">リトライ間隔（ミリ秒）</param>
''' <param name="behavior">リトライの挙動</param>
''' <param name="options">リトライオプション（オプション）</param>
Public Sub ConfigureRetry(ByVal maxRetryCount As Long, ByVal retryInterval As Long, _
                       Optional ByVal behavior As RetryBehavior = rbExponential, _
                       Optional ByVal options As RetryOptions)
End Sub

''' <summary>
''' 現在のリトライ設定を取得します
''' </summary>
''' <returns>リトライ設定のディクショナリ</returns>
Public Function GetRetryConfiguration() As Dictionary
End Function

''' <summary>
''' カスタムバックオフ戦略を設定します
''' </summary>
''' <param name="strategy">バックオフ戦略を計算する関数</param>
Public Sub SetCustomBackoffStrategy(ByVal strategy As IBackoffStrategy)
End Sub

''' <summary>
''' エラー処理の統計を取得します
''' </summary>
''' <param name="errorManager">統計情報を提供するErrorManager</param>
''' <returns>統計情報</returns>
''' <remarks>
''' - 統計情報はclsErrorManagerのErrorStatisticsオブジェクトから取得
''' - ハンドラー固有の統計のみを返す
''' - グローバルな統計はErrorManagerから直接取得すること
''' </remarks>
Public Function GetHandlingStatistics(ByVal errorManager As clsErrorManager) As HandlingStatistics
End Function

''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
''' <param name="errorManager">メトリクスを提供するErrorManager</param>
''' <returns>パフォーマンス情報のコレクション</returns>
''' <remarks>
''' - メトリクスはclsErrorManagerのErrorStatisticsオブジェクトから取得
''' - ハンドラー固有のメトリクスのみを返す
''' - システム全体のメトリクスはErrorManagerから直接取得すること
''' </remarks>
Public Function GetPerformanceMetrics(ByVal errorManager As clsErrorManager) As Collection
End Function

''' <summary>
''' エラーハンドラーの状態を検証します
''' </summary>
''' <returns>有効な場合True</returns>
Public Function Validate() As Boolean
End Function

''' <summary>
''' リソースを解放します
''' </summary>
Public Sub Cleanup()
End Sub

================
File: IErrorStrategy.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "IErrorStrategy"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredefinedId = False
Attribute VB_Exposed = True
Option Explicit

'@Description("エラーからの回復戦略を定義し、段階的な回復処理とフォールバックメカニズムを提供するインターフェース")

' 定数定義
Private Const DEFAULT_RETRY_COUNT As Long = 3           ' デフォルトのリトライ回数
Private Const DEFAULT_RETRY_INTERVAL_MS As Long = 1000  ' デフォルトのリトライ間隔（1秒）
Private Const MAX_RETRY_COUNT As Long = 10              ' 最大リトライ回数
Private Const MAX_RECOVERY_CHAIN As Long = 5            ' 最大回復チェーン数
Private Const RECOVERY_TIMEOUT_MS As Long = 30000       ' 回復処理のタイムアウト時間（30秒）
Private Const MIN_BACKOFF_MS As Long = 100              ' 最小バックオフ時間（100ミリ秒）
Private Const MAX_BACKOFF_MS As Long = 30000           ' 最大バックオフ時間（30秒）

' フォールバック理由を定義する列挙型
Public Enum FallbackReason
    frRetryLimitExceeded = 1    ' リトライ回数超過
    frTimeoutOccurred = 2       ' タイムアウト発生
    frResourceUnavailable = 3   ' リソース利用不可
    frStrategyFailed = 4        ' 戦略実行失敗
    frSystemOverload = 5        ' システム過負荷
    frDataInconsistency = 6     ' データ不整合
    frUnexpectedError = 7       ' 予期せぬエラー
End Enum

' イベント定義
Public Event RecoveryChainStarted(ByVal chainId As String, ByVal strategies As Collection)
Public Event RecoveryChainCompleted(ByVal chainId As String, ByVal successCount As Long, ByVal failureCount As Long)
Public Event FallbackStrategyActivated(ByVal errorInfo As ErrorInfo, ByVal fallbackStrategy As IErrorStrategy, ByVal reason As FallbackReason)
Public Event StrategyExecutionStarted(ByVal strategyId As String, ByVal priority As Long)
Public Event StrategyExecutionCompleted(ByVal strategyId As String, ByVal success As Boolean)

''' <summary>
''' エラーからの回復を試みます
''' </summary>
''' <param name="errorInfo">エラー情報</param>
''' <param name="errorManager">エラーマネージャー</param>
''' <param name="context">回復コンテキスト（オプション）</param>
''' <param name="options">回復オプション（オプション）</param>
''' <returns>回復成功時True、失敗時False</returns>
''' <remarks>
''' エラー処理要件：
''' - エラーマネージャーと連携した回復処理
''' - タイムアウト処理
''' - リソースの適切な解放
''' - 回復不可能な状態の検出
''' - イベントの適切な発行
''' - メトリクスの収集
''' - パターンの分析
'''
''' 実装時の注意点：
''' 1. エラーマネージャーのコンテキストを利用すること
''' 2. 回復処理自体のエラーを適切に処理すること
''' 3. リソースリークを防ぐこと
''' 4. デッドロックを防ぐこと
''' 5. 回復の進捗を通知すること
''' 6. パフォーマンスを監視すること
''' </remarks>
Public Function RecoverFromError(ByRef errorInfo As ErrorInfo, ByVal errorManager As clsErrorManager, Optional ByVal context As RecoveryContext, Optional ByVal options As RecoveryOptions) As Boolean
End Function

''' <summary>
''' 回復チェーンを作成します
''' </summary>
''' <param name="strategies">チェーンに含める戦略のコレクション</param>
''' <param name="errorManager">エラーマネージャー</param>
''' <returns>回復戦略のコレクション</returns>
''' <remarks>
''' - 戦略は優先度順にソートされる
''' - 各戦略はエラーマネージャーのコンテキストを共有
''' - チェーンの実行状態はErrorManagerで管理
''' - 戦略間の依存関係を考慮
''' </remarks>
Public Function CreateRecoveryChain(ByVal strategies As Collection, ByVal errorManager As clsErrorManager) As RecoveryChain
End Function

''' <summary>
''' 最大リトライ回数を設定します
''' </summary>
''' <param name="value">リトライ回数</param>
''' <param name="options">リトライオプション（オプション）</param>
''' <remarks>
''' - 0以上の値を設定すること
''' - デフォルト値は3
''' - 実行中の回復処理への影響を考慮
''' - バックオフ戦略の適用
''' </remarks>
Public Property Let MaxRetryCount(ByVal value As Long, Optional ByVal options As RetryOptions)
End Property

''' <summary>
''' 最大リトライ回数を取得します
''' </summary>
Public Property Get MaxRetryCount() As Long
End Property

''' <summary>
''' 回復戦略の優先度を取得します
''' </summary>
''' <remarks>
''' - 値が大きいほど優先度が高い
''' - 複数の回復戦略がある場合、優先度の高い順に実行される
''' - 同じ優先度の場合、登録順で実行
''' - チェーン内での順序も考慮
''' </remarks>
Public Property Get Priority() As Long
End Property

''' <summary>
''' 回復戦略の優先度を設定します
''' </summary>
''' <param name="value">優先度</param>
''' <param name="options">優先度オプション（オプション）</param>
Public Property Let Priority(ByVal value As Long, Optional ByVal options As PriorityOptions)
End Property

''' <summary>
''' リトライ間隔（ミリ秒）を設定します
''' </summary>
''' <param name="value">間隔（ミリ秒）</param>
''' <param name="options">間隔オプション（オプション）</param>
''' <remarks>
''' - 0以上の値を設定すること
''' - デフォルト値は1000（1秒）
''' - 指数バックオフを考慮
''' - システム負荷を考慮
''' </remarks>
Public Property Let RetryInterval(ByVal value As Long, Optional ByVal options As IntervalOptions)
End Property

''' <summary>
''' リトライ間隔（ミリ秒）を取得します
''' </summary>
Public Property Get RetryInterval() As Long
End Property

''' <summary>
''' 回復戦略の説明を取得します
''' </summary>
''' <param name="locale">ロケール（オプション）</param>
''' <returns>戦略の説明</returns>
''' <remarks>
''' - ログ出力やデバッグ用
''' - 具体的な回復方法を説明する文字列を返すこと
''' - 多言語対応を考慮
''' - メトリクス情報を含める
''' </remarks>
Public Function GetDescription(Optional ByVal locale As String) As String
End Function

''' <summary>
''' フォールバック戦略を設定します
''' </summary>
''' <param name="strategy">フォールバック戦略</param>
''' <param name="options">フォールバックオプション（オプション）</param>
''' <remarks>
''' エラー処理要件：
''' - 循環参照の検出
''' - 戦略の有効性確認
''' - リソースの確保
''' - チェーンの整合性確認
''' </remarks>
Public Sub SetFallbackStrategy(ByVal strategy As IErrorStrategy, Optional ByVal options As FallbackOptions)
End Sub

''' <summary>
''' フォールバック戦略を取得します
''' </summary>
Public Property Get FallbackStrategy() As IErrorStrategy
End Property

''' <summary>
''' 回復処理の進捗状況を取得します
''' </summary>
''' <param name="includeMetrics">メトリクスを含めるかどうか</param>
Public Function GetProgress(Optional ByVal includeMetrics As Boolean = False) As RecoveryProgress
End Function

''' <summary>
''' エラー種別ごとの回復ハンドラーを設定します
''' </summary>
''' <param name="errorCode">エラーコード</param>
''' <param name="handler">エラーハンドラー</param>
''' <param name="options">ハンドラーオプション（オプション）</param>
''' <remarks>
''' - ハンドラーと戦略を紐付け
''' - 既存のハンドラーは上書きされる
''' - 優先度は自動的に計算
''' - エラーマネージャーのコンテキストを利用
''' </remarks>
Public Sub SetRecoveryHandler(ByVal errorCode As ErrorCode, _
                           ByVal handler As IErrorHandler, _
                           Optional ByVal options As StrategyOptions)
End Sub

''' <summary>
''' 回復履歴を取得します
''' </summary>
''' <param name="filter">フィルタ条件（オプション）</param>
''' <returns>回復試行の履歴コレクション</returns>
Public Function GetRecoveryHistory(Optional ByVal filter As RecoveryHistoryFilter) As Collection
End Function

''' <summary>
''' 回復戦略の状態を検証します
''' </summary>
''' <param name="validationLevel">検証レベル（オプション）</param>
''' <returns>有効な場合True</returns>
Public Function Validate(Optional ByVal validationLevel As ValidationLevel = vlNormal) As Boolean
End Function

''' <summary>
''' リソースを解放します
''' </summary>
''' <param name="options">クリーンアップオプション（オプション）</param>
Public Sub Cleanup(Optional ByVal options As CleanupOptions)
End Sub

''' <summary>
''' 回復処理をキャンセルします
''' </summary>
''' <param name="options">キャンセルオプション（オプション）</param>
Public Sub CancelRecovery(Optional ByVal options As CancellationOptions)
End Sub

''' <summary>
''' キャンセル状態を取得します
''' </summary>
Public Property Get IsCancellationRequested() As Boolean
End Property

''' <summary>
''' 非同期回復をサポートしているかどうかを取得します
''' </summary>
Public Property Get SupportsAsyncRecovery() As Boolean
End Property

''' <summary>
''' トランザクションをサポートしているかどうかを取得します
''' </summary>
Public Property Get SupportsTransactions() As Boolean
End Property

''' <summary>
''' パフォーマンス指標を取得します
''' </summary>
''' <returns>パフォーマンス情報のコレクション</returns>
Public Function GetPerformanceMetrics() As Collection
End Function

''' <summary>
''' エラーパターンを分析します
''' </summary>
''' <param name="timeWindow">分析期間（ミリ秒）</param>
''' <returns>パターン分析結果のコレクション</returns>
Public Function AnalyzeErrorPatterns(ByVal timeWindow As Long) As Collection
End Function

''' <summary>
''' バックオフ戦略を設定します
''' </summary>
''' <param name="strategy">バックオフ戦略</param>
Public Property Let BackoffStrategy(ByVal strategy As IBackoffStrategy)
End Property

================
File: RecoveryChain.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "RecoveryChain"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredefinedId = False
Attribute VB_Exposed = True
Option Explicit

' プライベート変数
Private mChainId As String
Private mStrategies As Collection
Private mStrategyInfo As Object ' Dictionary
Private mSuccessCount As Long
Private mFailureCount As Long
Private mMetadata As Dictionary
Private mIsInitialized As Boolean

' イベント
Public Event StrategyExecuted(ByVal strategyId As String, ByVal success As Boolean)
Public Event ChainCompleted(ByVal chainId As String, ByVal successCount As Long, ByVal failureCount As Long)

Private Sub Class_Initialize()
    Set mStrategies = New Collection
    Set mStrategyInfo = CreateObject("Scripting.Dictionary")
    Set mMetadata = New Dictionary
    mSuccessCount = 0
    mFailureCount = 0
    mIsInitialized = False
End Sub

Public Sub Initialize(ByVal metadata As Dictionary)
    Set mMetadata = metadata
    mChainId = "CHAIN_" & Format(Now, "yyyymmddhhnnss") & "_" & CStr(Int(Rnd * 1000))
    mIsInitialized = True
End Sub

Public Property Get ChainId() As String
    ChainId = mChainId
End Property

Public Property Get Strategies() As Collection
    Set Strategies = mStrategies
End Property

Public Property Get StrategyCount() As Long
    StrategyCount = mStrategies.Count
End Property

Public Property Get SuccessCount() As Long
    SuccessCount = mSuccessCount
End Property

Public Property Get FailureCount() As Long
    FailureCount = mFailureCount
End Property

Public Sub AddStrategy(ByVal strategy As IErrorStrategy, ByVal info As Dictionary)
    If Not mIsInitialized Then
        Err.Raise vbObjectError + 1, "RecoveryChain.AddStrategy", "Chain not initialized"
    End If
    
    mStrategies.Add strategy
    mStrategyInfo.Add strategy.GetDescription(), info
End Sub

Public Function GetStrategyInfo(ByVal strategy As IErrorStrategy) As Dictionary
    If mStrategyInfo.Exists(strategy.GetDescription()) Then
        Set GetStrategyInfo = mStrategyInfo(strategy.GetDescription())
    Else
        Set GetStrategyInfo = Nothing
    End If
End Function

Public Sub SortByPriority()
    Dim i As Long, j As Long
    Dim tempStrategy As IErrorStrategy
    Dim tempInfo As Dictionary
    
    For i = 1 To mStrategies.Count - 1
        For j = i + 1 To mStrategies.Count
            If mStrategies(i).Priority < mStrategies(j).Priority Then
                ' 戦略の入れ替え
                Set tempStrategy = mStrategies(i)
                Set mStrategies(i) = mStrategies(j)
                Set mStrategies(j) = tempStrategy
                
                ' 情報の入れ替え
                Set tempInfo = mStrategyInfo(tempStrategy.GetDescription())
                mStrategyInfo.Remove tempStrategy.GetDescription()
                mStrategyInfo.Add tempStrategy.GetDescription(), tempInfo
            End If
        Next j
    Next i
End Sub

Public Function Validate() As Boolean
    If Not mIsInitialized Then
        Err.Raise vbObjectError + 1, "RecoveryChain.Validate", "Chain not initialized"
    End If
    
    If mStrategies.Count = 0 Then
        Err.Raise vbObjectError + 2, "RecoveryChain.Validate", "No strategies defined"
    End If
    
    ' 各戦略の検証
    Dim strategy As IErrorStrategy
    For Each strategy In mStrategies
        If Not strategy.Validate Then
            Err.Raise vbObjectError + 3, "RecoveryChain.Validate", _
                     "Strategy validation failed: " & strategy.GetDescription()
        End If
    Next strategy
    
    Validate = True
End Function

Public Sub IncrementSuccess()
    mSuccessCount = mSuccessCount + 1
    RaiseEvent StrategyExecuted(mChainId, True)
    
    If mSuccessCount + mFailureCount = mStrategies.Count Then
        RaiseEvent ChainCompleted(mChainId, mSuccessCount, mFailureCount)
    End If
End Sub

Public Sub IncrementFailure()
    mFailureCount = mFailureCount + 1
    RaiseEvent StrategyExecuted(mChainId, False)
    
    If mSuccessCount + mFailureCount = mStrategies.Count Then
        RaiseEvent ChainCompleted(mChainId, mSuccessCount, mFailureCount)
    End If
End Sub

Public Function CalculateProgress() As Long
    If mStrategies.Count = 0 Then
        CalculateProgress = 0
        Exit Function
    End If
    
    CalculateProgress = ((mSuccessCount + mFailureCount) / mStrategies.Count) * 100
End Function

Public Sub RecordExecution(ByVal context As Dictionary)
    ' 実行結果の記録
    mMetadata.Add "ExecutionContext", context
    mMetadata.Add "CompletedAt", Now
    mMetadata.Add "TotalStrategies", mStrategies.Count
    mMetadata.Add "SuccessCount", mSuccessCount
    mMetadata.Add "FailureCount", mFailureCount
End Sub

Public Sub RecordError(ByVal errorDescription As String)
    mMetadata.Add "LastError", errorDescription
    mMetadata.Add "ErrorTimestamp", Now
End Sub

================
File: RecoveryProgress.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "RecoveryProgress"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredefinedId = False
Attribute VB_Exposed = True
Option Explicit

'@Description("回復処理の進捗状況を管理するクラス")

' プライベート変数
Private mTotalSteps As Long
Private mCompletedSteps As Long
Private mCurrentStep As Long
Private mStartTime As Date
Private mEstimatedEndTime As Date
Private mCurrentPhase As String
Private mPhaseProgress As Dictionary
Private mMetrics As Dictionary
Private mStatus As RecoveryStatus

' 進捗状況を定義する列挙型
Public Enum RecoveryStatus
    rsNotStarted = 0    ' 未開始
    rsInProgress = 1    ' 実行中
    rsPaused = 2        ' 一時停止
    rsCompleted = 3     ' 完了
    rsFailed = 4        ' 失敗
    rsCancelled = 5     ' キャンセル
End Enum

Private Sub Class_Initialize()
    mStartTime = Now
    Set mPhaseProgress = New Dictionary
    Set mMetrics = New Dictionary
    mStatus = rsNotStarted
End Sub

'@Description("総ステップ数を設定")
Public Property Let TotalSteps(ByVal value As Long)
    mTotalSteps = value
End Property

'@Description("総ステップ数を取得")
Public Property Get TotalSteps() As Long
    TotalSteps = mTotalSteps
End Property

'@Description("完了ステップ数を設定")
Public Property Let CompletedSteps(ByVal value As Long)
    mCompletedSteps = value
End Property

'@Description("完了ステップ数を取得")
Public Property Get CompletedSteps() As Long
    CompletedSteps = mCompletedSteps
End Property

'@Description("現在のステップを設定")
Public Property Let CurrentStep(ByVal value As Long)
    mCurrentStep = value
End Property

'@Description("現在のステップを取得")
Public Property Get CurrentStep() As Long
    CurrentStep = mCurrentStep
End Property

'@Description("開始時刻を取得")
Public Property Get StartTime() As Date
    StartTime = mStartTime
End Property

'@Description("推定終了時刻を設定")
Public Property Let EstimatedEndTime(ByVal value As Date)
    mEstimatedEndTime = value
End Property

'@Description("推定終了時刻を取得")
Public Property Get EstimatedEndTime() As Date
    EstimatedEndTime = mEstimatedEndTime
End Property

'@Description("現在のフェーズを設定")
Public Property Let CurrentPhase(ByVal value As String)
    mCurrentPhase = value
End Property

'@Description("現在のフェーズを取得")
Public Property Get CurrentPhase() As String
    CurrentPhase = mCurrentPhase
End Property

'@Description("進捗状況を設定")
Public Property Let Status(ByVal value As RecoveryStatus)
    mStatus = value
End Property

'@Description("進捗状況を取得")
Public Property Get Status() As RecoveryStatus
    Status = mStatus
End Property

'@Description("進捗率を計算（パーセント）")
Public Function GetProgressPercentage() As Double
    If mTotalSteps = 0 Then
        GetProgressPercentage = 0
        Exit Function
    End If
    
    GetProgressPercentage = (mCompletedSteps / mTotalSteps) * 100
End Function

'@Description("経過時間を取得（秒）")
Public Function GetElapsedTime() As Long
    GetElapsedTime = DateDiff("s", mStartTime, Now)
End Function

'@Description("推定残り時間を取得（秒）")
Public Function GetEstimatedRemainingTime() As Long
    If mCompletedSteps = 0 Then
        GetEstimatedRemainingTime = 0
        Exit Function
    End If
    
    Dim elapsedTime As Long
    elapsedTime = GetElapsedTime()
    
    Dim timePerStep As Double
    timePerStep = elapsedTime / mCompletedSteps
    
    GetEstimatedRemainingTime = CLng(timePerStep * (mTotalSteps - mCompletedSteps))
End Function

'@Description("フェーズごとの進捗を記録")
Public Sub UpdatePhaseProgress(ByVal phase As String, ByVal progress As Double)
    If mPhaseProgress.Exists(phase) Then
        mPhaseProgress(phase) = progress
    Else
        mPhaseProgress.Add phase, progress
    End If
End Sub

'@Description("フェーズごとの進捗を取得")
Public Function GetPhaseProgress(ByVal phase As String) As Double
    If mPhaseProgress.Exists(phase) Then
        GetPhaseProgress = mPhaseProgress(phase)
    Else
        GetPhaseProgress = 0
    End If
End Function

'@Description("メトリクスを追加")
Public Sub AddMetric(ByVal name As String, ByVal value As Variant)
    If mMetrics.Exists(name) Then
        mMetrics(name) = value
    Else
        mMetrics.Add name, value
    End If
End Sub

'@Description("メトリクスを取得")
Public Function GetMetric(ByVal name As String) As Variant
    If mMetrics.Exists(name) Then
        GetMetric = mMetrics(name)
    Else
        GetMetric = Empty
    End If
End Function

'@Description("進捗情報を文字列形式で取得")
Public Function ToString() As String
    Dim result As String
    
    result = "Recovery Progress:" & vbCrLf & _
             "----------------" & vbCrLf & _
             "Status: " & GetStatusDescription(mStatus) & vbCrLf & _
             "Progress: " & Format(GetProgressPercentage(), "0.00") & "%" & vbCrLf & _
             "Steps: " & mCompletedSteps & "/" & mTotalSteps & vbCrLf & _
             "Current Phase: " & mCurrentPhase & vbCrLf & _
             "Elapsed Time: " & GetElapsedTime() & " seconds" & vbCrLf & _
             "Estimated Remaining: " & GetEstimatedRemainingTime() & " seconds"
    
    ToString = result
End Function

'@Description("進捗状況の説明を取得")
Private Function GetStatusDescription(ByVal status As RecoveryStatus) As String
    Select Case status
        Case rsNotStarted: GetStatusDescription = "未開始"
        Case rsInProgress: GetStatusDescription = "実行中"
        Case rsPaused: GetStatusDescription = "一時停止"
        Case rsCompleted: GetStatusDescription = "完了"
        Case rsFailed: GetStatusDescription = "失敗"
        Case rsCancelled: GetStatusDescription = "キャンセル"
        Case Else: GetStatusDescription = "不明"
    End Select
End Function

================
File: SynchronizedErrorManager.cls
================
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "SynchronizedErrorManager"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredefinedId = False
Attribute VB_Exposed = True
Option Explicit

Implements IError

' 定数定義
Private Const MAX_RECOVERY_CHAIN_LENGTH As Long = 5
Private Const MAX_RETRY_ATTEMPTS As Long = 3
Private Const RETRY_INTERVAL_MS As Long = 1000
Private Const LOG_BUFFER_SIZE As Long = 1000
Private Const ERROR_LOG_PATH As String = "error.log"

' プライベート変数
Private mErrorManager As clsErrorManager
Private mCriticalSection As clsCriticalSectionLock
Private mMessageResource As ErrorMessageResource
Private mLogger As Object ' FileSystemObject for logging

Private Sub Class_Initialize()
    Set mErrorManager = New clsErrorManager
    Set mCriticalSection = New clsCriticalSectionLock
    Set mMessageResource = New ErrorMessageResource
    Set mLogger = CreateObject("Scripting.FileSystemObject")
    InitializeErrorLog
End Sub

Private Sub InitializeErrorLog()
    On Error Resume Next
    If Not mLogger.FileExists(ERROR_LOG_PATH) Then
        Dim logFile As Object
        Set logFile = mLogger.CreateTextFile(ERROR_LOG_PATH, True)
        logFile.WriteLine "Timestamp,ErrorCode,Message,Source,Details"
        logFile.Close
    End If
End Sub

Private Sub Class_Terminate()
    Set mErrorManager = Nothing
    Set mCriticalSection = Nothing
    Set mMessageResource = Nothing
    Set mLogger = Nothing
    
    ' 最終のログエントリを記録
    On Error Resume Next
    LogError "Class_Terminate", "SynchronizedErrorManager terminated", "Cleanup"
End Sub

Private Function IError_HandleError(ByRef errorInfo As ErrorInfo, Optional ByVal options As ErrorHandlingOptions = ehoNone) As Boolean
    mCriticalSection.Enter
    
    On Error GoTo ErrorHandler
    
    ' エラー情報の検証
    If errorInfo Is Nothing Then
        LogError "HandleError", "ErrorInfo is Nothing", "Validation"
        mCriticalSection.Leave
        Exit Function
    End If
    
    ' エラーメッセージの国際化対応
    errorInfo.Message = mMessageResource.GetMessage(errorInfo.ErrorCode)
    
    ' エラー情報のログ記録
    LogError "HandleError", errorInfo.Message, "Processing", _
            "Code=" & errorInfo.ErrorCode & _
            ";Source=" & errorInfo.SourceModule & _
            ";Severity=" & errorInfo.Severity
    
    ' エラー処理の実行
    IError_HandleError = mErrorManager.HandleError(errorInfo, options)
    
    ' 処理結果のログ記録
    If IError_HandleError Then
        LogError "HandleError", "Error handled successfully", "Success", _
                "Code=" & errorInfo.ErrorCode
    Else
        LogError "HandleError", "Error handling failed", "Failure", _
                "Code=" & errorInfo.ErrorCode
    End If
    
CleanUp:
    mCriticalSection.Leave
    Exit Function
    
ErrorHandler:
    Dim errNumber As Long
    Dim errDesc As String
    errNumber = Err.Number
    errDesc = Err.Description
    
    ' エラーのログ記録
    LogError "HandleError", errDesc, "Error", "ErrNumber=" & errNumber
    
    ' エラーの上位伝播
    Err.Raise errNumber, "SynchronizedErrorManager.HandleError", _
              "Error handling failed: " & errDesc
    Resume CleanUp
End Function

Private Sub LogError(ByVal source As String, ByVal message As String, _
                    ByVal category As String, Optional ByVal details As String = "")
    On Error Resume Next
    
    Dim logEntry As String
    logEntry = Now & "," & _
              source & "," & _
              Replace(message, ",", ";") & "," & _
              category & "," & _
              Replace(details, ",", ";")
    
    Dim logFile As Object
    Set logFile = mLogger.OpenTextFile(ERROR_LOG_PATH, 8, True) ' 8 = ForAppending
    logFile.WriteLine logEntry
    logFile.Close
End Sub

Private Sub IError_RegisterHandler(ByVal errorCode As ErrorCode, ByVal handler As IErrorHandler, Optional ByVal options As HandlerOptions = hoNone)
    mCriticalSection.Enter
    
    On Error GoTo ErrorHandler
    mErrorManager.RegisterHandler errorCode, handler, options
    
CleanUp:
    mCriticalSection.Leave
    Exit Sub
    
ErrorHandler:
    Debug.Print "Error in SynchronizedErrorManager.RegisterHandler: " & Err.Description
    Resume CleanUp
End Sub

Private Sub IError_UnregisterHandler(ByVal errorCode As ErrorCode, Optional ByVal options As UnregisterOptions = uoNone)
    mCriticalSection.Enter
    
    On Error GoTo ErrorHandler
    mErrorManager.UnregisterHandler errorCode, options
    
CleanUp:
    mCriticalSection.Leave
    Exit Sub
    
ErrorHandler:
    Debug.Print "Error in SynchronizedErrorManager.UnregisterHandler: " & Err.Description
    Resume CleanUp
End Sub

Private Sub IError_IncrementErrorCount(ByVal errorCode As ErrorCode, Optional ByVal options As CountOptions = coNone)
    mCriticalSection.Enter
    
    On Error GoTo ErrorHandler
    mErrorManager.IncrementErrorCount errorCode, options
    
CleanUp:
    mCriticalSection.Leave
    Exit Sub
    
ErrorHandler:
    Debug.Print "Error in SynchronizedErrorManager.IncrementErrorCount: " & Err.Description
    Resume CleanUp
End Sub

Private Function IError_CheckErrorThreshold(ByVal errorCode As ErrorCode, ByVal threshold As Long, Optional ByVal options As ThresholdOptions = toNone) As Boolean
    mCriticalSection.Enter
    
    On Error GoTo ErrorHandler
    IError_CheckErrorThreshold = mErrorManager.CheckErrorThreshold(errorCode, threshold, options)
    
CleanUp:
    mCriticalSection.Leave
    Exit Function
    
ErrorHandler:
    Debug.Print "Error in SynchronizedErrorManager.CheckErrorThreshold: " & Err.Description
    Resume CleanUp
End Function

Private Function IError_GetErrorHistory(Optional ByVal options As HistoryOptions = hoNone) As Collection
    mCriticalSection.Enter
    
    On Error GoTo ErrorHandler
    Set IError_GetErrorHistory = mErrorManager.GetErrorHistory(options)
    
CleanUp:
    mCriticalSection.Leave
    Exit Function
    
ErrorHandler:
    Debug.Print "Error in SynchronizedErrorManager.GetErrorHistory: " & Err.Description
    Set IError_GetErrorHistory = New Collection
    Resume CleanUp
End Function

Private Function IError_AnalyzeErrors(Optional ByVal options As AnalysisOptions = aoNone) As ErrorAnalysisResult
    mCriticalSection.Enter
    
    On Error GoTo ErrorHandler
    Set IError_AnalyzeErrors = mErrorManager.AnalyzeErrors(options)
    
CleanUp:
    mCriticalSection.Leave
    Exit Function
    
ErrorHandler:
    Debug.Print "Error in SynchronizedErrorManager.AnalyzeErrors: " & Err.Description
    Set IError_AnalyzeErrors = New ErrorAnalysisResult
    Resume CleanUp
End Function

Private Function IError_CategorizeError(ByRef errorInfo As ErrorInfo, Optional ByVal options As CategoryOptions = coNone) As ErrorCategory
    mCriticalSection.Enter
    
    On Error GoTo ErrorHandler
    IError_CategorizeError = mErrorManager.CategorizeError(errorInfo, options)
    
CleanUp:
    mCriticalSection.Leave
    Exit Function
    
ErrorHandler:
    Debug.Print "Error in SynchronizedErrorManager.CategorizeError: " & Err.Description
    IError_CategorizeError = ecUnknownCategory
    Resume CleanUp
End Function

Private Function IError_GetErrorStatistics(Optional ByVal options As StatisticsOptions = soNone) As ErrorStatistics
    mCriticalSection.Enter
    
    On Error GoTo ErrorHandler
    Set IError_GetErrorStatistics = mErrorManager.GetErrorStatistics(options)
    
CleanUp:
    mCriticalSection.Leave
    Exit Function
    
ErrorHandler:
    Debug.Print "Error in SynchronizedErrorManager.GetErrorStatistics: " & Err.Description
    Set IError_GetErrorStatistics = New ErrorStatistics
    Resume CleanUp
End Function

Private Function IError_GetPerformanceMetrics() As Collection
    mCriticalSection.Enter
    
    On Error GoTo ErrorHandler
    Set IError_GetPerformanceMetrics = mErrorManager.GetPerformanceMetrics()
    
CleanUp:
    mCriticalSection.Leave
    Exit Function
    
ErrorHandler:
    Debug.Print "Error in SynchronizedErrorManager.GetPerformanceMetrics: " & Err.Description
    Set IError_GetPerformanceMetrics = New Collection
    Resume CleanUp
End Function

Private Function IError_Validate() As Boolean
    mCriticalSection.Enter
    
    On Error GoTo ErrorHandler
    IError_Validate = mErrorManager.Validate()
    
CleanUp:
    mCriticalSection.Leave
    Exit Function
    
ErrorHandler:
    Debug.Print "Error in SynchronizedErrorManager.Validate: " & Err.Description
    IError_Validate = False
    Resume CleanUp
End Function

Private Sub IError_Cleanup()
    mCriticalSection.Enter
    
    On Error GoTo ErrorHandler
    mErrorManager.Cleanup
    
CleanUp:
    mCriticalSection.Leave
    Exit Sub
    
ErrorHandler:
    Debug.Print "Error in SynchronizedErrorManager.Cleanup: " & Err.Description
    Resume CleanUp
End Sub

'@Description("現在のロケールを設定します")
Public Property Let CurrentLocale(ByVal locale As String)
    mMessageResource.CurrentLocale = locale
End Property

'@Description("現在のロケールを取得します")
Public Property Get CurrentLocale() As String
    CurrentLocale = mMessageResource.CurrentLocale
End Property
